// Generated from D:/IdeaProject/SqlScanner/src/main/java/oneplay/SqlScanner/antlr/GBase\GBaseParser.g4 by ANTLR 4.8
package oneplay.SqlScanner.antlr.GBase;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GBaseParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_GBASE_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, DELIMITER=5, 
		ADD=6, ALL=7, ALTER=8, ALWAYS=9, ANALYZE=10, AND=11, AS=12, ASC=13, BEFORE=14, 
		BETWEEN=15, BOTH=16, BY=17, CALL=18, CASCADE=19, CASE=20, CAST=21, CHANGE=22, 
		CHARACTER=23, CHECK=24, COLLATE=25, COLUMN=26, CONDITION=27, CONSTRAINT=28, 
		CONTINUE=29, CONVERT=30, CREATE=31, CROSS=32, CURRENT=33, CURRENT_USER=34, 
		CURSOR=35, DATABASE=36, DATABASES=37, DECLARE=38, DEFAULT=39, DELAYED=40, 
		DELETE=41, DESC=42, DESCRIBE=43, DETERMINISTIC=44, DIAGNOSTICS=45, DISTINCT=46, 
		DISTINCTROW=47, DROP=48, EACH=49, ELSE=50, ELSEIF=51, ENCLOSED=52, ESCAPED=53, 
		EXISTS=54, EXIT=55, EXPLAIN=56, FALSE=57, FETCH=58, FOR=59, FORCE=60, 
		FOREIGN=61, FROM=62, FULLTEXT=63, GENERATED=64, GET=65, GRANT=66, GROUP=67, 
		HAVING=68, HIGH_PRIORITY=69, IF=70, IGNORE=71, IN=72, INDEX=73, INFILE=74, 
		INNER=75, INOUT=76, INSERT=77, INTERVAL=78, INTO=79, IS=80, ITERATE=81, 
		JOIN=82, KEY=83, KEYS=84, KILL=85, LEADING=86, LEAVE=87, LEFT=88, LIKE=89, 
		LIMIT=90, LINEAR=91, LINES=92, LOAD=93, LOCK=94, LOOP=95, LOW_PRIORITY=96, 
		MASTER_BIND=97, MASTER_SSL_VERIFY_SERVER_CERT=98, MATCH=99, MAXVALUE=100, 
		MODIFIES=101, NATURAL=102, NOT=103, NO_WRITE_TO_BINLOG=104, NULL_LITERAL=105, 
		NUMBER=106, ON=107, OPTIMIZE=108, OPTION=109, OPTIONALLY=110, OR=111, 
		ORDER=112, OUT=113, OUTER=114, OUTFILE=115, PARTITION=116, PRIMARY=117, 
		PROCEDURE=118, PURGE=119, RANGE=120, READ=121, READS=122, REFERENCES=123, 
		REGEXP=124, RELEASE=125, RENAME=126, REPEAT=127, REPLACE=128, REQUIRE=129, 
		RESIGNAL=130, RESTRICT=131, RETURN=132, REVOKE=133, RIGHT=134, RLIKE=135, 
		SCHEMA=136, SCHEMAS=137, SELECT=138, SET=139, SEPARATOR=140, SHOW=141, 
		SIGNAL=142, SPATIAL=143, SQL=144, SQLEXCEPTION=145, SQLSTATE=146, SQLWARNING=147, 
		SQL_BIG_RESULT=148, SQL_CALC_FOUND_ROWS=149, SQL_SMALL_RESULT=150, SSL=151, 
		STACKED=152, STARTING=153, STRAIGHT_JOIN=154, TABLE=155, TERMINATED=156, 
		THEN=157, TO=158, TRAILING=159, TRIGGER=160, TRUE=161, UNDO=162, UNION=163, 
		UNIQUE=164, UNLOCK=165, UNSIGNED=166, UPDATE=167, USAGE=168, USE=169, 
		USING=170, VALUES=171, WHEN=172, WHERE=173, WHILE=174, WITH=175, WRITE=176, 
		XOR=177, ZEROFILL=178, TINYINT=179, SMALLINT=180, MEDIUMINT=181, MIDDLEINT=182, 
		INT=183, INT1=184, INT2=185, INT3=186, INT4=187, INT8=188, INTEGER=189, 
		BIGINT=190, REAL=191, DOUBLE=192, PRECISION=193, FLOAT=194, FLOAT4=195, 
		FLOAT8=196, DECIMAL=197, DEC=198, NUMERIC=199, DATE=200, TIME=201, TIMESTAMP=202, 
		DATETIME=203, YEAR=204, CHAR=205, VARCHAR=206, NVARCHAR=207, NATIONAL=208, 
		BINARY=209, VARBINARY=210, TINYBLOB=211, BLOB=212, MEDIUMBLOB=213, LONG=214, 
		LONGBLOB=215, TINYTEXT=216, TEXT=217, MEDIUMTEXT=218, LONGTEXT=219, ENUM=220, 
		VARYING=221, SERIAL=222, YEAR_MONTH=223, DAY_HOUR=224, DAY_MINUTE=225, 
		DAY_SECOND=226, HOUR_MINUTE=227, HOUR_SECOND=228, MINUTE_SECOND=229, SECOND_MICROSECOND=230, 
		MINUTE_MICROSECOND=231, HOUR_MICROSECOND=232, DAY_MICROSECOND=233, JSON_VALID=234, 
		JSON_SCHEMA_VALID=235, AVG=236, BIT_AND=237, BIT_OR=238, BIT_XOR=239, 
		COUNT=240, GROUP_CONCAT=241, MAX=242, MIN=243, STD=244, STDDEV=245, STDDEV_POP=246, 
		STDDEV_SAMP=247, SUM=248, VAR_POP=249, VAR_SAMP=250, VARIANCE=251, OVER=252, 
		RANK=253, DENSE_RANK=254, ROW_NUMBER=255, LEAD=256, LAG=257, PERCENT_RANK=258, 
		CURRENT_DATE=259, CURRENT_TIME=260, CURRENT_TIMESTAMP=261, LOCALTIME=262, 
		CURDATE=263, CURTIME=264, DATE_ADD=265, DATE_SUB=266, EXTRACT=267, LOCALTIMESTAMP=268, 
		NOW=269, POSITION=270, SUBSTR=271, SUBSTRING=272, SYSDATE=273, TRIM=274, 
		UTC_DATE=275, UTC_TIME=276, UTC_TIMESTAMP=277, ACCOUNT=278, ACTION=279, 
		AFTER=280, AGGREGATE=281, ALGORITHM=282, ANY=283, AT=284, AUTHORS=285, 
		AUTOCOMMIT=286, AUTOEXTEND_SIZE=287, AUTO_INCREMENT=288, AVG_ROW_LENGTH=289, 
		BEGIN=290, BINLOG=291, BIT=292, BLOCK=293, BOOL=294, BOOLEAN=295, BTREE=296, 
		CACHE=297, CASCADED=298, CHAIN=299, CHANGED=300, CHANNEL=301, CHECKSUM=302, 
		PAGE_CHECKSUM=303, CIPHER=304, CLASS_ORIGIN=305, CLIENT=306, CLOSE=307, 
		COALESCE=308, CODE=309, COLUMNS=310, COLUMN_FORMAT=311, COLUMN_NAME=312, 
		COMMENT=313, COMMIT=314, COMPACT=315, COMPLETION=316, COMPRESSED=317, 
		COMPRESSION=318, CONCURRENT=319, CONNECTION=320, CONSISTENT=321, CONSTRAINT_CATALOG=322, 
		CONSTRAINT_SCHEMA=323, CONSTRAINT_NAME=324, CONTAINS=325, CONTEXT=326, 
		CONTRIBUTORS=327, COPY=328, CPU=329, CURSOR_NAME=330, DATA=331, DATAFILE=332, 
		DEALLOCATE=333, DEFAULT_AUTH=334, DEFINER=335, DELAY_KEY_WRITE=336, DES_KEY_FILE=337, 
		DIRECTORY=338, DISABLE=339, DISCARD=340, DISK=341, DO=342, DUMPFILE=343, 
		DUPLICATE=344, DYNAMIC=345, ENABLE=346, ENCRYPTION=347, END=348, ENDS=349, 
		ENGINE=350, ENGINES=351, ERROR=352, ERRORS=353, ESCAPE=354, EVEN=355, 
		EVENT=356, EVENTS=357, EVERY=358, EXCHANGE=359, EXCLUSIVE=360, EXPIRE=361, 
		EXPORT=362, EXTENDED=363, EXTENT_SIZE=364, FAST=365, FAULTS=366, FIELDS=367, 
		FILE_BLOCK_SIZE=368, FILTER=369, FIRST=370, FIXED=371, FLUSH=372, FOLLOWS=373, 
		FOUND=374, FULL=375, FUNCTION=376, GENERAL=377, GLOBAL=378, GRANTS=379, 
		GROUP_REPLICATION=380, HANDLER=381, HASH=382, HELP=383, HOST=384, HOSTS=385, 
		IDENTIFIED=386, IGNORE_SERVER_IDS=387, IMPORT=388, INDEXES=389, INITIAL_SIZE=390, 
		INPLACE=391, INSERT_METHOD=392, INSTALL=393, INSTANCE=394, INVISIBLE=395, 
		INVOKER=396, IO=397, IO_THREAD=398, IPC=399, ISOLATION=400, ISSUER=401, 
		JSON=402, KEY_BLOCK_SIZE=403, LANGUAGE=404, LAST=405, LEAVES=406, LESS=407, 
		LEVEL=408, LIST=409, LOCAL=410, LOGFILE=411, LOGS=412, MASTER=413, MASTER_AUTO_POSITION=414, 
		MASTER_CONNECT_RETRY=415, MASTER_DELAY=416, MASTER_HEARTBEAT_PERIOD=417, 
		MASTER_HOST=418, MASTER_LOG_FILE=419, MASTER_LOG_POS=420, MASTER_PASSWORD=421, 
		MASTER_PORT=422, MASTER_RETRY_COUNT=423, MASTER_SSL=424, MASTER_SSL_CA=425, 
		MASTER_SSL_CAPATH=426, MASTER_SSL_CERT=427, MASTER_SSL_CIPHER=428, MASTER_SSL_CRL=429, 
		MASTER_SSL_CRLPATH=430, MASTER_SSL_KEY=431, MASTER_TLS_VERSION=432, MASTER_USER=433, 
		MAX_CONNECTIONS_PER_HOUR=434, MAX_QUERIES_PER_HOUR=435, MAX_ROWS=436, 
		MAX_SIZE=437, MAX_UPDATES_PER_HOUR=438, MAX_USER_CONNECTIONS=439, MEDIUM=440, 
		MEMBER=441, MERGE=442, MESSAGE_TEXT=443, MID=444, MIGRATE=445, MIN_ROWS=446, 
		MODE=447, MODIFY=448, MUTEX=449, MYSQL=450, MYSQL_ERRNO=451, NAME=452, 
		NAMES=453, NCHAR=454, NEVER=455, NEXT=456, NO=457, NODEGROUP=458, NONE=459, 
		OFFLINE=460, OFFSET=461, OF=462, OJ=463, OLD_PASSWORD=464, ONE=465, ONLINE=466, 
		ONLY=467, OPEN=468, OPTIMIZER_COSTS=469, OPTIONS=470, OWNER=471, PACK_KEYS=472, 
		PAGE=473, PARSER=474, PARTIAL=475, PARTITIONING=476, PARTITIONS=477, PASSWORD=478, 
		PHASE=479, PLUGIN=480, PLUGIN_DIR=481, PLUGINS=482, PORT=483, PRECEDES=484, 
		PREPARE=485, PRESERVE=486, PREV=487, PROCESSLIST=488, PROFILE=489, PROFILES=490, 
		PROXY=491, QUERY=492, QUICK=493, REBUILD=494, RECOVER=495, REDO_BUFFER_SIZE=496, 
		REDUNDANT=497, RELAY=498, RELAY_LOG_FILE=499, RELAY_LOG_POS=500, RELAYLOG=501, 
		REMOVE=502, REORGANIZE=503, REPAIR=504, REPLICATE_DO_DB=505, REPLICATE_DO_TABLE=506, 
		REPLICATE_IGNORE_DB=507, REPLICATE_IGNORE_TABLE=508, REPLICATE_REWRITE_DB=509, 
		REPLICATE_WILD_DO_TABLE=510, REPLICATE_WILD_IGNORE_TABLE=511, REPLICATION=512, 
		RESET=513, RESUME=514, RETURNED_SQLSTATE=515, RETURNS=516, ROLE=517, ROLLBACK=518, 
		ROLLUP=519, ROTATE=520, ROW=521, ROWS=522, ROW_FORMAT=523, SAVEPOINT=524, 
		SCHEDULE=525, SECURITY=526, SERVER=527, SESSION=528, SHARE=529, SHARED=530, 
		SIGNED=531, SIMPLE=532, SLAVE=533, SLOW=534, SNAPSHOT=535, SOCKET=536, 
		SOME=537, SONAME=538, SOUNDS=539, SOURCE=540, SQL_AFTER_GTIDS=541, SQL_AFTER_MTS_GAPS=542, 
		SQL_BEFORE_GTIDS=543, SQL_BUFFER_RESULT=544, SQL_CACHE=545, SQL_NO_CACHE=546, 
		SQL_THREAD=547, START=548, STARTS=549, STATS_AUTO_RECALC=550, STATS_PERSISTENT=551, 
		STATS_SAMPLE_PAGES=552, STATUS=553, STOP=554, STORAGE=555, STORED=556, 
		STRING=557, SUBCLASS_ORIGIN=558, SUBJECT=559, SUBPARTITION=560, SUBPARTITIONS=561, 
		SUSPEND=562, SWAPS=563, SWITCHES=564, TABLE_NAME=565, TABLESPACE=566, 
		TEMPORARY=567, TEMPTABLE=568, THAN=569, TRADITIONAL=570, TRANSACTION=571, 
		TRANSACTIONAL=572, TRIGGERS=573, TRUNCATE=574, UNDEFINED=575, UNDOFILE=576, 
		UNDO_BUFFER_SIZE=577, UNINSTALL=578, UNKNOWN=579, UNTIL=580, UPGRADE=581, 
		USER=582, USE_FRM=583, USER_RESOURCES=584, VALIDATION=585, VALUE=586, 
		VARIABLES=587, VIEW=588, VIRTUAL=589, VISIBLE=590, WAIT=591, WARNINGS=592, 
		WITHOUT=593, WORK=594, WRAPPER=595, X509=596, XA=597, XML=598, EUR=599, 
		USA=600, JIS=601, ISO=602, INTERNAL=603, QUARTER=604, MONTH=605, DAY=606, 
		HOUR=607, MINUTE=608, WEEK=609, SECOND=610, MICROSECOND=611, TABLES=612, 
		ROUTINE=613, EXECUTE=614, FILE=615, PROCESS=616, RELOAD=617, SHUTDOWN=618, 
		SUPER=619, PRIVILEGES=620, APPLICATION_PASSWORD_ADMIN=621, AUDIT_ADMIN=622, 
		BACKUP_ADMIN=623, BINLOG_ADMIN=624, BINLOG_ENCRYPTION_ADMIN=625, CLONE_ADMIN=626, 
		CONNECTION_ADMIN=627, ENCRYPTION_KEY_ADMIN=628, FIREWALL_ADMIN=629, FIREWALL_USER=630, 
		GROUP_REPLICATION_ADMIN=631, INNODB_REDO_LOG_ARCHIVE=632, NDB_STORED_USER=633, 
		PERSIST_RO_VARIABLES_ADMIN=634, REPLICATION_APPLIER=635, REPLICATION_SLAVE_ADMIN=636, 
		RESOURCE_GROUP_ADMIN=637, RESOURCE_GROUP_USER=638, ROLE_ADMIN=639, SESSION_VARIABLES_ADMIN=640, 
		SET_USER_ID=641, SHOW_ROUTINE=642, SYSTEM_VARIABLES_ADMIN=643, TABLE_ENCRYPTION_ADMIN=644, 
		VERSION_TOKEN_ADMIN=645, XA_RECOVER_ADMIN=646, ARMSCII8=647, ASCII=648, 
		BIG5=649, CP1250=650, CP1251=651, CP1256=652, CP1257=653, CP850=654, CP852=655, 
		CP866=656, CP932=657, DEC8=658, EUCJPMS=659, EUCKR=660, GB2312=661, GBK=662, 
		GEOSTD8=663, GREEK=664, HEBREW=665, HP8=666, KEYBCS2=667, KOI8R=668, KOI8U=669, 
		LATIN1=670, LATIN2=671, LATIN5=672, LATIN7=673, MACCE=674, MACROMAN=675, 
		SJIS=676, SWE7=677, TIS620=678, UCS2=679, UJIS=680, UTF16=681, UTF16LE=682, 
		UTF32=683, UTF8=684, UTF8MB3=685, UTF8MB4=686, ARCHIVE=687, BLACKHOLE=688, 
		CSV=689, FEDERATED=690, INNODB=691, MEMORY=692, MRG_MYISAM=693, MYISAM=694, 
		NDB=695, NDBCLUSTER=696, PERFORMANCE_SCHEMA=697, TOKUDB=698, REPEATABLE=699, 
		COMMITTED=700, UNCOMMITTED=701, SERIALIZABLE=702, GEOMETRYCOLLECTION=703, 
		GEOMCOLLECTION=704, GEOMETRY=705, LINESTRING=706, MULTILINESTRING=707, 
		MULTIPOINT=708, MULTIPOLYGON=709, POINT=710, POLYGON=711, ABS=712, ACOS=713, 
		ADDDATE=714, ADDTIME=715, AES_DECRYPT=716, AES_ENCRYPT=717, AREA=718, 
		ASBINARY=719, ASIN=720, ASTEXT=721, ASWKB=722, ASWKT=723, ASYMMETRIC_DECRYPT=724, 
		ASYMMETRIC_DERIVE=725, ASYMMETRIC_ENCRYPT=726, ASYMMETRIC_SIGN=727, ASYMMETRIC_VERIFY=728, 
		ATAN=729, ATAN2=730, BENCHMARK=731, BIN=732, BIT_COUNT=733, BIT_LENGTH=734, 
		BUFFER=735, CATALOG_NAME=736, CEIL=737, CEILING=738, CENTROID=739, CHARACTER_LENGTH=740, 
		CHARSET=741, CHAR_LENGTH=742, COERCIBILITY=743, COLLATION=744, COMPRESS=745, 
		CONCAT=746, CONCAT_WS=747, CONNECTION_ID=748, CONV=749, CONVERT_TZ=750, 
		COS=751, COT=752, CRC32=753, CREATE_ASYMMETRIC_PRIV_KEY=754, CREATE_ASYMMETRIC_PUB_KEY=755, 
		CREATE_DH_PARAMETERS=756, CREATE_DIGEST=757, CROSSES=758, DATEDIFF=759, 
		DATE_FORMAT=760, DAYNAME=761, DAYOFMONTH=762, DAYOFWEEK=763, DAYOFYEAR=764, 
		DECODE=765, DEGREES=766, DES_DECRYPT=767, DES_ENCRYPT=768, DIMENSION=769, 
		DISJOINT=770, ELT=771, ENCODE=772, ENCRYPT=773, ENDPOINT=774, ENVELOPE=775, 
		EQUALS=776, EXP=777, EXPORT_SET=778, EXTERIORRING=779, EXTRACTVALUE=780, 
		FIELD=781, FIND_IN_SET=782, FLOOR=783, FORMAT=784, FOUND_ROWS=785, FROM_BASE64=786, 
		FROM_DAYS=787, FROM_UNIXTIME=788, GEOMCOLLFROMTEXT=789, GEOMCOLLFROMWKB=790, 
		GEOMETRYCOLLECTIONFROMTEXT=791, GEOMETRYCOLLECTIONFROMWKB=792, GEOMETRYFROMTEXT=793, 
		GEOMETRYFROMWKB=794, GEOMETRYN=795, GEOMETRYTYPE=796, GEOMFROMTEXT=797, 
		GEOMFROMWKB=798, GET_FORMAT=799, GET_LOCK=800, GLENGTH=801, GREATEST=802, 
		GTID_SUBSET=803, GTID_SUBTRACT=804, HEX=805, IFNULL=806, INET6_ATON=807, 
		INET6_NTOA=808, INET_ATON=809, INET_NTOA=810, INSTR=811, INTERIORRINGN=812, 
		INTERSECTS=813, ISCLOSED=814, ISEMPTY=815, ISNULL=816, ISSIMPLE=817, IS_FREE_LOCK=818, 
		IS_IPV4=819, IS_IPV4_COMPAT=820, IS_IPV4_MAPPED=821, IS_IPV6=822, IS_USED_LOCK=823, 
		LAST_INSERT_ID=824, LCASE=825, LEAST=826, LENGTH=827, LINEFROMTEXT=828, 
		LINEFROMWKB=829, LINESTRINGFROMTEXT=830, LINESTRINGFROMWKB=831, LN=832, 
		LOAD_FILE=833, LOCATE=834, LOG=835, LOG10=836, LOG2=837, LOWER=838, LPAD=839, 
		LTRIM=840, MAKEDATE=841, MAKETIME=842, MAKE_SET=843, MASTER_POS_WAIT=844, 
		MBRCONTAINS=845, MBRDISJOINT=846, MBREQUAL=847, MBRINTERSECTS=848, MBROVERLAPS=849, 
		MBRTOUCHES=850, MBRWITHIN=851, MD5=852, MLINEFROMTEXT=853, MLINEFROMWKB=854, 
		MONTHNAME=855, MPOINTFROMTEXT=856, MPOINTFROMWKB=857, MPOLYFROMTEXT=858, 
		MPOLYFROMWKB=859, MULTILINESTRINGFROMTEXT=860, MULTILINESTRINGFROMWKB=861, 
		MULTIPOINTFROMTEXT=862, MULTIPOINTFROMWKB=863, MULTIPOLYGONFROMTEXT=864, 
		MULTIPOLYGONFROMWKB=865, NAME_CONST=866, NULLIF=867, NUMGEOMETRIES=868, 
		NUMINTERIORRINGS=869, NUMPOINTS=870, OCT=871, OCTET_LENGTH=872, ORD=873, 
		OVERLAPS=874, PERIOD_ADD=875, PERIOD_DIFF=876, PI=877, POINTFROMTEXT=878, 
		POINTFROMWKB=879, POINTN=880, POLYFROMTEXT=881, POLYFROMWKB=882, POLYGONFROMTEXT=883, 
		POLYGONFROMWKB=884, POW=885, POWER=886, QUOTE=887, RADIANS=888, RAND=889, 
		RANDOM_BYTES=890, RELEASE_LOCK=891, REVERSE=892, ROUND=893, ROW_COUNT=894, 
		RPAD=895, RTRIM=896, SEC_TO_TIME=897, SESSION_USER=898, SHA=899, SHA1=900, 
		SHA2=901, SCHEMA_NAME=902, SIGN=903, SIN=904, SLEEP=905, SOUNDEX=906, 
		SQL_THREAD_WAIT_AFTER_GTIDS=907, SQRT=908, SRID=909, STARTPOINT=910, STRCMP=911, 
		STR_TO_DATE=912, ST_AREA=913, ST_ASBINARY=914, ST_ASTEXT=915, ST_ASWKB=916, 
		ST_ASWKT=917, ST_BUFFER=918, ST_CENTROID=919, ST_CONTAINS=920, ST_CROSSES=921, 
		ST_DIFFERENCE=922, ST_DIMENSION=923, ST_DISJOINT=924, ST_DISTANCE=925, 
		ST_ENDPOINT=926, ST_ENVELOPE=927, ST_EQUALS=928, ST_EXTERIORRING=929, 
		ST_GEOMCOLLFROMTEXT=930, ST_GEOMCOLLFROMTXT=931, ST_GEOMCOLLFROMWKB=932, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=933, ST_GEOMETRYCOLLECTIONFROMWKB=934, ST_GEOMETRYFROMTEXT=935, 
		ST_GEOMETRYFROMWKB=936, ST_GEOMETRYN=937, ST_GEOMETRYTYPE=938, ST_GEOMFROMTEXT=939, 
		ST_GEOMFROMWKB=940, ST_INTERIORRINGN=941, ST_INTERSECTION=942, ST_INTERSECTS=943, 
		ST_ISCLOSED=944, ST_ISEMPTY=945, ST_ISSIMPLE=946, ST_LINEFROMTEXT=947, 
		ST_LINEFROMWKB=948, ST_LINESTRINGFROMTEXT=949, ST_LINESTRINGFROMWKB=950, 
		ST_NUMGEOMETRIES=951, ST_NUMINTERIORRING=952, ST_NUMINTERIORRINGS=953, 
		ST_NUMPOINTS=954, ST_OVERLAPS=955, ST_POINTFROMTEXT=956, ST_POINTFROMWKB=957, 
		ST_POINTN=958, ST_POLYFROMTEXT=959, ST_POLYFROMWKB=960, ST_POLYGONFROMTEXT=961, 
		ST_POLYGONFROMWKB=962, ST_SRID=963, ST_STARTPOINT=964, ST_SYMDIFFERENCE=965, 
		ST_TOUCHES=966, ST_UNION=967, ST_WITHIN=968, ST_X=969, ST_Y=970, SUBDATE=971, 
		SUBSTRING_INDEX=972, SUBTIME=973, SYSTEM_USER=974, TAN=975, TIMEDIFF=976, 
		TIMESTAMPADD=977, TIMESTAMPDIFF=978, TIME_FORMAT=979, TIME_TO_SEC=980, 
		TOUCHES=981, TO_BASE64=982, TO_DAYS=983, TO_SECONDS=984, UCASE=985, UNCOMPRESS=986, 
		UNCOMPRESSED_LENGTH=987, UNHEX=988, UNIX_TIMESTAMP=989, UPDATEXML=990, 
		UPPER=991, UUID=992, UUID_SHORT=993, VALIDATE_PASSWORD_STRENGTH=994, VERSION=995, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=996, WEEKDAY=997, WEEKOFYEAR=998, WEIGHT_STRING=999, 
		WITHIN=1000, YEARWEEK=1001, Y_FUNCTION=1002, X_FUNCTION=1003, VAR_ASSIGN=1004, 
		PLUS_ASSIGN=1005, MINUS_ASSIGN=1006, MULT_ASSIGN=1007, DIV_ASSIGN=1008, 
		MOD_ASSIGN=1009, AND_ASSIGN=1010, XOR_ASSIGN=1011, OR_ASSIGN=1012, STAR=1013, 
		DIVIDE=1014, MODULE=1015, PLUS=1016, MINUSMINUS=1017, MINUS=1018, DIV=1019, 
		MOD=1020, CONCAT_OP=1021, EQUAL_SYMBOL=1022, GREATER_SYMBOL=1023, LESS_SYMBOL=1024, 
		EXCLAMATION_SYMBOL=1025, BIT_NOT_OP=1026, BIT_OR_OP=1027, BIT_AND_OP=1028, 
		BIT_XOR_OP=1029, DOT=1030, LR_BRACKET=1031, RR_BRACKET=1032, COMMA=1033, 
		SEMI=1034, AT_SIGN=1035, ZERO_DECIMAL=1036, ONE_DECIMAL=1037, TWO_DECIMAL=1038, 
		SINGLE_QUOTE_SYMB=1039, DOUBLE_QUOTE_SYMB=1040, REVERSE_QUOTE_SYMB=1041, 
		COLON_SYMB=1042, CHARSET_REVERSE_QOUTE_STRING=1043, FILESIZE_LITERAL=1044, 
		START_NATIONAL_STRING_LITERAL=1045, STRING_LITERAL=1046, DECIMAL_LITERAL=1047, 
		HEXADECIMAL_LITERAL=1048, REAL_LITERAL=1049, NULL_SPEC_LITERAL=1050, BIT_STRING=1051, 
		STRING_CHARSET_NAME=1052, DOT_ID=1053, ID=1054, REVERSE_QUOTE_ID=1055, 
		STRING_USER_NAME=1056, LOCAL_ID=1057, GLOBAL_ID=1058, ERROR_RECONGNIGION=1059;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
		RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
		RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53, 
		RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56, 
		RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59, 
		RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62, 
		RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65, 
		RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68, 
		RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, 
		RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
		RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79, 
		RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82, 
		RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85, 
		RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88, 
		RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91, 
		RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94, 
		RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
		RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100, 
		RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102, 
		RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105, 
		RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108, 
		RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111, 
		RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
		RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
		RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
		RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123, 
		RULE_groupByItem = 124, RULE_limitClause = 125, RULE_limitClauseAtom = 126, 
		RULE_startTransaction = 127, RULE_beginWork = 128, RULE_commitWork = 129, 
		RULE_rollbackWork = 130, RULE_savepointStatement = 131, RULE_rollbackStatement = 132, 
		RULE_releaseStatement = 133, RULE_lockTables = 134, RULE_unlockTables = 135, 
		RULE_setAutocommitStatement = 136, RULE_setTransactionStatement = 137, 
		RULE_transactionMode = 138, RULE_lockTableElement = 139, RULE_lockAction = 140, 
		RULE_transactionOption = 141, RULE_transactionLevel = 142, RULE_changeMaster = 143, 
		RULE_changeReplicationFilter = 144, RULE_purgeBinaryLogs = 145, RULE_resetMaster = 146, 
		RULE_resetSlave = 147, RULE_startSlave = 148, RULE_stopSlave = 149, RULE_startGroupReplication = 150, 
		RULE_stopGroupReplication = 151, RULE_masterOption = 152, RULE_stringMasterOption = 153, 
		RULE_decimalMasterOption = 154, RULE_boolMasterOption = 155, RULE_channelOption = 156, 
		RULE_replicationFilter = 157, RULE_tablePair = 158, RULE_threadType = 159, 
		RULE_untilOption = 160, RULE_connectionOption = 161, RULE_gtuidSet = 162, 
		RULE_xaStartTransaction = 163, RULE_xaEndTransaction = 164, RULE_xaPrepareStatement = 165, 
		RULE_xaCommitWork = 166, RULE_xaRollbackWork = 167, RULE_xaRecoverWork = 168, 
		RULE_prepareStatement = 169, RULE_executeStatement = 170, RULE_deallocatePrepare = 171, 
		RULE_routineBody = 172, RULE_blockStatement = 173, RULE_caseStatement = 174, 
		RULE_ifStatement = 175, RULE_iterateStatement = 176, RULE_leaveStatement = 177, 
		RULE_loopStatement = 178, RULE_repeatStatement = 179, RULE_returnStatement = 180, 
		RULE_whileStatement = 181, RULE_cursorStatement = 182, RULE_declareVariable = 183, 
		RULE_declareCondition = 184, RULE_declareCursor = 185, RULE_declareHandler = 186, 
		RULE_handlerConditionValue = 187, RULE_procedureSqlStatement = 188, RULE_caseAlternative = 189, 
		RULE_elifAlternative = 190, RULE_alterUser = 191, RULE_createUser = 192, 
		RULE_dropUser = 193, RULE_grantStatement = 194, RULE_grantProxy = 195, 
		RULE_renameUser = 196, RULE_revokeStatement = 197, RULE_revokeProxy = 198, 
		RULE_setPasswordStatement = 199, RULE_userSpecification = 200, RULE_userAuthOption = 201, 
		RULE_tlsOption = 202, RULE_userResourceOption = 203, RULE_userPasswordOption = 204, 
		RULE_userLockOption = 205, RULE_privelegeClause = 206, RULE_privilege = 207, 
		RULE_privilegeLevel = 208, RULE_renameUserClause = 209, RULE_analyzeTable = 210, 
		RULE_checkTable = 211, RULE_checksumTable = 212, RULE_optimizeTable = 213, 
		RULE_repairTable = 214, RULE_checkTableOption = 215, RULE_createUdfunction = 216, 
		RULE_installPlugin = 217, RULE_uninstallPlugin = 218, RULE_setStatement = 219, 
		RULE_showStatement = 220, RULE_variableClause = 221, RULE_showCommonEntity = 222, 
		RULE_showFilter = 223, RULE_showGlobalInfoClause = 224, RULE_showSchemaEntity = 225, 
		RULE_showProfileType = 226, RULE_binlogStatement = 227, RULE_cacheIndexStatement = 228, 
		RULE_flushStatement = 229, RULE_killStatement = 230, RULE_loadIndexIntoCache = 231, 
		RULE_resetStatement = 232, RULE_shutdownStatement = 233, RULE_tableIndexes = 234, 
		RULE_flushOption = 235, RULE_flushTableOption = 236, RULE_loadedTableIndexes = 237, 
		RULE_simpleDescribeStatement = 238, RULE_fullDescribeStatement = 239, 
		RULE_helpStatement = 240, RULE_useStatement = 241, RULE_signalStatement = 242, 
		RULE_resignalStatement = 243, RULE_signalConditionInformation = 244, RULE_diagnosticsStatement = 245, 
		RULE_diagnosticsConditionInformationName = 246, RULE_describeObjectClause = 247, 
		RULE_fullId = 248, RULE_tableName = 249, RULE_fullColumnName = 250, RULE_indexColumnName = 251, 
		RULE_userName = 252, RULE_mysqlVariable = 253, RULE_charsetName = 254, 
		RULE_collationName = 255, RULE_engineName = 256, RULE_uuidSet = 257, RULE_xid = 258, 
		RULE_xuidStringId = 259, RULE_authPlugin = 260, RULE_uid = 261, RULE_simpleId = 262, 
		RULE_dottedId = 263, RULE_decimalLiteral = 264, RULE_fileSizeLiteral = 265, 
		RULE_stringLiteral = 266, RULE_booleanLiteral = 267, RULE_hexadecimalLiteral = 268, 
		RULE_nullNotnull = 269, RULE_constant = 270, RULE_dataType = 271, RULE_collectionOptions = 272, 
		RULE_convertedDataType = 273, RULE_lengthOneDimension = 274, RULE_lengthTwoDimension = 275, 
		RULE_lengthTwoOptionalDimension = 276, RULE_uidList = 277, RULE_tables = 278, 
		RULE_indexColumnNames = 279, RULE_expressions = 280, RULE_expressionsWithDefaults = 281, 
		RULE_constants = 282, RULE_simpleStrings = 283, RULE_userVariables = 284, 
		RULE_defaultValue = 285, RULE_currentTimestamp = 286, RULE_expressionOrDefault = 287, 
		RULE_ifExists = 288, RULE_ifNotExists = 289, RULE_functionCall = 290, 
		RULE_specificFunction = 291, RULE_caseFuncAlternative = 292, RULE_levelsInWeightString = 293, 
		RULE_levelInWeightListElement = 294, RULE_aggregateWindowedFunction = 295, 
		RULE_olapFunction = 296, RULE_scalarFunctionName = 297, RULE_passwordFunctionClause = 298, 
		RULE_functionArgs = 299, RULE_functionArg = 300, RULE_expression = 301, 
		RULE_predicate = 302, RULE_expressionAtom = 303, RULE_unaryOperator = 304, 
		RULE_comparisonOperator = 305, RULE_logicalOperator = 306, RULE_bitOperator = 307, 
		RULE_mathOperator = 308, RULE_jsonOperator = 309, RULE_stringOperator = 310, 
		RULE_charsetNameBase = 311, RULE_transactionLevelBase = 312, RULE_privilegesBase = 313, 
		RULE_intervalTypeBase = 314, RULE_dataTypeBase = 315, RULE_keywordsCanBeId = 316, 
		RULE_functionNameBase = 317;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
			"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
			"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
			"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
			"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
			"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
			"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
			"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
			"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
			"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
			"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
			"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
			"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
			"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
			"orderByClause", "orderByExpression", "tableSources", "tableSource", 
			"tableSourceItem", "indexHint", "indexHintType", "joinPart", "queryExpression", 
			"queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
			"unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", 
			"beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
			"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
			"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
			"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
			"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
			"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
			"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
			"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
			"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
			"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
			"deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
			"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
			"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
			"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
			"handlerConditionValue", "procedureSqlStatement", "caseAlternative", 
			"elifAlternative", "alterUser", "createUser", "dropUser", "grantStatement", 
			"grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
			"userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
			"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
			"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
			"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
			"installPlugin", "uninstallPlugin", "setStatement", "showStatement", 
			"variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
			"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
			"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
			"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
			"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
			"helpStatement", "useStatement", "signalStatement", "resignalStatement", 
			"signalConditionInformation", "diagnosticsStatement", "diagnosticsConditionInformationName", 
			"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
			"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
			"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
			"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
			"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", 
			"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
			"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "olapFunction", "scalarFunctionName", "passwordFunctionClause", 
			"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
			"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
			"mathOperator", "jsonOperator", "stringOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
			"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
			"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
			"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
			"'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
			"'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", 
			"'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", 
			"'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
			"'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
			"'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
			"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MODIFIES'", 
			"'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", 
			"'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
			"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
			"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
			"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
			"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
			"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
			"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
			"'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
			"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
			"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", 
			"'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
			"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", 
			"'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", 
			"'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
			"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", 
			"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
			"'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", 
			"'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
			"'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
			"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_VALID'", "'JSON_SCHEMA_VALID'", "'AVG'", 
			"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", 
			"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", 
			"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'OVER'", "'RANK'", "'DENSE_RANK'", 
			"'ROW_NUMBER'", "'LEAD'", "'LAG'", "'PERCENT_RANK'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
			"'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
			"'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
			"'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", 
			"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", 
			"'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
			"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
			"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
			"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
			"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
			"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
			"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
			"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
			"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
			"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", 
			"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
			"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
			"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
			"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
			"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
			"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
			"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
			"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
			"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
			"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
			"'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
			"'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", 
			"'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", 
			"'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", 
			"'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", 
			"'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
			"'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", 
			"'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
			"'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
			"'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", 
			"'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
			"'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
			"'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
			"'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNS'", 
			"'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
			"'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
			"'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
			"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
			"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
			"'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", 
			"'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
			"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
			"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
			"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", 
			"'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", 
			"'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", 
			"'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", 
			"'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
			"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
			"'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'", 
			"'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
			"'ROLE_ADMIN'", null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
			"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
			"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
			"'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", 
			"'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", 
			"'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'||'", "'='", "'>'", 
			"'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", 
			"';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_GBASE_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"DELIMITER", "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", 
			"ASC", "BEFORE", "BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
			"EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", 
			"GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF", 
			"IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
			"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
			"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
			"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
			"MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", 
			"ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
			"OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
			"READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
			"REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
			"SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", 
			"SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
			"SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
			"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
			"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
			"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
			"XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", 
			"INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", 
			"DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", 
			"NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
			"NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", 
			"LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
			"VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", 
			"HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
			"MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_VALID", 
			"JSON_SCHEMA_VALID", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", 
			"GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", 
			"SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "OVER", "RANK", "DENSE_RANK", 
			"ROW_NUMBER", "LEAD", "LAG", "PERCENT_RANK", "CURRENT_DATE", "CURRENT_TIME", 
			"CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
			"EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", 
			"SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", 
			"ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
			"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
			"BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
			"CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", 
			"CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
			"COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
			"COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", 
			"CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", 
			"CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", 
			"DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", 
			"DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
			"DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
			"ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
			"EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", 
			"FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
			"FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
			"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
			"INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
			"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
			"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
			"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
			"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
			"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
			"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
			"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
			"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
			"MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", 
			"MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", 
			"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", 
			"OFFLINE", "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
			"OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
			"PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", 
			"PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
			"PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
			"RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
			"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
			"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
			"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
			"REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
			"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
			"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
			"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
			"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
			"STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
			"SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", 
			"TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
			"TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", 
			"USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", 
			"WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", 
			"PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
			"CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "FIREWALL_ADMIN", 
			"FIREWALL_USER", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
			"NDB_STORED_USER", "PERSIST_RO_VARIABLES_ADMIN", "REPLICATION_APPLIER", 
			"REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
			"ROLE_ADMIN", "SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", 
			"SYSTEM_VARIABLES_ADMIN", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", 
			"XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
			"CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
			"EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", 
			"KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "CONCAT_OP", "EQUAL_SYMBOL", 
			"GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
			"BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", 
			"COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
			"SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
			"CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "GBaseParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public GBaseParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(GBaseParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public TerminalNode MINUSMINUS() { return getToken(GBaseParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (GET - 65)) | (1L << (GRANT - 65)) | (1L << (INSERT - 65)) | (1L << (KILL - 65)) | (1L << (LOAD - 65)) | (1L << (LOCK - 65)) | (1L << (OPTIMIZE - 65)) | (1L << (PURGE - 65)) | (1L << (RELEASE - 65)) | (1L << (RENAME - 65)) | (1L << (REPLACE - 65)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (RESIGNAL - 130)) | (1L << (REVOKE - 130)) | (1L << (SELECT - 130)) | (1L << (SET - 130)) | (1L << (SHOW - 130)) | (1L << (SIGNAL - 130)) | (1L << (UNLOCK - 130)) | (1L << (UPDATE - 130)) | (1L << (USE - 130)))) != 0) || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & ((1L << (BEGIN - 290)) | (1L << (BINLOG - 290)) | (1L << (CACHE - 290)) | (1L << (CHECKSUM - 290)) | (1L << (COMMIT - 290)) | (1L << (DEALLOCATE - 290)) | (1L << (DO - 290)))) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (FLUSH - 372)) | (1L << (HANDLER - 372)) | (1L << (HELP - 372)) | (1L << (INSTALL - 372)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (PREPARE - 485)) | (1L << (REPAIR - 485)) | (1L << (RESET - 485)) | (1L << (ROLLBACK - 485)) | (1L << (SAVEPOINT - 485)) | (1L << (START - 485)))) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & ((1L << (STOP - 554)) | (1L << (TRUNCATE - 554)) | (1L << (UNINSTALL - 554)) | (1L << (XA - 554)) | (1L << (EXECUTE - 554)))) != 0) || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(636);
				sqlStatements();
				}
			}

			setState(640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(639);
				match(MINUSMINUS);
				}
			}

			setState(642);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(GBaseParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(GBaseParser.SEMI, i);
		}
		public List<TerminalNode> MINUSMINUS() { return getTokens(GBaseParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(GBaseParser.MINUSMINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(654);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(652);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(644);
						sqlStatement();
						setState(646);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUSMINUS) {
							{
							setState(645);
							match(MINUSMINUS);
							}
						}

						setState(649);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(648);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(651);
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(656);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(657);
				sqlStatement();
				setState(662);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(659);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUSMINUS) {
						{
						setState(658);
						match(MINUSMINUS);
						}
					}

					setState(661);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(664);
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(667);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(668);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(669);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(670);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(671);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(672);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(673);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(GBaseParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitEmptyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitEmptyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(676);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(678);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(679);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(680);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(681);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(682);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(683);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(684);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(685);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(686);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(687);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(688);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(689);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(690);
				alterDatabase();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(691);
				alterEvent();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(692);
				alterFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(693);
				alterInstance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(694);
				alterLogfileGroup();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(695);
				alterProcedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(696);
				alterServer();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(697);
				alterTable();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(698);
				alterTablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(699);
				alterView();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(700);
				dropDatabase();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(701);
				dropEvent();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(702);
				dropIndex();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(703);
				dropLogfileGroup();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(704);
				dropProcedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(705);
				dropFunction();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(706);
				dropServer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(707);
				dropTable();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(708);
				dropTablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(709);
				dropTrigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(710);
				dropView();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(711);
				renameTable();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(712);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(715);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(716);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(717);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(718);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(719);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(720);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(721);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(722);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(723);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(724);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(727);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(728);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(729);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(730);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(731);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(732);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(733);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(734);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(735);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(738);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(739);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(740);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(741);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(742);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(743);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(744);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(745);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(746);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(747);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(748);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(749);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(750);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(751);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(752);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(755);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(756);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(757);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(760);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(761);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(762);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(763);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(764);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(765);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(766);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(767);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(768);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(769);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(772);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(773);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(774);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(775);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(776);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(777);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(778);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(779);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(780);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(781);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(782);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(783);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(784);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(785);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(786);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(787);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(788);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(789);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(790);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(791);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(792);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(793);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(794);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(795);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(796);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(799);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(800);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(801);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(802);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(803);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(804);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(805);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(808);
			match(CREATE);
			setState(809);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(810);
				ifNotExists();
				}
			}

			setState(813);
			uid();
			setState(817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				setState(814);
				createDatabaseOption();
				}
				}
				setState(819);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(GBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(GBaseParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(GBaseParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(GBaseParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(GBaseParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(820);
			match(CREATE);
			setState(822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(821);
				ownerStatement();
				}
			}

			setState(824);
			match(EVENT);
			setState(826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(825);
				ifNotExists();
				}
			}

			setState(828);
			fullId();
			setState(829);
			match(ON);
			setState(830);
			match(SCHEDULE);
			setState(831);
			scheduleExpression();
			setState(838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(832);
				match(ON);
				setState(833);
				match(COMPLETION);
				setState(835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(834);
					match(NOT);
					}
				}

				setState(837);
				match(PRESERVE);
				}
			}

			setState(841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(840);
				enableType();
				}
			}

			setState(845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(843);
				match(COMMENT);
				setState(844);
				match(STRING_LITERAL);
				}
			}

			setState(847);
			match(DO);
			setState(848);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(GBaseParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(GBaseParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(GBaseParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(GBaseParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(GBaseParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(GBaseParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(GBaseParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(GBaseParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(GBaseParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(GBaseParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(GBaseParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(GBaseParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(GBaseParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(GBaseParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(GBaseParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(GBaseParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(850);
			match(CREATE);
			setState(852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(851);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(854);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(857);
			match(INDEX);
			setState(858);
			uid();
			setState(860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(859);
				indexType();
				}
			}

			setState(862);
			match(ON);
			setState(863);
			tableName();
			setState(864);
			indexColumnNames();
			setState(868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				setState(865);
				indexOption();
				}
				}
				setState(870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(883);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(881);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(871);
						match(ALGORITHM);
						setState(873);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(872);
							match(EQUAL_SYMBOL);
							}
						}

						setState(875);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(876);
						match(LOCK);
						setState(878);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(877);
							match(EQUAL_SYMBOL);
							}
						}

						setState(880);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(885);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(GBaseParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(GBaseParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(GBaseParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(886);
			match(CREATE);
			setState(887);
			match(LOGFILE);
			setState(888);
			match(GROUP);
			setState(889);
			uid();
			setState(890);
			match(ADD);
			setState(891);
			match(UNDOFILE);
			setState(892);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(893);
				match(INITIAL_SIZE);
				setState(895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(894);
					match(EQUAL_SYMBOL);
					}
				}

				setState(897);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(900);
				match(UNDO_BUFFER_SIZE);
				setState(902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(901);
					match(EQUAL_SYMBOL);
					}
				}

				setState(904);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(907);
				match(REDO_BUFFER_SIZE);
				setState(909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(908);
					match(EQUAL_SYMBOL);
					}
				}

				setState(911);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(914);
				match(NODEGROUP);
				setState(916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(915);
					match(EQUAL_SYMBOL);
					}
				}

				setState(918);
				uid();
				}
			}

			setState(922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(921);
				match(WAIT);
				}
			}

			setState(929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(924);
				match(COMMENT);
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(925);
					match(EQUAL_SYMBOL);
					}
				}

				setState(928);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(931);
			match(ENGINE);
			setState(933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(932);
				match(EQUAL_SYMBOL);
				}
			}

			setState(935);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(937);
			match(CREATE);
			setState(939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(938);
				ownerStatement();
				}
			}

			setState(941);
			match(PROCEDURE);
			setState(942);
			fullId();
			setState(943);
			match(LR_BRACKET);
			setState(945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (IN - 33)) | (1L << (INOUT - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (OUT - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(944);
				procedureParameter();
				}
			}

			setState(951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(947);
				match(COMMA);
				setState(948);
				procedureParameter();
				}
				}
				setState(953);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(954);
			match(RR_BRACKET);
			setState(958);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(955);
					routineOption();
					}
					} 
				}
				setState(960);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(961);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(GBaseParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(963);
			match(CREATE);
			setState(965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(964);
				ownerStatement();
				}
			}

			setState(967);
			match(FUNCTION);
			setState(968);
			fullId();
			setState(969);
			match(LR_BRACKET);
			setState(971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(970);
				functionParameter();
				}
			}

			setState(977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(973);
				match(COMMA);
				setState(974);
				functionParameter();
				}
				}
				setState(979);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(980);
			match(RR_BRACKET);
			setState(981);
			match(RETURNS);
			setState(982);
			dataType();
			setState(986);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(983);
					routineOption();
					}
					} 
				}
				setState(988);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			}
			setState(991);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(989);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(990);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(GBaseParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(GBaseParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(GBaseParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(993);
			match(CREATE);
			setState(994);
			match(SERVER);
			setState(995);
			uid();
			setState(996);
			match(FOREIGN);
			setState(997);
			match(DATA);
			setState(998);
			match(WRAPPER);
			setState(999);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1000);
			match(OPTIONS);
			setState(1001);
			match(LR_BRACKET);
			setState(1002);
			serverOption();
			setState(1007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1003);
				match(COMMA);
				setState(1004);
				serverOption();
				}
				}
				setState(1009);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1010);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1012);
				match(CREATE);
				setState(1014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1013);
					match(TEMPORARY);
					}
				}

				setState(1016);
				match(TABLE);
				setState(1018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1017);
					ifNotExists();
					}
				}

				setState(1020);
				tableName();
				setState(1028);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1021);
					match(LIKE);
					setState(1022);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1023);
					match(LR_BRACKET);
					setState(1024);
					match(LIKE);
					setState(1025);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1026);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1030);
				match(CREATE);
				setState(1032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1031);
					match(TEMPORARY);
					}
				}

				setState(1034);
				match(TABLE);
				setState(1036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1035);
					ifNotExists();
					}
				}

				setState(1038);
				tableName();
				setState(1040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1039);
					createDefinitions();
					}
					break;
				}
				setState(1052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (CHARACTER - 23)) | (1L << (COLLATE - 23)) | (1L << (DEFAULT - 23)) | (1L << (INDEX - 23)))) != 0) || _la==UNION || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (AUTO_INCREMENT - 288)) | (1L << (AVG_ROW_LENGTH - 288)) | (1L << (CHECKSUM - 288)) | (1L << (PAGE_CHECKSUM - 288)) | (1L << (COMMENT - 288)) | (1L << (COMPRESSION - 288)) | (1L << (CONNECTION - 288)) | (1L << (DATA - 288)) | (1L << (DELAY_KEY_WRITE - 288)) | (1L << (ENCRYPTION - 288)) | (1L << (ENGINE - 288)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (INSERT_METHOD - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MIN_ROWS - 392)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (PACK_KEYS - 472)) | (1L << (PASSWORD - 472)) | (1L << (ROW_FORMAT - 472)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (STATS_AUTO_RECALC - 550)) | (1L << (STATS_PERSISTENT - 550)) | (1L << (STATS_SAMPLE_PAGES - 550)) | (1L << (STORAGE - 550)) | (1L << (TABLESPACE - 550)))) != 0) || _la==CHARSET) {
					{
					setState(1042);
					tableOption();
					setState(1049);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (CHARACTER - 23)) | (1L << (COLLATE - 23)) | (1L << (DEFAULT - 23)) | (1L << (INDEX - 23)))) != 0) || _la==UNION || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (AUTO_INCREMENT - 288)) | (1L << (AVG_ROW_LENGTH - 288)) | (1L << (CHECKSUM - 288)) | (1L << (PAGE_CHECKSUM - 288)) | (1L << (COMMENT - 288)) | (1L << (COMPRESSION - 288)) | (1L << (CONNECTION - 288)) | (1L << (DATA - 288)) | (1L << (DELAY_KEY_WRITE - 288)) | (1L << (ENCRYPTION - 288)) | (1L << (ENGINE - 288)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (INSERT_METHOD - 392)) | (1L << (KEY_BLOCK_SIZE - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MIN_ROWS - 392)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (PACK_KEYS - 472)) | (1L << (PASSWORD - 472)) | (1L << (ROW_FORMAT - 472)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (STATS_AUTO_RECALC - 550)) | (1L << (STATS_PERSISTENT - 550)) | (1L << (STATS_SAMPLE_PAGES - 550)) | (1L << (STORAGE - 550)) | (1L << (TABLESPACE - 550)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1044);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1043);
							match(COMMA);
							}
						}

						setState(1046);
						tableOption();
						}
						}
						setState(1051);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1054);
					partitionDefinitions();
					}
				}

				setState(1058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1057);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1060);
					match(AS);
					}
				}

				setState(1063);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1065);
				match(CREATE);
				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1066);
					match(TEMPORARY);
					}
				}

				setState(1069);
				match(TABLE);
				setState(1071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1070);
					ifNotExists();
					}
				}

				setState(1073);
				tableName();
				setState(1074);
				createDefinitions();
				setState(1085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1075);
					tableOption();
					setState(1082);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1077);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1076);
								match(COMMA);
								}
							}

							setState(1079);
							tableOption();
							}
							} 
						}
						setState(1084);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					}
					}
					break;
				}
				setState(1088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1087);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(GBaseParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			match(CREATE);
			setState(1093);
			match(TABLESPACE);
			setState(1094);
			uid();
			setState(1095);
			match(ADD);
			setState(1096);
			match(DATAFILE);
			setState(1097);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1098);
				match(FILE_BLOCK_SIZE);
				setState(1099);
				match(EQUAL_SYMBOL);
				setState(1100);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1103);
				match(ENGINE);
				setState(1105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1104);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1107);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(GBaseParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(GBaseParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(GBaseParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(GBaseParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1110);
			match(CREATE);
			setState(1111);
			match(TABLESPACE);
			setState(1112);
			uid();
			setState(1113);
			match(ADD);
			setState(1114);
			match(DATAFILE);
			setState(1115);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1116);
			match(USE);
			setState(1117);
			match(LOGFILE);
			setState(1118);
			match(GROUP);
			setState(1119);
			uid();
			setState(1125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1120);
				match(EXTENT_SIZE);
				setState(1122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1121);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1124);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1127);
				match(INITIAL_SIZE);
				setState(1129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1128);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1131);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1134);
				match(AUTOEXTEND_SIZE);
				setState(1136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1135);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1138);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1141);
				match(MAX_SIZE);
				setState(1143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1142);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1145);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1148);
				match(NODEGROUP);
				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1149);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1152);
				uid();
				}
			}

			setState(1156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1155);
				match(WAIT);
				}
			}

			setState(1163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1158);
				match(COMMENT);
				setState(1160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1159);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1162);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1165);
			match(ENGINE);
			setState(1167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1166);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1169);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(GBaseParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(GBaseParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(GBaseParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(GBaseParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(GBaseParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1171);
			match(CREATE);
			setState(1173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1172);
				ownerStatement();
				}
			}

			setState(1175);
			match(TRIGGER);
			setState(1176);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1177);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1178);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1179);
			match(ON);
			setState(1180);
			tableName();
			setState(1181);
			match(FOR);
			setState(1182);
			match(EACH);
			setState(1183);
			match(ROW);
			setState(1186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1184);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1185);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1188);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(GBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(GBaseParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(GBaseParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(GBaseParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(GBaseParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1190);
			match(CREATE);
			setState(1193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1191);
				match(OR);
				setState(1192);
				match(REPLACE);
				}
			}

			setState(1198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1195);
				match(ALGORITHM);
				setState(1196);
				match(EQUAL_SYMBOL);
				setState(1197);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1200);
				ownerStatement();
				}
			}

			setState(1206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1203);
				match(SQL);
				setState(1204);
				match(SECURITY);
				setState(1205);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1208);
			match(VIEW);
			setState(1209);
			fullId();
			setState(1214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1210);
				match(LR_BRACKET);
				setState(1211);
				uidList();
				setState(1212);
				match(RR_BRACKET);
				}
			}

			setState(1216);
			match(AS);
			setState(1217);
			selectStatement();
			setState(1224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1218);
				match(WITH);
				setState(1220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1219);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1222);
				match(CHECK);
				setState(1223);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1226);
					match(DEFAULT);
					}
				}

				setState(1232);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1229);
					match(CHARACTER);
					setState(1230);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1231);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1234);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1239);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1237);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1238);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1241);
					match(DEFAULT);
					}
				}

				setState(1244);
				match(COLLATE);
				setState(1246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1245);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1248);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(GBaseParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			match(DEFINER);
			setState(1252);
			match(EQUAL_SYMBOL);
			setState(1259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				setState(1253);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1254);
				match(CURRENT_USER);
				setState(1257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1255);
					match(LR_BRACKET);
					setState(1256);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(GBaseParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(GBaseParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(GBaseParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(GBaseParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			setState(1295);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1261);
				match(AT);
				setState(1262);
				timestampValue();
				setState(1266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1263);
					intervalExpr();
					}
					}
					setState(1268);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1269);
				match(EVERY);
				setState(1272);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1270);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1271);
					expression(0);
					}
					break;
				}
				setState(1274);
				intervalType();
				setState(1283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1275);
					match(STARTS);
					setState(1276);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1280);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1277);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1282);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1285);
					match(ENDS);
					setState(1286);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1290);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1287);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1292);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestampValue);
		try {
			setState(1301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1297);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1298);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1299);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1300);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(GBaseParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(GBaseParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1303);
			match(PLUS);
			setState(1304);
			match(INTERVAL);
			setState(1307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1305);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1306);
				expression(0);
				}
				break;
			}
			setState(1309);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(GBaseParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(GBaseParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(GBaseParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(GBaseParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(GBaseParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(GBaseParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(GBaseParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(GBaseParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(GBaseParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(GBaseParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(GBaseParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalType);
		try {
			setState(1324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1311);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1312);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1313);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1314);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1315);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1316);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1317);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1318);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1319);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1320);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1321);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1322);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1323);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(GBaseParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(GBaseParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_enableType);
		try {
			setState(1331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1326);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1327);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1328);
				match(DISABLE);
				setState(1329);
				match(ON);
				setState(1330);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(GBaseParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333);
			match(USING);
			setState(1334);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(GBaseParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(GBaseParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(GBaseParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(GBaseParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			setState(1349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1336);
				match(KEY_BLOCK_SIZE);
				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1337);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1340);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1341);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1342);
				match(WITH);
				setState(1343);
				match(PARSER);
				setState(1344);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1345);
				match(COMMENT);
				setState(1346);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1347);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1348);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode OUT() { return getToken(GBaseParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(GBaseParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (IN - 72)) | (1L << (INOUT - 72)) | (1L << (OUT - 72)))) != 0)) {
				{
				setState(1351);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (IN - 72)) | (1L << (INOUT - 72)) | (1L << (OUT - 72)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1354);
			uid();
			setState(1355);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1357);
			uid();
			setState(1358);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(GBaseParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(GBaseParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(GBaseParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode READS() { return getToken(GBaseParser.READS, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(GBaseParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			setState(1383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1360);
				match(COMMENT);
				setState(1361);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1362);
				match(LANGUAGE);
				setState(1363);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1364);
					match(NOT);
					}
				}

				setState(1367);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1378);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1368);
					match(CONTAINS);
					setState(1369);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1370);
					match(NO);
					setState(1371);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1372);
					match(READS);
					setState(1373);
					match(SQL);
					setState(1374);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1375);
					match(MODIFIES);
					setState(1376);
					match(SQL);
					setState(1377);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1380);
				match(SQL);
				setState(1381);
				match(SECURITY);
				setState(1382);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(GBaseParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(GBaseParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(GBaseParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(GBaseParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_serverOption);
		try {
			setState(1399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1385);
				match(HOST);
				setState(1386);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1387);
				match(DATABASE);
				setState(1388);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1389);
				match(USER);
				setState(1390);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1391);
				match(PASSWORD);
				setState(1392);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1393);
				match(SOCKET);
				setState(1394);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1395);
				match(OWNER);
				setState(1396);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1397);
				match(PORT);
				setState(1398);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1401);
			match(LR_BRACKET);
			setState(1402);
			createDefinition();
			setState(1407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1403);
				match(COMMA);
				setState(1404);
				createDefinition();
				}
				}
				setState(1409);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1410);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinition);
		try {
			setState(1417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1412);
				uid();
				setState(1413);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1415);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1416);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			dataType();
			setState(1423);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1420);
					columnConstraint();
					}
					} 
				}
				setState(1425);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(GBaseParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(GBaseParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(GBaseParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(GBaseParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(GBaseParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(GBaseParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(GBaseParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(GBaseParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(GBaseParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			setState(1477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1426);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1427);
				match(DEFAULT);
				setState(1428);
				defaultValue();
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1433);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1429);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1430);
					match(ON);
					setState(1431);
					match(UPDATE);
					setState(1432);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1435);
					match(PRIMARY);
					}
				}

				setState(1438);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1439);
				match(UNIQUE);
				setState(1441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1440);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1443);
				match(COMMENT);
				setState(1444);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1445);
				match(COLUMN_FORMAT);
				setState(1446);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1447);
				match(STORAGE);
				setState(1448);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1449);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1450);
				match(COLLATE);
				setState(1451);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1452);
					match(GENERATED);
					setState(1453);
					match(ALWAYS);
					}
				}

				setState(1456);
				match(AS);
				setState(1457);
				match(LR_BRACKET);
				setState(1458);
				expression(0);
				setState(1459);
				match(RR_BRACKET);
				setState(1461);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1460);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1463);
				match(SERIAL);
				setState(1464);
				match(DEFAULT);
				setState(1465);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1466);
					match(CONSTRAINT);
					setState(1468);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(1467);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1472);
				match(CHECK);
				setState(1473);
				match(LR_BRACKET);
				setState(1474);
				expression(0);
				setState(1475);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			setState(1548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1479);
					match(CONSTRAINT);
					setState(1481);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(1480);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1485);
				match(PRIMARY);
				setState(1486);
				match(KEY);
				setState(1488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(1487);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1490);
					indexType();
					}
				}

				setState(1493);
				indexColumnNames();
				setState(1497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1494);
					indexOption();
					}
					}
					setState(1499);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1500);
					match(CONSTRAINT);
					setState(1502);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(1501);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1506);
				match(UNIQUE);
				setState(1508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1507);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(1510);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1513);
					indexType();
					}
				}

				setState(1516);
				indexColumnNames();
				setState(1520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1517);
					indexOption();
					}
					}
					setState(1522);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1523);
					match(CONSTRAINT);
					setState(1525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(1524);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1529);
				match(FOREIGN);
				setState(1530);
				match(KEY);
				setState(1532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(1531);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1534);
				indexColumnNames();
				setState(1535);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1537);
					match(CONSTRAINT);
					setState(1539);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(1538);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1543);
				match(CHECK);
				setState(1544);
				match(LR_BRACKET);
				setState(1545);
				expression(0);
				setState(1546);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(GBaseParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(GBaseParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(GBaseParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(GBaseParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1550);
			match(REFERENCES);
			setState(1551);
			tableName();
			setState(1553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1552);
				indexColumnNames();
				}
				break;
			}
			setState(1557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1555);
				match(MATCH);
				setState(1556);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1559);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(GBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(GBaseParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceAction);
		try {
			setState(1578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1562);
				match(ON);
				setState(1563);
				match(DELETE);
				setState(1564);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1565);
					match(ON);
					setState(1566);
					match(UPDATE);
					setState(1567);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1570);
				match(ON);
				setState(1571);
				match(UPDATE);
				setState(1572);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					setState(1573);
					match(ON);
					setState(1574);
					match(DELETE);
					setState(1575);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(GBaseParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(GBaseParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceControlType);
		try {
			setState(1586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1580);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1581);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1582);
				match(SET);
				setState(1583);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1584);
				match(NO);
				setState(1585);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(GBaseParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(GBaseParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1588);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(1589);
					uid();
					}
				}

				setState(1593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1592);
					indexType();
					}
				}

				setState(1595);
				indexColumnNames();
				setState(1599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1596);
					indexOption();
					}
					}
					setState(1601);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1602);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1603);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(1606);
					uid();
					}
				}

				setState(1609);
				indexColumnNames();
				setState(1613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1610);
					indexOption();
					}
					}
					setState(1615);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(GBaseParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(GBaseParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(GBaseParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(GBaseParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(GBaseParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(GBaseParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(GBaseParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(GBaseParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(GBaseParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(GBaseParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(GBaseParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(GBaseParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(GBaseParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(GBaseParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(GBaseParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(GBaseParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(GBaseParser.COMPACT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(GBaseParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(GBaseParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(GBaseParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(GBaseParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			setState(1762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1618);
				match(ENGINE);
				setState(1620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1619);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1622);
				engineName();
				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1623);
				match(AUTO_INCREMENT);
				setState(1625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1624);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1627);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1628);
				match(AVG_ROW_LENGTH);
				setState(1630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1629);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1632);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1633);
					match(DEFAULT);
					}
				}

				setState(1639);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1636);
					match(CHARACTER);
					setState(1637);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1638);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1641);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1646);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1644);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1645);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1648);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1649);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1652);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1653);
					match(DEFAULT);
					}
				}

				setState(1656);
				match(COLLATE);
				setState(1658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1657);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1660);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1661);
				match(COMMENT);
				setState(1663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1662);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1665);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1666);
				match(COMPRESSION);
				setState(1668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1667);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1670);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1671);
				match(CONNECTION);
				setState(1673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1672);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1675);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1676);
				match(DATA);
				setState(1677);
				match(DIRECTORY);
				setState(1679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1678);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1681);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1682);
				match(DELAY_KEY_WRITE);
				setState(1684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1683);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1686);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1687);
				match(ENCRYPTION);
				setState(1689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1688);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1691);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1692);
				match(INDEX);
				setState(1693);
				match(DIRECTORY);
				setState(1695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1694);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1697);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1698);
				match(INSERT_METHOD);
				setState(1700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1699);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1702);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1703);
				match(KEY_BLOCK_SIZE);
				setState(1705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1704);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1707);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1708);
				match(MAX_ROWS);
				setState(1710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1709);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1712);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1713);
				match(MIN_ROWS);
				setState(1715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1714);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1717);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1718);
				match(PACK_KEYS);
				setState(1720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1719);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1722);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1723);
				match(PASSWORD);
				setState(1725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1724);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1727);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1728);
				match(ROW_FORMAT);
				setState(1730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1729);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1732);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (COMPACT - 315)) | (1L << (COMPRESSED - 315)) | (1L << (DYNAMIC - 315)) | (1L << (FIXED - 315)))) != 0) || _la==REDUNDANT) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1733);
				match(STATS_AUTO_RECALC);
				setState(1735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1734);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1737);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1738);
				match(STATS_PERSISTENT);
				setState(1740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1739);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1742);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1743);
				match(STATS_SAMPLE_PAGES);
				setState(1745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1744);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1747);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1748);
				match(TABLESPACE);
				setState(1749);
				uid();
				setState(1751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					setState(1750);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1753);
				tablespaceStorage();
				}
				break;
			case 26:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1754);
				match(UNION);
				setState(1756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1755);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1758);
				match(LR_BRACKET);
				setState(1759);
				tables();
				setState(1760);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(GBaseParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764);
			match(STORAGE);
			setState(1765);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(GBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(GBaseParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(GBaseParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(GBaseParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(GBaseParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1767);
			match(PARTITION);
			setState(1768);
			match(BY);
			setState(1769);
			partitionFunctionDefinition();
			setState(1772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1770);
				match(PARTITIONS);
				setState(1771);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1774);
				match(SUBPARTITION);
				setState(1775);
				match(BY);
				setState(1776);
				subpartitionFunctionDefinition();
				setState(1779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1777);
					match(SUBPARTITIONS);
					setState(1778);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				setState(1783);
				match(LR_BRACKET);
				setState(1784);
				partitionDefinition();
				setState(1789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1785);
					match(COMMA);
					setState(1786);
					partitionDefinition();
					}
					}
					setState(1791);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1792);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(GBaseParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(GBaseParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(GBaseParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1796);
					match(LINEAR);
					}
				}

				setState(1799);
				match(HASH);
				setState(1800);
				match(LR_BRACKET);
				setState(1801);
				expression(0);
				setState(1802);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1804);
					match(LINEAR);
					}
				}

				setState(1807);
				match(KEY);
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1808);
					match(ALGORITHM);
					setState(1809);
					match(EQUAL_SYMBOL);
					setState(1810);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1813);
				match(LR_BRACKET);
				setState(1814);
				uidList();
				setState(1815);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1817);
				match(RANGE);
				setState(1827);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1818);
					match(LR_BRACKET);
					setState(1819);
					expression(0);
					setState(1820);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1822);
					match(COLUMNS);
					setState(1823);
					match(LR_BRACKET);
					setState(1824);
					uidList();
					setState(1825);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1829);
				match(LIST);
				setState(1839);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1830);
					match(LR_BRACKET);
					setState(1831);
					expression(0);
					setState(1832);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1834);
					match(COLUMNS);
					setState(1835);
					match(LR_BRACKET);
					setState(1836);
					uidList();
					setState(1837);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(GBaseParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1843);
					match(LINEAR);
					}
				}

				setState(1846);
				match(HASH);
				setState(1847);
				match(LR_BRACKET);
				setState(1848);
				expression(0);
				setState(1849);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1851);
					match(LINEAR);
					}
				}

				setState(1854);
				match(KEY);
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1855);
					match(ALGORITHM);
					setState(1856);
					match(EQUAL_SYMBOL);
					setState(1857);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1860);
				match(LR_BRACKET);
				setState(1861);
				uidList();
				setState(1862);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisionContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(GBaseParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(GBaseParser.THAN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionComparision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionComparision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionComparision(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			setState(1997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1866);
				match(PARTITION);
				setState(1867);
				uid();
				setState(1868);
				match(VALUES);
				setState(1869);
				match(LESS);
				setState(1870);
				match(THAN);
				setState(1871);
				match(LR_BRACKET);
				setState(1872);
				partitionDefinerAtom();
				setState(1877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1873);
					match(COMMA);
					setState(1874);
					partitionDefinerAtom();
					}
					}
					setState(1879);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1880);
				match(RR_BRACKET);
				setState(1884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (COMMENT - 313)) | (1L << (DATA - 313)) | (1L << (ENGINE - 313)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (MAX_ROWS - 436)) | (1L << (MIN_ROWS - 436)) | (1L << (NODEGROUP - 436)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1881);
					partitionOption();
					}
					}
					setState(1886);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1887);
					subpartitionDefinition();
					setState(1892);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,217,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1888);
							match(COMMA);
							setState(1889);
							subpartitionDefinition();
							}
							} 
						}
						setState(1894);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,217,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1897);
				match(PARTITION);
				setState(1898);
				uid();
				setState(1899);
				match(VALUES);
				setState(1900);
				match(LESS);
				setState(1901);
				match(THAN);
				setState(1902);
				partitionDefinerAtom();
				setState(1906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (COMMENT - 313)) | (1L << (DATA - 313)) | (1L << (ENGINE - 313)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (MAX_ROWS - 436)) | (1L << (MIN_ROWS - 436)) | (1L << (NODEGROUP - 436)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1903);
					partitionOption();
					}
					}
					setState(1908);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1909);
					subpartitionDefinition();
					setState(1914);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1910);
							match(COMMA);
							setState(1911);
							subpartitionDefinition();
							}
							} 
						}
						setState(1916);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1919);
				match(PARTITION);
				setState(1920);
				uid();
				setState(1921);
				match(VALUES);
				setState(1922);
				match(IN);
				setState(1923);
				match(LR_BRACKET);
				setState(1924);
				partitionDefinerAtom();
				setState(1929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1925);
					match(COMMA);
					setState(1926);
					partitionDefinerAtom();
					}
					}
					setState(1931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1932);
				match(RR_BRACKET);
				setState(1936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (COMMENT - 313)) | (1L << (DATA - 313)) | (1L << (ENGINE - 313)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (MAX_ROWS - 436)) | (1L << (MIN_ROWS - 436)) | (1L << (NODEGROUP - 436)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1933);
					partitionOption();
					}
					}
					setState(1938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1939);
					subpartitionDefinition();
					setState(1944);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1940);
							match(COMMA);
							setState(1941);
							subpartitionDefinition();
							}
							} 
						}
						setState(1946);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1949);
				match(PARTITION);
				setState(1950);
				uid();
				setState(1951);
				match(VALUES);
				setState(1952);
				match(IN);
				setState(1953);
				match(LR_BRACKET);
				setState(1954);
				partitionDefinerVector();
				setState(1959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1955);
					match(COMMA);
					setState(1956);
					partitionDefinerVector();
					}
					}
					setState(1961);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1962);
				match(RR_BRACKET);
				setState(1966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (COMMENT - 313)) | (1L << (DATA - 313)) | (1L << (ENGINE - 313)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (MAX_ROWS - 436)) | (1L << (MIN_ROWS - 436)) | (1L << (NODEGROUP - 436)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1963);
					partitionOption();
					}
					}
					setState(1968);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1969);
					subpartitionDefinition();
					setState(1974);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1970);
							match(COMMA);
							setState(1971);
							subpartitionDefinition();
							}
							} 
						}
						setState(1976);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
					}
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1979);
				match(PARTITION);
				setState(1980);
				uid();
				setState(1984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (COMMENT - 313)) | (1L << (DATA - 313)) | (1L << (ENGINE - 313)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (MAX_ROWS - 436)) | (1L << (MIN_ROWS - 436)) | (1L << (NODEGROUP - 436)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1981);
					partitionOption();
					}
					}
					setState(1986);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1987);
					subpartitionDefinition();
					setState(1992);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1988);
							match(COMMA);
							setState(1989);
							subpartitionDefinition();
							}
							} 
						}
						setState(1994);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(GBaseParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionDefinerAtom);
		try {
			setState(2002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1999);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2000);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2001);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2004);
			match(LR_BRACKET);
			setState(2005);
			partitionDefinerAtom();
			setState(2008); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2006);
				match(COMMA);
				setState(2007);
				partitionDefinerAtom();
				}
				}
				setState(2010); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2012);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(GBaseParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2014);
			match(SUBPARTITION);
			setState(2015);
			uid();
			setState(2019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (COMMENT - 313)) | (1L << (DATA - 313)) | (1L << (ENGINE - 313)))) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & ((1L << (MAX_ROWS - 436)) | (1L << (MIN_ROWS - 436)) | (1L << (NODEGROUP - 436)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2016);
				partitionOption();
				}
				}
				setState(2021);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(GBaseParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(GBaseParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionOption);
		int _la;
		try {
			setState(2067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2022);
					match(STORAGE);
					}
				}

				setState(2025);
				match(ENGINE);
				setState(2027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2026);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2029);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2030);
				match(COMMENT);
				setState(2032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2031);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2034);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2035);
				match(DATA);
				setState(2036);
				match(DIRECTORY);
				setState(2038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2037);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2040);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2041);
				match(INDEX);
				setState(2042);
				match(DIRECTORY);
				setState(2044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2043);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2046);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2047);
				match(MAX_ROWS);
				setState(2049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2048);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2051);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2052);
				match(MIN_ROWS);
				setState(2054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2053);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2056);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2057);
				match(TABLESPACE);
				setState(2059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2058);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2061);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2062);
				match(NODEGROUP);
				setState(2064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2063);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2066);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(GBaseParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alterDatabase);
		int _la;
		try {
			setState(2087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2069);
				match(ALTER);
				setState(2070);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2071);
					uid();
					}
					break;
				}
				setState(2075); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2074);
					createDatabaseOption();
					}
					}
					setState(2077); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2079);
				match(ALTER);
				setState(2080);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2081);
				uid();
				setState(2082);
				match(UPGRADE);
				setState(2083);
				match(DATA);
				setState(2084);
				match(DIRECTORY);
				setState(2085);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(GBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(GBaseParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(GBaseParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(GBaseParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(GBaseParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2089);
			match(ALTER);
			setState(2091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2090);
				ownerStatement();
				}
			}

			setState(2093);
			match(EVENT);
			setState(2094);
			fullId();
			setState(2098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2095);
				match(ON);
				setState(2096);
				match(SCHEDULE);
				setState(2097);
				scheduleExpression();
				}
				break;
			}
			setState(2106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2100);
				match(ON);
				setState(2101);
				match(COMPLETION);
				setState(2103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2102);
					match(NOT);
					}
				}

				setState(2105);
				match(PRESERVE);
				}
			}

			setState(2111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2108);
				match(RENAME);
				setState(2109);
				match(TO);
				setState(2110);
				fullId();
				}
				break;
			}
			setState(2114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2113);
				enableType();
				}
			}

			setState(2118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2116);
				match(COMMENT);
				setState(2117);
				match(STRING_LITERAL);
				}
			}

			setState(2122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				{
				setState(2120);
				match(DO);
				setState(2121);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			match(ALTER);
			setState(2125);
			match(FUNCTION);
			setState(2126);
			fullId();
			setState(2130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (MODIFIES - 101)) | (1L << (NOT - 101)) | (1L << (READS - 101)) | (1L << (SQL - 101)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2127);
				routineOption();
				}
				}
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(GBaseParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(GBaseParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(GBaseParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2133);
			match(ALTER);
			setState(2134);
			match(INSTANCE);
			setState(2135);
			match(ROTATE);
			setState(2136);
			match(INNODB);
			setState(2137);
			match(MASTER);
			setState(2138);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(GBaseParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140);
			match(ALTER);
			setState(2141);
			match(LOGFILE);
			setState(2142);
			match(GROUP);
			setState(2143);
			uid();
			setState(2144);
			match(ADD);
			setState(2145);
			match(UNDOFILE);
			setState(2146);
			match(STRING_LITERAL);
			setState(2152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2147);
				match(INITIAL_SIZE);
				setState(2149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2148);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2151);
				fileSizeLiteral();
				}
			}

			setState(2155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2154);
				match(WAIT);
				}
			}

			setState(2157);
			match(ENGINE);
			setState(2159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2158);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2161);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			match(ALTER);
			setState(2164);
			match(PROCEDURE);
			setState(2165);
			fullId();
			setState(2169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (MODIFIES - 101)) | (1L << (NOT - 101)) | (1L << (READS - 101)) | (1L << (SQL - 101)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2166);
				routineOption();
				}
				}
				setState(2171);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(GBaseParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2172);
			match(ALTER);
			setState(2173);
			match(SERVER);
			setState(2174);
			uid();
			setState(2175);
			match(OPTIONS);
			setState(2176);
			match(LR_BRACKET);
			setState(2177);
			serverOption();
			setState(2182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2178);
				match(COMMA);
				setState(2179);
				serverOption();
				}
				}
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2185);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			match(ALTER);
			setState(2189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2188);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2191);
				match(IGNORE);
				}
			}

			setState(2194);
			match(TABLE);
			setState(2195);
			tableName();
			setState(2204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(2196);
				alterSpecification();
				setState(2201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2197);
					match(COMMA);
					setState(2198);
					alterSpecification();
					}
					}
					setState(2203);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2206);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2209);
			match(ALTER);
			setState(2210);
			match(TABLESPACE);
			setState(2211);
			uid();
			setState(2212);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2213);
			match(DATAFILE);
			setState(2214);
			match(STRING_LITERAL);
			setState(2218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2215);
				match(INITIAL_SIZE);
				setState(2216);
				match(EQUAL_SYMBOL);
				setState(2217);
				fileSizeLiteral();
				}
			}

			setState(2221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2220);
				match(WAIT);
				}
			}

			setState(2223);
			match(ENGINE);
			setState(2225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2224);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2227);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(GBaseParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(GBaseParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(GBaseParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(GBaseParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			match(ALTER);
			setState(2233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2230);
				match(ALGORITHM);
				setState(2231);
				match(EQUAL_SYMBOL);
				setState(2232);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2235);
				ownerStatement();
				}
			}

			setState(2241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2238);
				match(SQL);
				setState(2239);
				match(SECURITY);
				setState(2240);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2243);
			match(VIEW);
			setState(2244);
			fullId();
			setState(2249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2245);
				match(LR_BRACKET);
				setState(2246);
				uidList();
				setState(2247);
				match(RR_BRACKET);
				}
			}

			setState(2251);
			match(AS);
			setState(2252);
			selectStatement();
			setState(2259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2253);
				match(WITH);
				setState(2255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2254);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2257);
				match(CHECK);
				setState(2258);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(GBaseParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(GBaseParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(GBaseParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(GBaseParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(GBaseParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(GBaseParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(GBaseParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(GBaseParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(GBaseParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(GBaseParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAlterIndexVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAlterIndexVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAlterIndexVisibility(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(GBaseParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(GBaseParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(GBaseParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(GBaseParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(GBaseParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(GBaseParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(GBaseParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(GBaseParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(GBaseParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(GBaseParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(GBaseParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(GBaseParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(GBaseParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(GBaseParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(GBaseParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(GBaseParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(GBaseParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(GBaseParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(GBaseParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(GBaseParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(GBaseParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(GBaseParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(GBaseParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(GBaseParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(GBaseParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(GBaseParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(GBaseParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2261);
				tableOption();
				setState(2268);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2263);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2262);
							match(COMMA);
							}
						}

						setState(2265);
						tableOption();
						}
						} 
					}
					setState(2270);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2271);
				match(ADD);
				setState(2273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2272);
					match(COLUMN);
					}
				}

				setState(2275);
				uid();
				setState(2276);
				columnDefinition();
				setState(2280);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2277);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2278);
					match(AFTER);
					setState(2279);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2282);
				match(ADD);
				setState(2284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2283);
					match(COLUMN);
					}
				}

				setState(2286);
				match(LR_BRACKET);
				setState(2287);
				uid();
				setState(2288);
				columnDefinition();
				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2289);
					match(COMMA);
					setState(2290);
					uid();
					setState(2291);
					columnDefinition();
					}
					}
					setState(2297);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2298);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2300);
				match(ADD);
				setState(2301);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(2302);
					uid();
					}
				}

				setState(2306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2305);
					indexType();
					}
				}

				setState(2308);
				indexColumnNames();
				setState(2312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2309);
					indexOption();
					}
					}
					setState(2314);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2315);
				match(ADD);
				setState(2320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2316);
					match(CONSTRAINT);
					setState(2318);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(2317);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2322);
				match(PRIMARY);
				setState(2323);
				match(KEY);
				setState(2325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(2324);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2327);
					indexType();
					}
				}

				setState(2330);
				indexColumnNames();
				setState(2334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2331);
					indexOption();
					}
					}
					setState(2336);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2337);
				match(ADD);
				setState(2342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2338);
					match(CONSTRAINT);
					setState(2340);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(2339);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2344);
				match(UNIQUE);
				setState(2346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2345);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(2348);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2351);
					indexType();
					}
				}

				setState(2354);
				indexColumnNames();
				setState(2358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2355);
					indexOption();
					}
					}
					setState(2360);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2361);
				match(ADD);
				setState(2362);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2363);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(2366);
					uid();
					}
				}

				setState(2369);
				indexColumnNames();
				setState(2373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2370);
					indexOption();
					}
					}
					setState(2375);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2376);
				match(ADD);
				setState(2381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2377);
					match(CONSTRAINT);
					setState(2379);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(2378);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2383);
				match(FOREIGN);
				setState(2384);
				match(KEY);
				setState(2386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(2385);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2388);
				indexColumnNames();
				setState(2389);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2391);
				match(ADD);
				setState(2396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2392);
					match(CONSTRAINT);
					setState(2394);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
						{
						setState(2393);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2398);
				match(CHECK);
				setState(2399);
				match(LR_BRACKET);
				setState(2400);
				expression(0);
				setState(2401);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2403);
				match(ALGORITHM);
				setState(2405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2404);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2407);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2408);
				match(ALTER);
				setState(2410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2409);
					match(COLUMN);
					}
				}

				setState(2412);
				uid();
				setState(2418);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2413);
					match(SET);
					setState(2414);
					match(DEFAULT);
					setState(2415);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2416);
					match(DROP);
					setState(2417);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2420);
				match(CHANGE);
				setState(2422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2421);
					match(COLUMN);
					}
				}

				setState(2424);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2425);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2426);
				columnDefinition();
				setState(2430);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2427);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2428);
					match(AFTER);
					setState(2429);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2432);
				match(RENAME);
				setState(2433);
				match(COLUMN);
				setState(2434);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2435);
				match(TO);
				setState(2436);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2438);
				match(LOCK);
				setState(2440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2439);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2442);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2443);
				match(MODIFY);
				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2444);
					match(COLUMN);
					}
				}

				setState(2447);
				uid();
				setState(2448);
				columnDefinition();
				setState(2452);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2449);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2450);
					match(AFTER);
					setState(2451);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2454);
				match(DROP);
				setState(2456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2455);
					match(COLUMN);
					}
				}

				setState(2458);
				uid();
				setState(2460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2459);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2462);
				match(DROP);
				setState(2463);
				match(PRIMARY);
				setState(2464);
				match(KEY);
				}
				break;
			case 18:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2465);
				match(RENAME);
				setState(2466);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2467);
				uid();
				setState(2468);
				match(TO);
				setState(2469);
				uid();
				}
				break;
			case 19:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2471);
				match(ALTER);
				setState(2472);
				match(INDEX);
				setState(2473);
				uid();
				setState(2474);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2476);
				match(DROP);
				setState(2477);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2478);
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2479);
				match(DROP);
				setState(2480);
				match(FOREIGN);
				setState(2481);
				match(KEY);
				setState(2482);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2483);
				match(DISABLE);
				setState(2484);
				match(KEYS);
				}
				break;
			case 23:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2485);
				match(ENABLE);
				setState(2486);
				match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2487);
				match(RENAME);
				setState(2489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2488);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(2491);
					uid();
					}
					break;
				case 2:
					{
					setState(2492);
					fullId();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2495);
				match(ORDER);
				setState(2496);
				match(BY);
				setState(2497);
				uidList();
				}
				break;
			case 26:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2498);
				match(CONVERT);
				setState(2499);
				match(TO);
				setState(2500);
				match(CHARACTER);
				setState(2501);
				match(SET);
				setState(2502);
				charsetName();
				setState(2505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2503);
					match(COLLATE);
					setState(2504);
					collationName();
					}
				}

				}
				break;
			case 27:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2507);
					match(DEFAULT);
					}
				}

				setState(2510);
				match(CHARACTER);
				setState(2511);
				match(SET);
				setState(2512);
				match(EQUAL_SYMBOL);
				setState(2513);
				charsetName();
				setState(2517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2514);
					match(COLLATE);
					setState(2515);
					match(EQUAL_SYMBOL);
					setState(2516);
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2519);
				match(DISCARD);
				setState(2520);
				match(TABLESPACE);
				}
				break;
			case 29:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2521);
				match(IMPORT);
				setState(2522);
				match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2523);
				match(FORCE);
				}
				break;
			case 31:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2524);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2525);
				match(VALIDATION);
				}
				break;
			case 32:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2526);
				match(ADD);
				setState(2527);
				match(PARTITION);
				setState(2528);
				match(LR_BRACKET);
				setState(2529);
				partitionDefinition();
				setState(2534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2530);
					match(COMMA);
					setState(2531);
					partitionDefinition();
					}
					}
					setState(2536);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2537);
				match(RR_BRACKET);
				}
				break;
			case 33:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2539);
				match(DROP);
				setState(2540);
				match(PARTITION);
				setState(2541);
				uidList();
				}
				break;
			case 34:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2542);
				match(DISCARD);
				setState(2543);
				match(PARTITION);
				setState(2546);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2544);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2545);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2548);
				match(TABLESPACE);
				}
				break;
			case 35:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2549);
				match(IMPORT);
				setState(2550);
				match(PARTITION);
				setState(2553);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2551);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2552);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2555);
				match(TABLESPACE);
				}
				break;
			case 36:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2556);
				match(TRUNCATE);
				setState(2557);
				match(PARTITION);
				setState(2560);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2558);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2559);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 37:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2562);
				match(COALESCE);
				setState(2563);
				match(PARTITION);
				setState(2564);
				decimalLiteral();
				}
				break;
			case 38:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2565);
				match(REORGANIZE);
				setState(2566);
				match(PARTITION);
				setState(2567);
				uidList();
				setState(2568);
				match(INTO);
				setState(2569);
				match(LR_BRACKET);
				setState(2570);
				partitionDefinition();
				setState(2575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2571);
					match(COMMA);
					setState(2572);
					partitionDefinition();
					}
					}
					setState(2577);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2578);
				match(RR_BRACKET);
				}
				break;
			case 39:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2580);
				match(EXCHANGE);
				setState(2581);
				match(PARTITION);
				setState(2582);
				uid();
				setState(2583);
				match(WITH);
				setState(2584);
				match(TABLE);
				setState(2585);
				tableName();
				setState(2588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2586);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2587);
					match(VALIDATION);
					}
				}

				}
				break;
			case 40:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2590);
				match(ANALYZE);
				setState(2591);
				match(PARTITION);
				setState(2594);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2592);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2593);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2596);
				match(CHECK);
				setState(2597);
				match(PARTITION);
				setState(2600);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2598);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2599);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2602);
				match(OPTIMIZE);
				setState(2603);
				match(PARTITION);
				setState(2606);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2604);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2605);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2608);
				match(REBUILD);
				setState(2609);
				match(PARTITION);
				setState(2612);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2610);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2611);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2614);
				match(REPAIR);
				setState(2615);
				match(PARTITION);
				setState(2618);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2616);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2617);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2620);
				match(REMOVE);
				setState(2621);
				match(PARTITIONING);
				}
				break;
			case 46:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2622);
				match(UPGRADE);
				setState(2623);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2626);
			match(DROP);
			setState(2627);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2628);
				ifExists();
				}
			}

			setState(2631);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(DROP);
			setState(2634);
			match(EVENT);
			setState(2636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2635);
				ifExists();
				}
			}

			setState(2638);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(GBaseParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(GBaseParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(GBaseParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(GBaseParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(GBaseParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(GBaseParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(GBaseParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(GBaseParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(GBaseParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(GBaseParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(GBaseParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(GBaseParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(GBaseParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(GBaseParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2640);
			match(DROP);
			setState(2641);
			match(INDEX);
			setState(2643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(2642);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2645);
			uid();
			setState(2646);
			match(ON);
			setState(2647);
			tableName();
			setState(2660);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2658);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2648);
						match(ALGORITHM);
						setState(2650);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2649);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2652);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2653);
						match(LOCK);
						setState(2655);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2654);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2657);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2662);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,340,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2663);
			match(DROP);
			setState(2664);
			match(LOGFILE);
			setState(2665);
			match(GROUP);
			setState(2666);
			uid();
			setState(2667);
			match(ENGINE);
			setState(2668);
			match(EQUAL_SYMBOL);
			setState(2669);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			match(DROP);
			setState(2672);
			match(PROCEDURE);
			setState(2674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2673);
				ifExists();
				}
			}

			setState(2676);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			match(DROP);
			setState(2679);
			match(FUNCTION);
			setState(2681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2680);
				ifExists();
				}
			}

			setState(2683);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2685);
			match(DROP);
			setState(2686);
			match(SERVER);
			setState(2688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2687);
				ifExists();
				}
			}

			setState(2690);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(GBaseParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			match(DROP);
			setState(2694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2693);
				match(TEMPORARY);
				}
			}

			setState(2696);
			match(TABLE);
			setState(2698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2697);
				ifExists();
				}
			}

			setState(2700);
			tables();
			setState(2702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2701);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			match(DROP);
			setState(2705);
			match(TABLESPACE);
			setState(2706);
			uid();
			setState(2712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2707);
				match(ENGINE);
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2708);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2711);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2714);
			match(DROP);
			setState(2715);
			match(TRIGGER);
			setState(2717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2716);
				ifExists();
				}
			}

			setState(2719);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(GBaseParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			match(DROP);
			setState(2722);
			match(VIEW);
			setState(2724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2723);
				ifExists();
				}
			}

			setState(2726);
			fullId();
			setState(2731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2727);
				match(COMMA);
				setState(2728);
				fullId();
				}
				}
				setState(2733);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2734);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2737);
			match(RENAME);
			setState(2738);
			match(TABLE);
			setState(2739);
			renameTableClause();
			setState(2744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2740);
				match(COMMA);
				setState(2741);
				renameTableClause();
				}
				}
				setState(2746);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2747);
			tableName();
			setState(2748);
			match(TO);
			setState(2749);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(GBaseParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2751);
			match(TRUNCATE);
			setState(2753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2752);
				match(TABLE);
				}
			}

			setState(2755);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(GBaseParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2757);
			match(CALL);
			setState(2758);
			fullId();
			setState(2765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(2759);
				match(LR_BRACKET);
				setState(2762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(2760);
					constants();
					}
					break;
				case 2:
					{
					setState(2761);
					expressions();
					}
					break;
				}
				setState(2764);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_deleteStatement);
		try {
			setState(2769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2767);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2768);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2771);
			match(DO);
			setState(2772);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_handlerStatement);
		try {
			setState(2778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2774);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2775);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2776);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2777);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(GBaseParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(GBaseParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(GBaseParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2780);
			match(INSERT);
			setState(2782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (DELAYED - 40)) | (1L << (HIGH_PRIORITY - 40)) | (1L << (LOW_PRIORITY - 40)))) != 0)) {
				{
				setState(2781);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (DELAYED - 40)) | (1L << (HIGH_PRIORITY - 40)) | (1L << (LOW_PRIORITY - 40)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2784);
				match(IGNORE);
				}
			}

			setState(2788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2787);
				match(INTO);
				}
			}

			setState(2790);
			tableName();
			setState(2797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2791);
				match(PARTITION);
				setState(2792);
				match(LR_BRACKET);
				setState(2794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(2793);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(2796);
				match(RR_BRACKET);
				}
			}

			setState(2815);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(2799);
					match(LR_BRACKET);
					setState(2800);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(2801);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2805);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2806);
				match(SET);
				setState(2807);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2808);
					match(COMMA);
					setState(2809);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2814);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2817);
				match(ON);
				setState(2818);
				match(DUPLICATE);
				setState(2819);
				match(KEY);
				setState(2820);
				match(UPDATE);
				setState(2821);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2822);
					match(COMMA);
					setState(2823);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2828);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(GBaseParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(GBaseParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(GBaseParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(GBaseParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(GBaseParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(GBaseParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(GBaseParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(GBaseParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			match(LOAD);
			setState(2832);
			match(DATA);
			setState(2834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2833);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2836);
				match(LOCAL);
				}
			}

			setState(2839);
			match(INFILE);
			setState(2840);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2841);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2844);
			match(INTO);
			setState(2845);
			match(TABLE);
			setState(2846);
			tableName();
			setState(2852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2847);
				match(PARTITION);
				setState(2848);
				match(LR_BRACKET);
				setState(2849);
				uidList();
				setState(2850);
				match(RR_BRACKET);
				}
			}

			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2854);
				match(CHARACTER);
				setState(2855);
				match(SET);
				setState(2856);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2859);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2861); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2860);
					selectFieldsInto();
					}
					}
					setState(2863); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2867);
				match(LINES);
				setState(2869); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2868);
					selectLinesInto();
					}
					}
					setState(2871); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2875);
				match(IGNORE);
				setState(2876);
				decimalLiteral();
				setState(2877);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(2881);
				match(LR_BRACKET);
				setState(2882);
				assignmentField();
				setState(2887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2883);
					match(COMMA);
					setState(2884);
					assignmentField();
					}
					}
					setState(2889);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2890);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(2894);
				match(SET);
				setState(2895);
				updatedElement();
				setState(2900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2896);
					match(COMMA);
					setState(2897);
					updatedElement();
					}
					}
					setState(2902);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(GBaseParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(GBaseParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(GBaseParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(GBaseParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(GBaseParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(GBaseParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(GBaseParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(GBaseParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(GBaseParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(GBaseParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(GBaseParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2905);
			match(LOAD);
			setState(2906);
			match(XML);
			setState(2908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2907);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2910);
				match(LOCAL);
				}
			}

			setState(2913);
			match(INFILE);
			setState(2914);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2915);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2918);
			match(INTO);
			setState(2919);
			match(TABLE);
			setState(2920);
			tableName();
			setState(2924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2921);
				match(CHARACTER);
				setState(2922);
				match(SET);
				setState(2923);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2926);
				match(ROWS);
				setState(2927);
				match(IDENTIFIED);
				setState(2928);
				match(BY);
				setState(2929);
				match(LESS_SYMBOL);
				setState(2930);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(2931);
				match(GREATER_SYMBOL);
				}
			}

			setState(2938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2934);
				match(IGNORE);
				setState(2935);
				decimalLiteral();
				setState(2936);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(2940);
				match(LR_BRACKET);
				setState(2941);
				assignmentField();
				setState(2946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2942);
					match(COMMA);
					setState(2943);
					assignmentField();
					}
					}
					setState(2948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2949);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(2953);
				match(SET);
				setState(2954);
				updatedElement();
				setState(2959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2955);
					match(COMMA);
					setState(2956);
					updatedElement();
					}
					}
					setState(2961);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(GBaseParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			match(REPLACE);
			setState(2966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2965);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2968);
				match(INTO);
				}
			}

			setState(2971);
			tableName();
			setState(2977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2972);
				match(PARTITION);
				setState(2973);
				match(LR_BRACKET);
				setState(2974);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(2975);
				match(RR_BRACKET);
				}
			}

			setState(2995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(2979);
					match(LR_BRACKET);
					setState(2980);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(2981);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2985);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2986);
				match(SET);
				setState(2987);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(2992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2988);
					match(COMMA);
					setState(2989);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(2994);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2997);
				querySpecification();
				setState(2999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(2998);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3001);
				queryExpression();
				setState(3003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(3002);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3005);
				querySpecificationNointo();
				setState(3007); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3006);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3009); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3011);
					match(UNION);
					setState(3013);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3012);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3017);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(3015);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3016);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3021);
					orderByClause();
					}
				}

				setState(3025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3024);
					limitClause();
					}
				}

				setState(3028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(3027);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3030);
				queryExpressionNointo();
				setState(3032); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3031);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3034); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,408,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3036);
					match(UNION);
					setState(3038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3037);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3040);
					queryExpression();
					}
				}

				setState(3044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3043);
					orderByClause();
					}
				}

				setState(3047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3046);
					limitClause();
					}
				}

				setState(3050);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3049);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_updateStatement);
		try {
			setState(3056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3054);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3055);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_insertStatementValue);
		int _la;
		try {
			setState(3076);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3058);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3059);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3060);
				match(LR_BRACKET);
				setState(3062);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3061);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3064);
				match(RR_BRACKET);
				setState(3073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3065);
					match(COMMA);
					setState(3066);
					match(LR_BRACKET);
					setState(3068);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
					case 1:
						{
						setState(3067);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3070);
					match(RR_BRACKET);
					}
					}
					setState(3075);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3078);
			fullColumnName();
			setState(3079);
			match(EQUAL_SYMBOL);
			setState(3082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(3080);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3081);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_assignmentField);
		try {
			setState(3086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3084);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3085);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(GBaseParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(GBaseParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lockClause);
		try {
			setState(3094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3088);
				match(FOR);
				setState(3089);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3090);
				match(LOCK);
				setState(3091);
				match(IN);
				setState(3092);
				match(SHARE);
				setState(3093);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3096);
			match(DELETE);
			setState(3098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3097);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3100);
				match(QUICK);
				}
			}

			setState(3104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3103);
				match(IGNORE);
				}
			}

			setState(3106);
			match(FROM);
			setState(3107);
			tableName();
			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3108);
				match(PARTITION);
				setState(3109);
				match(LR_BRACKET);
				setState(3110);
				uidList();
				setState(3111);
				match(RR_BRACKET);
				}
			}

			setState(3117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3115);
				match(WHERE);
				setState(3116);
				expression(0);
				}
			}

			setState(3120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3119);
				orderByClause();
				}
			}

			setState(3124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3122);
				match(LIMIT);
				setState(3123);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(GBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(GBaseParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(GBaseParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(GBaseParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3126);
			match(DELETE);
			setState(3128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3127);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3130);
				match(QUICK);
				}
				break;
			}
			setState(3134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3133);
				match(IGNORE);
				}
			}

			setState(3175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3136);
				tableName();
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3137);
					match(DOT);
					setState(3138);
					match(STAR);
					}
				}

				setState(3149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3141);
					match(COMMA);
					setState(3142);
					tableName();
					setState(3145);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3143);
						match(DOT);
						setState(3144);
						match(STAR);
						}
					}

					}
					}
					setState(3151);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3152);
				match(FROM);
				setState(3153);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3155);
				match(FROM);
				setState(3156);
				tableName();
				setState(3159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3157);
					match(DOT);
					setState(3158);
					match(STAR);
					}
				}

				setState(3169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3161);
					match(COMMA);
					setState(3162);
					tableName();
					setState(3165);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3163);
						match(DOT);
						setState(3164);
						match(STAR);
						}
					}

					}
					}
					setState(3171);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3172);
				match(USING);
				setState(3173);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3177);
				match(WHERE);
				setState(3178);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3181);
			match(HANDLER);
			setState(3182);
			tableName();
			setState(3183);
			match(OPEN);
			setState(3188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3184);
					match(AS);
					}
				}

				setState(3187);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(GBaseParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(GBaseParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3190);
			match(HANDLER);
			setState(3191);
			tableName();
			setState(3192);
			match(READ);
			setState(3193);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3200);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3194);
				comparisonOperator();
				setState(3195);
				match(LR_BRACKET);
				setState(3196);
				constants();
				setState(3197);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3199);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3202);
				match(WHERE);
				setState(3203);
				expression(0);
				}
			}

			setState(3208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3206);
				match(LIMIT);
				setState(3207);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3210);
			match(HANDLER);
			setState(3211);
			tableName();
			setState(3212);
			match(READ);
			setState(3213);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3214);
				match(WHERE);
				setState(3215);
				expression(0);
				}
			}

			setState(3220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3218);
				match(LIMIT);
				setState(3219);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(GBaseParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3222);
			match(HANDLER);
			setState(3223);
			tableName();
			setState(3224);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			match(UPDATE);
			setState(3228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3227);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3230);
				match(IGNORE);
				}
			}

			setState(3233);
			tableName();
			setState(3238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (LEFT - 88)) | (1L << (NUMBER - 88)) | (1L << (RIGHT - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (STACKED - 152)) | (1L << (DATE - 152)) | (1L << (TIME - 152)) | (1L << (TIMESTAMP - 152)) | (1L << (DATETIME - 152)) | (1L << (YEAR - 152)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_VALID - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (AVG - 217)) | (1L << (BIT_AND - 217)) | (1L << (BIT_OR - 217)) | (1L << (BIT_XOR - 217)) | (1L << (COUNT - 217)) | (1L << (GROUP_CONCAT - 217)) | (1L << (MAX - 217)) | (1L << (MIN - 217)) | (1L << (STD - 217)) | (1L << (STDDEV - 217)) | (1L << (STDDEV_POP - 217)) | (1L << (STDDEV_SAMP - 217)) | (1L << (SUM - 217)) | (1L << (VAR_POP - 217)) | (1L << (VAR_SAMP - 217)) | (1L << (VARIANCE - 217)) | (1L << (POSITION - 217)) | (1L << (ACCOUNT - 217)) | (1L << (ACTION - 217)) | (1L << (AFTER - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)) | (1L << (BINLOG - 281)) | (1L << (BIT - 281)) | (1L << (BLOCK - 281)) | (1L << (BOOL - 281)) | (1L << (BOOLEAN - 281)) | (1L << (BTREE - 281)) | (1L << (CACHE - 281)) | (1L << (CASCADED - 281)) | (1L << (CHAIN - 281)) | (1L << (CHANGED - 281)) | (1L << (CHANNEL - 281)) | (1L << (CHECKSUM - 281)) | (1L << (PAGE_CHECKSUM - 281)) | (1L << (CIPHER - 281)) | (1L << (CLASS_ORIGIN - 281)) | (1L << (CLIENT - 281)) | (1L << (CLOSE - 281)) | (1L << (COALESCE - 281)) | (1L << (CODE - 281)) | (1L << (COLUMNS - 281)) | (1L << (COLUMN_FORMAT - 281)) | (1L << (COLUMN_NAME - 281)) | (1L << (COMMENT - 281)) | (1L << (COMMIT - 281)) | (1L << (COMPACT - 281)) | (1L << (COMPLETION - 281)) | (1L << (COMPRESSED - 281)) | (1L << (COMPRESSION - 281)) | (1L << (CONCURRENT - 281)) | (1L << (CONNECTION - 281)) | (1L << (CONSISTENT - 281)) | (1L << (CONSTRAINT_CATALOG - 281)) | (1L << (CONSTRAINT_SCHEMA - 281)) | (1L << (CONSTRAINT_NAME - 281)) | (1L << (CONTAINS - 281)) | (1L << (CONTEXT - 281)) | (1L << (CONTRIBUTORS - 281)) | (1L << (COPY - 281)) | (1L << (CPU - 281)) | (1L << (CURSOR_NAME - 281)) | (1L << (DATA - 281)) | (1L << (DATAFILE - 281)) | (1L << (DEALLOCATE - 281)) | (1L << (DEFAULT_AUTH - 281)) | (1L << (DEFINER - 281)) | (1L << (DELAY_KEY_WRITE - 281)) | (1L << (DES_KEY_FILE - 281)) | (1L << (DIRECTORY - 281)) | (1L << (DISABLE - 281)) | (1L << (DISCARD - 281)) | (1L << (DISK - 281)) | (1L << (DO - 281)) | (1L << (DUMPFILE - 281)) | (1L << (DUPLICATE - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)) | (1L << (ENGINE - 345)) | (1L << (ENGINES - 345)) | (1L << (ERROR - 345)) | (1L << (ERRORS - 345)) | (1L << (ESCAPE - 345)) | (1L << (EVEN - 345)) | (1L << (EVENT - 345)) | (1L << (EVENTS - 345)) | (1L << (EVERY - 345)) | (1L << (EXCHANGE - 345)) | (1L << (EXCLUSIVE - 345)) | (1L << (EXPIRE - 345)) | (1L << (EXPORT - 345)) | (1L << (EXTENDED - 345)) | (1L << (EXTENT_SIZE - 345)) | (1L << (FAST - 345)) | (1L << (FAULTS - 345)) | (1L << (FIELDS - 345)) | (1L << (FILE_BLOCK_SIZE - 345)) | (1L << (FILTER - 345)) | (1L << (FIRST - 345)) | (1L << (FIXED - 345)) | (1L << (FLUSH - 345)) | (1L << (FOLLOWS - 345)) | (1L << (FOUND - 345)) | (1L << (FULL - 345)) | (1L << (FUNCTION - 345)) | (1L << (GENERAL - 345)) | (1L << (GLOBAL - 345)) | (1L << (GRANTS - 345)) | (1L << (GROUP_REPLICATION - 345)) | (1L << (HANDLER - 345)) | (1L << (HASH - 345)) | (1L << (HELP - 345)) | (1L << (HOST - 345)) | (1L << (HOSTS - 345)) | (1L << (IDENTIFIED - 345)) | (1L << (IGNORE_SERVER_IDS - 345)) | (1L << (IMPORT - 345)) | (1L << (INDEXES - 345)) | (1L << (INITIAL_SIZE - 345)) | (1L << (INPLACE - 345)) | (1L << (INSERT_METHOD - 345)) | (1L << (INSTALL - 345)) | (1L << (INSTANCE - 345)) | (1L << (INVISIBLE - 345)) | (1L << (INVOKER - 345)) | (1L << (IO - 345)) | (1L << (IO_THREAD - 345)) | (1L << (IPC - 345)) | (1L << (ISOLATION - 345)) | (1L << (ISSUER - 345)) | (1L << (JSON - 345)) | (1L << (KEY_BLOCK_SIZE - 345)) | (1L << (LANGUAGE - 345)) | (1L << (LAST - 345)) | (1L << (LEAVES - 345)) | (1L << (LESS - 345)) | (1L << (LEVEL - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (LIST - 409)) | (1L << (LOCAL - 409)) | (1L << (LOGFILE - 409)) | (1L << (LOGS - 409)) | (1L << (MASTER - 409)) | (1L << (MASTER_AUTO_POSITION - 409)) | (1L << (MASTER_CONNECT_RETRY - 409)) | (1L << (MASTER_DELAY - 409)) | (1L << (MASTER_HEARTBEAT_PERIOD - 409)) | (1L << (MASTER_HOST - 409)) | (1L << (MASTER_LOG_FILE - 409)) | (1L << (MASTER_LOG_POS - 409)) | (1L << (MASTER_PASSWORD - 409)) | (1L << (MASTER_PORT - 409)) | (1L << (MASTER_RETRY_COUNT - 409)) | (1L << (MASTER_SSL - 409)) | (1L << (MASTER_SSL_CA - 409)) | (1L << (MASTER_SSL_CAPATH - 409)) | (1L << (MASTER_SSL_CERT - 409)) | (1L << (MASTER_SSL_CIPHER - 409)) | (1L << (MASTER_SSL_CRL - 409)) | (1L << (MASTER_SSL_CRLPATH - 409)) | (1L << (MASTER_SSL_KEY - 409)) | (1L << (MASTER_TLS_VERSION - 409)) | (1L << (MASTER_USER - 409)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 409)) | (1L << (MAX_QUERIES_PER_HOUR - 409)) | (1L << (MAX_ROWS - 409)) | (1L << (MAX_SIZE - 409)) | (1L << (MAX_UPDATES_PER_HOUR - 409)) | (1L << (MAX_USER_CONNECTIONS - 409)) | (1L << (MEDIUM - 409)) | (1L << (MEMBER - 409)) | (1L << (MERGE - 409)) | (1L << (MESSAGE_TEXT - 409)) | (1L << (MID - 409)) | (1L << (MIGRATE - 409)) | (1L << (MIN_ROWS - 409)) | (1L << (MODE - 409)) | (1L << (MODIFY - 409)) | (1L << (MUTEX - 409)) | (1L << (MYSQL - 409)) | (1L << (MYSQL_ERRNO - 409)) | (1L << (NAME - 409)) | (1L << (NAMES - 409)) | (1L << (NCHAR - 409)) | (1L << (NEVER - 409)) | (1L << (NEXT - 409)) | (1L << (NO - 409)) | (1L << (NODEGROUP - 409)) | (1L << (NONE - 409)) | (1L << (OFFLINE - 409)) | (1L << (OFFSET - 409)) | (1L << (OF - 409)) | (1L << (OJ - 409)) | (1L << (OLD_PASSWORD - 409)) | (1L << (ONE - 409)) | (1L << (ONLINE - 409)) | (1L << (ONLY - 409)) | (1L << (OPEN - 409)) | (1L << (OPTIMIZER_COSTS - 409)) | (1L << (OPTIONS - 409)) | (1L << (OWNER - 409)) | (1L << (PACK_KEYS - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (PAGE - 473)) | (1L << (PARSER - 473)) | (1L << (PARTIAL - 473)) | (1L << (PARTITIONING - 473)) | (1L << (PARTITIONS - 473)) | (1L << (PASSWORD - 473)) | (1L << (PHASE - 473)) | (1L << (PLUGIN - 473)) | (1L << (PLUGIN_DIR - 473)) | (1L << (PLUGINS - 473)) | (1L << (PORT - 473)) | (1L << (PRECEDES - 473)) | (1L << (PREPARE - 473)) | (1L << (PRESERVE - 473)) | (1L << (PREV - 473)) | (1L << (PROCESSLIST - 473)) | (1L << (PROFILE - 473)) | (1L << (PROFILES - 473)) | (1L << (PROXY - 473)) | (1L << (QUERY - 473)) | (1L << (QUICK - 473)) | (1L << (REBUILD - 473)) | (1L << (RECOVER - 473)) | (1L << (REDO_BUFFER_SIZE - 473)) | (1L << (REDUNDANT - 473)) | (1L << (RELAY - 473)) | (1L << (RELAY_LOG_FILE - 473)) | (1L << (RELAY_LOG_POS - 473)) | (1L << (RELAYLOG - 473)) | (1L << (REMOVE - 473)) | (1L << (REORGANIZE - 473)) | (1L << (REPAIR - 473)) | (1L << (REPLICATE_DO_DB - 473)) | (1L << (REPLICATE_DO_TABLE - 473)) | (1L << (REPLICATE_IGNORE_DB - 473)) | (1L << (REPLICATE_IGNORE_TABLE - 473)) | (1L << (REPLICATE_REWRITE_DB - 473)) | (1L << (REPLICATE_WILD_DO_TABLE - 473)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 473)) | (1L << (REPLICATION - 473)) | (1L << (RESET - 473)) | (1L << (RESUME - 473)) | (1L << (RETURNED_SQLSTATE - 473)) | (1L << (RETURNS - 473)) | (1L << (ROLE - 473)) | (1L << (ROLLBACK - 473)) | (1L << (ROLLUP - 473)) | (1L << (ROTATE - 473)) | (1L << (ROW - 473)) | (1L << (ROWS - 473)) | (1L << (ROW_FORMAT - 473)) | (1L << (SAVEPOINT - 473)) | (1L << (SCHEDULE - 473)) | (1L << (SECURITY - 473)) | (1L << (SERVER - 473)) | (1L << (SESSION - 473)) | (1L << (SHARE - 473)) | (1L << (SHARED - 473)) | (1L << (SIGNED - 473)) | (1L << (SIMPLE - 473)) | (1L << (SLAVE - 473)) | (1L << (SLOW - 473)) | (1L << (SNAPSHOT - 473)) | (1L << (SOCKET - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (SOME - 537)) | (1L << (SONAME - 537)) | (1L << (SOUNDS - 537)) | (1L << (SOURCE - 537)) | (1L << (SQL_AFTER_GTIDS - 537)) | (1L << (SQL_AFTER_MTS_GAPS - 537)) | (1L << (SQL_BEFORE_GTIDS - 537)) | (1L << (SQL_BUFFER_RESULT - 537)) | (1L << (SQL_CACHE - 537)) | (1L << (SQL_NO_CACHE - 537)) | (1L << (SQL_THREAD - 537)) | (1L << (START - 537)) | (1L << (STARTS - 537)) | (1L << (STATS_AUTO_RECALC - 537)) | (1L << (STATS_PERSISTENT - 537)) | (1L << (STATS_SAMPLE_PAGES - 537)) | (1L << (STATUS - 537)) | (1L << (STOP - 537)) | (1L << (STORAGE - 537)) | (1L << (STRING - 537)) | (1L << (SUBCLASS_ORIGIN - 537)) | (1L << (SUBJECT - 537)) | (1L << (SUBPARTITION - 537)) | (1L << (SUBPARTITIONS - 537)) | (1L << (SUSPEND - 537)) | (1L << (SWAPS - 537)) | (1L << (SWITCHES - 537)) | (1L << (TABLE_NAME - 537)) | (1L << (TABLESPACE - 537)) | (1L << (TEMPORARY - 537)) | (1L << (TEMPTABLE - 537)) | (1L << (THAN - 537)) | (1L << (TRADITIONAL - 537)) | (1L << (TRANSACTION - 537)) | (1L << (TRANSACTIONAL - 537)) | (1L << (TRIGGERS - 537)) | (1L << (TRUNCATE - 537)) | (1L << (UNDEFINED - 537)) | (1L << (UNDOFILE - 537)) | (1L << (UNDO_BUFFER_SIZE - 537)) | (1L << (UNINSTALL - 537)) | (1L << (UNKNOWN - 537)) | (1L << (UNTIL - 537)) | (1L << (UPGRADE - 537)) | (1L << (USER - 537)) | (1L << (USE_FRM - 537)) | (1L << (USER_RESOURCES - 537)) | (1L << (VALIDATION - 537)) | (1L << (VALUE - 537)) | (1L << (VARIABLES - 537)) | (1L << (VIEW - 537)) | (1L << (VISIBLE - 537)) | (1L << (WAIT - 537)) | (1L << (WARNINGS - 537)) | (1L << (WITHOUT - 537)) | (1L << (WORK - 537)) | (1L << (WRAPPER - 537)) | (1L << (X509 - 537)) | (1L << (XA - 537)) | (1L << (XML - 537)))) != 0) || ((((_la - 603)) & ~0x3f) == 0 && ((1L << (_la - 603)) & ((1L << (INTERNAL - 603)) | (1L << (QUARTER - 603)) | (1L << (MONTH - 603)) | (1L << (DAY - 603)) | (1L << (HOUR - 603)) | (1L << (MINUTE - 603)) | (1L << (WEEK - 603)) | (1L << (SECOND - 603)) | (1L << (MICROSECOND - 603)) | (1L << (TABLES - 603)) | (1L << (ROUTINE - 603)) | (1L << (EXECUTE - 603)) | (1L << (FILE - 603)) | (1L << (PROCESS - 603)) | (1L << (RELOAD - 603)) | (1L << (SHUTDOWN - 603)) | (1L << (SUPER - 603)) | (1L << (PRIVILEGES - 603)) | (1L << (AUDIT_ADMIN - 603)) | (1L << (BACKUP_ADMIN - 603)) | (1L << (BINLOG_ADMIN - 603)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 603)) | (1L << (CLONE_ADMIN - 603)) | (1L << (CONNECTION_ADMIN - 603)) | (1L << (ENCRYPTION_KEY_ADMIN - 603)) | (1L << (FIREWALL_ADMIN - 603)) | (1L << (FIREWALL_USER - 603)) | (1L << (GROUP_REPLICATION_ADMIN - 603)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 603)) | (1L << (NDB_STORED_USER - 603)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 603)) | (1L << (REPLICATION_APPLIER - 603)) | (1L << (REPLICATION_SLAVE_ADMIN - 603)) | (1L << (RESOURCE_GROUP_ADMIN - 603)) | (1L << (RESOURCE_GROUP_USER - 603)) | (1L << (ROLE_ADMIN - 603)) | (1L << (SESSION_VARIABLES_ADMIN - 603)) | (1L << (SET_USER_ID - 603)) | (1L << (SHOW_ROUTINE - 603)) | (1L << (SYSTEM_VARIABLES_ADMIN - 603)) | (1L << (TABLE_ENCRYPTION_ADMIN - 603)) | (1L << (VERSION_TOKEN_ADMIN - 603)) | (1L << (XA_RECOVER_ADMIN - 603)) | (1L << (ARMSCII8 - 603)) | (1L << (ASCII - 603)) | (1L << (BIG5 - 603)) | (1L << (CP1250 - 603)) | (1L << (CP1251 - 603)) | (1L << (CP1256 - 603)) | (1L << (CP1257 - 603)) | (1L << (CP850 - 603)) | (1L << (CP852 - 603)) | (1L << (CP866 - 603)) | (1L << (CP932 - 603)) | (1L << (DEC8 - 603)) | (1L << (EUCJPMS - 603)) | (1L << (EUCKR - 603)) | (1L << (GB2312 - 603)) | (1L << (GBK - 603)) | (1L << (GEOSTD8 - 603)) | (1L << (GREEK - 603)) | (1L << (HEBREW - 603)) | (1L << (HP8 - 603)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (KEYBCS2 - 667)) | (1L << (KOI8R - 667)) | (1L << (KOI8U - 667)) | (1L << (LATIN1 - 667)) | (1L << (LATIN2 - 667)) | (1L << (LATIN5 - 667)) | (1L << (LATIN7 - 667)) | (1L << (MACCE - 667)) | (1L << (MACROMAN - 667)) | (1L << (SJIS - 667)) | (1L << (SWE7 - 667)) | (1L << (TIS620 - 667)) | (1L << (UCS2 - 667)) | (1L << (UJIS - 667)) | (1L << (UTF16 - 667)) | (1L << (UTF16LE - 667)) | (1L << (UTF32 - 667)) | (1L << (UTF8 - 667)) | (1L << (UTF8MB3 - 667)) | (1L << (UTF8MB4 - 667)) | (1L << (ARCHIVE - 667)) | (1L << (BLACKHOLE - 667)) | (1L << (CSV - 667)) | (1L << (FEDERATED - 667)) | (1L << (INNODB - 667)) | (1L << (MEMORY - 667)) | (1L << (MRG_MYISAM - 667)) | (1L << (MYISAM - 667)) | (1L << (NDB - 667)) | (1L << (NDBCLUSTER - 667)) | (1L << (PERFORMANCE_SCHEMA - 667)) | (1L << (TOKUDB - 667)) | (1L << (REPEATABLE - 667)) | (1L << (COMMITTED - 667)) | (1L << (UNCOMMITTED - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (GEOMETRYCOLLECTION - 667)) | (1L << (LINESTRING - 667)) | (1L << (MULTILINESTRING - 667)) | (1L << (MULTIPOINT - 667)) | (1L << (MULTIPOLYGON - 667)) | (1L << (POINT - 667)) | (1L << (POLYGON - 667)) | (1L << (ABS - 667)) | (1L << (ACOS - 667)) | (1L << (ADDDATE - 667)) | (1L << (ADDTIME - 667)) | (1L << (AES_DECRYPT - 667)) | (1L << (AES_ENCRYPT - 667)) | (1L << (AREA - 667)) | (1L << (ASBINARY - 667)) | (1L << (ASIN - 667)) | (1L << (ASTEXT - 667)) | (1L << (ASWKB - 667)) | (1L << (ASWKT - 667)) | (1L << (ASYMMETRIC_DECRYPT - 667)) | (1L << (ASYMMETRIC_DERIVE - 667)) | (1L << (ASYMMETRIC_ENCRYPT - 667)) | (1L << (ASYMMETRIC_SIGN - 667)) | (1L << (ASYMMETRIC_VERIFY - 667)) | (1L << (ATAN - 667)) | (1L << (ATAN2 - 667)))) != 0) || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (BENCHMARK - 731)) | (1L << (BIN - 731)) | (1L << (BIT_COUNT - 731)) | (1L << (BIT_LENGTH - 731)) | (1L << (BUFFER - 731)) | (1L << (CATALOG_NAME - 731)) | (1L << (CEIL - 731)) | (1L << (CEILING - 731)) | (1L << (CENTROID - 731)) | (1L << (CHARACTER_LENGTH - 731)) | (1L << (CHARSET - 731)) | (1L << (CHAR_LENGTH - 731)) | (1L << (COERCIBILITY - 731)) | (1L << (COLLATION - 731)) | (1L << (COMPRESS - 731)) | (1L << (CONCAT - 731)) | (1L << (CONCAT_WS - 731)) | (1L << (CONNECTION_ID - 731)) | (1L << (CONV - 731)) | (1L << (CONVERT_TZ - 731)) | (1L << (COS - 731)) | (1L << (COT - 731)) | (1L << (CRC32 - 731)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 731)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 731)) | (1L << (CREATE_DH_PARAMETERS - 731)) | (1L << (CREATE_DIGEST - 731)) | (1L << (CROSSES - 731)) | (1L << (DATEDIFF - 731)) | (1L << (DATE_FORMAT - 731)) | (1L << (DAYNAME - 731)) | (1L << (DAYOFMONTH - 731)) | (1L << (DAYOFWEEK - 731)) | (1L << (DAYOFYEAR - 731)) | (1L << (DECODE - 731)) | (1L << (DEGREES - 731)) | (1L << (DES_DECRYPT - 731)) | (1L << (DES_ENCRYPT - 731)) | (1L << (DIMENSION - 731)) | (1L << (DISJOINT - 731)) | (1L << (ELT - 731)) | (1L << (ENCODE - 731)) | (1L << (ENCRYPT - 731)) | (1L << (ENDPOINT - 731)) | (1L << (ENVELOPE - 731)) | (1L << (EQUALS - 731)) | (1L << (EXP - 731)) | (1L << (EXPORT_SET - 731)) | (1L << (EXTERIORRING - 731)) | (1L << (EXTRACTVALUE - 731)) | (1L << (FIELD - 731)) | (1L << (FIND_IN_SET - 731)) | (1L << (FLOOR - 731)) | (1L << (FORMAT - 731)) | (1L << (FOUND_ROWS - 731)) | (1L << (FROM_BASE64 - 731)) | (1L << (FROM_DAYS - 731)) | (1L << (FROM_UNIXTIME - 731)) | (1L << (GEOMCOLLFROMTEXT - 731)) | (1L << (GEOMCOLLFROMWKB - 731)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 731)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 731)) | (1L << (GEOMETRYFROMTEXT - 731)) | (1L << (GEOMETRYFROMWKB - 731)))) != 0) || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (GEOMETRYN - 795)) | (1L << (GEOMETRYTYPE - 795)) | (1L << (GEOMFROMTEXT - 795)) | (1L << (GEOMFROMWKB - 795)) | (1L << (GET_FORMAT - 795)) | (1L << (GET_LOCK - 795)) | (1L << (GLENGTH - 795)) | (1L << (GREATEST - 795)) | (1L << (GTID_SUBSET - 795)) | (1L << (GTID_SUBTRACT - 795)) | (1L << (HEX - 795)) | (1L << (IFNULL - 795)) | (1L << (INET6_ATON - 795)) | (1L << (INET6_NTOA - 795)) | (1L << (INET_ATON - 795)) | (1L << (INET_NTOA - 795)) | (1L << (INSTR - 795)) | (1L << (INTERIORRINGN - 795)) | (1L << (INTERSECTS - 795)) | (1L << (ISCLOSED - 795)) | (1L << (ISEMPTY - 795)) | (1L << (ISNULL - 795)) | (1L << (ISSIMPLE - 795)) | (1L << (IS_FREE_LOCK - 795)) | (1L << (IS_IPV4 - 795)) | (1L << (IS_IPV4_COMPAT - 795)) | (1L << (IS_IPV4_MAPPED - 795)) | (1L << (IS_IPV6 - 795)) | (1L << (IS_USED_LOCK - 795)) | (1L << (LAST_INSERT_ID - 795)) | (1L << (LCASE - 795)) | (1L << (LEAST - 795)) | (1L << (LENGTH - 795)) | (1L << (LINEFROMTEXT - 795)) | (1L << (LINEFROMWKB - 795)) | (1L << (LINESTRINGFROMTEXT - 795)) | (1L << (LINESTRINGFROMWKB - 795)) | (1L << (LN - 795)) | (1L << (LOAD_FILE - 795)) | (1L << (LOCATE - 795)) | (1L << (LOG - 795)) | (1L << (LOG10 - 795)) | (1L << (LOG2 - 795)) | (1L << (LOWER - 795)) | (1L << (LPAD - 795)) | (1L << (LTRIM - 795)) | (1L << (MAKEDATE - 795)) | (1L << (MAKETIME - 795)) | (1L << (MAKE_SET - 795)) | (1L << (MASTER_POS_WAIT - 795)) | (1L << (MBRCONTAINS - 795)) | (1L << (MBRDISJOINT - 795)) | (1L << (MBREQUAL - 795)) | (1L << (MBRINTERSECTS - 795)) | (1L << (MBROVERLAPS - 795)) | (1L << (MBRTOUCHES - 795)) | (1L << (MBRWITHIN - 795)) | (1L << (MD5 - 795)) | (1L << (MLINEFROMTEXT - 795)) | (1L << (MLINEFROMWKB - 795)) | (1L << (MONTHNAME - 795)) | (1L << (MPOINTFROMTEXT - 795)) | (1L << (MPOINTFROMWKB - 795)) | (1L << (MPOLYFROMTEXT - 795)))) != 0) || ((((_la - 859)) & ~0x3f) == 0 && ((1L << (_la - 859)) & ((1L << (MPOLYFROMWKB - 859)) | (1L << (MULTILINESTRINGFROMTEXT - 859)) | (1L << (MULTILINESTRINGFROMWKB - 859)) | (1L << (MULTIPOINTFROMTEXT - 859)) | (1L << (MULTIPOINTFROMWKB - 859)) | (1L << (MULTIPOLYGONFROMTEXT - 859)) | (1L << (MULTIPOLYGONFROMWKB - 859)) | (1L << (NAME_CONST - 859)) | (1L << (NULLIF - 859)) | (1L << (NUMGEOMETRIES - 859)) | (1L << (NUMINTERIORRINGS - 859)) | (1L << (NUMPOINTS - 859)) | (1L << (OCT - 859)) | (1L << (OCTET_LENGTH - 859)) | (1L << (ORD - 859)) | (1L << (OVERLAPS - 859)) | (1L << (PERIOD_ADD - 859)) | (1L << (PERIOD_DIFF - 859)) | (1L << (PI - 859)) | (1L << (POINTFROMTEXT - 859)) | (1L << (POINTFROMWKB - 859)) | (1L << (POINTN - 859)) | (1L << (POLYFROMTEXT - 859)) | (1L << (POLYFROMWKB - 859)) | (1L << (POLYGONFROMTEXT - 859)) | (1L << (POLYGONFROMWKB - 859)) | (1L << (POW - 859)) | (1L << (POWER - 859)) | (1L << (QUOTE - 859)) | (1L << (RADIANS - 859)) | (1L << (RAND - 859)) | (1L << (RANDOM_BYTES - 859)) | (1L << (RELEASE_LOCK - 859)) | (1L << (REVERSE - 859)) | (1L << (ROUND - 859)) | (1L << (ROW_COUNT - 859)) | (1L << (RPAD - 859)) | (1L << (RTRIM - 859)) | (1L << (SEC_TO_TIME - 859)) | (1L << (SESSION_USER - 859)) | (1L << (SHA - 859)) | (1L << (SHA1 - 859)) | (1L << (SHA2 - 859)) | (1L << (SCHEMA_NAME - 859)) | (1L << (SIGN - 859)) | (1L << (SIN - 859)) | (1L << (SLEEP - 859)) | (1L << (SOUNDEX - 859)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 859)) | (1L << (SQRT - 859)) | (1L << (SRID - 859)) | (1L << (STARTPOINT - 859)) | (1L << (STRCMP - 859)) | (1L << (STR_TO_DATE - 859)) | (1L << (ST_AREA - 859)) | (1L << (ST_ASBINARY - 859)) | (1L << (ST_ASTEXT - 859)) | (1L << (ST_ASWKB - 859)) | (1L << (ST_ASWKT - 859)) | (1L << (ST_BUFFER - 859)) | (1L << (ST_CENTROID - 859)) | (1L << (ST_CONTAINS - 859)) | (1L << (ST_CROSSES - 859)) | (1L << (ST_DIFFERENCE - 859)))) != 0) || ((((_la - 923)) & ~0x3f) == 0 && ((1L << (_la - 923)) & ((1L << (ST_DIMENSION - 923)) | (1L << (ST_DISJOINT - 923)) | (1L << (ST_DISTANCE - 923)) | (1L << (ST_ENDPOINT - 923)) | (1L << (ST_ENVELOPE - 923)) | (1L << (ST_EQUALS - 923)) | (1L << (ST_EXTERIORRING - 923)) | (1L << (ST_GEOMCOLLFROMTEXT - 923)) | (1L << (ST_GEOMCOLLFROMTXT - 923)) | (1L << (ST_GEOMCOLLFROMWKB - 923)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 923)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 923)) | (1L << (ST_GEOMETRYFROMTEXT - 923)) | (1L << (ST_GEOMETRYFROMWKB - 923)) | (1L << (ST_GEOMETRYN - 923)) | (1L << (ST_GEOMETRYTYPE - 923)) | (1L << (ST_GEOMFROMTEXT - 923)) | (1L << (ST_GEOMFROMWKB - 923)) | (1L << (ST_INTERIORRINGN - 923)) | (1L << (ST_INTERSECTION - 923)) | (1L << (ST_INTERSECTS - 923)) | (1L << (ST_ISCLOSED - 923)) | (1L << (ST_ISEMPTY - 923)) | (1L << (ST_ISSIMPLE - 923)) | (1L << (ST_LINEFROMTEXT - 923)) | (1L << (ST_LINEFROMWKB - 923)) | (1L << (ST_LINESTRINGFROMTEXT - 923)) | (1L << (ST_LINESTRINGFROMWKB - 923)) | (1L << (ST_NUMGEOMETRIES - 923)) | (1L << (ST_NUMINTERIORRING - 923)) | (1L << (ST_NUMINTERIORRINGS - 923)) | (1L << (ST_NUMPOINTS - 923)) | (1L << (ST_OVERLAPS - 923)) | (1L << (ST_POINTFROMTEXT - 923)) | (1L << (ST_POINTFROMWKB - 923)) | (1L << (ST_POINTN - 923)) | (1L << (ST_POLYFROMTEXT - 923)) | (1L << (ST_POLYFROMWKB - 923)) | (1L << (ST_POLYGONFROMTEXT - 923)) | (1L << (ST_POLYGONFROMWKB - 923)) | (1L << (ST_SRID - 923)) | (1L << (ST_STARTPOINT - 923)) | (1L << (ST_SYMDIFFERENCE - 923)) | (1L << (ST_TOUCHES - 923)) | (1L << (ST_UNION - 923)) | (1L << (ST_WITHIN - 923)) | (1L << (ST_X - 923)) | (1L << (ST_Y - 923)) | (1L << (SUBDATE - 923)) | (1L << (SUBSTRING_INDEX - 923)) | (1L << (SUBTIME - 923)) | (1L << (SYSTEM_USER - 923)) | (1L << (TAN - 923)) | (1L << (TIMEDIFF - 923)) | (1L << (TIMESTAMPADD - 923)) | (1L << (TIMESTAMPDIFF - 923)) | (1L << (TIME_FORMAT - 923)) | (1L << (TIME_TO_SEC - 923)) | (1L << (TOUCHES - 923)) | (1L << (TO_BASE64 - 923)) | (1L << (TO_DAYS - 923)) | (1L << (TO_SECONDS - 923)) | (1L << (UCASE - 923)) | (1L << (UNCOMPRESS - 923)))) != 0) || ((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (UNCOMPRESSED_LENGTH - 987)) | (1L << (UNHEX - 987)) | (1L << (UNIX_TIMESTAMP - 987)) | (1L << (UPDATEXML - 987)) | (1L << (UPPER - 987)) | (1L << (UUID - 987)) | (1L << (UUID_SHORT - 987)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 987)) | (1L << (VERSION - 987)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 987)) | (1L << (WEEKDAY - 987)) | (1L << (WEEKOFYEAR - 987)) | (1L << (WEIGHT_STRING - 987)) | (1L << (WITHIN - 987)) | (1L << (YEARWEEK - 987)) | (1L << (Y_FUNCTION - 987)) | (1L << (X_FUNCTION - 987)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 987)) | (1L << (STRING_LITERAL - 987)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(3235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3234);
					match(AS);
					}
				}

				setState(3237);
				uid();
				}
			}

			setState(3240);
			match(SET);
			setState(3241);
			updatedElement();
			setState(3246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3242);
				match(COMMA);
				setState(3243);
				updatedElement();
				}
				}
				setState(3248);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3249);
				match(WHERE);
				setState(3250);
				expression(0);
				}
			}

			setState(3254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3253);
				orderByClause();
				}
			}

			setState(3257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3256);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			match(UPDATE);
			setState(3261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3260);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3263);
				match(IGNORE);
				}
			}

			setState(3266);
			tableSources();
			setState(3267);
			match(SET);
			setState(3268);
			updatedElement();
			setState(3273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3269);
				match(COMMA);
				setState(3270);
				updatedElement();
				}
				}
				setState(3275);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3276);
				match(WHERE);
				setState(3277);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3280);
			match(ORDER);
			setState(3281);
			match(BY);
			setState(3282);
			orderByExpression();
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3283);
				match(COMMA);
				setState(3284);
				orderByExpression();
				}
				}
				setState(3289);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3290);
			expression(0);
			setState(3292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(3291);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3294);
			tableSource();
			setState(3299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3295);
				match(COMMA);
				setState(3296);
				tableSource();
				}
				}
				setState(3301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3302);
				tableSourceItem();
				setState(3306);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3303);
						joinPart();
						}
						} 
					}
					setState(3308);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3309);
				match(LR_BRACKET);
				setState(3310);
				tableSourceItem();
				setState(3314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CROSS - 32)) | (1L << (INNER - 32)) | (1L << (JOIN - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & ((1L << (NATURAL - 102)) | (1L << (RIGHT - 102)) | (1L << (STRAIGHT_JOIN - 102)))) != 0)) {
					{
					{
					setState(3311);
					joinPart();
					}
					}
					setState(3316);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3317);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3321);
				tableName();
				setState(3327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3322);
					match(PARTITION);
					setState(3323);
					match(LR_BRACKET);
					setState(3324);
					uidList();
					setState(3325);
					match(RR_BRACKET);
					}
				}

				setState(3333);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(3330);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3329);
						match(AS);
						}
					}

					setState(3332);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3335);
					indexHint();
					setState(3340);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3336);
							match(COMMA);
							setState(3337);
							indexHint();
							}
							} 
						}
						setState(3342);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3345);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3346);
					match(LR_BRACKET);
					setState(3347);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3348);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3352);
					match(AS);
					}
				}

				setState(3355);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3357);
				match(LR_BRACKET);
				setState(3358);
				tableSources();
				setState(3359);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(GBaseParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(GBaseParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3363);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3364);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3365);
				match(FOR);
				setState(3366);
				indexHintType();
				}
			}

			setState(3369);
			match(LR_BRACKET);
			setState(3370);
			uidList();
			setState(3371);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indexHintType);
		try {
			setState(3378);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3373);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3374);
				match(ORDER);
				setState(3375);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3376);
				match(GROUP);
				setState(3377);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(GBaseParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(GBaseParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(GBaseParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(GBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(GBaseParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(GBaseParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(GBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(GBaseParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(GBaseParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(GBaseParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_joinPart);
		int _la;
		try {
			setState(3424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3380);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3383);
				match(JOIN);
				setState(3384);
				tableSourceItem();
				setState(3392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
				case 1:
					{
					setState(3385);
					match(ON);
					setState(3386);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3387);
					match(USING);
					setState(3388);
					match(LR_BRACKET);
					setState(3389);
					uidList();
					setState(3390);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3394);
				match(STRAIGHT_JOIN);
				setState(3395);
				tableSourceItem();
				setState(3398);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					setState(3396);
					match(ON);
					setState(3397);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3400);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3401);
					match(OUTER);
					}
				}

				setState(3404);
				match(JOIN);
				setState(3405);
				tableSourceItem();
				setState(3413);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3406);
					match(ON);
					setState(3407);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3408);
					match(USING);
					setState(3409);
					match(LR_BRACKET);
					setState(3410);
					uidList();
					setState(3411);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3415);
				match(NATURAL);
				setState(3420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3416);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3418);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3417);
						match(OUTER);
						}
					}

					}
				}

				setState(3422);
				match(JOIN);
				setState(3423);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_queryExpression);
		try {
			setState(3434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3426);
				match(LR_BRACKET);
				setState(3427);
				querySpecification();
				setState(3428);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3430);
				match(LR_BRACKET);
				setState(3431);
				queryExpression();
				setState(3432);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_queryExpressionNointo);
		try {
			setState(3444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3436);
				match(LR_BRACKET);
				setState(3437);
				querySpecificationNointo();
				setState(3438);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3440);
				match(LR_BRACKET);
				setState(3441);
				queryExpressionNointo();
				setState(3442);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(GBaseParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3446);
				match(SELECT);
				setState(3450);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3447);
						selectSpec();
						}
						} 
					}
					setState(3452);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
				}
				setState(3453);
				selectElements();
				setState(3455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3454);
					selectIntoExpression();
					}
				}

				setState(3458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3457);
					fromClause();
					}
				}

				setState(3461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
				case 1:
					{
					setState(3460);
					orderByClause();
					}
					break;
				}
				setState(3464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(3463);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3466);
				match(SELECT);
				setState(3470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,491,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3467);
						selectSpec();
						}
						} 
					}
					setState(3472);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,491,_ctx);
				}
				setState(3473);
				selectElements();
				setState(3475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3474);
					fromClause();
					}
				}

				setState(3478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(3477);
					orderByClause();
					}
					break;
				}
				setState(3481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(3480);
					limitClause();
					}
					break;
				}
				setState(3484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3483);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(GBaseParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3488);
			match(SELECT);
			setState(3492);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,497,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3489);
					selectSpec();
					}
					} 
				}
				setState(3494);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,497,_ctx);
			}
			setState(3495);
			selectElements();
			setState(3497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3496);
				fromClause();
				}
			}

			setState(3500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(3499);
				orderByClause();
				}
				break;
			}
			setState(3503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(3502);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3505);
			match(UNION);
			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3506);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3509);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			match(UNION);
			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3512);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3515);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3516);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(GBaseParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(GBaseParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(GBaseParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(GBaseParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(GBaseParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(GBaseParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(GBaseParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(GBaseParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(GBaseParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_selectSpec);
		int _la;
		try {
			setState(3527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3519);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3520);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3521);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3522);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3523);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3524);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3525);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3526);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(3529);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(3530);
				selectElement();
				}
				break;
			}
			setState(3537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3533);
				match(COMMA);
				setState(3534);
				selectElement();
				}
				}
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(GBaseParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectElement);
		int _la;
		try {
			setState(3569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3540);
				fullId();
				setState(3541);
				match(DOT);
				setState(3542);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3544);
				fullColumnName();
				setState(3549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3546);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3545);
						match(AS);
						}
					}

					setState(3548);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3551);
				functionCall();
				setState(3556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					setState(3553);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3552);
						match(AS);
						}
					}

					setState(3555);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(3558);
					match(LOCAL_ID);
					setState(3559);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3562);
				expression(0);
				setState(3567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
				case 1:
					{
					setState(3564);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3563);
						match(AS);
						}
					}

					setState(3566);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(GBaseParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode LINES() { return getToken(GBaseParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(GBaseParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3571);
				match(INTO);
				setState(3572);
				assignmentField();
				setState(3577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3573);
					match(COMMA);
					setState(3574);
					assignmentField();
					}
					}
					setState(3579);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3580);
				match(INTO);
				setState(3581);
				match(DUMPFILE);
				setState(3582);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3583);
				match(INTO);
				setState(3584);
				match(OUTFILE);
				setState(3585);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3586);
					match(CHARACTER);
					setState(3587);
					match(SET);
					setState(3588);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3597);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(3591);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3593); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3592);
						selectFieldsInto();
						}
						}
						setState(3595); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3599);
					match(LINES);
					setState(3601); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3600);
						selectLinesInto();
						}
						}
						setState(3603); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(GBaseParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(GBaseParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(GBaseParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(GBaseParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3609);
				match(TERMINATED);
				setState(3610);
				match(BY);
				setState(3611);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3612);
					match(OPTIONALLY);
					}
				}

				setState(3615);
				match(ENCLOSED);
				setState(3616);
				match(BY);
				setState(3617);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3618);
				match(ESCAPED);
				setState(3619);
				match(BY);
				setState(3620);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(GBaseParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(GBaseParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_selectLinesInto);
		try {
			setState(3629);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3623);
				match(STARTING);
				setState(3624);
				match(BY);
				setState(3625);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3626);
				match(TERMINATED);
				setState(3627);
				match(BY);
				setState(3628);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext havingExpr;
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(GBaseParser.HAVING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(GBaseParser.ROLLUP, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			match(FROM);
			setState(3632);
			tableSources();
			setState(3635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3633);
				match(WHERE);
				setState(3634);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			setState(3651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3637);
				match(GROUP);
				setState(3638);
				match(BY);
				setState(3639);
				groupByItem();
				setState(3644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3640);
					match(COMMA);
					setState(3641);
					groupByItem();
					}
					}
					setState(3646);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
				case 1:
					{
					setState(3647);
					match(WITH);
					setState(3648);
					match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(3655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3653);
				match(HAVING);
				setState(3654);
				((FromClauseContext)_localctx).havingExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3657);
			expression(0);
			setState(3659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(3658);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(GBaseParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3661);
			match(LIMIT);
			setState(3672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(3665);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(3662);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3663);
					match(COMMA);
					}
					break;
				}
				setState(3667);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3668);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3669);
				match(OFFSET);
				setState(3670);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_limitClauseAtom);
		try {
			setState(3676);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3674);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3675);
				mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(GBaseParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3678);
			match(START);
			setState(3679);
			match(TRANSACTION);
			setState(3688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3680);
				transactionMode();
				setState(3685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3681);
					match(COMMA);
					setState(3682);
					transactionMode();
					}
					}
					setState(3687);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			match(BEGIN);
			setState(3692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3691);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(GBaseParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(GBaseParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(GBaseParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(GBaseParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(GBaseParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3694);
			match(COMMIT);
			setState(3696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3695);
				match(WORK);
				}
			}

			setState(3703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3698);
				match(AND);
				setState(3700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3699);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3702);
				match(CHAIN);
				}
			}

			setState(3709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				setState(3706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3705);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3708);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(GBaseParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(GBaseParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(GBaseParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(GBaseParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3711);
			match(ROLLBACK);
			setState(3713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3712);
				match(WORK);
				}
			}

			setState(3720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3715);
				match(AND);
				setState(3717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3716);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3719);
				match(CHAIN);
				}
			}

			setState(3726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(3723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3722);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3725);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3728);
			match(SAVEPOINT);
			setState(3729);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3731);
			match(ROLLBACK);
			setState(3733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3732);
				match(WORK);
				}
			}

			setState(3735);
			match(TO);
			setState(3737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(3736);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3739);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(GBaseParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3741);
			match(RELEASE);
			setState(3742);
			match(SAVEPOINT);
			setState(3743);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3745);
			match(LOCK);
			setState(3746);
			match(TABLES);
			setState(3747);
			lockTableElement();
			setState(3752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3748);
				match(COMMA);
				setState(3749);
				lockTableElement();
				}
				}
				setState(3754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(GBaseParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3755);
			match(UNLOCK);
			setState(3756);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(GBaseParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3758);
			match(SET);
			setState(3759);
			match(AUTOCOMMIT);
			setState(3760);
			match(EQUAL_SYMBOL);
			setState(3761);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(GBaseParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			match(SET);
			setState(3765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3764);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3767);
			match(TRANSACTION);
			setState(3768);
			transactionOption();
			setState(3773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3769);
				match(COMMA);
				setState(3770);
				transactionOption();
				}
				}
				setState(3775);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(GBaseParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(GBaseParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(GBaseParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(GBaseParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_transactionMode);
		try {
			setState(3783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3776);
				match(WITH);
				setState(3777);
				match(CONSISTENT);
				setState(3778);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3779);
				match(READ);
				setState(3780);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3781);
				match(READ);
				setState(3782);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			tableName();
			setState(3790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (LEFT - 88)) | (1L << (NUMBER - 88)) | (1L << (RIGHT - 88)))) != 0) || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & ((1L << (STACKED - 152)) | (1L << (DATE - 152)) | (1L << (TIME - 152)) | (1L << (TIMESTAMP - 152)) | (1L << (DATETIME - 152)) | (1L << (YEAR - 152)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_VALID - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (AVG - 217)) | (1L << (BIT_AND - 217)) | (1L << (BIT_OR - 217)) | (1L << (BIT_XOR - 217)) | (1L << (COUNT - 217)) | (1L << (GROUP_CONCAT - 217)) | (1L << (MAX - 217)) | (1L << (MIN - 217)) | (1L << (STD - 217)) | (1L << (STDDEV - 217)) | (1L << (STDDEV_POP - 217)) | (1L << (STDDEV_SAMP - 217)) | (1L << (SUM - 217)) | (1L << (VAR_POP - 217)) | (1L << (VAR_SAMP - 217)) | (1L << (VARIANCE - 217)) | (1L << (POSITION - 217)) | (1L << (ACCOUNT - 217)) | (1L << (ACTION - 217)) | (1L << (AFTER - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)) | (1L << (BINLOG - 281)) | (1L << (BIT - 281)) | (1L << (BLOCK - 281)) | (1L << (BOOL - 281)) | (1L << (BOOLEAN - 281)) | (1L << (BTREE - 281)) | (1L << (CACHE - 281)) | (1L << (CASCADED - 281)) | (1L << (CHAIN - 281)) | (1L << (CHANGED - 281)) | (1L << (CHANNEL - 281)) | (1L << (CHECKSUM - 281)) | (1L << (PAGE_CHECKSUM - 281)) | (1L << (CIPHER - 281)) | (1L << (CLASS_ORIGIN - 281)) | (1L << (CLIENT - 281)) | (1L << (CLOSE - 281)) | (1L << (COALESCE - 281)) | (1L << (CODE - 281)) | (1L << (COLUMNS - 281)) | (1L << (COLUMN_FORMAT - 281)) | (1L << (COLUMN_NAME - 281)) | (1L << (COMMENT - 281)) | (1L << (COMMIT - 281)) | (1L << (COMPACT - 281)) | (1L << (COMPLETION - 281)) | (1L << (COMPRESSED - 281)) | (1L << (COMPRESSION - 281)) | (1L << (CONCURRENT - 281)) | (1L << (CONNECTION - 281)) | (1L << (CONSISTENT - 281)) | (1L << (CONSTRAINT_CATALOG - 281)) | (1L << (CONSTRAINT_SCHEMA - 281)) | (1L << (CONSTRAINT_NAME - 281)) | (1L << (CONTAINS - 281)) | (1L << (CONTEXT - 281)) | (1L << (CONTRIBUTORS - 281)) | (1L << (COPY - 281)) | (1L << (CPU - 281)) | (1L << (CURSOR_NAME - 281)) | (1L << (DATA - 281)) | (1L << (DATAFILE - 281)) | (1L << (DEALLOCATE - 281)) | (1L << (DEFAULT_AUTH - 281)) | (1L << (DEFINER - 281)) | (1L << (DELAY_KEY_WRITE - 281)) | (1L << (DES_KEY_FILE - 281)) | (1L << (DIRECTORY - 281)) | (1L << (DISABLE - 281)) | (1L << (DISCARD - 281)) | (1L << (DISK - 281)) | (1L << (DO - 281)) | (1L << (DUMPFILE - 281)) | (1L << (DUPLICATE - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)) | (1L << (ENGINE - 345)) | (1L << (ENGINES - 345)) | (1L << (ERROR - 345)) | (1L << (ERRORS - 345)) | (1L << (ESCAPE - 345)) | (1L << (EVEN - 345)) | (1L << (EVENT - 345)) | (1L << (EVENTS - 345)) | (1L << (EVERY - 345)) | (1L << (EXCHANGE - 345)) | (1L << (EXCLUSIVE - 345)) | (1L << (EXPIRE - 345)) | (1L << (EXPORT - 345)) | (1L << (EXTENDED - 345)) | (1L << (EXTENT_SIZE - 345)) | (1L << (FAST - 345)) | (1L << (FAULTS - 345)) | (1L << (FIELDS - 345)) | (1L << (FILE_BLOCK_SIZE - 345)) | (1L << (FILTER - 345)) | (1L << (FIRST - 345)) | (1L << (FIXED - 345)) | (1L << (FLUSH - 345)) | (1L << (FOLLOWS - 345)) | (1L << (FOUND - 345)) | (1L << (FULL - 345)) | (1L << (FUNCTION - 345)) | (1L << (GENERAL - 345)) | (1L << (GLOBAL - 345)) | (1L << (GRANTS - 345)) | (1L << (GROUP_REPLICATION - 345)) | (1L << (HANDLER - 345)) | (1L << (HASH - 345)) | (1L << (HELP - 345)) | (1L << (HOST - 345)) | (1L << (HOSTS - 345)) | (1L << (IDENTIFIED - 345)) | (1L << (IGNORE_SERVER_IDS - 345)) | (1L << (IMPORT - 345)) | (1L << (INDEXES - 345)) | (1L << (INITIAL_SIZE - 345)) | (1L << (INPLACE - 345)) | (1L << (INSERT_METHOD - 345)) | (1L << (INSTALL - 345)) | (1L << (INSTANCE - 345)) | (1L << (INVISIBLE - 345)) | (1L << (INVOKER - 345)) | (1L << (IO - 345)) | (1L << (IO_THREAD - 345)) | (1L << (IPC - 345)) | (1L << (ISOLATION - 345)) | (1L << (ISSUER - 345)) | (1L << (JSON - 345)) | (1L << (KEY_BLOCK_SIZE - 345)) | (1L << (LANGUAGE - 345)) | (1L << (LAST - 345)) | (1L << (LEAVES - 345)) | (1L << (LESS - 345)) | (1L << (LEVEL - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (LIST - 409)) | (1L << (LOCAL - 409)) | (1L << (LOGFILE - 409)) | (1L << (LOGS - 409)) | (1L << (MASTER - 409)) | (1L << (MASTER_AUTO_POSITION - 409)) | (1L << (MASTER_CONNECT_RETRY - 409)) | (1L << (MASTER_DELAY - 409)) | (1L << (MASTER_HEARTBEAT_PERIOD - 409)) | (1L << (MASTER_HOST - 409)) | (1L << (MASTER_LOG_FILE - 409)) | (1L << (MASTER_LOG_POS - 409)) | (1L << (MASTER_PASSWORD - 409)) | (1L << (MASTER_PORT - 409)) | (1L << (MASTER_RETRY_COUNT - 409)) | (1L << (MASTER_SSL - 409)) | (1L << (MASTER_SSL_CA - 409)) | (1L << (MASTER_SSL_CAPATH - 409)) | (1L << (MASTER_SSL_CERT - 409)) | (1L << (MASTER_SSL_CIPHER - 409)) | (1L << (MASTER_SSL_CRL - 409)) | (1L << (MASTER_SSL_CRLPATH - 409)) | (1L << (MASTER_SSL_KEY - 409)) | (1L << (MASTER_TLS_VERSION - 409)) | (1L << (MASTER_USER - 409)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 409)) | (1L << (MAX_QUERIES_PER_HOUR - 409)) | (1L << (MAX_ROWS - 409)) | (1L << (MAX_SIZE - 409)) | (1L << (MAX_UPDATES_PER_HOUR - 409)) | (1L << (MAX_USER_CONNECTIONS - 409)) | (1L << (MEDIUM - 409)) | (1L << (MEMBER - 409)) | (1L << (MERGE - 409)) | (1L << (MESSAGE_TEXT - 409)) | (1L << (MID - 409)) | (1L << (MIGRATE - 409)) | (1L << (MIN_ROWS - 409)) | (1L << (MODE - 409)) | (1L << (MODIFY - 409)) | (1L << (MUTEX - 409)) | (1L << (MYSQL - 409)) | (1L << (MYSQL_ERRNO - 409)) | (1L << (NAME - 409)) | (1L << (NAMES - 409)) | (1L << (NCHAR - 409)) | (1L << (NEVER - 409)) | (1L << (NEXT - 409)) | (1L << (NO - 409)) | (1L << (NODEGROUP - 409)) | (1L << (NONE - 409)) | (1L << (OFFLINE - 409)) | (1L << (OFFSET - 409)) | (1L << (OF - 409)) | (1L << (OJ - 409)) | (1L << (OLD_PASSWORD - 409)) | (1L << (ONE - 409)) | (1L << (ONLINE - 409)) | (1L << (ONLY - 409)) | (1L << (OPEN - 409)) | (1L << (OPTIMIZER_COSTS - 409)) | (1L << (OPTIONS - 409)) | (1L << (OWNER - 409)) | (1L << (PACK_KEYS - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (PAGE - 473)) | (1L << (PARSER - 473)) | (1L << (PARTIAL - 473)) | (1L << (PARTITIONING - 473)) | (1L << (PARTITIONS - 473)) | (1L << (PASSWORD - 473)) | (1L << (PHASE - 473)) | (1L << (PLUGIN - 473)) | (1L << (PLUGIN_DIR - 473)) | (1L << (PLUGINS - 473)) | (1L << (PORT - 473)) | (1L << (PRECEDES - 473)) | (1L << (PREPARE - 473)) | (1L << (PRESERVE - 473)) | (1L << (PREV - 473)) | (1L << (PROCESSLIST - 473)) | (1L << (PROFILE - 473)) | (1L << (PROFILES - 473)) | (1L << (PROXY - 473)) | (1L << (QUERY - 473)) | (1L << (QUICK - 473)) | (1L << (REBUILD - 473)) | (1L << (RECOVER - 473)) | (1L << (REDO_BUFFER_SIZE - 473)) | (1L << (REDUNDANT - 473)) | (1L << (RELAY - 473)) | (1L << (RELAY_LOG_FILE - 473)) | (1L << (RELAY_LOG_POS - 473)) | (1L << (RELAYLOG - 473)) | (1L << (REMOVE - 473)) | (1L << (REORGANIZE - 473)) | (1L << (REPAIR - 473)) | (1L << (REPLICATE_DO_DB - 473)) | (1L << (REPLICATE_DO_TABLE - 473)) | (1L << (REPLICATE_IGNORE_DB - 473)) | (1L << (REPLICATE_IGNORE_TABLE - 473)) | (1L << (REPLICATE_REWRITE_DB - 473)) | (1L << (REPLICATE_WILD_DO_TABLE - 473)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 473)) | (1L << (REPLICATION - 473)) | (1L << (RESET - 473)) | (1L << (RESUME - 473)) | (1L << (RETURNED_SQLSTATE - 473)) | (1L << (RETURNS - 473)) | (1L << (ROLE - 473)) | (1L << (ROLLBACK - 473)) | (1L << (ROLLUP - 473)) | (1L << (ROTATE - 473)) | (1L << (ROW - 473)) | (1L << (ROWS - 473)) | (1L << (ROW_FORMAT - 473)) | (1L << (SAVEPOINT - 473)) | (1L << (SCHEDULE - 473)) | (1L << (SECURITY - 473)) | (1L << (SERVER - 473)) | (1L << (SESSION - 473)) | (1L << (SHARE - 473)) | (1L << (SHARED - 473)) | (1L << (SIGNED - 473)) | (1L << (SIMPLE - 473)) | (1L << (SLAVE - 473)) | (1L << (SLOW - 473)) | (1L << (SNAPSHOT - 473)) | (1L << (SOCKET - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (SOME - 537)) | (1L << (SONAME - 537)) | (1L << (SOUNDS - 537)) | (1L << (SOURCE - 537)) | (1L << (SQL_AFTER_GTIDS - 537)) | (1L << (SQL_AFTER_MTS_GAPS - 537)) | (1L << (SQL_BEFORE_GTIDS - 537)) | (1L << (SQL_BUFFER_RESULT - 537)) | (1L << (SQL_CACHE - 537)) | (1L << (SQL_NO_CACHE - 537)) | (1L << (SQL_THREAD - 537)) | (1L << (START - 537)) | (1L << (STARTS - 537)) | (1L << (STATS_AUTO_RECALC - 537)) | (1L << (STATS_PERSISTENT - 537)) | (1L << (STATS_SAMPLE_PAGES - 537)) | (1L << (STATUS - 537)) | (1L << (STOP - 537)) | (1L << (STORAGE - 537)) | (1L << (STRING - 537)) | (1L << (SUBCLASS_ORIGIN - 537)) | (1L << (SUBJECT - 537)) | (1L << (SUBPARTITION - 537)) | (1L << (SUBPARTITIONS - 537)) | (1L << (SUSPEND - 537)) | (1L << (SWAPS - 537)) | (1L << (SWITCHES - 537)) | (1L << (TABLE_NAME - 537)) | (1L << (TABLESPACE - 537)) | (1L << (TEMPORARY - 537)) | (1L << (TEMPTABLE - 537)) | (1L << (THAN - 537)) | (1L << (TRADITIONAL - 537)) | (1L << (TRANSACTION - 537)) | (1L << (TRANSACTIONAL - 537)) | (1L << (TRIGGERS - 537)) | (1L << (TRUNCATE - 537)) | (1L << (UNDEFINED - 537)) | (1L << (UNDOFILE - 537)) | (1L << (UNDO_BUFFER_SIZE - 537)) | (1L << (UNINSTALL - 537)) | (1L << (UNKNOWN - 537)) | (1L << (UNTIL - 537)) | (1L << (UPGRADE - 537)) | (1L << (USER - 537)) | (1L << (USE_FRM - 537)) | (1L << (USER_RESOURCES - 537)) | (1L << (VALIDATION - 537)) | (1L << (VALUE - 537)) | (1L << (VARIABLES - 537)) | (1L << (VIEW - 537)) | (1L << (VISIBLE - 537)) | (1L << (WAIT - 537)) | (1L << (WARNINGS - 537)) | (1L << (WITHOUT - 537)) | (1L << (WORK - 537)) | (1L << (WRAPPER - 537)) | (1L << (X509 - 537)) | (1L << (XA - 537)) | (1L << (XML - 537)))) != 0) || ((((_la - 603)) & ~0x3f) == 0 && ((1L << (_la - 603)) & ((1L << (INTERNAL - 603)) | (1L << (QUARTER - 603)) | (1L << (MONTH - 603)) | (1L << (DAY - 603)) | (1L << (HOUR - 603)) | (1L << (MINUTE - 603)) | (1L << (WEEK - 603)) | (1L << (SECOND - 603)) | (1L << (MICROSECOND - 603)) | (1L << (TABLES - 603)) | (1L << (ROUTINE - 603)) | (1L << (EXECUTE - 603)) | (1L << (FILE - 603)) | (1L << (PROCESS - 603)) | (1L << (RELOAD - 603)) | (1L << (SHUTDOWN - 603)) | (1L << (SUPER - 603)) | (1L << (PRIVILEGES - 603)) | (1L << (AUDIT_ADMIN - 603)) | (1L << (BACKUP_ADMIN - 603)) | (1L << (BINLOG_ADMIN - 603)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 603)) | (1L << (CLONE_ADMIN - 603)) | (1L << (CONNECTION_ADMIN - 603)) | (1L << (ENCRYPTION_KEY_ADMIN - 603)) | (1L << (FIREWALL_ADMIN - 603)) | (1L << (FIREWALL_USER - 603)) | (1L << (GROUP_REPLICATION_ADMIN - 603)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 603)) | (1L << (NDB_STORED_USER - 603)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 603)) | (1L << (REPLICATION_APPLIER - 603)) | (1L << (REPLICATION_SLAVE_ADMIN - 603)) | (1L << (RESOURCE_GROUP_ADMIN - 603)) | (1L << (RESOURCE_GROUP_USER - 603)) | (1L << (ROLE_ADMIN - 603)) | (1L << (SESSION_VARIABLES_ADMIN - 603)) | (1L << (SET_USER_ID - 603)) | (1L << (SHOW_ROUTINE - 603)) | (1L << (SYSTEM_VARIABLES_ADMIN - 603)) | (1L << (TABLE_ENCRYPTION_ADMIN - 603)) | (1L << (VERSION_TOKEN_ADMIN - 603)) | (1L << (XA_RECOVER_ADMIN - 603)) | (1L << (ARMSCII8 - 603)) | (1L << (ASCII - 603)) | (1L << (BIG5 - 603)) | (1L << (CP1250 - 603)) | (1L << (CP1251 - 603)) | (1L << (CP1256 - 603)) | (1L << (CP1257 - 603)) | (1L << (CP850 - 603)) | (1L << (CP852 - 603)) | (1L << (CP866 - 603)) | (1L << (CP932 - 603)) | (1L << (DEC8 - 603)) | (1L << (EUCJPMS - 603)) | (1L << (EUCKR - 603)) | (1L << (GB2312 - 603)) | (1L << (GBK - 603)) | (1L << (GEOSTD8 - 603)) | (1L << (GREEK - 603)) | (1L << (HEBREW - 603)) | (1L << (HP8 - 603)))) != 0) || ((((_la - 667)) & ~0x3f) == 0 && ((1L << (_la - 667)) & ((1L << (KEYBCS2 - 667)) | (1L << (KOI8R - 667)) | (1L << (KOI8U - 667)) | (1L << (LATIN1 - 667)) | (1L << (LATIN2 - 667)) | (1L << (LATIN5 - 667)) | (1L << (LATIN7 - 667)) | (1L << (MACCE - 667)) | (1L << (MACROMAN - 667)) | (1L << (SJIS - 667)) | (1L << (SWE7 - 667)) | (1L << (TIS620 - 667)) | (1L << (UCS2 - 667)) | (1L << (UJIS - 667)) | (1L << (UTF16 - 667)) | (1L << (UTF16LE - 667)) | (1L << (UTF32 - 667)) | (1L << (UTF8 - 667)) | (1L << (UTF8MB3 - 667)) | (1L << (UTF8MB4 - 667)) | (1L << (ARCHIVE - 667)) | (1L << (BLACKHOLE - 667)) | (1L << (CSV - 667)) | (1L << (FEDERATED - 667)) | (1L << (INNODB - 667)) | (1L << (MEMORY - 667)) | (1L << (MRG_MYISAM - 667)) | (1L << (MYISAM - 667)) | (1L << (NDB - 667)) | (1L << (NDBCLUSTER - 667)) | (1L << (PERFORMANCE_SCHEMA - 667)) | (1L << (TOKUDB - 667)) | (1L << (REPEATABLE - 667)) | (1L << (COMMITTED - 667)) | (1L << (UNCOMMITTED - 667)) | (1L << (SERIALIZABLE - 667)) | (1L << (GEOMETRYCOLLECTION - 667)) | (1L << (LINESTRING - 667)) | (1L << (MULTILINESTRING - 667)) | (1L << (MULTIPOINT - 667)) | (1L << (MULTIPOLYGON - 667)) | (1L << (POINT - 667)) | (1L << (POLYGON - 667)) | (1L << (ABS - 667)) | (1L << (ACOS - 667)) | (1L << (ADDDATE - 667)) | (1L << (ADDTIME - 667)) | (1L << (AES_DECRYPT - 667)) | (1L << (AES_ENCRYPT - 667)) | (1L << (AREA - 667)) | (1L << (ASBINARY - 667)) | (1L << (ASIN - 667)) | (1L << (ASTEXT - 667)) | (1L << (ASWKB - 667)) | (1L << (ASWKT - 667)) | (1L << (ASYMMETRIC_DECRYPT - 667)) | (1L << (ASYMMETRIC_DERIVE - 667)) | (1L << (ASYMMETRIC_ENCRYPT - 667)) | (1L << (ASYMMETRIC_SIGN - 667)) | (1L << (ASYMMETRIC_VERIFY - 667)) | (1L << (ATAN - 667)) | (1L << (ATAN2 - 667)))) != 0) || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (BENCHMARK - 731)) | (1L << (BIN - 731)) | (1L << (BIT_COUNT - 731)) | (1L << (BIT_LENGTH - 731)) | (1L << (BUFFER - 731)) | (1L << (CATALOG_NAME - 731)) | (1L << (CEIL - 731)) | (1L << (CEILING - 731)) | (1L << (CENTROID - 731)) | (1L << (CHARACTER_LENGTH - 731)) | (1L << (CHARSET - 731)) | (1L << (CHAR_LENGTH - 731)) | (1L << (COERCIBILITY - 731)) | (1L << (COLLATION - 731)) | (1L << (COMPRESS - 731)) | (1L << (CONCAT - 731)) | (1L << (CONCAT_WS - 731)) | (1L << (CONNECTION_ID - 731)) | (1L << (CONV - 731)) | (1L << (CONVERT_TZ - 731)) | (1L << (COS - 731)) | (1L << (COT - 731)) | (1L << (CRC32 - 731)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 731)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 731)) | (1L << (CREATE_DH_PARAMETERS - 731)) | (1L << (CREATE_DIGEST - 731)) | (1L << (CROSSES - 731)) | (1L << (DATEDIFF - 731)) | (1L << (DATE_FORMAT - 731)) | (1L << (DAYNAME - 731)) | (1L << (DAYOFMONTH - 731)) | (1L << (DAYOFWEEK - 731)) | (1L << (DAYOFYEAR - 731)) | (1L << (DECODE - 731)) | (1L << (DEGREES - 731)) | (1L << (DES_DECRYPT - 731)) | (1L << (DES_ENCRYPT - 731)) | (1L << (DIMENSION - 731)) | (1L << (DISJOINT - 731)) | (1L << (ELT - 731)) | (1L << (ENCODE - 731)) | (1L << (ENCRYPT - 731)) | (1L << (ENDPOINT - 731)) | (1L << (ENVELOPE - 731)) | (1L << (EQUALS - 731)) | (1L << (EXP - 731)) | (1L << (EXPORT_SET - 731)) | (1L << (EXTERIORRING - 731)) | (1L << (EXTRACTVALUE - 731)) | (1L << (FIELD - 731)) | (1L << (FIND_IN_SET - 731)) | (1L << (FLOOR - 731)) | (1L << (FORMAT - 731)) | (1L << (FOUND_ROWS - 731)) | (1L << (FROM_BASE64 - 731)) | (1L << (FROM_DAYS - 731)) | (1L << (FROM_UNIXTIME - 731)) | (1L << (GEOMCOLLFROMTEXT - 731)) | (1L << (GEOMCOLLFROMWKB - 731)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 731)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 731)) | (1L << (GEOMETRYFROMTEXT - 731)) | (1L << (GEOMETRYFROMWKB - 731)))) != 0) || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & ((1L << (GEOMETRYN - 795)) | (1L << (GEOMETRYTYPE - 795)) | (1L << (GEOMFROMTEXT - 795)) | (1L << (GEOMFROMWKB - 795)) | (1L << (GET_FORMAT - 795)) | (1L << (GET_LOCK - 795)) | (1L << (GLENGTH - 795)) | (1L << (GREATEST - 795)) | (1L << (GTID_SUBSET - 795)) | (1L << (GTID_SUBTRACT - 795)) | (1L << (HEX - 795)) | (1L << (IFNULL - 795)) | (1L << (INET6_ATON - 795)) | (1L << (INET6_NTOA - 795)) | (1L << (INET_ATON - 795)) | (1L << (INET_NTOA - 795)) | (1L << (INSTR - 795)) | (1L << (INTERIORRINGN - 795)) | (1L << (INTERSECTS - 795)) | (1L << (ISCLOSED - 795)) | (1L << (ISEMPTY - 795)) | (1L << (ISNULL - 795)) | (1L << (ISSIMPLE - 795)) | (1L << (IS_FREE_LOCK - 795)) | (1L << (IS_IPV4 - 795)) | (1L << (IS_IPV4_COMPAT - 795)) | (1L << (IS_IPV4_MAPPED - 795)) | (1L << (IS_IPV6 - 795)) | (1L << (IS_USED_LOCK - 795)) | (1L << (LAST_INSERT_ID - 795)) | (1L << (LCASE - 795)) | (1L << (LEAST - 795)) | (1L << (LENGTH - 795)) | (1L << (LINEFROMTEXT - 795)) | (1L << (LINEFROMWKB - 795)) | (1L << (LINESTRINGFROMTEXT - 795)) | (1L << (LINESTRINGFROMWKB - 795)) | (1L << (LN - 795)) | (1L << (LOAD_FILE - 795)) | (1L << (LOCATE - 795)) | (1L << (LOG - 795)) | (1L << (LOG10 - 795)) | (1L << (LOG2 - 795)) | (1L << (LOWER - 795)) | (1L << (LPAD - 795)) | (1L << (LTRIM - 795)) | (1L << (MAKEDATE - 795)) | (1L << (MAKETIME - 795)) | (1L << (MAKE_SET - 795)) | (1L << (MASTER_POS_WAIT - 795)) | (1L << (MBRCONTAINS - 795)) | (1L << (MBRDISJOINT - 795)) | (1L << (MBREQUAL - 795)) | (1L << (MBRINTERSECTS - 795)) | (1L << (MBROVERLAPS - 795)) | (1L << (MBRTOUCHES - 795)) | (1L << (MBRWITHIN - 795)) | (1L << (MD5 - 795)) | (1L << (MLINEFROMTEXT - 795)) | (1L << (MLINEFROMWKB - 795)) | (1L << (MONTHNAME - 795)) | (1L << (MPOINTFROMTEXT - 795)) | (1L << (MPOINTFROMWKB - 795)) | (1L << (MPOLYFROMTEXT - 795)))) != 0) || ((((_la - 859)) & ~0x3f) == 0 && ((1L << (_la - 859)) & ((1L << (MPOLYFROMWKB - 859)) | (1L << (MULTILINESTRINGFROMTEXT - 859)) | (1L << (MULTILINESTRINGFROMWKB - 859)) | (1L << (MULTIPOINTFROMTEXT - 859)) | (1L << (MULTIPOINTFROMWKB - 859)) | (1L << (MULTIPOLYGONFROMTEXT - 859)) | (1L << (MULTIPOLYGONFROMWKB - 859)) | (1L << (NAME_CONST - 859)) | (1L << (NULLIF - 859)) | (1L << (NUMGEOMETRIES - 859)) | (1L << (NUMINTERIORRINGS - 859)) | (1L << (NUMPOINTS - 859)) | (1L << (OCT - 859)) | (1L << (OCTET_LENGTH - 859)) | (1L << (ORD - 859)) | (1L << (OVERLAPS - 859)) | (1L << (PERIOD_ADD - 859)) | (1L << (PERIOD_DIFF - 859)) | (1L << (PI - 859)) | (1L << (POINTFROMTEXT - 859)) | (1L << (POINTFROMWKB - 859)) | (1L << (POINTN - 859)) | (1L << (POLYFROMTEXT - 859)) | (1L << (POLYFROMWKB - 859)) | (1L << (POLYGONFROMTEXT - 859)) | (1L << (POLYGONFROMWKB - 859)) | (1L << (POW - 859)) | (1L << (POWER - 859)) | (1L << (QUOTE - 859)) | (1L << (RADIANS - 859)) | (1L << (RAND - 859)) | (1L << (RANDOM_BYTES - 859)) | (1L << (RELEASE_LOCK - 859)) | (1L << (REVERSE - 859)) | (1L << (ROUND - 859)) | (1L << (ROW_COUNT - 859)) | (1L << (RPAD - 859)) | (1L << (RTRIM - 859)) | (1L << (SEC_TO_TIME - 859)) | (1L << (SESSION_USER - 859)) | (1L << (SHA - 859)) | (1L << (SHA1 - 859)) | (1L << (SHA2 - 859)) | (1L << (SCHEMA_NAME - 859)) | (1L << (SIGN - 859)) | (1L << (SIN - 859)) | (1L << (SLEEP - 859)) | (1L << (SOUNDEX - 859)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 859)) | (1L << (SQRT - 859)) | (1L << (SRID - 859)) | (1L << (STARTPOINT - 859)) | (1L << (STRCMP - 859)) | (1L << (STR_TO_DATE - 859)) | (1L << (ST_AREA - 859)) | (1L << (ST_ASBINARY - 859)) | (1L << (ST_ASTEXT - 859)) | (1L << (ST_ASWKB - 859)) | (1L << (ST_ASWKT - 859)) | (1L << (ST_BUFFER - 859)) | (1L << (ST_CENTROID - 859)) | (1L << (ST_CONTAINS - 859)) | (1L << (ST_CROSSES - 859)) | (1L << (ST_DIFFERENCE - 859)))) != 0) || ((((_la - 923)) & ~0x3f) == 0 && ((1L << (_la - 923)) & ((1L << (ST_DIMENSION - 923)) | (1L << (ST_DISJOINT - 923)) | (1L << (ST_DISTANCE - 923)) | (1L << (ST_ENDPOINT - 923)) | (1L << (ST_ENVELOPE - 923)) | (1L << (ST_EQUALS - 923)) | (1L << (ST_EXTERIORRING - 923)) | (1L << (ST_GEOMCOLLFROMTEXT - 923)) | (1L << (ST_GEOMCOLLFROMTXT - 923)) | (1L << (ST_GEOMCOLLFROMWKB - 923)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 923)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 923)) | (1L << (ST_GEOMETRYFROMTEXT - 923)) | (1L << (ST_GEOMETRYFROMWKB - 923)) | (1L << (ST_GEOMETRYN - 923)) | (1L << (ST_GEOMETRYTYPE - 923)) | (1L << (ST_GEOMFROMTEXT - 923)) | (1L << (ST_GEOMFROMWKB - 923)) | (1L << (ST_INTERIORRINGN - 923)) | (1L << (ST_INTERSECTION - 923)) | (1L << (ST_INTERSECTS - 923)) | (1L << (ST_ISCLOSED - 923)) | (1L << (ST_ISEMPTY - 923)) | (1L << (ST_ISSIMPLE - 923)) | (1L << (ST_LINEFROMTEXT - 923)) | (1L << (ST_LINEFROMWKB - 923)) | (1L << (ST_LINESTRINGFROMTEXT - 923)) | (1L << (ST_LINESTRINGFROMWKB - 923)) | (1L << (ST_NUMGEOMETRIES - 923)) | (1L << (ST_NUMINTERIORRING - 923)) | (1L << (ST_NUMINTERIORRINGS - 923)) | (1L << (ST_NUMPOINTS - 923)) | (1L << (ST_OVERLAPS - 923)) | (1L << (ST_POINTFROMTEXT - 923)) | (1L << (ST_POINTFROMWKB - 923)) | (1L << (ST_POINTN - 923)) | (1L << (ST_POLYFROMTEXT - 923)) | (1L << (ST_POLYFROMWKB - 923)) | (1L << (ST_POLYGONFROMTEXT - 923)) | (1L << (ST_POLYGONFROMWKB - 923)) | (1L << (ST_SRID - 923)) | (1L << (ST_STARTPOINT - 923)) | (1L << (ST_SYMDIFFERENCE - 923)) | (1L << (ST_TOUCHES - 923)) | (1L << (ST_UNION - 923)) | (1L << (ST_WITHIN - 923)) | (1L << (ST_X - 923)) | (1L << (ST_Y - 923)) | (1L << (SUBDATE - 923)) | (1L << (SUBSTRING_INDEX - 923)) | (1L << (SUBTIME - 923)) | (1L << (SYSTEM_USER - 923)) | (1L << (TAN - 923)) | (1L << (TIMEDIFF - 923)) | (1L << (TIMESTAMPADD - 923)) | (1L << (TIMESTAMPDIFF - 923)) | (1L << (TIME_FORMAT - 923)) | (1L << (TIME_TO_SEC - 923)) | (1L << (TOUCHES - 923)) | (1L << (TO_BASE64 - 923)) | (1L << (TO_DAYS - 923)) | (1L << (TO_SECONDS - 923)) | (1L << (UCASE - 923)) | (1L << (UNCOMPRESS - 923)))) != 0) || ((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (UNCOMPRESSED_LENGTH - 987)) | (1L << (UNHEX - 987)) | (1L << (UNIX_TIMESTAMP - 987)) | (1L << (UPDATEXML - 987)) | (1L << (UPPER - 987)) | (1L << (UUID - 987)) | (1L << (UUID_SHORT - 987)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 987)) | (1L << (VERSION - 987)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 987)) | (1L << (WEEKDAY - 987)) | (1L << (WEEKOFYEAR - 987)) | (1L << (WEIGHT_STRING - 987)) | (1L << (WITHIN - 987)) | (1L << (YEARWEEK - 987)) | (1L << (Y_FUNCTION - 987)) | (1L << (X_FUNCTION - 987)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 987)) | (1L << (STRING_LITERAL - 987)))) != 0) || _la==ID || _la==REVERSE_QUOTE_ID) {
				{
				setState(3787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3786);
					match(AS);
					}
				}

				setState(3789);
				uid();
				}
			}

			setState(3792);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(GBaseParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_lockAction);
		int _la;
		try {
			setState(3802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3794);
				match(READ);
				setState(3796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3795);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3798);
					match(LOW_PRIORITY);
					}
				}

				setState(3801);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(GBaseParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(GBaseParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(GBaseParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_transactionOption);
		try {
			setState(3811);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3804);
				match(ISOLATION);
				setState(3805);
				match(LEVEL);
				setState(3806);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3807);
				match(READ);
				setState(3808);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3809);
				match(READ);
				setState(3810);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(GBaseParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(GBaseParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(GBaseParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(GBaseParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_transactionLevel);
		try {
			setState(3820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3813);
				match(REPEATABLE);
				setState(3814);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3815);
				match(READ);
				setState(3816);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3817);
				match(READ);
				setState(3818);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3819);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(GBaseParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3822);
			match(CHANGE);
			setState(3823);
			match(MASTER);
			setState(3824);
			match(TO);
			setState(3825);
			masterOption();
			setState(3830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3826);
				match(COMMA);
				setState(3827);
				masterOption();
				}
				}
				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3833);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(GBaseParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(GBaseParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(GBaseParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			match(CHANGE);
			setState(3837);
			match(REPLICATION);
			setState(3838);
			match(FILTER);
			setState(3839);
			replicationFilter();
			setState(3844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3840);
				match(COMMA);
				setState(3841);
				replicationFilter();
				}
				}
				setState(3846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(GBaseParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(GBaseParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3847);
			match(PURGE);
			setState(3848);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3849);
			match(LOGS);
			setState(3854);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3850);
				match(TO);
				setState(3851);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3852);
				match(BEFORE);
				setState(3853);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			match(RESET);
			setState(3857);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3859);
			match(RESET);
			setState(3860);
			match(SLAVE);
			setState(3862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3861);
				match(ALL);
				}
			}

			setState(3865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3864);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(GBaseParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3867);
			match(START);
			setState(3868);
			match(SLAVE);
			setState(3877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3869);
				threadType();
				setState(3874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3870);
					match(COMMA);
					setState(3871);
					threadType();
					}
					}
					setState(3876);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3879);
				match(UNTIL);
				setState(3880);
				untilOption();
				}
			}

			setState(3886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3883);
				connectionOption();
				}
				}
				setState(3888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3889);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(GBaseParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3892);
			match(STOP);
			setState(3893);
			match(SLAVE);
			setState(3902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3894);
				threadType();
				setState(3899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3895);
					match(COMMA);
					setState(3896);
					threadType();
					}
					}
					setState(3901);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(GBaseParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3904);
			match(START);
			setState(3905);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(GBaseParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(GBaseParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3907);
			match(STOP);
			setState(3908);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(GBaseParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(GBaseParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(GBaseParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_masterOption);
		int _la;
		try {
			setState(3939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3910);
				stringMasterOption();
				setState(3911);
				match(EQUAL_SYMBOL);
				setState(3912);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3914);
				decimalMasterOption();
				setState(3915);
				match(EQUAL_SYMBOL);
				setState(3916);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3918);
				boolMasterOption();
				setState(3919);
				match(EQUAL_SYMBOL);
				setState(3920);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3922);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3923);
				match(EQUAL_SYMBOL);
				setState(3924);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3925);
				match(IGNORE_SERVER_IDS);
				setState(3926);
				match(EQUAL_SYMBOL);
				setState(3927);
				match(LR_BRACKET);
				setState(3936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
					{
					setState(3928);
					uid();
					setState(3933);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3929);
						match(COMMA);
						setState(3930);
						uid();
						}
						}
						setState(3935);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3938);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(GBaseParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(GBaseParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(GBaseParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(GBaseParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(GBaseParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(GBaseParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(GBaseParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(GBaseParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(GBaseParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(GBaseParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(GBaseParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(GBaseParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(GBaseParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(GBaseParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3941);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 418)) & ~0x3f) == 0 && ((1L << (_la - 418)) & ((1L << (MASTER_HOST - 418)) | (1L << (MASTER_LOG_FILE - 418)) | (1L << (MASTER_PASSWORD - 418)) | (1L << (MASTER_SSL_CA - 418)) | (1L << (MASTER_SSL_CAPATH - 418)) | (1L << (MASTER_SSL_CERT - 418)) | (1L << (MASTER_SSL_CIPHER - 418)) | (1L << (MASTER_SSL_CRL - 418)) | (1L << (MASTER_SSL_CRLPATH - 418)) | (1L << (MASTER_SSL_KEY - 418)) | (1L << (MASTER_TLS_VERSION - 418)) | (1L << (MASTER_USER - 418)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(GBaseParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(GBaseParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(GBaseParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(GBaseParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(GBaseParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(GBaseParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3943);
			_la = _input.LA(1);
			if ( !(((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (MASTER_CONNECT_RETRY - 415)) | (1L << (MASTER_DELAY - 415)) | (1L << (MASTER_LOG_POS - 415)) | (1L << (MASTER_PORT - 415)) | (1L << (MASTER_RETRY_COUNT - 415)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(GBaseParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(GBaseParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(GBaseParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(GBaseParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3947);
			match(FOR);
			setState(3948);
			match(CHANNEL);
			setState(3949);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(GBaseParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(GBaseParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(GBaseParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(GBaseParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_replicationFilter);
		int _la;
		try {
			setState(4000);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3951);
				match(REPLICATE_DO_DB);
				setState(3952);
				match(EQUAL_SYMBOL);
				setState(3953);
				match(LR_BRACKET);
				setState(3954);
				uidList();
				setState(3955);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3957);
				match(REPLICATE_IGNORE_DB);
				setState(3958);
				match(EQUAL_SYMBOL);
				setState(3959);
				match(LR_BRACKET);
				setState(3960);
				uidList();
				setState(3961);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3963);
				match(REPLICATE_DO_TABLE);
				setState(3964);
				match(EQUAL_SYMBOL);
				setState(3965);
				match(LR_BRACKET);
				setState(3966);
				tables();
				setState(3967);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3969);
				match(REPLICATE_IGNORE_TABLE);
				setState(3970);
				match(EQUAL_SYMBOL);
				setState(3971);
				match(LR_BRACKET);
				setState(3972);
				tables();
				setState(3973);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3975);
				match(REPLICATE_WILD_DO_TABLE);
				setState(3976);
				match(EQUAL_SYMBOL);
				setState(3977);
				match(LR_BRACKET);
				setState(3978);
				simpleStrings();
				setState(3979);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3981);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3982);
				match(EQUAL_SYMBOL);
				setState(3983);
				match(LR_BRACKET);
				setState(3984);
				simpleStrings();
				setState(3985);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3987);
				match(REPLICATE_REWRITE_DB);
				setState(3988);
				match(EQUAL_SYMBOL);
				setState(3989);
				match(LR_BRACKET);
				setState(3990);
				tablePair();
				setState(3995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3991);
					match(COMMA);
					setState(3992);
					tablePair();
					}
					}
					setState(3997);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3998);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4002);
			match(LR_BRACKET);
			setState(4003);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4004);
			match(COMMA);
			setState(4005);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4006);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(GBaseParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(GBaseParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4008);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(GBaseParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(GBaseParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(GBaseParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(GBaseParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(GBaseParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(GBaseParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(GBaseParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_untilOption);
		int _la;
		try {
			setState(4028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4010);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4011);
				match(EQUAL_SYMBOL);
				setState(4012);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4013);
				match(MASTER_LOG_FILE);
				setState(4014);
				match(EQUAL_SYMBOL);
				setState(4015);
				match(STRING_LITERAL);
				setState(4016);
				match(COMMA);
				setState(4017);
				match(MASTER_LOG_POS);
				setState(4018);
				match(EQUAL_SYMBOL);
				setState(4019);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4020);
				match(RELAY_LOG_FILE);
				setState(4021);
				match(EQUAL_SYMBOL);
				setState(4022);
				match(STRING_LITERAL);
				setState(4023);
				match(COMMA);
				setState(4024);
				match(RELAY_LOG_POS);
				setState(4025);
				match(EQUAL_SYMBOL);
				setState(4026);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4027);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(GBaseParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(GBaseParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_connectionOption);
		try {
			setState(4042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4030);
				match(USER);
				setState(4031);
				match(EQUAL_SYMBOL);
				setState(4032);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4033);
				match(PASSWORD);
				setState(4034);
				match(EQUAL_SYMBOL);
				setState(4035);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4036);
				match(DEFAULT_AUTH);
				setState(4037);
				match(EQUAL_SYMBOL);
				setState(4038);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4039);
				match(PLUGIN_DIR);
				setState(4040);
				match(EQUAL_SYMBOL);
				setState(4041);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_gtuidSet);
		int _la;
		try {
			setState(4053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044);
				uuidSet();
				setState(4049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4045);
					match(COMMA);
					setState(4046);
					uuidSet();
					}
					}
					setState(4051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4052);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(GBaseParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4055);
			match(XA);
			setState(4056);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4057);
			xid();
			setState(4059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4058);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(GBaseParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(GBaseParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061);
			match(XA);
			setState(4062);
			match(END);
			setState(4063);
			xid();
			setState(4069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4064);
				match(SUSPEND);
				setState(4067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4065);
					match(FOR);
					setState(4066);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			match(XA);
			setState(4072);
			match(PREPARE);
			setState(4073);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(GBaseParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(GBaseParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(GBaseParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4075);
			match(XA);
			setState(4076);
			match(COMMIT);
			setState(4077);
			xid();
			setState(4080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4078);
				match(ONE);
				setState(4079);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4082);
			match(XA);
			setState(4083);
			match(ROLLBACK);
			setState(4084);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(GBaseParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(GBaseParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			match(XA);
			setState(4087);
			match(RECOVER);
			setState(4090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4088);
				match(CONVERT);
				setState(4089);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			match(PREPARE);
			setState(4093);
			uid();
			setState(4094);
			match(FROM);
			setState(4097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4095);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4096);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(GBaseParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			match(EXECUTE);
			setState(4100);
			uid();
			setState(4103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4101);
				match(USING);
				setState(4102);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(GBaseParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4105);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4106);
			match(PREPARE);
			setState(4107);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_routineBody);
		try {
			setState(4111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4109);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4110);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(GBaseParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(GBaseParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				{
				setState(4113);
				uid();
				setState(4114);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4118);
			match(BEGIN);
			{
			setState(4124);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4119);
					declareVariable();
					setState(4120);
					match(SEMI);
					}
					} 
				}
				setState(4126);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
			}
			setState(4132);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4127);
					declareCondition();
					setState(4128);
					match(SEMI);
					}
					} 
				}
				setState(4134);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
			}
			setState(4140);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4135);
					declareCursor();
					setState(4136);
					match(SEMI);
					}
					} 
				}
				setState(4142);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
			}
			setState(4148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DECLARE) {
				{
				{
				setState(4143);
				declareHandler();
				setState(4144);
				match(SEMI);
				}
				}
				setState(4150);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4154);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4151);
					procedureSqlStatement();
					}
					} 
				}
				setState(4156);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			}
			}
			setState(4157);
			match(END);
			setState(4159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				{
				setState(4158);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(GBaseParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(GBaseParser.CASE, i);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(GBaseParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4161);
			match(CASE);
			setState(4164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				{
				setState(4162);
				uid();
				}
				break;
			case 2:
				{
				setState(4163);
				expression(0);
				}
				break;
			}
			setState(4167); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4166);
				caseAlternative();
				}
				}
				setState(4169); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4171);
				match(ELSE);
				setState(4173); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4172);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4175); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,599,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4179);
			match(END);
			setState(4180);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(GBaseParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(GBaseParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(GBaseParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			match(IF);
			setState(4183);
			expression(0);
			setState(4184);
			match(THEN);
			setState(4186); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4185);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4188); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4190);
				elifAlternative();
				}
				}
				setState(4195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4196);
				match(ELSE);
				setState(4198); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4197);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4200); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,603,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4204);
			match(END);
			setState(4205);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(GBaseParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207);
			match(ITERATE);
			setState(4208);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(GBaseParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			match(LEAVE);
			setState(4211);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(GBaseParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(GBaseParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(4213);
				uid();
				setState(4214);
				match(COLON_SYMB);
				}
			}

			setState(4218);
			match(LOOP);
			setState(4220); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4219);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4222); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,606,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4224);
			match(END);
			setState(4225);
			match(LOOP);
			setState(4227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(4226);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(GBaseParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(GBaseParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(GBaseParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(4229);
				uid();
				setState(4230);
				match(COLON_SYMB);
				}
			}

			setState(4234);
			match(REPEAT);
			setState(4236); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4235);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4238); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,609,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4240);
			match(UNTIL);
			setState(4241);
			expression(0);
			setState(4242);
			match(END);
			setState(4243);
			match(REPEAT);
			setState(4245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(4244);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(GBaseParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4247);
			match(RETURN);
			setState(4248);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(GBaseParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(GBaseParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(4250);
				uid();
				setState(4251);
				match(COLON_SYMB);
				}
			}

			setState(4255);
			match(WHILE);
			setState(4256);
			expression(0);
			setState(4257);
			match(DO);
			setState(4259); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4258);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4261); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,612,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4263);
			match(END);
			setState(4264);
			match(WHILE);
			setState(4266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CURRENT - 33)) | (1L << (DATABASE - 33)) | (1L << (DIAGNOSTICS - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (NUMBER - 106)) | (1L << (RIGHT - 106)) | (1L << (STACKED - 106)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)))) != 0) || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & ((1L << (POSITION - 270)) | (1L << (ACCOUNT - 270)) | (1L << (ACTION - 270)) | (1L << (AFTER - 270)) | (1L << (AGGREGATE - 270)) | (1L << (ALGORITHM - 270)) | (1L << (ANY - 270)) | (1L << (AT - 270)) | (1L << (AUTHORS - 270)) | (1L << (AUTOCOMMIT - 270)) | (1L << (AUTOEXTEND_SIZE - 270)) | (1L << (AUTO_INCREMENT - 270)) | (1L << (AVG_ROW_LENGTH - 270)) | (1L << (BEGIN - 270)) | (1L << (BINLOG - 270)) | (1L << (BIT - 270)) | (1L << (BLOCK - 270)) | (1L << (BOOL - 270)) | (1L << (BOOLEAN - 270)) | (1L << (BTREE - 270)) | (1L << (CACHE - 270)) | (1L << (CASCADED - 270)) | (1L << (CHAIN - 270)) | (1L << (CHANGED - 270)) | (1L << (CHANNEL - 270)) | (1L << (CHECKSUM - 270)) | (1L << (PAGE_CHECKSUM - 270)) | (1L << (CIPHER - 270)) | (1L << (CLASS_ORIGIN - 270)) | (1L << (CLIENT - 270)) | (1L << (CLOSE - 270)) | (1L << (COALESCE - 270)) | (1L << (CODE - 270)) | (1L << (COLUMNS - 270)) | (1L << (COLUMN_FORMAT - 270)) | (1L << (COLUMN_NAME - 270)) | (1L << (COMMENT - 270)) | (1L << (COMMIT - 270)) | (1L << (COMPACT - 270)) | (1L << (COMPLETION - 270)) | (1L << (COMPRESSED - 270)) | (1L << (COMPRESSION - 270)) | (1L << (CONCURRENT - 270)) | (1L << (CONNECTION - 270)) | (1L << (CONSISTENT - 270)) | (1L << (CONSTRAINT_CATALOG - 270)) | (1L << (CONSTRAINT_SCHEMA - 270)) | (1L << (CONSTRAINT_NAME - 270)) | (1L << (CONTAINS - 270)) | (1L << (CONTEXT - 270)) | (1L << (CONTRIBUTORS - 270)) | (1L << (COPY - 270)) | (1L << (CPU - 270)) | (1L << (CURSOR_NAME - 270)) | (1L << (DATA - 270)) | (1L << (DATAFILE - 270)) | (1L << (DEALLOCATE - 270)))) != 0) || ((((_la - 334)) & ~0x3f) == 0 && ((1L << (_la - 334)) & ((1L << (DEFAULT_AUTH - 334)) | (1L << (DEFINER - 334)) | (1L << (DELAY_KEY_WRITE - 334)) | (1L << (DES_KEY_FILE - 334)) | (1L << (DIRECTORY - 334)) | (1L << (DISABLE - 334)) | (1L << (DISCARD - 334)) | (1L << (DISK - 334)) | (1L << (DO - 334)) | (1L << (DUMPFILE - 334)) | (1L << (DUPLICATE - 334)) | (1L << (DYNAMIC - 334)) | (1L << (ENABLE - 334)) | (1L << (ENCRYPTION - 334)) | (1L << (END - 334)) | (1L << (ENDS - 334)) | (1L << (ENGINE - 334)) | (1L << (ENGINES - 334)) | (1L << (ERROR - 334)) | (1L << (ERRORS - 334)) | (1L << (ESCAPE - 334)) | (1L << (EVEN - 334)) | (1L << (EVENT - 334)) | (1L << (EVENTS - 334)) | (1L << (EVERY - 334)) | (1L << (EXCHANGE - 334)) | (1L << (EXCLUSIVE - 334)) | (1L << (EXPIRE - 334)) | (1L << (EXPORT - 334)) | (1L << (EXTENDED - 334)) | (1L << (EXTENT_SIZE - 334)) | (1L << (FAST - 334)) | (1L << (FAULTS - 334)) | (1L << (FIELDS - 334)) | (1L << (FILE_BLOCK_SIZE - 334)) | (1L << (FILTER - 334)) | (1L << (FIRST - 334)) | (1L << (FIXED - 334)) | (1L << (FLUSH - 334)) | (1L << (FOLLOWS - 334)) | (1L << (FOUND - 334)) | (1L << (FULL - 334)) | (1L << (FUNCTION - 334)) | (1L << (GENERAL - 334)) | (1L << (GLOBAL - 334)) | (1L << (GRANTS - 334)) | (1L << (GROUP_REPLICATION - 334)) | (1L << (HANDLER - 334)) | (1L << (HASH - 334)) | (1L << (HELP - 334)) | (1L << (HOST - 334)) | (1L << (HOSTS - 334)) | (1L << (IDENTIFIED - 334)) | (1L << (IGNORE_SERVER_IDS - 334)) | (1L << (IMPORT - 334)) | (1L << (INDEXES - 334)) | (1L << (INITIAL_SIZE - 334)) | (1L << (INPLACE - 334)) | (1L << (INSERT_METHOD - 334)) | (1L << (INSTALL - 334)) | (1L << (INSTANCE - 334)) | (1L << (INVISIBLE - 334)) | (1L << (INVOKER - 334)) | (1L << (IO - 334)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (IO_THREAD - 398)) | (1L << (IPC - 398)) | (1L << (ISOLATION - 398)) | (1L << (ISSUER - 398)) | (1L << (JSON - 398)) | (1L << (KEY_BLOCK_SIZE - 398)) | (1L << (LANGUAGE - 398)) | (1L << (LAST - 398)) | (1L << (LEAVES - 398)) | (1L << (LESS - 398)) | (1L << (LEVEL - 398)) | (1L << (LIST - 398)) | (1L << (LOCAL - 398)) | (1L << (LOGFILE - 398)) | (1L << (LOGS - 398)) | (1L << (MASTER - 398)) | (1L << (MASTER_AUTO_POSITION - 398)) | (1L << (MASTER_CONNECT_RETRY - 398)) | (1L << (MASTER_DELAY - 398)) | (1L << (MASTER_HEARTBEAT_PERIOD - 398)) | (1L << (MASTER_HOST - 398)) | (1L << (MASTER_LOG_FILE - 398)) | (1L << (MASTER_LOG_POS - 398)) | (1L << (MASTER_PASSWORD - 398)) | (1L << (MASTER_PORT - 398)) | (1L << (MASTER_RETRY_COUNT - 398)) | (1L << (MASTER_SSL - 398)) | (1L << (MASTER_SSL_CA - 398)) | (1L << (MASTER_SSL_CAPATH - 398)) | (1L << (MASTER_SSL_CERT - 398)) | (1L << (MASTER_SSL_CIPHER - 398)) | (1L << (MASTER_SSL_CRL - 398)) | (1L << (MASTER_SSL_CRLPATH - 398)) | (1L << (MASTER_SSL_KEY - 398)) | (1L << (MASTER_TLS_VERSION - 398)) | (1L << (MASTER_USER - 398)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 398)) | (1L << (MAX_QUERIES_PER_HOUR - 398)) | (1L << (MAX_ROWS - 398)) | (1L << (MAX_SIZE - 398)) | (1L << (MAX_UPDATES_PER_HOUR - 398)) | (1L << (MAX_USER_CONNECTIONS - 398)) | (1L << (MEDIUM - 398)) | (1L << (MEMBER - 398)) | (1L << (MERGE - 398)) | (1L << (MESSAGE_TEXT - 398)) | (1L << (MID - 398)) | (1L << (MIGRATE - 398)) | (1L << (MIN_ROWS - 398)) | (1L << (MODE - 398)) | (1L << (MODIFY - 398)) | (1L << (MUTEX - 398)) | (1L << (MYSQL - 398)) | (1L << (MYSQL_ERRNO - 398)) | (1L << (NAME - 398)) | (1L << (NAMES - 398)) | (1L << (NCHAR - 398)) | (1L << (NEVER - 398)) | (1L << (NEXT - 398)) | (1L << (NO - 398)) | (1L << (NODEGROUP - 398)) | (1L << (NONE - 398)) | (1L << (OFFLINE - 398)) | (1L << (OFFSET - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (OF - 462)) | (1L << (OJ - 462)) | (1L << (OLD_PASSWORD - 462)) | (1L << (ONE - 462)) | (1L << (ONLINE - 462)) | (1L << (ONLY - 462)) | (1L << (OPEN - 462)) | (1L << (OPTIMIZER_COSTS - 462)) | (1L << (OPTIONS - 462)) | (1L << (OWNER - 462)) | (1L << (PACK_KEYS - 462)) | (1L << (PAGE - 462)) | (1L << (PARSER - 462)) | (1L << (PARTIAL - 462)) | (1L << (PARTITIONING - 462)) | (1L << (PARTITIONS - 462)) | (1L << (PASSWORD - 462)) | (1L << (PHASE - 462)) | (1L << (PLUGIN - 462)) | (1L << (PLUGIN_DIR - 462)) | (1L << (PLUGINS - 462)) | (1L << (PORT - 462)) | (1L << (PRECEDES - 462)) | (1L << (PREPARE - 462)) | (1L << (PRESERVE - 462)) | (1L << (PREV - 462)) | (1L << (PROCESSLIST - 462)) | (1L << (PROFILE - 462)) | (1L << (PROFILES - 462)) | (1L << (PROXY - 462)) | (1L << (QUERY - 462)) | (1L << (QUICK - 462)) | (1L << (REBUILD - 462)) | (1L << (RECOVER - 462)) | (1L << (REDO_BUFFER_SIZE - 462)) | (1L << (REDUNDANT - 462)) | (1L << (RELAY - 462)) | (1L << (RELAY_LOG_FILE - 462)) | (1L << (RELAY_LOG_POS - 462)) | (1L << (RELAYLOG - 462)) | (1L << (REMOVE - 462)) | (1L << (REORGANIZE - 462)) | (1L << (REPAIR - 462)) | (1L << (REPLICATE_DO_DB - 462)) | (1L << (REPLICATE_DO_TABLE - 462)) | (1L << (REPLICATE_IGNORE_DB - 462)) | (1L << (REPLICATE_IGNORE_TABLE - 462)) | (1L << (REPLICATE_REWRITE_DB - 462)) | (1L << (REPLICATE_WILD_DO_TABLE - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 462)) | (1L << (REPLICATION - 462)) | (1L << (RESET - 462)) | (1L << (RESUME - 462)) | (1L << (RETURNED_SQLSTATE - 462)) | (1L << (RETURNS - 462)) | (1L << (ROLE - 462)) | (1L << (ROLLBACK - 462)) | (1L << (ROLLUP - 462)) | (1L << (ROTATE - 462)) | (1L << (ROW - 462)) | (1L << (ROWS - 462)) | (1L << (ROW_FORMAT - 462)) | (1L << (SAVEPOINT - 462)) | (1L << (SCHEDULE - 462)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (SECURITY - 526)) | (1L << (SERVER - 526)) | (1L << (SESSION - 526)) | (1L << (SHARE - 526)) | (1L << (SHARED - 526)) | (1L << (SIGNED - 526)) | (1L << (SIMPLE - 526)) | (1L << (SLAVE - 526)) | (1L << (SLOW - 526)) | (1L << (SNAPSHOT - 526)) | (1L << (SOCKET - 526)) | (1L << (SOME - 526)) | (1L << (SONAME - 526)) | (1L << (SOUNDS - 526)) | (1L << (SOURCE - 526)) | (1L << (SQL_AFTER_GTIDS - 526)) | (1L << (SQL_AFTER_MTS_GAPS - 526)) | (1L << (SQL_BEFORE_GTIDS - 526)) | (1L << (SQL_BUFFER_RESULT - 526)) | (1L << (SQL_CACHE - 526)) | (1L << (SQL_NO_CACHE - 526)) | (1L << (SQL_THREAD - 526)) | (1L << (START - 526)) | (1L << (STARTS - 526)) | (1L << (STATS_AUTO_RECALC - 526)) | (1L << (STATS_PERSISTENT - 526)) | (1L << (STATS_SAMPLE_PAGES - 526)) | (1L << (STATUS - 526)) | (1L << (STOP - 526)) | (1L << (STORAGE - 526)) | (1L << (STRING - 526)) | (1L << (SUBCLASS_ORIGIN - 526)) | (1L << (SUBJECT - 526)) | (1L << (SUBPARTITION - 526)) | (1L << (SUBPARTITIONS - 526)) | (1L << (SUSPEND - 526)) | (1L << (SWAPS - 526)) | (1L << (SWITCHES - 526)) | (1L << (TABLE_NAME - 526)) | (1L << (TABLESPACE - 526)) | (1L << (TEMPORARY - 526)) | (1L << (TEMPTABLE - 526)) | (1L << (THAN - 526)) | (1L << (TRADITIONAL - 526)) | (1L << (TRANSACTION - 526)) | (1L << (TRANSACTIONAL - 526)) | (1L << (TRIGGERS - 526)) | (1L << (TRUNCATE - 526)) | (1L << (UNDEFINED - 526)) | (1L << (UNDOFILE - 526)) | (1L << (UNDO_BUFFER_SIZE - 526)) | (1L << (UNINSTALL - 526)) | (1L << (UNKNOWN - 526)) | (1L << (UNTIL - 526)) | (1L << (UPGRADE - 526)) | (1L << (USER - 526)) | (1L << (USE_FRM - 526)) | (1L << (USER_RESOURCES - 526)) | (1L << (VALIDATION - 526)) | (1L << (VALUE - 526)) | (1L << (VARIABLES - 526)) | (1L << (VIEW - 526)))) != 0) || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (WAIT - 590)) | (1L << (WARNINGS - 590)) | (1L << (WITHOUT - 590)) | (1L << (WORK - 590)) | (1L << (WRAPPER - 590)) | (1L << (X509 - 590)) | (1L << (XA - 590)) | (1L << (XML - 590)) | (1L << (INTERNAL - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (TABLES - 590)) | (1L << (ROUTINE - 590)) | (1L << (EXECUTE - 590)) | (1L << (FILE - 590)) | (1L << (PROCESS - 590)) | (1L << (RELOAD - 590)) | (1L << (SHUTDOWN - 590)) | (1L << (SUPER - 590)) | (1L << (PRIVILEGES - 590)) | (1L << (AUDIT_ADMIN - 590)) | (1L << (BACKUP_ADMIN - 590)) | (1L << (BINLOG_ADMIN - 590)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 590)) | (1L << (CLONE_ADMIN - 590)) | (1L << (CONNECTION_ADMIN - 590)) | (1L << (ENCRYPTION_KEY_ADMIN - 590)) | (1L << (FIREWALL_ADMIN - 590)) | (1L << (FIREWALL_USER - 590)) | (1L << (GROUP_REPLICATION_ADMIN - 590)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 590)) | (1L << (NDB_STORED_USER - 590)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 590)) | (1L << (REPLICATION_APPLIER - 590)) | (1L << (REPLICATION_SLAVE_ADMIN - 590)) | (1L << (RESOURCE_GROUP_ADMIN - 590)) | (1L << (RESOURCE_GROUP_USER - 590)) | (1L << (ROLE_ADMIN - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)) | (1L << (SET_USER_ID - 590)) | (1L << (SHOW_ROUTINE - 590)) | (1L << (SYSTEM_VARIABLES_ADMIN - 590)) | (1L << (TABLE_ENCRYPTION_ADMIN - 590)) | (1L << (VERSION_TOKEN_ADMIN - 590)) | (1L << (XA_RECOVER_ADMIN - 590)) | (1L << (ARMSCII8 - 590)) | (1L << (ASCII - 590)) | (1L << (BIG5 - 590)) | (1L << (CP1250 - 590)) | (1L << (CP1251 - 590)) | (1L << (CP1256 - 590)) | (1L << (CP1257 - 590)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (CP850 - 654)) | (1L << (CP852 - 654)) | (1L << (CP866 - 654)) | (1L << (CP932 - 654)) | (1L << (DEC8 - 654)) | (1L << (EUCJPMS - 654)) | (1L << (EUCKR - 654)) | (1L << (GB2312 - 654)) | (1L << (GBK - 654)) | (1L << (GEOSTD8 - 654)) | (1L << (GREEK - 654)) | (1L << (HEBREW - 654)) | (1L << (HP8 - 654)) | (1L << (KEYBCS2 - 654)) | (1L << (KOI8R - 654)) | (1L << (KOI8U - 654)) | (1L << (LATIN1 - 654)) | (1L << (LATIN2 - 654)) | (1L << (LATIN5 - 654)) | (1L << (LATIN7 - 654)) | (1L << (MACCE - 654)) | (1L << (MACROMAN - 654)) | (1L << (SJIS - 654)) | (1L << (SWE7 - 654)) | (1L << (TIS620 - 654)) | (1L << (UCS2 - 654)) | (1L << (UJIS - 654)) | (1L << (UTF16 - 654)) | (1L << (UTF16LE - 654)) | (1L << (UTF32 - 654)) | (1L << (UTF8 - 654)) | (1L << (UTF8MB3 - 654)) | (1L << (UTF8MB4 - 654)) | (1L << (ARCHIVE - 654)) | (1L << (BLACKHOLE - 654)) | (1L << (CSV - 654)) | (1L << (FEDERATED - 654)) | (1L << (INNODB - 654)) | (1L << (MEMORY - 654)) | (1L << (MRG_MYISAM - 654)) | (1L << (MYISAM - 654)) | (1L << (NDB - 654)) | (1L << (NDBCLUSTER - 654)) | (1L << (PERFORMANCE_SCHEMA - 654)) | (1L << (TOKUDB - 654)) | (1L << (REPEATABLE - 654)) | (1L << (COMMITTED - 654)) | (1L << (UNCOMMITTED - 654)) | (1L << (SERIALIZABLE - 654)) | (1L << (GEOMETRYCOLLECTION - 654)) | (1L << (LINESTRING - 654)) | (1L << (MULTILINESTRING - 654)) | (1L << (MULTIPOINT - 654)) | (1L << (MULTIPOLYGON - 654)) | (1L << (POINT - 654)) | (1L << (POLYGON - 654)) | (1L << (ABS - 654)) | (1L << (ACOS - 654)) | (1L << (ADDDATE - 654)) | (1L << (ADDTIME - 654)) | (1L << (AES_DECRYPT - 654)) | (1L << (AES_ENCRYPT - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (AREA - 718)) | (1L << (ASBINARY - 718)) | (1L << (ASIN - 718)) | (1L << (ASTEXT - 718)) | (1L << (ASWKB - 718)) | (1L << (ASWKT - 718)) | (1L << (ASYMMETRIC_DECRYPT - 718)) | (1L << (ASYMMETRIC_DERIVE - 718)) | (1L << (ASYMMETRIC_ENCRYPT - 718)) | (1L << (ASYMMETRIC_SIGN - 718)) | (1L << (ASYMMETRIC_VERIFY - 718)) | (1L << (ATAN - 718)) | (1L << (ATAN2 - 718)) | (1L << (BENCHMARK - 718)) | (1L << (BIN - 718)) | (1L << (BIT_COUNT - 718)) | (1L << (BIT_LENGTH - 718)) | (1L << (BUFFER - 718)) | (1L << (CATALOG_NAME - 718)) | (1L << (CEIL - 718)) | (1L << (CEILING - 718)) | (1L << (CENTROID - 718)) | (1L << (CHARACTER_LENGTH - 718)) | (1L << (CHARSET - 718)) | (1L << (CHAR_LENGTH - 718)) | (1L << (COERCIBILITY - 718)) | (1L << (COLLATION - 718)) | (1L << (COMPRESS - 718)) | (1L << (CONCAT - 718)) | (1L << (CONCAT_WS - 718)) | (1L << (CONNECTION_ID - 718)) | (1L << (CONV - 718)) | (1L << (CONVERT_TZ - 718)) | (1L << (COS - 718)) | (1L << (COT - 718)) | (1L << (CRC32 - 718)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 718)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 718)) | (1L << (CREATE_DH_PARAMETERS - 718)) | (1L << (CREATE_DIGEST - 718)) | (1L << (CROSSES - 718)) | (1L << (DATEDIFF - 718)) | (1L << (DATE_FORMAT - 718)) | (1L << (DAYNAME - 718)) | (1L << (DAYOFMONTH - 718)) | (1L << (DAYOFWEEK - 718)) | (1L << (DAYOFYEAR - 718)) | (1L << (DECODE - 718)) | (1L << (DEGREES - 718)) | (1L << (DES_DECRYPT - 718)) | (1L << (DES_ENCRYPT - 718)) | (1L << (DIMENSION - 718)) | (1L << (DISJOINT - 718)) | (1L << (ELT - 718)) | (1L << (ENCODE - 718)) | (1L << (ENCRYPT - 718)) | (1L << (ENDPOINT - 718)) | (1L << (ENVELOPE - 718)) | (1L << (EQUALS - 718)) | (1L << (EXP - 718)) | (1L << (EXPORT_SET - 718)) | (1L << (EXTERIORRING - 718)) | (1L << (EXTRACTVALUE - 718)) | (1L << (FIELD - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (FIND_IN_SET - 782)) | (1L << (FLOOR - 782)) | (1L << (FORMAT - 782)) | (1L << (FOUND_ROWS - 782)) | (1L << (FROM_BASE64 - 782)) | (1L << (FROM_DAYS - 782)) | (1L << (FROM_UNIXTIME - 782)) | (1L << (GEOMCOLLFROMTEXT - 782)) | (1L << (GEOMCOLLFROMWKB - 782)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 782)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 782)) | (1L << (GEOMETRYFROMTEXT - 782)) | (1L << (GEOMETRYFROMWKB - 782)) | (1L << (GEOMETRYN - 782)) | (1L << (GEOMETRYTYPE - 782)) | (1L << (GEOMFROMTEXT - 782)) | (1L << (GEOMFROMWKB - 782)) | (1L << (GET_FORMAT - 782)) | (1L << (GET_LOCK - 782)) | (1L << (GLENGTH - 782)) | (1L << (GREATEST - 782)) | (1L << (GTID_SUBSET - 782)) | (1L << (GTID_SUBTRACT - 782)) | (1L << (HEX - 782)) | (1L << (IFNULL - 782)) | (1L << (INET6_ATON - 782)) | (1L << (INET6_NTOA - 782)) | (1L << (INET_ATON - 782)) | (1L << (INET_NTOA - 782)) | (1L << (INSTR - 782)) | (1L << (INTERIORRINGN - 782)) | (1L << (INTERSECTS - 782)) | (1L << (ISCLOSED - 782)) | (1L << (ISEMPTY - 782)) | (1L << (ISNULL - 782)) | (1L << (ISSIMPLE - 782)) | (1L << (IS_FREE_LOCK - 782)) | (1L << (IS_IPV4 - 782)) | (1L << (IS_IPV4_COMPAT - 782)) | (1L << (IS_IPV4_MAPPED - 782)) | (1L << (IS_IPV6 - 782)) | (1L << (IS_USED_LOCK - 782)) | (1L << (LAST_INSERT_ID - 782)) | (1L << (LCASE - 782)) | (1L << (LEAST - 782)) | (1L << (LENGTH - 782)) | (1L << (LINEFROMTEXT - 782)) | (1L << (LINEFROMWKB - 782)) | (1L << (LINESTRINGFROMTEXT - 782)) | (1L << (LINESTRINGFROMWKB - 782)) | (1L << (LN - 782)) | (1L << (LOAD_FILE - 782)) | (1L << (LOCATE - 782)) | (1L << (LOG - 782)) | (1L << (LOG10 - 782)) | (1L << (LOG2 - 782)) | (1L << (LOWER - 782)) | (1L << (LPAD - 782)) | (1L << (LTRIM - 782)) | (1L << (MAKEDATE - 782)) | (1L << (MAKETIME - 782)) | (1L << (MAKE_SET - 782)) | (1L << (MASTER_POS_WAIT - 782)) | (1L << (MBRCONTAINS - 782)))) != 0) || ((((_la - 846)) & ~0x3f) == 0 && ((1L << (_la - 846)) & ((1L << (MBRDISJOINT - 846)) | (1L << (MBREQUAL - 846)) | (1L << (MBRINTERSECTS - 846)) | (1L << (MBROVERLAPS - 846)) | (1L << (MBRTOUCHES - 846)) | (1L << (MBRWITHIN - 846)) | (1L << (MD5 - 846)) | (1L << (MLINEFROMTEXT - 846)) | (1L << (MLINEFROMWKB - 846)) | (1L << (MONTHNAME - 846)) | (1L << (MPOINTFROMTEXT - 846)) | (1L << (MPOINTFROMWKB - 846)) | (1L << (MPOLYFROMTEXT - 846)) | (1L << (MPOLYFROMWKB - 846)) | (1L << (MULTILINESTRINGFROMTEXT - 846)) | (1L << (MULTILINESTRINGFROMWKB - 846)) | (1L << (MULTIPOINTFROMTEXT - 846)) | (1L << (MULTIPOINTFROMWKB - 846)) | (1L << (MULTIPOLYGONFROMTEXT - 846)) | (1L << (MULTIPOLYGONFROMWKB - 846)) | (1L << (NAME_CONST - 846)) | (1L << (NULLIF - 846)) | (1L << (NUMGEOMETRIES - 846)) | (1L << (NUMINTERIORRINGS - 846)) | (1L << (NUMPOINTS - 846)) | (1L << (OCT - 846)) | (1L << (OCTET_LENGTH - 846)) | (1L << (ORD - 846)) | (1L << (OVERLAPS - 846)) | (1L << (PERIOD_ADD - 846)) | (1L << (PERIOD_DIFF - 846)) | (1L << (PI - 846)) | (1L << (POINTFROMTEXT - 846)) | (1L << (POINTFROMWKB - 846)) | (1L << (POINTN - 846)) | (1L << (POLYFROMTEXT - 846)) | (1L << (POLYFROMWKB - 846)) | (1L << (POLYGONFROMTEXT - 846)) | (1L << (POLYGONFROMWKB - 846)) | (1L << (POW - 846)) | (1L << (POWER - 846)) | (1L << (QUOTE - 846)) | (1L << (RADIANS - 846)) | (1L << (RAND - 846)) | (1L << (RANDOM_BYTES - 846)) | (1L << (RELEASE_LOCK - 846)) | (1L << (REVERSE - 846)) | (1L << (ROUND - 846)) | (1L << (ROW_COUNT - 846)) | (1L << (RPAD - 846)) | (1L << (RTRIM - 846)) | (1L << (SEC_TO_TIME - 846)) | (1L << (SESSION_USER - 846)) | (1L << (SHA - 846)) | (1L << (SHA1 - 846)) | (1L << (SHA2 - 846)) | (1L << (SCHEMA_NAME - 846)) | (1L << (SIGN - 846)) | (1L << (SIN - 846)) | (1L << (SLEEP - 846)) | (1L << (SOUNDEX - 846)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 846)) | (1L << (SQRT - 846)) | (1L << (SRID - 846)))) != 0) || ((((_la - 910)) & ~0x3f) == 0 && ((1L << (_la - 910)) & ((1L << (STARTPOINT - 910)) | (1L << (STRCMP - 910)) | (1L << (STR_TO_DATE - 910)) | (1L << (ST_AREA - 910)) | (1L << (ST_ASBINARY - 910)) | (1L << (ST_ASTEXT - 910)) | (1L << (ST_ASWKB - 910)) | (1L << (ST_ASWKT - 910)) | (1L << (ST_BUFFER - 910)) | (1L << (ST_CENTROID - 910)) | (1L << (ST_CONTAINS - 910)) | (1L << (ST_CROSSES - 910)) | (1L << (ST_DIFFERENCE - 910)) | (1L << (ST_DIMENSION - 910)) | (1L << (ST_DISJOINT - 910)) | (1L << (ST_DISTANCE - 910)) | (1L << (ST_ENDPOINT - 910)) | (1L << (ST_ENVELOPE - 910)) | (1L << (ST_EQUALS - 910)) | (1L << (ST_EXTERIORRING - 910)) | (1L << (ST_GEOMCOLLFROMTEXT - 910)) | (1L << (ST_GEOMCOLLFROMTXT - 910)) | (1L << (ST_GEOMCOLLFROMWKB - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 910)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 910)) | (1L << (ST_GEOMETRYFROMTEXT - 910)) | (1L << (ST_GEOMETRYFROMWKB - 910)) | (1L << (ST_GEOMETRYN - 910)) | (1L << (ST_GEOMETRYTYPE - 910)) | (1L << (ST_GEOMFROMTEXT - 910)) | (1L << (ST_GEOMFROMWKB - 910)) | (1L << (ST_INTERIORRINGN - 910)) | (1L << (ST_INTERSECTION - 910)) | (1L << (ST_INTERSECTS - 910)) | (1L << (ST_ISCLOSED - 910)) | (1L << (ST_ISEMPTY - 910)) | (1L << (ST_ISSIMPLE - 910)) | (1L << (ST_LINEFROMTEXT - 910)) | (1L << (ST_LINEFROMWKB - 910)) | (1L << (ST_LINESTRINGFROMTEXT - 910)) | (1L << (ST_LINESTRINGFROMWKB - 910)) | (1L << (ST_NUMGEOMETRIES - 910)) | (1L << (ST_NUMINTERIORRING - 910)) | (1L << (ST_NUMINTERIORRINGS - 910)) | (1L << (ST_NUMPOINTS - 910)) | (1L << (ST_OVERLAPS - 910)) | (1L << (ST_POINTFROMTEXT - 910)) | (1L << (ST_POINTFROMWKB - 910)) | (1L << (ST_POINTN - 910)) | (1L << (ST_POLYFROMTEXT - 910)) | (1L << (ST_POLYFROMWKB - 910)) | (1L << (ST_POLYGONFROMTEXT - 910)) | (1L << (ST_POLYGONFROMWKB - 910)) | (1L << (ST_SRID - 910)) | (1L << (ST_STARTPOINT - 910)) | (1L << (ST_SYMDIFFERENCE - 910)) | (1L << (ST_TOUCHES - 910)) | (1L << (ST_UNION - 910)) | (1L << (ST_WITHIN - 910)) | (1L << (ST_X - 910)) | (1L << (ST_Y - 910)) | (1L << (SUBDATE - 910)) | (1L << (SUBSTRING_INDEX - 910)) | (1L << (SUBTIME - 910)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (SYSTEM_USER - 974)) | (1L << (TAN - 974)) | (1L << (TIMEDIFF - 974)) | (1L << (TIMESTAMPADD - 974)) | (1L << (TIMESTAMPDIFF - 974)) | (1L << (TIME_FORMAT - 974)) | (1L << (TIME_TO_SEC - 974)) | (1L << (TOUCHES - 974)) | (1L << (TO_BASE64 - 974)) | (1L << (TO_DAYS - 974)) | (1L << (TO_SECONDS - 974)) | (1L << (UCASE - 974)) | (1L << (UNCOMPRESS - 974)) | (1L << (UNCOMPRESSED_LENGTH - 974)) | (1L << (UNHEX - 974)) | (1L << (UNIX_TIMESTAMP - 974)) | (1L << (UPDATEXML - 974)) | (1L << (UPPER - 974)) | (1L << (UUID - 974)) | (1L << (UUID_SHORT - 974)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 974)) | (1L << (VERSION - 974)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 974)) | (1L << (WEEKDAY - 974)) | (1L << (WEEKOFYEAR - 974)) | (1L << (WEIGHT_STRING - 974)) | (1L << (WITHIN - 974)) | (1L << (YEARWEEK - 974)) | (1L << (Y_FUNCTION - 974)) | (1L << (X_FUNCTION - 974)))) != 0) || ((((_la - 1043)) & ~0x3f) == 0 && ((1L << (_la - 1043)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1043)) | (1L << (STRING_LITERAL - 1043)) | (1L << (ID - 1043)) | (1L << (REVERSE_QUOTE_ID - 1043)))) != 0)) {
				{
				setState(4265);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(GBaseParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(GBaseParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_cursorStatement);
		int _la;
		try {
			setState(4283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4268);
				match(CLOSE);
				setState(4269);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4270);
				match(FETCH);
				setState(4275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4272);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4271);
						match(NEXT);
						}
					}

					setState(4274);
					match(FROM);
					}
					break;
				}
				setState(4277);
				uid();
				setState(4278);
				match(INTO);
				setState(4279);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4281);
				match(OPEN);
				setState(4282);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(DECLARE);
			setState(4286);
			uidList();
			setState(4287);
			dataType();
			setState(4290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4288);
				match(DEFAULT);
				setState(4289);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(GBaseParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4292);
			match(DECLARE);
			setState(4293);
			uid();
			setState(4294);
			match(CONDITION);
			setState(4295);
			match(FOR);
			setState(4302);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				setState(4296);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4297);
				match(SQLSTATE);
				setState(4299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4298);
					match(VALUE);
					}
				}

				setState(4301);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(GBaseParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4304);
			match(DECLARE);
			setState(4305);
			uid();
			setState(4306);
			match(CURSOR);
			setState(4307);
			match(FOR);
			setState(4308);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(GBaseParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(GBaseParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(GBaseParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4310);
			match(DECLARE);
			setState(4311);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4312);
			match(HANDLER);
			setState(4313);
			match(FOR);
			setState(4314);
			handlerConditionValue();
			setState(4319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4315);
				match(COMMA);
				setState(4316);
				handlerConditionValue();
				}
				}
				setState(4321);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4322);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(GBaseParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(GBaseParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(GBaseParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4324);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4325);
				match(SQLSTATE);
				setState(4327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4326);
					match(VALUE);
					}
				}

				setState(4329);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4330);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4331);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4332);
				match(NOT);
				setState(4333);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4334);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(GBaseParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				{
				setState(4337);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4338);
				sqlStatement();
				}
				break;
			}
			setState(4341);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(GBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			match(WHEN);
			setState(4346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				{
				setState(4344);
				constant();
				}
				break;
			case 2:
				{
				setState(4345);
				expression(0);
				}
				break;
			}
			setState(4348);
			match(THEN);
			setState(4350); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4349);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4352); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(GBaseParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			match(ELSEIF);
			setState(4355);
			expression(0);
			setState(4356);
			match(THEN);
			setState(4358); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4357);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4360); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,626,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(GBaseParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(GBaseParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(GBaseParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alterUser);
		int _la;
		try {
			setState(4416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4362);
				match(ALTER);
				setState(4363);
				match(USER);
				setState(4364);
				userSpecification();
				setState(4369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4365);
					match(COMMA);
					setState(4366);
					userSpecification();
					}
					}
					setState(4371);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4372);
				match(ALTER);
				setState(4373);
				match(USER);
				setState(4375);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4374);
					ifExists();
					}
				}

				setState(4377);
				userAuthOption();
				setState(4382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4378);
					match(COMMA);
					setState(4379);
					userAuthOption();
					}
					}
					setState(4384);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4385);
					match(REQUIRE);
					setState(4397);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4386);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4387);
						tlsOption();
						setState(4394);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4389);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4388);
								match(AND);
								}
							}

							setState(4391);
							tlsOption();
							}
							}
							setState(4396);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4401);
					match(WITH);
					setState(4403); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4402);
						userResourceOption();
						}
						}
						setState(4405); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 434)) | (1L << (MAX_QUERIES_PER_HOUR - 434)) | (1L << (MAX_UPDATES_PER_HOUR - 434)) | (1L << (MAX_USER_CONNECTIONS - 434)))) != 0) );
					}
				}

				setState(4413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4411);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4409);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4410);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4415);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(GBaseParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(GBaseParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(GBaseParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_createUser);
		int _la;
		try {
			setState(4472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4418);
				match(CREATE);
				setState(4419);
				match(USER);
				setState(4420);
				userAuthOption();
				setState(4425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4421);
					match(COMMA);
					setState(4422);
					userAuthOption();
					}
					}
					setState(4427);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4428);
				match(CREATE);
				setState(4429);
				match(USER);
				setState(4431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4430);
					ifNotExists();
					}
				}

				setState(4433);
				userAuthOption();
				setState(4438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4434);
					match(COMMA);
					setState(4435);
					userAuthOption();
					}
					}
					setState(4440);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4441);
					match(REQUIRE);
					setState(4453);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4442);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4443);
						tlsOption();
						setState(4450);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4445);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4444);
								match(AND);
								}
							}

							setState(4447);
							tlsOption();
							}
							}
							setState(4452);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4457);
					match(WITH);
					setState(4459); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4458);
						userResourceOption();
						}
						}
						setState(4461); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 434)) | (1L << (MAX_QUERIES_PER_HOUR - 434)) | (1L << (MAX_UPDATES_PER_HOUR - 434)) | (1L << (MAX_USER_CONNECTIONS - 434)))) != 0) );
					}
				}

				setState(4469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4467);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4465);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4466);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4471);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4474);
			match(DROP);
			setState(4475);
			match(USER);
			setState(4477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4476);
				ifExists();
				}
			}

			setState(4479);
			userName();
			setState(4484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4480);
				match(COMMA);
				setState(4481);
				userName();
				}
				}
				setState(4486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(GBaseParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(GBaseParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(GBaseParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(GBaseParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(GBaseParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(GBaseParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(GBaseParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4487);
			match(GRANT);
			setState(4488);
			privelegeClause();
			setState(4493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4489);
				match(COMMA);
				setState(4490);
				privelegeClause();
				}
				}
				setState(4495);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4496);
			match(ON);
			setState(4498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(4497);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4500);
			privilegeLevel();
			setState(4501);
			match(TO);
			setState(4502);
			userAuthOption();
			setState(4507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4503);
				match(COMMA);
				setState(4504);
				userAuthOption();
				}
				}
				setState(4509);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4510);
				match(REQUIRE);
				setState(4522);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4511);
					((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4512);
					tlsOption();
					setState(4519);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						setState(4514);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4513);
							match(AND);
							}
						}

						setState(4516);
						tlsOption();
						}
						}
						setState(4521);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4526);
				match(WITH);
				setState(4532);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,661,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4530);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GRANT:
							{
							setState(4527);
							match(GRANT);
							setState(4528);
							match(OPTION);
							}
							break;
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
							{
							setState(4529);
							userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4534);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,661,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(GBaseParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(GBaseParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4537);
			match(GRANT);
			setState(4538);
			match(PROXY);
			setState(4539);
			match(ON);
			setState(4540);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4541);
			match(TO);
			setState(4542);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4543);
				match(COMMA);
				setState(4544);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4549);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4550);
				match(WITH);
				setState(4551);
				match(GRANT);
				setState(4552);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			match(RENAME);
			setState(4556);
			match(USER);
			setState(4557);
			renameUserClause();
			setState(4562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4558);
				match(COMMA);
				setState(4559);
				renameUserClause();
				}
				}
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(GBaseParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(GBaseParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(GBaseParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revokeStatement);
		int _la;
		try {
			setState(4605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4565);
				match(REVOKE);
				setState(4566);
				privelegeClause();
				setState(4571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4567);
					match(COMMA);
					setState(4568);
					privelegeClause();
					}
					}
					setState(4573);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4574);
				match(ON);
				setState(4576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
				case 1:
					{
					setState(4575);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4578);
				privilegeLevel();
				setState(4579);
				match(FROM);
				setState(4580);
				userName();
				setState(4585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4581);
					match(COMMA);
					setState(4582);
					userName();
					}
					}
					setState(4587);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4588);
				match(REVOKE);
				setState(4589);
				match(ALL);
				setState(4591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4590);
					match(PRIVILEGES);
					}
				}

				setState(4593);
				match(COMMA);
				setState(4594);
				match(GRANT);
				setState(4595);
				match(OPTION);
				setState(4596);
				match(FROM);
				setState(4597);
				userName();
				setState(4602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4598);
					match(COMMA);
					setState(4599);
					userName();
					}
					}
					setState(4604);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(GBaseParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4607);
			match(REVOKE);
			setState(4608);
			match(PROXY);
			setState(4609);
			match(ON);
			setState(4610);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(4611);
			match(FROM);
			setState(4612);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4613);
				match(COMMA);
				setState(4614);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4619);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4620);
			match(SET);
			setState(4621);
			match(PASSWORD);
			setState(4624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4622);
				match(FOR);
				setState(4623);
				userName();
				}
			}

			setState(4626);
			match(EQUAL_SYMBOL);
			setState(4629);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4627);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4628);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4631);
			userName();
			setState(4632);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_userAuthOption);
		int _la;
		try {
			setState(4658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4634);
				userName();
				setState(4635);
				match(IDENTIFIED);
				setState(4636);
				match(BY);
				setState(4637);
				match(PASSWORD);
				setState(4638);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4640);
				userName();
				setState(4641);
				match(IDENTIFIED);
				setState(4644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4642);
					match(WITH);
					setState(4643);
					authPlugin();
					}
				}

				setState(4646);
				match(BY);
				setState(4647);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4649);
				userName();
				setState(4650);
				match(IDENTIFIED);
				setState(4651);
				match(WITH);
				setState(4652);
				authPlugin();
				setState(4655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4653);
					match(AS);
					setState(4654);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4657);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(GBaseParser.SSL, 0); }
		public TerminalNode X509() { return getToken(GBaseParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(GBaseParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(GBaseParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(GBaseParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_tlsOption);
		try {
			setState(4668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4660);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4661);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4662);
				match(CIPHER);
				setState(4663);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4664);
				match(ISSUER);
				setState(4665);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4666);
				match(SUBJECT);
				setState(4667);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(GBaseParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(GBaseParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(GBaseParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(GBaseParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_userResourceOption);
		try {
			setState(4678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4670);
				match(MAX_QUERIES_PER_HOUR);
				setState(4671);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4672);
				match(MAX_UPDATES_PER_HOUR);
				setState(4673);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4674);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4675);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4676);
				match(MAX_USER_CONNECTIONS);
				setState(4677);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(GBaseParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(GBaseParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(GBaseParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(GBaseParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			match(PASSWORD);
			setState(4681);
			match(EXPIRE);
			setState(4688);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4682);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4683);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4684);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4685);
				decimalLiteral();
				setState(4686);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(GBaseParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(GBaseParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4690);
			match(ACCOUNT);
			setState(4691);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4693);
			privilege();
			setState(4698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4694);
				match(LR_BRACKET);
				setState(4695);
				uidList();
				setState(4696);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(GBaseParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(GBaseParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(GBaseParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(GBaseParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(GBaseParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(GBaseParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(GBaseParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(GBaseParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(GBaseParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(GBaseParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(GBaseParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(GBaseParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(GBaseParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(GBaseParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(GBaseParser.USAGE, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(GBaseParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(GBaseParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(GBaseParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(GBaseParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(GBaseParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(GBaseParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(GBaseParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(GBaseParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(GBaseParser.FIREWALL_USER, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(GBaseParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(GBaseParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(GBaseParser.NDB_STORED_USER, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(GBaseParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(GBaseParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(GBaseParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(GBaseParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(GBaseParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(GBaseParser.ROLE_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(GBaseParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(GBaseParser.SET_USER_ID, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(GBaseParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(GBaseParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(GBaseParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(GBaseParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(GBaseParser.XA_RECOVER_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_privilege);
		int _la;
		try {
			setState(4771);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4700);
				match(ALL);
				setState(4702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4701);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4704);
				match(ALTER);
				setState(4706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4705);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4708);
				match(CREATE);
				setState(4716);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4709);
					match(TEMPORARY);
					setState(4710);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4711);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4712);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4713);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4714);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(4715);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4718);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4719);
				match(DROP);
				setState(4721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(4720);
					match(ROLE);
					}
				}

				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4723);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4724);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4725);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4726);
				match(GRANT);
				setState(4727);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4728);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4729);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4730);
				match(LOCK);
				setState(4731);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4732);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4733);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4734);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4735);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4736);
				match(REPLICATION);
				setState(4737);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4738);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4739);
				match(SHOW);
				setState(4740);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4741);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4742);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4743);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4744);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4745);
				match(USAGE);
				}
				break;
			case AUDIT_ADMIN:
				enterOuterAlt(_localctx, 25);
				{
				setState(4746);
				match(AUDIT_ADMIN);
				}
				break;
			case BACKUP_ADMIN:
				enterOuterAlt(_localctx, 26);
				{
				setState(4747);
				match(BACKUP_ADMIN);
				}
				break;
			case BINLOG_ADMIN:
				enterOuterAlt(_localctx, 27);
				{
				setState(4748);
				match(BINLOG_ADMIN);
				}
				break;
			case BINLOG_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 28);
				{
				setState(4749);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case CLONE_ADMIN:
				enterOuterAlt(_localctx, 29);
				{
				setState(4750);
				match(CLONE_ADMIN);
				}
				break;
			case CONNECTION_ADMIN:
				enterOuterAlt(_localctx, 30);
				{
				setState(4751);
				match(CONNECTION_ADMIN);
				}
				break;
			case ENCRYPTION_KEY_ADMIN:
				enterOuterAlt(_localctx, 31);
				{
				setState(4752);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case FIREWALL_ADMIN:
				enterOuterAlt(_localctx, 32);
				{
				setState(4753);
				match(FIREWALL_ADMIN);
				}
				break;
			case FIREWALL_USER:
				enterOuterAlt(_localctx, 33);
				{
				setState(4754);
				match(FIREWALL_USER);
				}
				break;
			case GROUP_REPLICATION_ADMIN:
				enterOuterAlt(_localctx, 34);
				{
				setState(4755);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case INNODB_REDO_LOG_ARCHIVE:
				enterOuterAlt(_localctx, 35);
				{
				setState(4756);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case NDB_STORED_USER:
				enterOuterAlt(_localctx, 36);
				{
				setState(4757);
				match(NDB_STORED_USER);
				}
				break;
			case PERSIST_RO_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 37);
				{
				setState(4758);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case REPLICATION_APPLIER:
				enterOuterAlt(_localctx, 38);
				{
				setState(4759);
				match(REPLICATION_APPLIER);
				}
				break;
			case REPLICATION_SLAVE_ADMIN:
				enterOuterAlt(_localctx, 39);
				{
				setState(4760);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case RESOURCE_GROUP_ADMIN:
				enterOuterAlt(_localctx, 40);
				{
				setState(4761);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case RESOURCE_GROUP_USER:
				enterOuterAlt(_localctx, 41);
				{
				setState(4762);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case ROLE_ADMIN:
				enterOuterAlt(_localctx, 42);
				{
				setState(4763);
				match(ROLE_ADMIN);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 43);
				{
				setState(4764);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case SET_USER_ID:
				enterOuterAlt(_localctx, 44);
				{
				setState(4765);
				match(SET_USER_ID);
				}
				break;
			case SHOW_ROUTINE:
				enterOuterAlt(_localctx, 45);
				{
				setState(4766);
				match(SHOW_ROUTINE);
				}
				break;
			case SYSTEM_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 46);
				{
				setState(4767);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case TABLE_ENCRYPTION_ADMIN:
				enterOuterAlt(_localctx, 47);
				{
				setState(4768);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case VERSION_TOKEN_ADMIN:
				enterOuterAlt(_localctx, 48);
				{
				setState(4769);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case XA_RECOVER_ADMIN:
				enterOuterAlt(_localctx, 49);
				{
				setState(4770);
				match(XA_RECOVER_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(GBaseParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(GBaseParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_privilegeLevel);
		try {
			setState(4789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4773);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4774);
				match(STAR);
				setState(4775);
				match(DOT);
				setState(4776);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4777);
				uid();
				setState(4778);
				match(DOT);
				setState(4779);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4781);
				uid();
				setState(4782);
				match(DOT);
				setState(4783);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4785);
				uid();
				setState(4786);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4788);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4791);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(4792);
			match(TO);
			setState(4793);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(GBaseParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4795);
			match(ANALYZE);
			setState(4797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4796);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4799);
			match(TABLE);
			setState(4800);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4802);
			match(CHECK);
			setState(4803);
			match(TABLE);
			setState(4804);
			tables();
			setState(4808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(4805);
				checkTableOption();
				}
				}
				setState(4810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(GBaseParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4811);
			match(CHECKSUM);
			setState(4812);
			match(TABLE);
			setState(4813);
			tables();
			setState(4815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(4814);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(GBaseParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4817);
			match(OPTIMIZE);
			setState(4819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4818);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4821);
			match(TABLE);
			setState(4822);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(GBaseParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(GBaseParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4824);
			match(REPAIR);
			setState(4826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4825);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4828);
			match(TABLE);
			setState(4829);
			tables();
			setState(4831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(4830);
				match(QUICK);
				}
			}

			setState(4834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4833);
				match(EXTENDED);
				}
			}

			setState(4837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4836);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(GBaseParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(GBaseParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(GBaseParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_checkTableOption);
		try {
			setState(4846);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4839);
				match(FOR);
				setState(4840);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4841);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4842);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4843);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4844);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4845);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(GBaseParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(GBaseParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(GBaseParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(GBaseParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(GBaseParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(GBaseParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(GBaseParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4848);
			match(CREATE);
			setState(4850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4849);
				match(AGGREGATE);
				}
			}

			setState(4852);
			match(FUNCTION);
			setState(4853);
			uid();
			setState(4854);
			match(RETURNS);
			setState(4855);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (INTEGER - 189)) | (1L << (REAL - 189)) | (1L << (DECIMAL - 189)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4856);
			match(SONAME);
			setState(4857);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(GBaseParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(GBaseParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(GBaseParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4859);
			match(INSTALL);
			setState(4860);
			match(PLUGIN);
			setState(4861);
			uid();
			setState(4862);
			match(SONAME);
			setState(4863);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(GBaseParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(GBaseParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4865);
			match(UNINSTALL);
			setState(4866);
			match(PLUGIN);
			setState(4867);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(GBaseParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(GBaseParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(GBaseParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(GBaseParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(GBaseParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setStatement);
		int _la;
		try {
			setState(4920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4869);
				match(SET);
				setState(4870);
				variableClause();
				setState(4871);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4872);
				expression(0);
				setState(4880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4873);
					match(COMMA);
					setState(4874);
					variableClause();
					setState(4875);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4876);
					expression(0);
					}
					}
					setState(4882);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4883);
				match(SET);
				setState(4887);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4884);
					match(CHARACTER);
					setState(4885);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(4886);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4891);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4889);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(4890);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4893);
				match(SET);
				setState(4894);
				match(NAMES);
				setState(4901);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4895);
					charsetName();
					setState(4898);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(4896);
						match(COLLATE);
						setState(4897);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(4900);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4903);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4904);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4905);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4906);
				match(SET);
				setState(4907);
				fullId();
				setState(4908);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4909);
				expression(0);
				setState(4917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4910);
					match(COMMA);
					setState(4911);
					fullId();
					setState(4912);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4913);
					expression(0);
					}
					}
					setState(4919);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(GBaseParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(GBaseParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(GBaseParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(GBaseParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(GBaseParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(GBaseParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(GBaseParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(GBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(GBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(GBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(GBaseParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(GBaseParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(GBaseParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(GBaseParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(GBaseParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(GBaseParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(GBaseParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(GBaseParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(GBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(GBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(GBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(GBaseParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_showStatement);
		int _la;
		try {
			setState(5073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4922);
				match(SHOW);
				setState(4923);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4924);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4925);
				match(SHOW);
				setState(4926);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4927);
				match(EVENTS);
				setState(4930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4928);
					match(IN);
					setState(4929);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(4934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4932);
					match(FROM);
					setState(4933);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(4943);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4936);
					match(LIMIT);
					setState(4940);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
					case 1:
						{
						setState(4937);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(4938);
						match(COMMA);
						}
						break;
					}
					setState(4942);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4945);
				match(SHOW);
				setState(4946);
				showCommonEntity();
				setState(4948);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4947);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4950);
				match(SHOW);
				setState(4952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4951);
					match(FULL);
					}
				}

				setState(4954);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4955);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4956);
				tableName();
				setState(4959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4957);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4958);
					uid();
					}
				}

				setState(4962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4961);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4964);
				match(SHOW);
				setState(4965);
				match(CREATE);
				setState(4966);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4967);
					ifNotExists();
					}
				}

				setState(4970);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4971);
				match(SHOW);
				setState(4972);
				match(CREATE);
				setState(4973);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (PROCEDURE - 118)) | (1L << (TABLE - 118)) | (1L << (TRIGGER - 118)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4974);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4975);
				match(SHOW);
				setState(4976);
				match(CREATE);
				setState(4977);
				match(USER);
				setState(4978);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4979);
				match(SHOW);
				setState(4980);
				match(ENGINE);
				setState(4981);
				engineName();
				setState(4982);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4984);
				match(SHOW);
				setState(4985);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4986);
				match(SHOW);
				setState(4987);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(4988);
				match(LIMIT);
				setState(4992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
				case 1:
					{
					setState(4989);
					((ShowErrorsContext)_localctx).offset = decimalLiteral();
					setState(4990);
					match(COMMA);
					}
					break;
				}
				setState(4994);
				((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4995);
				match(SHOW);
				setState(4996);
				match(COUNT);
				setState(4997);
				match(LR_BRACKET);
				setState(4998);
				match(STAR);
				setState(4999);
				match(RR_BRACKET);
				setState(5000);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5001);
				match(SHOW);
				setState(5002);
				showSchemaEntity();
				setState(5005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5003);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5004);
					uid();
					}
				}

				setState(5008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5007);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5010);
				match(SHOW);
				setState(5011);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5012);
				match(CODE);
				setState(5013);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5014);
				match(SHOW);
				setState(5015);
				match(GRANTS);
				setState(5018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5016);
					match(FOR);
					setState(5017);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5020);
				match(SHOW);
				setState(5021);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5022);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5023);
				tableName();
				setState(5026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5024);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5025);
					uid();
					}
				}

				setState(5030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5028);
					match(WHERE);
					setState(5029);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5032);
				match(SHOW);
				setState(5033);
				match(OPEN);
				setState(5034);
				match(TABLES);
				setState(5037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5035);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5036);
					uid();
					}
				}

				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5039);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5042);
				match(SHOW);
				setState(5043);
				match(PROFILE);
				setState(5044);
				showProfileType();
				setState(5049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5045);
					match(COMMA);
					setState(5046);
					showProfileType();
					}
					}
					setState(5051);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5052);
					match(FOR);
					setState(5053);
					match(QUERY);
					setState(5054);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5057);
				match(LIMIT);
				setState(5061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5058);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5059);
					match(COMMA);
					}
					break;
				}
				setState(5063);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5065);
				match(SHOW);
				setState(5066);
				match(SLAVE);
				setState(5067);
				match(STATUS);
				setState(5071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5068);
					match(FOR);
					setState(5069);
					match(CHANNEL);
					setState(5070);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(GBaseParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(GBaseParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(GBaseParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_variableClause);
		int _la;
		try {
			setState(5085);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5075);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5076);
				match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5079);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5077);
						match(AT_SIGN);
						setState(5078);
						match(AT_SIGN);
						}
					}

					setState(5081);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5084);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(GBaseParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(GBaseParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(GBaseParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(GBaseParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_showCommonEntity);
		int _la;
		try {
			setState(5100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5087);
				match(CHARACTER);
				setState(5088);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5089);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5090);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5091);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5092);
				match(FUNCTION);
				setState(5093);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5094);
				match(PROCEDURE);
				setState(5095);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5096);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5099);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_showFilter);
		try {
			setState(5106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5102);
				match(LIKE);
				setState(5103);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5104);
				match(WHERE);
				setState(5105);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(GBaseParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(GBaseParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(GBaseParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(GBaseParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(GBaseParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(GBaseParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(GBaseParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5108);
					match(STORAGE);
					}
				}

				setState(5111);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5112);
				match(MASTER);
				setState(5113);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5114);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5115);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5116);
					match(FULL);
					}
				}

				setState(5119);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5120);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5121);
				match(SLAVE);
				setState(5122);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5123);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5124);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(GBaseParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(GBaseParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5127);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5128);
				match(TABLE);
				setState(5129);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5130);
					match(FULL);
					}
				}

				setState(5133);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5134);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(GBaseParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(GBaseParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(GBaseParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(GBaseParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(GBaseParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(GBaseParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(GBaseParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(GBaseParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(GBaseParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(GBaseParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_showProfileType);
		try {
			setState(5149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5137);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5138);
				match(BLOCK);
				setState(5139);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5140);
				match(CONTEXT);
				setState(5141);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5142);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5143);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5144);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5145);
				match(PAGE);
				setState(5146);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5147);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5148);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(GBaseParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5151);
			match(BINLOG);
			setState(5152);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5154);
			match(CACHE);
			setState(5155);
			match(INDEX);
			setState(5156);
			tableIndexes();
			setState(5161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5157);
				match(COMMA);
				setState(5158);
				tableIndexes();
				}
				}
				setState(5163);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5164);
				match(PARTITION);
				setState(5165);
				match(LR_BRACKET);
				setState(5168);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5166);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5167);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5170);
				match(RR_BRACKET);
				}
			}

			setState(5173);
			match(IN);
			setState(5174);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(GBaseParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			match(FLUSH);
			setState(5178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5177);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5180);
			flushOption();
			setState(5185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5181);
				match(COMMA);
				setState(5182);
				flushOption();
				}
				}
				setState(5187);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(GBaseParser.KILL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5188);
			match(KILL);
			setState(5190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5189);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5193); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5192);
				decimalLiteral();
				}
				}
				setState(5195); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 1036)) & ~0x3f) == 0 && ((1L << (_la - 1036)) & ((1L << (ZERO_DECIMAL - 1036)) | (1L << (ONE_DECIMAL - 1036)) | (1L << (TWO_DECIMAL - 1036)) | (1L << (DECIMAL_LITERAL - 1036)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(GBaseParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5197);
			match(LOAD);
			setState(5198);
			match(INDEX);
			setState(5199);
			match(INTO);
			setState(5200);
			match(CACHE);
			setState(5201);
			loadedTableIndexes();
			setState(5206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5202);
				match(COMMA);
				setState(5203);
				loadedTableIndexes();
				}
				}
				setState(5208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5209);
			match(RESET);
			setState(5210);
			match(QUERY);
			setState(5211);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(GBaseParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5213);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5215);
			tableName();
			setState(5223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5216);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5219);
				match(LR_BRACKET);
				setState(5220);
				uidList();
				setState(5221);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(GBaseParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(GBaseParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(GBaseParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(GBaseParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(GBaseParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(GBaseParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(GBaseParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(GBaseParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(GBaseParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_flushOption);
		int _la;
		try {
			setState(5255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5243);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5225);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5226);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5228);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (ENGINE - 350)) | (1L << (ERROR - 350)) | (1L << (GENERAL - 350)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5227);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (ENGINE - 350)) | (1L << (ERROR - 350)) | (1L << (GENERAL - 350)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5230);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5231);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5232);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5233);
					match(QUERY);
					setState(5234);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5235);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5236);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5237);
					match(TABLES);
					setState(5241);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5238);
						match(WITH);
						setState(5239);
						match(READ);
						setState(5240);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5245);
				match(RELAY);
				setState(5246);
				match(LOGS);
				setState(5248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5247);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5250);
				match(TABLES);
				setState(5251);
				tables();
				setState(5253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5252);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(GBaseParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_flushTableOption);
		try {
			setState(5262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5257);
				match(WITH);
				setState(5258);
				match(READ);
				setState(5259);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5260);
				match(FOR);
				setState(5261);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(GBaseParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5264);
			tableName();
			setState(5272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5265);
				match(PARTITION);
				setState(5266);
				match(LR_BRACKET);
				setState(5269);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5267);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5268);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5271);
				match(RR_BRACKET);
				}
			}

			setState(5281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				setState(5275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5274);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5277);
				match(LR_BRACKET);
				setState(5278);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5279);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5283);
				match(IGNORE);
				setState(5284);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(GBaseParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(GBaseParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5288);
			tableName();
			setState(5291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				{
				setState(5289);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5290);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(GBaseParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(GBaseParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(GBaseParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(GBaseParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(GBaseParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5293);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5294);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5295);
				match(EQUAL_SYMBOL);
				setState(5296);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5299);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(GBaseParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5301);
			match(HELP);
			setState(5302);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(GBaseParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5304);
			match(USE);
			setState(5305);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(GBaseParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			match(SIGNAL);
			setState(5315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5308);
				match(SQLSTATE);
				setState(5310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5309);
					match(VALUE);
					}
				}

				setState(5312);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5313);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5314);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				{
				setState(5317);
				match(SET);
				setState(5318);
				signalConditionInformation();
				setState(5323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5319);
					match(COMMA);
					setState(5320);
					signalConditionInformation();
					}
					}
					setState(5325);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(GBaseParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5328);
			match(RESIGNAL);
			setState(5336);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5329);
				match(SQLSTATE);
				setState(5331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5330);
					match(VALUE);
					}
				}

				setState(5333);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5334);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5335);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				{
				setState(5338);
				match(SET);
				setState(5339);
				signalConditionInformation();
				setState(5344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5340);
					match(COMMA);
					setState(5341);
					signalConditionInformation();
					}
					}
					setState(5346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(GBaseParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(GBaseParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(GBaseParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(GBaseParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(GBaseParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(GBaseParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(GBaseParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(GBaseParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(GBaseParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(GBaseParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(GBaseParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(GBaseParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(GBaseParser.DECIMAL_LITERAL, 0); }
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			_la = _input.LA(1);
			if ( !(((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (CLASS_ORIGIN - 305)) | (1L << (COLUMN_NAME - 305)) | (1L << (CONSTRAINT_CATALOG - 305)) | (1L << (CONSTRAINT_SCHEMA - 305)) | (1L << (CONSTRAINT_NAME - 305)) | (1L << (CURSOR_NAME - 305)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5350);
			match(EQUAL_SYMBOL);
			setState(5353);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case STRING_CHARSET_NAME:
				{
				setState(5351);
				stringLiteral();
				}
				break;
			case DECIMAL_LITERAL:
				{
				setState(5352);
				match(DECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(GBaseParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(GBaseParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(GBaseParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(GBaseParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(GBaseParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(GBaseParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(GBaseParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(GBaseParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(GBaseParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			match(GET);
			setState(5357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5356);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5359);
			match(DIAGNOSTICS);
			setState(5391);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case NDB_STORED_USER:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				{
				setState(5360);
				variableClause();
				setState(5361);
				match(EQUAL_SYMBOL);
				setState(5362);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5363);
					match(COMMA);
					setState(5364);
					variableClause();
					setState(5365);
					match(EQUAL_SYMBOL);
					setState(5366);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(5372);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(5373);
				match(CONDITION);
				setState(5376);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
					{
					setState(5374);
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_VALID:
				case JSON_SCHEMA_VALID:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case NDB_STORED_USER:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5375);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5378);
				variableClause();
				setState(5379);
				match(EQUAL_SYMBOL);
				setState(5380);
				diagnosticsConditionInformationName();
				setState(5388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5381);
					match(COMMA);
					setState(5382);
					variableClause();
					setState(5383);
					match(EQUAL_SYMBOL);
					setState(5384);
					diagnosticsConditionInformationName();
					}
					}
					setState(5390);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(GBaseParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(GBaseParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(GBaseParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(GBaseParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(GBaseParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(GBaseParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(GBaseParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(GBaseParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(GBaseParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(GBaseParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(GBaseParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(GBaseParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(GBaseParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5393);
			_la = _input.LA(1);
			if ( !(((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (CLASS_ORIGIN - 305)) | (1L << (COLUMN_NAME - 305)) | (1L << (CONSTRAINT_CATALOG - 305)) | (1L << (CONSTRAINT_SCHEMA - 305)) | (1L << (CONSTRAINT_NAME - 305)) | (1L << (CURSOR_NAME - 305)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (RETURNED_SQLSTATE - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (TABLE_NAME - 515)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_describeObjectClause);
		try {
			setState(5405);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5400);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5395);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5396);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5397);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5398);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5399);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5402);
				match(FOR);
				setState(5403);
				match(CONNECTION);
				setState(5404);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(GBaseParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			uid();
			setState(5411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
			case 1:
				{
				setState(5408);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5409);
				match(DOT);
				setState(5410);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5413);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_fullColumnName);
		try {
			setState(5427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5415);
				uid();
				setState(5420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(5416);
					dottedId();
					setState(5418);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
					case 1:
						{
						setState(5417);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5422);
				matchWildcard();
				setState(5423);
				dottedId();
				setState(5425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
				case 1:
					{
					setState(5424);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
			case 1:
				{
				setState(5429);
				uid();
				}
				break;
			case 2:
				{
				setState(5430);
				match(STRING_LITERAL);
				}
				break;
			}
			setState(5437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5433);
				match(LR_BRACKET);
				setState(5434);
				decimalLiteral();
				setState(5435);
				match(RR_BRACKET);
				}
			}

			setState(5440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5439);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(GBaseParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5442);
			_la = _input.LA(1);
			if ( !(((((_la - 1046)) & ~0x3f) == 0 && ((1L << (_la - 1046)) & ((1L << (STRING_LITERAL - 1046)) | (1L << (ID - 1046)) | (1L << (STRING_USER_NAME - 1046)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(GBaseParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5444);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(GBaseParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_charsetName);
		try {
			setState(5450);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5446);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5447);
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5448);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5449);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_collationName);
		try {
			setState(5454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5452);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5453);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(GBaseParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(GBaseParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(GBaseParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(GBaseParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(GBaseParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(GBaseParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(GBaseParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(GBaseParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(GBaseParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(GBaseParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(GBaseParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456);
			_la = _input.LA(1);
			if ( !(((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & ((1L << (ARCHIVE - 687)) | (1L << (BLACKHOLE - 687)) | (1L << (CSV - 687)) | (1L << (FEDERATED - 687)) | (1L << (INNODB - 687)) | (1L << (MEMORY - 687)) | (1L << (MRG_MYISAM - 687)) | (1L << (MYISAM - 687)) | (1L << (NDB - 687)) | (1L << (NDBCLUSTER - 687)) | (1L << (PERFORMANCE_SCHEMA - 687)) | (1L << (TOKUDB - 687)))) != 0) || ((((_la - 1046)) & ~0x3f) == 0 && ((1L << (_la - 1046)) & ((1L << (STRING_LITERAL - 1046)) | (1L << (ID - 1046)) | (1L << (REVERSE_QUOTE_ID - 1046)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(GBaseParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(GBaseParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(GBaseParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(GBaseParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5458);
			decimalLiteral();
			setState(5459);
			match(MINUS);
			setState(5460);
			decimalLiteral();
			setState(5461);
			match(MINUS);
			setState(5462);
			decimalLiteral();
			setState(5463);
			match(MINUS);
			setState(5464);
			decimalLiteral();
			setState(5465);
			match(MINUS);
			setState(5466);
			decimalLiteral();
			setState(5472); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5467);
				match(COLON_SYMB);
				setState(5468);
				decimalLiteral();
				setState(5469);
				match(MINUS);
				setState(5470);
				decimalLiteral();
				}
				}
				setState(5474); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5476);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5477);
				match(COMMA);
				setState(5478);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5479);
					match(COMMA);
					setState(5480);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(GBaseParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(GBaseParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(GBaseParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_xuidStringId);
		int _la;
		try {
			setState(5492);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5485);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5486);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5488); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5487);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5490); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_authPlugin);
		try {
			setState(5496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5494);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5495);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(GBaseParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_uid);
		try {
			setState(5501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5498);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5499);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5500);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_simpleId);
		try {
			setState(5512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5503);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5504);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5505);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5506);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5507);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5508);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5509);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5510);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5511);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(GBaseParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_dottedId);
		try {
			setState(5517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5514);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5515);
				match(DOT);
				setState(5516);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(GBaseParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(GBaseParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5519);
			_la = _input.LA(1);
			if ( !(((((_la - 1036)) & ~0x3f) == 0 && ((1L << (_la - 1036)) & ((1L << (ZERO_DECIMAL - 1036)) | (1L << (ONE_DECIMAL - 1036)) | (1L << (TWO_DECIMAL - 1036)) | (1L << (DECIMAL_LITERAL - 1036)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(GBaseParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_fileSizeLiteral);
		try {
			setState(5523);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5521);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5522);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(GBaseParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(GBaseParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5530);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5526);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5525);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5528);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5529);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5533); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5532);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5535); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,801,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5542);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5538);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5537);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5540);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5541);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(5544);
					match(COLLATE);
					setState(5545);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(GBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(GBaseParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5550);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(GBaseParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(GBaseParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5552);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5555);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(GBaseParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5557);
				match(NOT);
				}
			}

			setState(5560);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(GBaseParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(GBaseParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(GBaseParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_constant);
		int _la;
		try {
			setState(5574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5562);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5563);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5564);
				match(MINUS);
				setState(5565);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5566);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5567);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5568);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5569);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5570);
					match(NOT);
					}
				}

				setState(5573);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(GBaseParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(GBaseParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(GBaseParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(GBaseParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(GBaseParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(GBaseParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(GBaseParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(GBaseParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(GBaseParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(GBaseParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(GBaseParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(GBaseParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(GBaseParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(GBaseParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(GBaseParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(GBaseParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(GBaseParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(GBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(GBaseParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(GBaseParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(GBaseParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(GBaseParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(GBaseParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(GBaseParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(GBaseParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(GBaseParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(GBaseParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(GBaseParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(GBaseParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(GBaseParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(GBaseParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(GBaseParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(GBaseParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(GBaseParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(GBaseParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(GBaseParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(GBaseParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(GBaseParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(GBaseParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GBaseParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(GBaseParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(GBaseParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public List<TerminalNode> CHARACTER() { return getTokens(GBaseParser.CHARACTER); }
		public TerminalNode CHARACTER(int i) {
			return getToken(GBaseParser.CHARACTER, i);
		}
		public TerminalNode VARCHAR() { return getToken(GBaseParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(GBaseParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(GBaseParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(GBaseParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(GBaseParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(GBaseParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(GBaseParser.LONG, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(GBaseParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(GBaseParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(GBaseParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(GBaseParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(GBaseParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(GBaseParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(GBaseParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(GBaseParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GBaseParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(GBaseParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_dataType);
		int _la;
		try {
			setState(5703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5576);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (CHAR - 205)) | (1L << (VARCHAR - 205)) | (1L << (NVARCHAR - 205)) | (1L << (LONG - 205)) | (1L << (TINYTEXT - 205)) | (1L << (TEXT - 205)) | (1L << (MEDIUMTEXT - 205)) | (1L << (LONGTEXT - 205)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5578);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(5577);
					lengthOneDimension();
					}
					break;
				}
				setState(5581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5580);
					match(BINARY);
					}
				}

				setState(5589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(5586);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5583);
						match(CHARACTER);
						setState(5584);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5585);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5588);
					charsetName();
					}
					break;
				}
				setState(5593);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(5591);
					match(COLLATE);
					setState(5592);
					collationName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5595);
				match(NATIONAL);
				setState(5596);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5597);
					lengthOneDimension();
					}
					break;
				}
				setState(5601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5600);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5603);
				match(NCHAR);
				setState(5604);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(5606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(5605);
					lengthOneDimension();
					}
					break;
				}
				setState(5609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5608);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5611);
				match(NATIONAL);
				setState(5612);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5613);
				match(VARYING);
				setState(5615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(5614);
					lengthOneDimension();
					}
					break;
				}
				setState(5618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5617);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5620);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (TINYINT - 179)) | (1L << (SMALLINT - 179)) | (1L << (MEDIUMINT - 179)) | (1L << (MIDDLEINT - 179)) | (1L << (INT - 179)) | (1L << (INT1 - 179)) | (1L << (INT2 - 179)) | (1L << (INT3 - 179)) | (1L << (INT4 - 179)) | (1L << (INT8 - 179)) | (1L << (INTEGER - 179)) | (1L << (BIGINT - 179)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5622);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
				case 1:
					{
					setState(5621);
					lengthOneDimension();
					}
					break;
				}
				setState(5625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
				case 1:
					{
					setState(5624);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5627);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5630);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(5632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
				case 1:
					{
					setState(5631);
					lengthTwoDimension();
					}
					break;
				}
				setState(5635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
				case 1:
					{
					setState(5634);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5637);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5640);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(5642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5641);
					match(PRECISION);
					}
				}

				setState(5645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
				case 1:
					{
					setState(5644);
					lengthTwoDimension();
					}
					break;
				}
				setState(5648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					setState(5647);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5650);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5653);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FLOAT - 194)) | (1L << (FLOAT4 - 194)) | (1L << (FLOAT8 - 194)) | (1L << (DECIMAL - 194)) | (1L << (DEC - 194)) | (1L << (NUMERIC - 194)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5655);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(5654);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					setState(5657);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5660);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5663);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TINYBLOB - 200)) | (1L << (MEDIUMBLOB - 200)) | (1L << (LONGBLOB - 200)) | (1L << (SERIAL - 200)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5664);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (TIME - 201)) | (1L << (TIMESTAMP - 201)) | (1L << (DATETIME - 201)) | (1L << (YEAR - 201)) | (1L << (BINARY - 201)) | (1L << (VARBINARY - 201)) | (1L << (BLOB - 201)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5666);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
				case 1:
					{
					setState(5665);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5668);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5669);
				collectionOptions();
				setState(5671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5670);
					match(BINARY);
					}
				}

				setState(5679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
				case 1:
					{
					setState(5676);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5673);
						match(CHARACTER);
						setState(5674);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5675);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5678);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5681);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (GEOMETRYCOLLECTION - 703)) | (1L << (GEOMCOLLECTION - 703)) | (1L << (GEOMETRY - 703)) | (1L << (LINESTRING - 703)) | (1L << (MULTILINESTRING - 703)) | (1L << (MULTIPOINT - 703)) | (1L << (MULTIPOLYGON - 703)) | (1L << (POINT - 703)) | (1L << (POLYGON - 703)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5682);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(5684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(5683);
					match(VARCHAR);
					}
				}

				setState(5687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5686);
					match(BINARY);
					}
				}

				setState(5695);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
				case 1:
					{
					setState(5692);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5689);
						match(CHARACTER);
						setState(5690);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5691);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5694);
					charsetName();
					}
					break;
				}
				setState(5699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
				case 1:
					{
					setState(5697);
					match(COLLATE);
					setState(5698);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5701);
				match(LONG);
				setState(5702);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5705);
			match(LR_BRACKET);
			setState(5706);
			match(STRING_LITERAL);
			setState(5711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5707);
				match(COMMA);
				setState(5708);
				match(STRING_LITERAL);
				}
				}
				setState(5713);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5714);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public TerminalNode DECIMAL() { return getToken(GBaseParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(GBaseParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(GBaseParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(GBaseParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_convertedDataType);
		int _la;
		try {
			setState(5741);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5716);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5717);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5720);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5721);
					lengthOneDimension();
					}
				}

				setState(5730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(5727);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5724);
						match(CHARACTER);
						setState(5725);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5726);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5729);
					charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				enterOuterAlt(_localctx, 3);
				{
				setState(5732);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (DATETIME - 200)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5733);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5734);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5737);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5738);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5743);
			match(LR_BRACKET);
			setState(5744);
			decimalLiteral();
			setState(5745);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5747);
			match(LR_BRACKET);
			setState(5748);
			decimalLiteral();
			setState(5749);
			match(COMMA);
			setState(5750);
			decimalLiteral();
			setState(5751);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5753);
			match(LR_BRACKET);
			setState(5754);
			decimalLiteral();
			setState(5757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5755);
				match(COMMA);
				setState(5756);
				decimalLiteral();
				}
			}

			setState(5759);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5761);
			uid();
			setState(5766);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5762);
					match(COMMA);
					setState(5763);
					uid();
					}
					} 
				}
				setState(5768);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,853,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5769);
			tableName();
			setState(5774);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,854,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5770);
					match(COMMA);
					setState(5771);
					tableName();
					}
					} 
				}
				setState(5776);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,854,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5777);
			match(LR_BRACKET);
			setState(5778);
			indexColumnName();
			setState(5783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5779);
				match(COMMA);
				setState(5780);
				indexColumnName();
				}
				}
				setState(5785);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5786);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5788);
			expression(0);
			setState(5793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5789);
				match(COMMA);
				setState(5790);
				expression(0);
				}
				}
				setState(5795);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5796);
			expressionOrDefault();
			setState(5801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5797);
				match(COMMA);
				setState(5798);
				expressionOrDefault();
				}
				}
				setState(5803);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5804);
			constant();
			setState(5809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5805);
				match(COMMA);
				setState(5806);
				constant();
				}
				}
				setState(5811);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5812);
			match(STRING_LITERAL);
			setState(5817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5813);
				match(COMMA);
				setState(5814);
				match(STRING_LITERAL);
				}
				}
				setState(5819);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(GBaseParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(GBaseParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5820);
			match(LOCAL_ID);
			setState(5825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5821);
				match(COMMA);
				setState(5822);
				match(LOCAL_ID);
				}
				}
				setState(5827);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_defaultValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				{
				setState(5828);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				{
				setState(5830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					setState(5829);
					unaryOperator();
					}
					break;
				}
				setState(5832);
				constant();
				}
				break;
			case 3:
				{
				setState(5833);
				currentTimestamp();
				}
				break;
			}
			setState(5839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(5836);
				match(ON);
				setState(5837);
				match(UPDATE);
				setState(5838);
				currentTimestamp();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(GBaseParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(GBaseParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(GBaseParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5855);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(5841);
				_la = _input.LA(1);
				if ( !(((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (CURRENT_TIMESTAMP - 261)) | (1L << (LOCALTIME - 261)) | (1L << (LOCALTIMESTAMP - 261)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					setState(5842);
					match(LR_BRACKET);
					setState(5844);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1036)) & ~0x3f) == 0 && ((1L << (_la - 1036)) & ((1L << (ZERO_DECIMAL - 1036)) | (1L << (ONE_DECIMAL - 1036)) | (1L << (TWO_DECIMAL - 1036)) | (1L << (DECIMAL_LITERAL - 1036)))) != 0)) {
						{
						setState(5843);
						decimalLiteral();
						}
					}

					setState(5846);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(5849);
				match(NOW);
				setState(5850);
				match(LR_BRACKET);
				setState(5852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1036)) & ~0x3f) == 0 && ((1L << (_la - 1036)) & ((1L << (ZERO_DECIMAL - 1036)) | (1L << (ONE_DECIMAL - 1036)) | (1L << (TWO_DECIMAL - 1036)) | (1L << (DECIMAL_LITERAL - 1036)))) != 0)) {
					{
					setState(5851);
					decimalLiteral();
					}
				}

				setState(5854);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_expressionOrDefault);
		try {
			setState(5859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5857);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5858);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(GBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GBaseParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5861);
			match(IF);
			setState(5862);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(GBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GBaseParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5864);
			match(IF);
			setState(5865);
			match(NOT);
			setState(5866);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OlapFunctionCallContext extends FunctionCallContext {
		public OlapFunctionContext olapFunction() {
			return getRuleContext(OlapFunctionContext.class,0);
		}
		public OlapFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOlapFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOlapFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOlapFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_functionCall);
		try {
			setState(5886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5868);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5869);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5870);
				scalarFunctionName();
				setState(5871);
				match(LR_BRACKET);
				setState(5873);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(5872);
					functionArgs();
					}
					break;
				}
				setState(5875);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5877);
				fullId();
				setState(5878);
				match(LR_BRACKET);
				setState(5880);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(5879);
					functionArgs();
					}
					break;
				}
				setState(5882);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5884);
				passwordFunctionClause();
				}
				break;
			case 6:
				_localctx = new OlapFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5885);
				olapFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(GBaseParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(GBaseParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(GBaseParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(GBaseParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(GBaseParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(GBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(GBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(GBaseParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(GBaseParser.LOCALTIME, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(GBaseParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(GBaseParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(GBaseParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(GBaseParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(GBaseParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(GBaseParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(GBaseParser.CAST, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(GBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(GBaseParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_specificFunction);
		int _la;
		try {
			setState(6045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5888);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (CURRENT_DATE - 259)) | (1L << (CURRENT_TIME - 259)) | (1L << (CURRENT_TIMESTAMP - 259)) | (1L << (LOCALTIME - 259)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5889);
				match(CONVERT);
				setState(5890);
				match(LR_BRACKET);
				setState(5891);
				expression(0);
				setState(5892);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(5893);
				convertedDataType();
				setState(5894);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5896);
				match(CONVERT);
				setState(5897);
				match(LR_BRACKET);
				setState(5898);
				expression(0);
				setState(5899);
				match(USING);
				setState(5900);
				charsetName();
				setState(5901);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5903);
				match(CAST);
				setState(5904);
				match(LR_BRACKET);
				setState(5905);
				expression(0);
				setState(5906);
				match(AS);
				setState(5907);
				convertedDataType();
				setState(5908);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5910);
				match(VALUES);
				setState(5911);
				match(LR_BRACKET);
				setState(5912);
				fullColumnName();
				setState(5913);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5915);
				match(CASE);
				setState(5916);
				expression(0);
				setState(5918); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5917);
					caseFuncAlternative();
					}
					}
					setState(5920); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5922);
					match(ELSE);
					setState(5923);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5926);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5928);
				match(CASE);
				setState(5930); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5929);
					caseFuncAlternative();
					}
					}
					setState(5932); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5934);
					match(ELSE);
					setState(5935);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5938);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5940);
				match(CHAR);
				setState(5941);
				match(LR_BRACKET);
				setState(5942);
				functionArgs();
				setState(5945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5943);
					match(USING);
					setState(5944);
					charsetName();
					}
				}

				setState(5947);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5949);
				match(POSITION);
				setState(5950);
				match(LR_BRACKET);
				setState(5953);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
				case 1:
					{
					setState(5951);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5952);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(5955);
				match(IN);
				setState(5958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(5956);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5957);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(5960);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5962);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5963);
				match(LR_BRACKET);
				setState(5966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
				case 1:
					{
					setState(5964);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5965);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5968);
				match(FROM);
				setState(5971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
				case 1:
					{
					setState(5969);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(5970);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5973);
					match(FOR);
					setState(5976);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
					case 1:
						{
						setState(5974);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(5975);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(5980);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5982);
				match(TRIM);
				setState(5983);
				match(LR_BRACKET);
				setState(5984);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
				case 1:
					{
					setState(5985);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5986);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5989);
				match(FROM);
				setState(5992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
				case 1:
					{
					setState(5990);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5991);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5994);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5996);
				match(TRIM);
				setState(5997);
				match(LR_BRACKET);
				setState(6000);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
				case 1:
					{
					setState(5998);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5999);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6002);
				match(FROM);
				setState(6005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
				case 1:
					{
					setState(6003);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6004);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6007);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6009);
				match(WEIGHT_STRING);
				setState(6010);
				match(LR_BRACKET);
				setState(6013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
				case 1:
					{
					setState(6011);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6012);
					expression(0);
					}
					break;
				}
				setState(6021);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6015);
					match(AS);
					setState(6016);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6017);
					match(LR_BRACKET);
					setState(6018);
					decimalLiteral();
					setState(6019);
					match(RR_BRACKET);
					}
				}

				setState(6024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6023);
					levelsInWeightString();
					}
				}

				setState(6026);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6028);
				match(EXTRACT);
				setState(6029);
				match(LR_BRACKET);
				setState(6030);
				intervalType();
				setState(6031);
				match(FROM);
				setState(6034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
				case 1:
					{
					setState(6032);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6033);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6036);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6038);
				match(GET_FORMAT);
				setState(6039);
				match(LR_BRACKET);
				setState(6040);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (DATETIME - 200)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6041);
				match(COMMA);
				setState(6042);
				stringLiteral();
				setState(6043);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(GBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6047);
			match(WHEN);
			setState(6048);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6049);
			match(THEN);
			setState(6050);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6052);
				match(LEVEL);
				setState(6053);
				levelInWeightListElement();
				setState(6058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6054);
					match(COMMA);
					setState(6055);
					levelInWeightListElement();
					}
					}
					setState(6060);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6061);
				match(LEVEL);
				setState(6062);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6063);
				match(MINUS);
				setState(6064);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(GBaseParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6068);
			decimalLiteral();
			setState(6070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6069);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(GBaseParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(GBaseParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(GBaseParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(GBaseParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(GBaseParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(GBaseParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(GBaseParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(GBaseParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(GBaseParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(GBaseParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(GBaseParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(GBaseParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(GBaseParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(GBaseParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(GBaseParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(GBaseParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6072);
				_la = _input.LA(1);
				if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (AVG - 236)) | (1L << (MAX - 236)) | (1L << (MIN - 236)) | (1L << (SUM - 236)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6073);
				match(LR_BRACKET);
				setState(6075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					setState(6074);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6077);
				functionArg();
				setState(6078);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6080);
				match(COUNT);
				setState(6081);
				match(LR_BRACKET);
				setState(6087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
				case 1:
					{
					setState(6082);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6084);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
					case 1:
						{
						setState(6083);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6086);
					functionArg();
					}
					break;
				}
				setState(6089);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6090);
				match(COUNT);
				setState(6091);
				match(LR_BRACKET);
				setState(6092);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(6093);
				functionArgs();
				setState(6094);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6096);
				_la = _input.LA(1);
				if ( !(((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (BIT_AND - 237)) | (1L << (BIT_OR - 237)) | (1L << (BIT_XOR - 237)) | (1L << (STD - 237)) | (1L << (STDDEV - 237)) | (1L << (STDDEV_POP - 237)) | (1L << (STDDEV_SAMP - 237)) | (1L << (VAR_POP - 237)) | (1L << (VAR_SAMP - 237)) | (1L << (VARIANCE - 237)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6097);
				match(LR_BRACKET);
				setState(6099);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
				case 1:
					{
					setState(6098);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6101);
				functionArg();
				setState(6102);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6104);
				match(GROUP_CONCAT);
				setState(6105);
				match(LR_BRACKET);
				setState(6107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6106);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6109);
				functionArgs();
				setState(6120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6110);
					match(ORDER);
					setState(6111);
					match(BY);
					setState(6112);
					orderByExpression();
					setState(6117);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6113);
						match(COMMA);
						setState(6114);
						orderByExpression();
						}
						}
						setState(6119);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6122);
					match(SEPARATOR);
					setState(6123);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6126);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapFunctionContext extends ParserRuleContext {
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode OVER() { return getToken(GBaseParser.OVER, 0); }
		public TerminalNode RANK() { return getToken(GBaseParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(GBaseParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(GBaseParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(GBaseParser.SUM, 0); }
		public TerminalNode AVG() { return getToken(GBaseParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode LEAD() { return getToken(GBaseParser.LEAD, 0); }
		public TerminalNode LAG() { return getToken(GBaseParser.LAG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(GBaseParser.PERCENT_RANK, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(GBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(GBaseParser.BY, i);
		}
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public OlapFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOlapFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOlapFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOlapFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapFunctionContext olapFunction() throws RecognitionException {
		OlapFunctionContext _localctx = new OlapFunctionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_olapFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6130);
			_la = _input.LA(1);
			if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (AVG - 236)) | (1L << (COUNT - 236)) | (1L << (SUM - 236)) | (1L << (RANK - 236)) | (1L << (DENSE_RANK - 236)) | (1L << (ROW_NUMBER - 236)) | (1L << (LEAD - 236)) | (1L << (LAG - 236)) | (1L << (PERCENT_RANK - 236)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6131);
			match(LR_BRACKET);
			setState(6132);
			match(RR_BRACKET);
			setState(6133);
			match(OVER);
			setState(6134);
			match(LR_BRACKET);
			setState(6145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6135);
				match(PARTITION);
				setState(6136);
				match(BY);
				setState(6137);
				groupByItem();
				setState(6142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6138);
					match(COMMA);
					setState(6139);
					groupByItem();
					}
					}
					setState(6144);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6147);
				match(ORDER);
				setState(6148);
				match(BY);
				setState(6149);
				orderByExpression();
				setState(6154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6150);
					match(COMMA);
					setState(6151);
					orderByExpression();
					}
					}
					setState(6156);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6159);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(GBaseParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(GBaseParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(GBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(GBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(GBaseParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(GBaseParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(GBaseParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(GBaseParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(GBaseParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(GBaseParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(GBaseParser.MID, 0); }
		public TerminalNode NOW() { return getToken(GBaseParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(GBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(GBaseParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(GBaseParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(GBaseParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(GBaseParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(GBaseParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(GBaseParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_scalarFunctionName);
		try {
			setState(6184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_VALID:
			case JSON_SCHEMA_VALID:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6161);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6162);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6163);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6164);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6165);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6166);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6167);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6168);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6169);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6170);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6171);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6172);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6173);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6174);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6175);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6176);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6177);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6178);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6179);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6180);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6181);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6182);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6183);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(GBaseParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6186);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6187);
			match(LR_BRACKET);
			setState(6188);
			functionArg();
			setState(6189);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
			case 1:
				{
				setState(6191);
				constant();
				}
				break;
			case 2:
				{
				setState(6192);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6193);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6194);
				expression(0);
				}
				break;
			}
			setState(6206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6197);
				match(COMMA);
				setState(6202);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
				case 1:
					{
					setState(6198);
					constant();
					}
					break;
				case 2:
					{
					setState(6199);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6200);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6201);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_functionArg);
		try {
			setState(6213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6209);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6210);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6211);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6212);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(GBaseParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(GBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(GBaseParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(GBaseParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(GBaseParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 602;
		enterRecursionRule(_localctx, 602, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6216);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6217);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6218);
				predicate(0);
				setState(6219);
				match(IS);
				setState(6221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6220);
					match(NOT);
					}
				}

				setState(6223);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6225);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6234);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,915,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(6228);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6229);
					logicalOperator();
					setState(6230);
					expression(4);
					}
					} 
				}
				setState(6236);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,915,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(GBaseParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(GBaseParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(GBaseParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(GBaseParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparasionPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(GBaseParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(GBaseParser.SOME, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubqueryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubqueryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubqueryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(GBaseParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparasionPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBinaryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBinaryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBinaryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(GBaseParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(GBaseParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(GBaseParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(GBaseParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 604;
		enterRecursionRule(_localctx, 604, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(6238);
				match(LOCAL_ID);
				setState(6239);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(6242);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6308);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,924,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6306);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6244);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6245);
						comparisonOperator();
						setState(6246);
						((BinaryComparasionPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6248);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6250);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6249);
							match(NOT);
							}
						}

						setState(6252);
						match(BETWEEN);
						setState(6253);
						predicate(0);
						setState(6254);
						match(AND);
						setState(6255);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6257);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6258);
						match(SOUNDS);
						setState(6259);
						match(LIKE);
						setState(6260);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6261);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6263);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6262);
							match(NOT);
							}
						}

						setState(6265);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6266);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6267);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6269);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6268);
							match(NOT);
							}
						}

						setState(6271);
						match(IN);
						setState(6272);
						match(LR_BRACKET);
						setState(6275);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
						case 1:
							{
							setState(6273);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6274);
							expressions();
							}
							break;
						}
						setState(6277);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6279);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6280);
						match(IS);
						setState(6281);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6282);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6283);
						comparisonOperator();
						setState(6284);
						((SubqueryComparasionPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6285);
						match(LR_BRACKET);
						setState(6286);
						selectStatement();
						setState(6287);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6289);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6291);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6290);
							match(NOT);
							}
						}

						setState(6293);
						match(LIKE);
						setState(6294);
						predicate(0);
						setState(6297);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
						case 1:
							{
							setState(6295);
							match(ESCAPE);
							setState(6296);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6299);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6300);
						match(MEMBER);
						setState(6301);
						match(OF);
						setState(6302);
						match(LR_BRACKET);
						setState(6303);
						predicate(0);
						setState(6304);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(6310);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,924,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public SubqueryExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubqueryExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubqueryExpessionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubqueryExpessionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(GBaseParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(GBaseParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(GBaseParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public ExistsExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExistsExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExistsExpessionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExistsExpessionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public StringOperatorContext stringOperator() {
			return getRuleContext(StringOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public StringExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 606;
		enterRecursionRule(_localctx, 606, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6312);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6313);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6314);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6315);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6316);
				unaryOperator();
				setState(6317);
				expressionAtom(11);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6319);
				match(BINARY);
				setState(6320);
				expressionAtom(10);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6321);
				match(LR_BRACKET);
				setState(6322);
				expression(0);
				setState(6327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6323);
					match(COMMA);
					setState(6324);
					expression(0);
					}
					}
					setState(6329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6330);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6332);
				match(ROW);
				setState(6333);
				match(LR_BRACKET);
				setState(6334);
				expression(0);
				setState(6337); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6335);
					match(COMMA);
					setState(6336);
					expression(0);
					}
					}
					setState(6339); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6341);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6343);
				match(EXISTS);
				setState(6344);
				match(LR_BRACKET);
				setState(6345);
				selectStatement();
				setState(6346);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6348);
				match(LR_BRACKET);
				setState(6349);
				selectStatement();
				setState(6350);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6352);
				match(INTERVAL);
				setState(6353);
				expression(0);
				setState(6354);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6379);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,929,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6377);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6358);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6359);
						bitOperator();
						setState(6360);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(5);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6362);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6363);
						mathOperator();
						setState(6364);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6366);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6367);
						jsonOperator();
						setState(6368);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 4:
						{
						_localctx = new StringExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((StringExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6370);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6371);
						stringOperator();
						setState(6372);
						((StringExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 5:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6374);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(6375);
						match(COLLATE);
						setState(6376);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6381);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,929,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(GBaseParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(GBaseParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(GBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6382);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1016)) & ~0x3f) == 0 && ((1L << (_la - 1016)) & ((1L << (PLUS - 1016)) | (1L << (MINUS - 1016)) | (1L << (EXCLAMATION_SYMBOL - 1016)) | (1L << (BIT_NOT_OP - 1016)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(GBaseParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(GBaseParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(GBaseParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_comparisonOperator);
		try {
			setState(6398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6384);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6385);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6386);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6387);
				match(LESS_SYMBOL);
				setState(6388);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6389);
				match(GREATER_SYMBOL);
				setState(6390);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6391);
				match(LESS_SYMBOL);
				setState(6392);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6393);
				match(EXCLAMATION_SYMBOL);
				setState(6394);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6395);
				match(LESS_SYMBOL);
				setState(6396);
				match(EQUAL_SYMBOL);
				setState(6397);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(GBaseParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(GBaseParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(GBaseParser.XOR, 0); }
		public TerminalNode OR() { return getToken(GBaseParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(GBaseParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(GBaseParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_logicalOperator);
		try {
			setState(6407);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6400);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6401);
				match(BIT_AND_OP);
				setState(6402);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6403);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6404);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6405);
				match(BIT_OR_OP);
				setState(6406);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(GBaseParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(GBaseParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(GBaseParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(GBaseParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(GBaseParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(GBaseParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(GBaseParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_bitOperator);
		try {
			setState(6416);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6409);
				match(LESS_SYMBOL);
				setState(6410);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6411);
				match(GREATER_SYMBOL);
				setState(6412);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6413);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6414);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6415);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(GBaseParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(GBaseParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(GBaseParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(GBaseParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(GBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public TerminalNode MINUSMINUS() { return getToken(GBaseParser.MINUSMINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6418);
			_la = _input.LA(1);
			if ( !(((((_la - 1013)) & ~0x3f) == 0 && ((1L << (_la - 1013)) & ((1L << (STAR - 1013)) | (1L << (DIVIDE - 1013)) | (1L << (MODULE - 1013)) | (1L << (PLUS - 1013)) | (1L << (MINUSMINUS - 1013)) | (1L << (MINUS - 1013)) | (1L << (DIV - 1013)) | (1L << (MOD - 1013)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(GBaseParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(GBaseParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_jsonOperator);
		try {
			setState(6425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6420);
				match(MINUS);
				setState(6421);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6422);
				match(MINUS);
				setState(6423);
				match(GREATER_SYMBOL);
				setState(6424);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringOperatorContext extends ParserRuleContext {
		public TerminalNode CONCAT_OP() { return getToken(GBaseParser.CONCAT_OP, 0); }
		public StringOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringOperatorContext stringOperator() throws RecognitionException {
		StringOperatorContext _localctx = new StringOperatorContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_stringOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6427);
			match(CONCAT_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(GBaseParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(GBaseParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(GBaseParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(GBaseParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(GBaseParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(GBaseParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(GBaseParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(GBaseParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(GBaseParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(GBaseParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(GBaseParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(GBaseParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(GBaseParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(GBaseParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(GBaseParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(GBaseParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(GBaseParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(GBaseParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(GBaseParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(GBaseParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(GBaseParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(GBaseParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(GBaseParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(GBaseParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(GBaseParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(GBaseParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(GBaseParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(GBaseParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(GBaseParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(GBaseParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(GBaseParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(GBaseParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(GBaseParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(GBaseParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(GBaseParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(GBaseParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(GBaseParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(GBaseParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(GBaseParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(GBaseParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6429);
			_la = _input.LA(1);
			if ( !(((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (ARMSCII8 - 647)) | (1L << (ASCII - 647)) | (1L << (BIG5 - 647)) | (1L << (CP1250 - 647)) | (1L << (CP1251 - 647)) | (1L << (CP1256 - 647)) | (1L << (CP1257 - 647)) | (1L << (CP850 - 647)) | (1L << (CP852 - 647)) | (1L << (CP866 - 647)) | (1L << (CP932 - 647)) | (1L << (DEC8 - 647)) | (1L << (EUCJPMS - 647)) | (1L << (EUCKR - 647)) | (1L << (GB2312 - 647)) | (1L << (GBK - 647)) | (1L << (GEOSTD8 - 647)) | (1L << (GREEK - 647)) | (1L << (HEBREW - 647)) | (1L << (HP8 - 647)) | (1L << (KEYBCS2 - 647)) | (1L << (KOI8R - 647)) | (1L << (KOI8U - 647)) | (1L << (LATIN1 - 647)) | (1L << (LATIN2 - 647)) | (1L << (LATIN5 - 647)) | (1L << (LATIN7 - 647)) | (1L << (MACCE - 647)) | (1L << (MACROMAN - 647)) | (1L << (SJIS - 647)) | (1L << (SWE7 - 647)) | (1L << (TIS620 - 647)) | (1L << (UCS2 - 647)) | (1L << (UJIS - 647)) | (1L << (UTF16 - 647)) | (1L << (UTF16LE - 647)) | (1L << (UTF32 - 647)) | (1L << (UTF8 - 647)) | (1L << (UTF8MB3 - 647)) | (1L << (UTF8MB4 - 647)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(GBaseParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(GBaseParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(GBaseParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(GBaseParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6431);
			_la = _input.LA(1);
			if ( !(((((_la - 699)) & ~0x3f) == 0 && ((1L << (_la - 699)) & ((1L << (REPEATABLE - 699)) | (1L << (COMMITTED - 699)) | (1L << (UNCOMMITTED - 699)) | (1L << (SERIALIZABLE - 699)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(GBaseParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(GBaseParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(GBaseParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(GBaseParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(GBaseParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(GBaseParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(GBaseParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6433);
			_la = _input.LA(1);
			if ( !(((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (TABLES - 612)) | (1L << (ROUTINE - 612)) | (1L << (EXECUTE - 612)) | (1L << (FILE - 612)) | (1L << (PROCESS - 612)) | (1L << (RELOAD - 612)) | (1L << (SHUTDOWN - 612)) | (1L << (SUPER - 612)) | (1L << (PRIVILEGES - 612)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(GBaseParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(GBaseParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(GBaseParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(GBaseParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(GBaseParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(GBaseParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(GBaseParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(GBaseParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6435);
			_la = _input.LA(1);
			if ( !(((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & ((1L << (QUARTER - 604)) | (1L << (MONTH - 604)) | (1L << (DAY - 604)) | (1L << (HOUR - 604)) | (1L << (MINUTE - 604)) | (1L << (WEEK - 604)) | (1L << (SECOND - 604)) | (1L << (MICROSECOND - 604)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GBaseParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(GBaseParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(GBaseParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6437);
			_la = _input.LA(1);
			if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (DATETIME - 200)) | (1L << (YEAR - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(GBaseParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(GBaseParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(GBaseParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(GBaseParser.ANY, 0); }
		public TerminalNode AT() { return getToken(GBaseParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(GBaseParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(GBaseParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(GBaseParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(GBaseParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(GBaseParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(GBaseParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(GBaseParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(GBaseParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(GBaseParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(GBaseParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(GBaseParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(GBaseParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(GBaseParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(GBaseParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(GBaseParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(GBaseParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(GBaseParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GBaseParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(GBaseParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(GBaseParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(GBaseParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(GBaseParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(GBaseParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(GBaseParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(GBaseParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(GBaseParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(GBaseParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(GBaseParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(GBaseParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(GBaseParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(GBaseParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(GBaseParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(GBaseParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(GBaseParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(GBaseParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(GBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(GBaseParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(GBaseParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(GBaseParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(GBaseParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(GBaseParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(GBaseParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(GBaseParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(GBaseParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(GBaseParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(GBaseParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(GBaseParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(GBaseParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(GBaseParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(GBaseParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(GBaseParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(GBaseParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(GBaseParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(GBaseParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(GBaseParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(GBaseParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(GBaseParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(GBaseParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(GBaseParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(GBaseParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(GBaseParser.DISK, 0); }
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(GBaseParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(GBaseParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(GBaseParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(GBaseParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(GBaseParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(GBaseParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public TerminalNode ENDS() { return getToken(GBaseParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(GBaseParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(GBaseParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(GBaseParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(GBaseParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(GBaseParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(GBaseParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(GBaseParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(GBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(GBaseParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(GBaseParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(GBaseParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(GBaseParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(GBaseParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(GBaseParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(GBaseParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(GBaseParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(GBaseParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(GBaseParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(GBaseParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(GBaseParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(GBaseParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(GBaseParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(GBaseParser.GRANTS, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(GBaseParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(GBaseParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(GBaseParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(GBaseParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(GBaseParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(GBaseParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(GBaseParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(GBaseParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(GBaseParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(GBaseParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(GBaseParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(GBaseParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(GBaseParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(GBaseParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(GBaseParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(GBaseParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(GBaseParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(GBaseParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(GBaseParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(GBaseParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(GBaseParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(GBaseParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(GBaseParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(GBaseParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(GBaseParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(GBaseParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(GBaseParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(GBaseParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(GBaseParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(GBaseParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(GBaseParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(GBaseParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(GBaseParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(GBaseParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(GBaseParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(GBaseParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(GBaseParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(GBaseParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(GBaseParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(GBaseParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(GBaseParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(GBaseParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(GBaseParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(GBaseParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(GBaseParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(GBaseParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(GBaseParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(GBaseParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(GBaseParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(GBaseParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(GBaseParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(GBaseParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(GBaseParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(GBaseParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(GBaseParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(GBaseParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(GBaseParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(GBaseParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(GBaseParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(GBaseParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(GBaseParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(GBaseParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(GBaseParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(GBaseParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(GBaseParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(GBaseParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(GBaseParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(GBaseParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(GBaseParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(GBaseParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(GBaseParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(GBaseParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(GBaseParser.OF, 0); }
		public TerminalNode OJ() { return getToken(GBaseParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(GBaseParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(GBaseParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(GBaseParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(GBaseParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(GBaseParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(GBaseParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(GBaseParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(GBaseParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(GBaseParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(GBaseParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(GBaseParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(GBaseParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(GBaseParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(GBaseParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(GBaseParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(GBaseParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(GBaseParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(GBaseParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(GBaseParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(GBaseParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(GBaseParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(GBaseParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(GBaseParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(GBaseParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(GBaseParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(GBaseParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(GBaseParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(GBaseParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(GBaseParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(GBaseParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(GBaseParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(GBaseParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(GBaseParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(GBaseParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(GBaseParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(GBaseParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(GBaseParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(GBaseParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(GBaseParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(GBaseParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(GBaseParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(GBaseParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(GBaseParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(GBaseParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(GBaseParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(GBaseParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(GBaseParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(GBaseParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(GBaseParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(GBaseParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(GBaseParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(GBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(GBaseParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(GBaseParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(GBaseParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(GBaseParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(GBaseParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(GBaseParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(GBaseParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(GBaseParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(GBaseParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(GBaseParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(GBaseParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(GBaseParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(GBaseParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(GBaseParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(GBaseParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(GBaseParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(GBaseParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(GBaseParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(GBaseParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(GBaseParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(GBaseParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(GBaseParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(GBaseParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(GBaseParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(GBaseParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(GBaseParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(GBaseParser.STACKED, 0); }
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode STARTS() { return getToken(GBaseParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(GBaseParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(GBaseParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(GBaseParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(GBaseParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(GBaseParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(GBaseParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(GBaseParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(GBaseParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(GBaseParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(GBaseParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(GBaseParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(GBaseParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(GBaseParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(GBaseParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(GBaseParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(GBaseParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(GBaseParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(GBaseParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(GBaseParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(GBaseParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(GBaseParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(GBaseParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(GBaseParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(GBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(GBaseParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(GBaseParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(GBaseParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(GBaseParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(GBaseParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(GBaseParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(GBaseParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(GBaseParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(GBaseParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(GBaseParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(GBaseParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(GBaseParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(GBaseParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(GBaseParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(GBaseParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(GBaseParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(GBaseParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(GBaseParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(GBaseParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(GBaseParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(GBaseParser.X509, 0); }
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(GBaseParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(GBaseParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6439);
			_la = _input.LA(1);
			if ( !(_la==CURRENT || _la==DIAGNOSTICS || _la==NUMBER || _la==STACKED || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (SERIAL - 222)) | (1L << (AVG - 222)) | (1L << (BIT_AND - 222)) | (1L << (BIT_OR - 222)) | (1L << (BIT_XOR - 222)) | (1L << (COUNT - 222)) | (1L << (GROUP_CONCAT - 222)) | (1L << (MAX - 222)) | (1L << (MIN - 222)) | (1L << (STD - 222)) | (1L << (STDDEV - 222)) | (1L << (STDDEV_POP - 222)) | (1L << (STDDEV_SAMP - 222)) | (1L << (SUM - 222)) | (1L << (VAR_POP - 222)) | (1L << (VAR_SAMP - 222)) | (1L << (VARIANCE - 222)) | (1L << (ACCOUNT - 222)) | (1L << (ACTION - 222)) | (1L << (AFTER - 222)) | (1L << (AGGREGATE - 222)) | (1L << (ALGORITHM - 222)) | (1L << (ANY - 222)) | (1L << (AT - 222)) | (1L << (AUTHORS - 222)))) != 0) || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (AUTOCOMMIT - 286)) | (1L << (AUTOEXTEND_SIZE - 286)) | (1L << (AUTO_INCREMENT - 286)) | (1L << (AVG_ROW_LENGTH - 286)) | (1L << (BEGIN - 286)) | (1L << (BINLOG - 286)) | (1L << (BIT - 286)) | (1L << (BLOCK - 286)) | (1L << (BOOL - 286)) | (1L << (BOOLEAN - 286)) | (1L << (BTREE - 286)) | (1L << (CACHE - 286)) | (1L << (CASCADED - 286)) | (1L << (CHAIN - 286)) | (1L << (CHANGED - 286)) | (1L << (CHANNEL - 286)) | (1L << (CHECKSUM - 286)) | (1L << (PAGE_CHECKSUM - 286)) | (1L << (CIPHER - 286)) | (1L << (CLASS_ORIGIN - 286)) | (1L << (CLIENT - 286)) | (1L << (CLOSE - 286)) | (1L << (COALESCE - 286)) | (1L << (CODE - 286)) | (1L << (COLUMNS - 286)) | (1L << (COLUMN_FORMAT - 286)) | (1L << (COLUMN_NAME - 286)) | (1L << (COMMENT - 286)) | (1L << (COMMIT - 286)) | (1L << (COMPACT - 286)) | (1L << (COMPLETION - 286)) | (1L << (COMPRESSED - 286)) | (1L << (COMPRESSION - 286)) | (1L << (CONCURRENT - 286)) | (1L << (CONNECTION - 286)) | (1L << (CONSISTENT - 286)) | (1L << (CONSTRAINT_CATALOG - 286)) | (1L << (CONSTRAINT_SCHEMA - 286)) | (1L << (CONSTRAINT_NAME - 286)) | (1L << (CONTAINS - 286)) | (1L << (CONTEXT - 286)) | (1L << (CONTRIBUTORS - 286)) | (1L << (COPY - 286)) | (1L << (CPU - 286)) | (1L << (CURSOR_NAME - 286)) | (1L << (DATA - 286)) | (1L << (DATAFILE - 286)) | (1L << (DEALLOCATE - 286)) | (1L << (DEFAULT_AUTH - 286)) | (1L << (DEFINER - 286)) | (1L << (DELAY_KEY_WRITE - 286)) | (1L << (DES_KEY_FILE - 286)) | (1L << (DIRECTORY - 286)) | (1L << (DISABLE - 286)) | (1L << (DISCARD - 286)) | (1L << (DISK - 286)) | (1L << (DO - 286)) | (1L << (DUMPFILE - 286)) | (1L << (DUPLICATE - 286)) | (1L << (DYNAMIC - 286)) | (1L << (ENABLE - 286)) | (1L << (ENCRYPTION - 286)) | (1L << (END - 286)) | (1L << (ENDS - 286)))) != 0) || ((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (ENGINE - 350)) | (1L << (ENGINES - 350)) | (1L << (ERROR - 350)) | (1L << (ERRORS - 350)) | (1L << (ESCAPE - 350)) | (1L << (EVEN - 350)) | (1L << (EVENT - 350)) | (1L << (EVENTS - 350)) | (1L << (EVERY - 350)) | (1L << (EXCHANGE - 350)) | (1L << (EXCLUSIVE - 350)) | (1L << (EXPIRE - 350)) | (1L << (EXPORT - 350)) | (1L << (EXTENDED - 350)) | (1L << (EXTENT_SIZE - 350)) | (1L << (FAST - 350)) | (1L << (FAULTS - 350)) | (1L << (FIELDS - 350)) | (1L << (FILE_BLOCK_SIZE - 350)) | (1L << (FILTER - 350)) | (1L << (FIRST - 350)) | (1L << (FIXED - 350)) | (1L << (FLUSH - 350)) | (1L << (FOLLOWS - 350)) | (1L << (FOUND - 350)) | (1L << (FULL - 350)) | (1L << (FUNCTION - 350)) | (1L << (GENERAL - 350)) | (1L << (GLOBAL - 350)) | (1L << (GRANTS - 350)) | (1L << (GROUP_REPLICATION - 350)) | (1L << (HANDLER - 350)) | (1L << (HASH - 350)) | (1L << (HELP - 350)) | (1L << (HOST - 350)) | (1L << (HOSTS - 350)) | (1L << (IDENTIFIED - 350)) | (1L << (IGNORE_SERVER_IDS - 350)) | (1L << (IMPORT - 350)) | (1L << (INDEXES - 350)) | (1L << (INITIAL_SIZE - 350)) | (1L << (INPLACE - 350)) | (1L << (INSERT_METHOD - 350)) | (1L << (INSTALL - 350)) | (1L << (INSTANCE - 350)) | (1L << (INVOKER - 350)) | (1L << (IO - 350)) | (1L << (IO_THREAD - 350)) | (1L << (IPC - 350)) | (1L << (ISOLATION - 350)) | (1L << (ISSUER - 350)) | (1L << (JSON - 350)) | (1L << (KEY_BLOCK_SIZE - 350)) | (1L << (LANGUAGE - 350)) | (1L << (LAST - 350)) | (1L << (LEAVES - 350)) | (1L << (LESS - 350)) | (1L << (LEVEL - 350)) | (1L << (LIST - 350)) | (1L << (LOCAL - 350)) | (1L << (LOGFILE - 350)) | (1L << (LOGS - 350)) | (1L << (MASTER - 350)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (MASTER_AUTO_POSITION - 414)) | (1L << (MASTER_CONNECT_RETRY - 414)) | (1L << (MASTER_DELAY - 414)) | (1L << (MASTER_HEARTBEAT_PERIOD - 414)) | (1L << (MASTER_HOST - 414)) | (1L << (MASTER_LOG_FILE - 414)) | (1L << (MASTER_LOG_POS - 414)) | (1L << (MASTER_PASSWORD - 414)) | (1L << (MASTER_PORT - 414)) | (1L << (MASTER_RETRY_COUNT - 414)) | (1L << (MASTER_SSL - 414)) | (1L << (MASTER_SSL_CA - 414)) | (1L << (MASTER_SSL_CAPATH - 414)) | (1L << (MASTER_SSL_CERT - 414)) | (1L << (MASTER_SSL_CIPHER - 414)) | (1L << (MASTER_SSL_CRL - 414)) | (1L << (MASTER_SSL_CRLPATH - 414)) | (1L << (MASTER_SSL_KEY - 414)) | (1L << (MASTER_TLS_VERSION - 414)) | (1L << (MASTER_USER - 414)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 414)) | (1L << (MAX_QUERIES_PER_HOUR - 414)) | (1L << (MAX_ROWS - 414)) | (1L << (MAX_SIZE - 414)) | (1L << (MAX_UPDATES_PER_HOUR - 414)) | (1L << (MAX_USER_CONNECTIONS - 414)) | (1L << (MEDIUM - 414)) | (1L << (MEMBER - 414)) | (1L << (MERGE - 414)) | (1L << (MESSAGE_TEXT - 414)) | (1L << (MID - 414)) | (1L << (MIGRATE - 414)) | (1L << (MIN_ROWS - 414)) | (1L << (MODE - 414)) | (1L << (MODIFY - 414)) | (1L << (MUTEX - 414)) | (1L << (MYSQL - 414)) | (1L << (MYSQL_ERRNO - 414)) | (1L << (NAME - 414)) | (1L << (NAMES - 414)) | (1L << (NCHAR - 414)) | (1L << (NEVER - 414)) | (1L << (NEXT - 414)) | (1L << (NO - 414)) | (1L << (NODEGROUP - 414)) | (1L << (NONE - 414)) | (1L << (OFFLINE - 414)) | (1L << (OFFSET - 414)) | (1L << (OF - 414)) | (1L << (OJ - 414)) | (1L << (OLD_PASSWORD - 414)) | (1L << (ONE - 414)) | (1L << (ONLINE - 414)) | (1L << (ONLY - 414)) | (1L << (OPEN - 414)) | (1L << (OPTIMIZER_COSTS - 414)) | (1L << (OPTIONS - 414)) | (1L << (OWNER - 414)) | (1L << (PACK_KEYS - 414)) | (1L << (PAGE - 414)) | (1L << (PARSER - 414)) | (1L << (PARTIAL - 414)) | (1L << (PARTITIONING - 414)) | (1L << (PARTITIONS - 414)))) != 0) || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (PASSWORD - 478)) | (1L << (PHASE - 478)) | (1L << (PLUGIN - 478)) | (1L << (PLUGIN_DIR - 478)) | (1L << (PLUGINS - 478)) | (1L << (PORT - 478)) | (1L << (PRECEDES - 478)) | (1L << (PREPARE - 478)) | (1L << (PRESERVE - 478)) | (1L << (PREV - 478)) | (1L << (PROCESSLIST - 478)) | (1L << (PROFILE - 478)) | (1L << (PROFILES - 478)) | (1L << (PROXY - 478)) | (1L << (QUERY - 478)) | (1L << (QUICK - 478)) | (1L << (REBUILD - 478)) | (1L << (RECOVER - 478)) | (1L << (REDO_BUFFER_SIZE - 478)) | (1L << (REDUNDANT - 478)) | (1L << (RELAY - 478)) | (1L << (RELAY_LOG_FILE - 478)) | (1L << (RELAY_LOG_POS - 478)) | (1L << (RELAYLOG - 478)) | (1L << (REMOVE - 478)) | (1L << (REORGANIZE - 478)) | (1L << (REPAIR - 478)) | (1L << (REPLICATE_DO_DB - 478)) | (1L << (REPLICATE_DO_TABLE - 478)) | (1L << (REPLICATE_IGNORE_DB - 478)) | (1L << (REPLICATE_IGNORE_TABLE - 478)) | (1L << (REPLICATE_REWRITE_DB - 478)) | (1L << (REPLICATE_WILD_DO_TABLE - 478)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 478)) | (1L << (REPLICATION - 478)) | (1L << (RESET - 478)) | (1L << (RESUME - 478)) | (1L << (RETURNED_SQLSTATE - 478)) | (1L << (RETURNS - 478)) | (1L << (ROLE - 478)) | (1L << (ROLLBACK - 478)) | (1L << (ROLLUP - 478)) | (1L << (ROTATE - 478)) | (1L << (ROW - 478)) | (1L << (ROWS - 478)) | (1L << (ROW_FORMAT - 478)) | (1L << (SAVEPOINT - 478)) | (1L << (SCHEDULE - 478)) | (1L << (SECURITY - 478)) | (1L << (SERVER - 478)) | (1L << (SESSION - 478)) | (1L << (SHARE - 478)) | (1L << (SHARED - 478)) | (1L << (SIGNED - 478)) | (1L << (SIMPLE - 478)) | (1L << (SLAVE - 478)) | (1L << (SLOW - 478)) | (1L << (SNAPSHOT - 478)) | (1L << (SOCKET - 478)) | (1L << (SOME - 478)) | (1L << (SONAME - 478)) | (1L << (SOUNDS - 478)) | (1L << (SOURCE - 478)) | (1L << (SQL_AFTER_GTIDS - 478)))) != 0) || ((((_la - 542)) & ~0x3f) == 0 && ((1L << (_la - 542)) & ((1L << (SQL_AFTER_MTS_GAPS - 542)) | (1L << (SQL_BEFORE_GTIDS - 542)) | (1L << (SQL_BUFFER_RESULT - 542)) | (1L << (SQL_CACHE - 542)) | (1L << (SQL_NO_CACHE - 542)) | (1L << (SQL_THREAD - 542)) | (1L << (START - 542)) | (1L << (STARTS - 542)) | (1L << (STATS_AUTO_RECALC - 542)) | (1L << (STATS_PERSISTENT - 542)) | (1L << (STATS_SAMPLE_PAGES - 542)) | (1L << (STATUS - 542)) | (1L << (STOP - 542)) | (1L << (STORAGE - 542)) | (1L << (STRING - 542)) | (1L << (SUBCLASS_ORIGIN - 542)) | (1L << (SUBJECT - 542)) | (1L << (SUBPARTITION - 542)) | (1L << (SUBPARTITIONS - 542)) | (1L << (SUSPEND - 542)) | (1L << (SWAPS - 542)) | (1L << (SWITCHES - 542)) | (1L << (TABLE_NAME - 542)) | (1L << (TABLESPACE - 542)) | (1L << (TEMPORARY - 542)) | (1L << (TEMPTABLE - 542)) | (1L << (THAN - 542)) | (1L << (TRADITIONAL - 542)) | (1L << (TRANSACTION - 542)) | (1L << (TRANSACTIONAL - 542)) | (1L << (TRIGGERS - 542)) | (1L << (TRUNCATE - 542)) | (1L << (UNDEFINED - 542)) | (1L << (UNDOFILE - 542)) | (1L << (UNDO_BUFFER_SIZE - 542)) | (1L << (UNINSTALL - 542)) | (1L << (UNKNOWN - 542)) | (1L << (UNTIL - 542)) | (1L << (UPGRADE - 542)) | (1L << (USER - 542)) | (1L << (USE_FRM - 542)) | (1L << (USER_RESOURCES - 542)) | (1L << (VALIDATION - 542)) | (1L << (VALUE - 542)) | (1L << (VARIABLES - 542)) | (1L << (VIEW - 542)) | (1L << (WAIT - 542)) | (1L << (WARNINGS - 542)) | (1L << (WITHOUT - 542)) | (1L << (WORK - 542)) | (1L << (WRAPPER - 542)) | (1L << (X509 - 542)) | (1L << (XA - 542)) | (1L << (XML - 542)) | (1L << (INTERNAL - 542)))) != 0) || ((((_la - 622)) & ~0x3f) == 0 && ((1L << (_la - 622)) & ((1L << (AUDIT_ADMIN - 622)) | (1L << (BACKUP_ADMIN - 622)) | (1L << (BINLOG_ADMIN - 622)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 622)) | (1L << (CLONE_ADMIN - 622)) | (1L << (CONNECTION_ADMIN - 622)) | (1L << (ENCRYPTION_KEY_ADMIN - 622)) | (1L << (FIREWALL_ADMIN - 622)) | (1L << (FIREWALL_USER - 622)) | (1L << (GROUP_REPLICATION_ADMIN - 622)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 622)) | (1L << (NDB_STORED_USER - 622)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 622)) | (1L << (REPLICATION_APPLIER - 622)) | (1L << (REPLICATION_SLAVE_ADMIN - 622)) | (1L << (RESOURCE_GROUP_ADMIN - 622)) | (1L << (RESOURCE_GROUP_USER - 622)) | (1L << (ROLE_ADMIN - 622)) | (1L << (SESSION_VARIABLES_ADMIN - 622)) | (1L << (SET_USER_ID - 622)) | (1L << (SHOW_ROUTINE - 622)) | (1L << (SYSTEM_VARIABLES_ADMIN - 622)) | (1L << (TABLE_ENCRYPTION_ADMIN - 622)) | (1L << (VERSION_TOKEN_ADMIN - 622)) | (1L << (XA_RECOVER_ADMIN - 622)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(GBaseParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(GBaseParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(GBaseParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(GBaseParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(GBaseParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(GBaseParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(GBaseParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(GBaseParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(GBaseParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(GBaseParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(GBaseParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(GBaseParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(GBaseParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(GBaseParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(GBaseParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(GBaseParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(GBaseParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(GBaseParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(GBaseParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(GBaseParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(GBaseParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(GBaseParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(GBaseParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(GBaseParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(GBaseParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(GBaseParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(GBaseParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(GBaseParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(GBaseParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(GBaseParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(GBaseParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(GBaseParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(GBaseParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(GBaseParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(GBaseParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(GBaseParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(GBaseParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(GBaseParser.COS, 0); }
		public TerminalNode COT() { return getToken(GBaseParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(GBaseParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(GBaseParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(GBaseParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(GBaseParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(GBaseParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(GBaseParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(GBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(GBaseParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(GBaseParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(GBaseParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(GBaseParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(GBaseParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(GBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(GBaseParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(GBaseParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(GBaseParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(GBaseParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(GBaseParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(GBaseParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(GBaseParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(GBaseParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(GBaseParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(GBaseParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(GBaseParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(GBaseParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(GBaseParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(GBaseParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(GBaseParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(GBaseParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(GBaseParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(GBaseParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(GBaseParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(GBaseParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(GBaseParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(GBaseParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(GBaseParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(GBaseParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(GBaseParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(GBaseParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(GBaseParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(GBaseParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(GBaseParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(GBaseParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(GBaseParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(GBaseParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(GBaseParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(GBaseParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(GBaseParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(GBaseParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(GBaseParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(GBaseParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(GBaseParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(GBaseParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(GBaseParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(GBaseParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(GBaseParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(GBaseParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(GBaseParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(GBaseParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(GBaseParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(GBaseParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(GBaseParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(GBaseParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(GBaseParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(GBaseParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(GBaseParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(GBaseParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(GBaseParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(GBaseParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(GBaseParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(GBaseParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(GBaseParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(GBaseParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(GBaseParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(GBaseParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(GBaseParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(GBaseParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(GBaseParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(GBaseParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(GBaseParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(GBaseParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(GBaseParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(GBaseParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(GBaseParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(GBaseParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(GBaseParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(GBaseParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(GBaseParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(GBaseParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(GBaseParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(GBaseParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(GBaseParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(GBaseParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(GBaseParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(GBaseParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(GBaseParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(GBaseParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(GBaseParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(GBaseParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(GBaseParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(GBaseParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(GBaseParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(GBaseParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(GBaseParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(GBaseParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(GBaseParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(GBaseParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(GBaseParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(GBaseParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(GBaseParser.MLINEFROMWKB, 0); }
		public TerminalNode MONTH() { return getToken(GBaseParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(GBaseParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(GBaseParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(GBaseParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(GBaseParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(GBaseParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(GBaseParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(GBaseParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(GBaseParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(GBaseParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(GBaseParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(GBaseParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(GBaseParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(GBaseParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(GBaseParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(GBaseParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(GBaseParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(GBaseParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(GBaseParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(GBaseParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(GBaseParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(GBaseParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(GBaseParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(GBaseParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(GBaseParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(GBaseParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(GBaseParser.PI, 0); }
		public TerminalNode POINT() { return getToken(GBaseParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(GBaseParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(GBaseParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(GBaseParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(GBaseParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(GBaseParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(GBaseParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(GBaseParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(GBaseParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(GBaseParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(GBaseParser.POW, 0); }
		public TerminalNode POWER() { return getToken(GBaseParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(GBaseParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(GBaseParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(GBaseParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(GBaseParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(GBaseParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(GBaseParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(GBaseParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(GBaseParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(GBaseParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(GBaseParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(GBaseParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(GBaseParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(GBaseParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(GBaseParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(GBaseParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(GBaseParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(GBaseParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(GBaseParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(GBaseParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(GBaseParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(GBaseParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(GBaseParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(GBaseParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(GBaseParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(GBaseParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(GBaseParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(GBaseParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(GBaseParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(GBaseParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(GBaseParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(GBaseParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(GBaseParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(GBaseParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(GBaseParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(GBaseParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(GBaseParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(GBaseParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(GBaseParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(GBaseParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(GBaseParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(GBaseParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(GBaseParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(GBaseParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(GBaseParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(GBaseParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(GBaseParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(GBaseParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(GBaseParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(GBaseParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(GBaseParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(GBaseParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(GBaseParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(GBaseParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(GBaseParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(GBaseParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(GBaseParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(GBaseParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(GBaseParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(GBaseParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(GBaseParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(GBaseParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(GBaseParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(GBaseParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(GBaseParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(GBaseParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(GBaseParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(GBaseParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(GBaseParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(GBaseParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(GBaseParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(GBaseParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(GBaseParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(GBaseParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(GBaseParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(GBaseParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(GBaseParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(GBaseParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(GBaseParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(GBaseParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(GBaseParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(GBaseParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(GBaseParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(GBaseParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(GBaseParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(GBaseParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(GBaseParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(GBaseParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(GBaseParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(GBaseParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(GBaseParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(GBaseParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(GBaseParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(GBaseParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(GBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(GBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(GBaseParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(GBaseParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(GBaseParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(GBaseParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(GBaseParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(GBaseParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(GBaseParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(GBaseParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(GBaseParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(GBaseParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(GBaseParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(GBaseParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(GBaseParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(GBaseParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(GBaseParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(GBaseParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(GBaseParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(GBaseParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(GBaseParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(GBaseParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(GBaseParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(GBaseParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(GBaseParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(GBaseParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(GBaseParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(GBaseParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(GBaseParser.X_FUNCTION, 0); }
		public TerminalNode JSON_VALID() { return getToken(GBaseParser.JSON_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(GBaseParser.JSON_SCHEMA_VALID, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6441);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (TIMESTAMP - 200)) | (1L << (YEAR - 200)) | (1L << (JSON_VALID - 200)) | (1L << (JSON_SCHEMA_VALID - 200)) | (1L << (COUNT - 200)))) != 0) || _la==POSITION || _la==INVISIBLE || ((((_la - 590)) & ~0x3f) == 0 && ((1L << (_la - 590)) & ((1L << (VISIBLE - 590)) | (1L << (QUARTER - 590)) | (1L << (MONTH - 590)) | (1L << (DAY - 590)) | (1L << (HOUR - 590)) | (1L << (MINUTE - 590)) | (1L << (WEEK - 590)) | (1L << (SECOND - 590)) | (1L << (MICROSECOND - 590)) | (1L << (SESSION_VARIABLES_ADMIN - 590)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (GEOMETRYCOLLECTION - 703)) | (1L << (LINESTRING - 703)) | (1L << (MULTILINESTRING - 703)) | (1L << (MULTIPOINT - 703)) | (1L << (MULTIPOLYGON - 703)) | (1L << (POINT - 703)) | (1L << (POLYGON - 703)) | (1L << (ABS - 703)) | (1L << (ACOS - 703)) | (1L << (ADDDATE - 703)) | (1L << (ADDTIME - 703)) | (1L << (AES_DECRYPT - 703)) | (1L << (AES_ENCRYPT - 703)) | (1L << (AREA - 703)) | (1L << (ASBINARY - 703)) | (1L << (ASIN - 703)) | (1L << (ASTEXT - 703)) | (1L << (ASWKB - 703)) | (1L << (ASWKT - 703)) | (1L << (ASYMMETRIC_DECRYPT - 703)) | (1L << (ASYMMETRIC_DERIVE - 703)) | (1L << (ASYMMETRIC_ENCRYPT - 703)) | (1L << (ASYMMETRIC_SIGN - 703)) | (1L << (ASYMMETRIC_VERIFY - 703)) | (1L << (ATAN - 703)) | (1L << (ATAN2 - 703)) | (1L << (BENCHMARK - 703)) | (1L << (BIN - 703)) | (1L << (BIT_COUNT - 703)) | (1L << (BIT_LENGTH - 703)) | (1L << (BUFFER - 703)) | (1L << (CEIL - 703)) | (1L << (CEILING - 703)) | (1L << (CENTROID - 703)) | (1L << (CHARACTER_LENGTH - 703)) | (1L << (CHARSET - 703)) | (1L << (CHAR_LENGTH - 703)) | (1L << (COERCIBILITY - 703)) | (1L << (COLLATION - 703)) | (1L << (COMPRESS - 703)) | (1L << (CONCAT - 703)) | (1L << (CONCAT_WS - 703)) | (1L << (CONNECTION_ID - 703)) | (1L << (CONV - 703)) | (1L << (CONVERT_TZ - 703)) | (1L << (COS - 703)) | (1L << (COT - 703)) | (1L << (CRC32 - 703)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 703)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 703)) | (1L << (CREATE_DH_PARAMETERS - 703)) | (1L << (CREATE_DIGEST - 703)) | (1L << (CROSSES - 703)) | (1L << (DATEDIFF - 703)) | (1L << (DATE_FORMAT - 703)) | (1L << (DAYNAME - 703)) | (1L << (DAYOFMONTH - 703)) | (1L << (DAYOFWEEK - 703)) | (1L << (DAYOFYEAR - 703)) | (1L << (DECODE - 703)) | (1L << (DEGREES - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (DES_DECRYPT - 767)) | (1L << (DES_ENCRYPT - 767)) | (1L << (DIMENSION - 767)) | (1L << (DISJOINT - 767)) | (1L << (ELT - 767)) | (1L << (ENCODE - 767)) | (1L << (ENCRYPT - 767)) | (1L << (ENDPOINT - 767)) | (1L << (ENVELOPE - 767)) | (1L << (EQUALS - 767)) | (1L << (EXP - 767)) | (1L << (EXPORT_SET - 767)) | (1L << (EXTERIORRING - 767)) | (1L << (EXTRACTVALUE - 767)) | (1L << (FIELD - 767)) | (1L << (FIND_IN_SET - 767)) | (1L << (FLOOR - 767)) | (1L << (FORMAT - 767)) | (1L << (FOUND_ROWS - 767)) | (1L << (FROM_BASE64 - 767)) | (1L << (FROM_DAYS - 767)) | (1L << (FROM_UNIXTIME - 767)) | (1L << (GEOMCOLLFROMTEXT - 767)) | (1L << (GEOMCOLLFROMWKB - 767)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 767)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 767)) | (1L << (GEOMETRYFROMTEXT - 767)) | (1L << (GEOMETRYFROMWKB - 767)) | (1L << (GEOMETRYN - 767)) | (1L << (GEOMETRYTYPE - 767)) | (1L << (GEOMFROMTEXT - 767)) | (1L << (GEOMFROMWKB - 767)) | (1L << (GET_FORMAT - 767)) | (1L << (GET_LOCK - 767)) | (1L << (GLENGTH - 767)) | (1L << (GREATEST - 767)) | (1L << (GTID_SUBSET - 767)) | (1L << (GTID_SUBTRACT - 767)) | (1L << (HEX - 767)) | (1L << (IFNULL - 767)) | (1L << (INET6_ATON - 767)) | (1L << (INET6_NTOA - 767)) | (1L << (INET_ATON - 767)) | (1L << (INET_NTOA - 767)) | (1L << (INSTR - 767)) | (1L << (INTERIORRINGN - 767)) | (1L << (INTERSECTS - 767)) | (1L << (ISCLOSED - 767)) | (1L << (ISEMPTY - 767)) | (1L << (ISNULL - 767)) | (1L << (ISSIMPLE - 767)) | (1L << (IS_FREE_LOCK - 767)) | (1L << (IS_IPV4 - 767)) | (1L << (IS_IPV4_COMPAT - 767)) | (1L << (IS_IPV4_MAPPED - 767)) | (1L << (IS_IPV6 - 767)) | (1L << (IS_USED_LOCK - 767)) | (1L << (LAST_INSERT_ID - 767)) | (1L << (LCASE - 767)) | (1L << (LEAST - 767)) | (1L << (LENGTH - 767)) | (1L << (LINEFROMTEXT - 767)) | (1L << (LINEFROMWKB - 767)) | (1L << (LINESTRINGFROMTEXT - 767)))) != 0) || ((((_la - 831)) & ~0x3f) == 0 && ((1L << (_la - 831)) & ((1L << (LINESTRINGFROMWKB - 831)) | (1L << (LN - 831)) | (1L << (LOAD_FILE - 831)) | (1L << (LOCATE - 831)) | (1L << (LOG - 831)) | (1L << (LOG10 - 831)) | (1L << (LOG2 - 831)) | (1L << (LOWER - 831)) | (1L << (LPAD - 831)) | (1L << (LTRIM - 831)) | (1L << (MAKEDATE - 831)) | (1L << (MAKETIME - 831)) | (1L << (MAKE_SET - 831)) | (1L << (MASTER_POS_WAIT - 831)) | (1L << (MBRCONTAINS - 831)) | (1L << (MBRDISJOINT - 831)) | (1L << (MBREQUAL - 831)) | (1L << (MBRINTERSECTS - 831)) | (1L << (MBROVERLAPS - 831)) | (1L << (MBRTOUCHES - 831)) | (1L << (MBRWITHIN - 831)) | (1L << (MD5 - 831)) | (1L << (MLINEFROMTEXT - 831)) | (1L << (MLINEFROMWKB - 831)) | (1L << (MONTHNAME - 831)) | (1L << (MPOINTFROMTEXT - 831)) | (1L << (MPOINTFROMWKB - 831)) | (1L << (MPOLYFROMTEXT - 831)) | (1L << (MPOLYFROMWKB - 831)) | (1L << (MULTILINESTRINGFROMTEXT - 831)) | (1L << (MULTILINESTRINGFROMWKB - 831)) | (1L << (MULTIPOINTFROMTEXT - 831)) | (1L << (MULTIPOINTFROMWKB - 831)) | (1L << (MULTIPOLYGONFROMTEXT - 831)) | (1L << (MULTIPOLYGONFROMWKB - 831)) | (1L << (NAME_CONST - 831)) | (1L << (NULLIF - 831)) | (1L << (NUMGEOMETRIES - 831)) | (1L << (NUMINTERIORRINGS - 831)) | (1L << (NUMPOINTS - 831)) | (1L << (OCT - 831)) | (1L << (OCTET_LENGTH - 831)) | (1L << (ORD - 831)) | (1L << (OVERLAPS - 831)) | (1L << (PERIOD_ADD - 831)) | (1L << (PERIOD_DIFF - 831)) | (1L << (PI - 831)) | (1L << (POINTFROMTEXT - 831)) | (1L << (POINTFROMWKB - 831)) | (1L << (POINTN - 831)) | (1L << (POLYFROMTEXT - 831)) | (1L << (POLYFROMWKB - 831)) | (1L << (POLYGONFROMTEXT - 831)) | (1L << (POLYGONFROMWKB - 831)) | (1L << (POW - 831)) | (1L << (POWER - 831)) | (1L << (QUOTE - 831)) | (1L << (RADIANS - 831)) | (1L << (RAND - 831)) | (1L << (RANDOM_BYTES - 831)) | (1L << (RELEASE_LOCK - 831)) | (1L << (REVERSE - 831)) | (1L << (ROUND - 831)) | (1L << (ROW_COUNT - 831)))) != 0) || ((((_la - 895)) & ~0x3f) == 0 && ((1L << (_la - 895)) & ((1L << (RPAD - 895)) | (1L << (RTRIM - 895)) | (1L << (SEC_TO_TIME - 895)) | (1L << (SESSION_USER - 895)) | (1L << (SHA - 895)) | (1L << (SHA1 - 895)) | (1L << (SHA2 - 895)) | (1L << (SIGN - 895)) | (1L << (SIN - 895)) | (1L << (SLEEP - 895)) | (1L << (SOUNDEX - 895)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 895)) | (1L << (SQRT - 895)) | (1L << (SRID - 895)) | (1L << (STARTPOINT - 895)) | (1L << (STRCMP - 895)) | (1L << (STR_TO_DATE - 895)) | (1L << (ST_AREA - 895)) | (1L << (ST_ASBINARY - 895)) | (1L << (ST_ASTEXT - 895)) | (1L << (ST_ASWKB - 895)) | (1L << (ST_ASWKT - 895)) | (1L << (ST_BUFFER - 895)) | (1L << (ST_CENTROID - 895)) | (1L << (ST_CONTAINS - 895)) | (1L << (ST_CROSSES - 895)) | (1L << (ST_DIFFERENCE - 895)) | (1L << (ST_DIMENSION - 895)) | (1L << (ST_DISJOINT - 895)) | (1L << (ST_DISTANCE - 895)) | (1L << (ST_ENDPOINT - 895)) | (1L << (ST_ENVELOPE - 895)) | (1L << (ST_EQUALS - 895)) | (1L << (ST_EXTERIORRING - 895)) | (1L << (ST_GEOMCOLLFROMTEXT - 895)) | (1L << (ST_GEOMCOLLFROMTXT - 895)) | (1L << (ST_GEOMCOLLFROMWKB - 895)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 895)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 895)) | (1L << (ST_GEOMETRYFROMTEXT - 895)) | (1L << (ST_GEOMETRYFROMWKB - 895)) | (1L << (ST_GEOMETRYN - 895)) | (1L << (ST_GEOMETRYTYPE - 895)) | (1L << (ST_GEOMFROMTEXT - 895)) | (1L << (ST_GEOMFROMWKB - 895)) | (1L << (ST_INTERIORRINGN - 895)) | (1L << (ST_INTERSECTION - 895)) | (1L << (ST_INTERSECTS - 895)) | (1L << (ST_ISCLOSED - 895)) | (1L << (ST_ISEMPTY - 895)) | (1L << (ST_ISSIMPLE - 895)) | (1L << (ST_LINEFROMTEXT - 895)) | (1L << (ST_LINEFROMWKB - 895)) | (1L << (ST_LINESTRINGFROMTEXT - 895)) | (1L << (ST_LINESTRINGFROMWKB - 895)) | (1L << (ST_NUMGEOMETRIES - 895)) | (1L << (ST_NUMINTERIORRING - 895)) | (1L << (ST_NUMINTERIORRINGS - 895)) | (1L << (ST_NUMPOINTS - 895)) | (1L << (ST_OVERLAPS - 895)) | (1L << (ST_POINTFROMTEXT - 895)) | (1L << (ST_POINTFROMWKB - 895)) | (1L << (ST_POINTN - 895)))) != 0) || ((((_la - 959)) & ~0x3f) == 0 && ((1L << (_la - 959)) & ((1L << (ST_POLYFROMTEXT - 959)) | (1L << (ST_POLYFROMWKB - 959)) | (1L << (ST_POLYGONFROMTEXT - 959)) | (1L << (ST_POLYGONFROMWKB - 959)) | (1L << (ST_SRID - 959)) | (1L << (ST_STARTPOINT - 959)) | (1L << (ST_SYMDIFFERENCE - 959)) | (1L << (ST_TOUCHES - 959)) | (1L << (ST_UNION - 959)) | (1L << (ST_WITHIN - 959)) | (1L << (ST_X - 959)) | (1L << (ST_Y - 959)) | (1L << (SUBDATE - 959)) | (1L << (SUBSTRING_INDEX - 959)) | (1L << (SUBTIME - 959)) | (1L << (SYSTEM_USER - 959)) | (1L << (TAN - 959)) | (1L << (TIMEDIFF - 959)) | (1L << (TIMESTAMPADD - 959)) | (1L << (TIMESTAMPDIFF - 959)) | (1L << (TIME_FORMAT - 959)) | (1L << (TIME_TO_SEC - 959)) | (1L << (TOUCHES - 959)) | (1L << (TO_BASE64 - 959)) | (1L << (TO_DAYS - 959)) | (1L << (TO_SECONDS - 959)) | (1L << (UCASE - 959)) | (1L << (UNCOMPRESS - 959)) | (1L << (UNCOMPRESSED_LENGTH - 959)) | (1L << (UNHEX - 959)) | (1L << (UNIX_TIMESTAMP - 959)) | (1L << (UPDATEXML - 959)) | (1L << (UPPER - 959)) | (1L << (UUID - 959)) | (1L << (UUID_SHORT - 959)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 959)) | (1L << (VERSION - 959)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 959)) | (1L << (WEEKDAY - 959)) | (1L << (WEEKOFYEAR - 959)) | (1L << (WEIGHT_STRING - 959)) | (1L << (WITHIN - 959)) | (1L << (YEARWEEK - 959)) | (1L << (Y_FUNCTION - 959)) | (1L << (X_FUNCTION - 959)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 301:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 302:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 303:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 4);
		case 11:
			return precpred(_ctx, 3);
		case 12:
			return precpred(_ctx, 2);
		case 13:
			return precpred(_ctx, 1);
		case 14:
			return precpred(_ctx, 13);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0425\u192e\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\3\2\5\2\u0280\n\2\3\2\5\2\u0283\n\2\3"+
		"\2\3\2\3\3\3\3\5\3\u0289\n\3\3\3\5\3\u028c\n\3\3\3\7\3\u028f\n\3\f\3\16"+
		"\3\u0292\13\3\3\3\3\3\5\3\u0296\n\3\3\3\5\3\u0299\n\3\3\3\5\3\u029c\n"+
		"\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u02a5\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u02cc\n\6\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u02d8\n\7\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\5\b\u02e3\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\5\t\u02f4\n\t\3\n\3\n\3\n\5\n\u02f9\n\n\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0305\n\13\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\5\f\u0320\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0329\n"+
		"\r\3\16\3\16\3\16\5\16\u032e\n\16\3\16\3\16\7\16\u0332\n\16\f\16\16\16"+
		"\u0335\13\16\3\17\3\17\5\17\u0339\n\17\3\17\3\17\5\17\u033d\n\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0346\n\17\3\17\5\17\u0349\n\17\3"+
		"\17\5\17\u034c\n\17\3\17\3\17\5\17\u0350\n\17\3\17\3\17\3\17\3\20\3\20"+
		"\5\20\u0357\n\20\3\20\5\20\u035a\n\20\3\20\3\20\3\20\5\20\u035f\n\20\3"+
		"\20\3\20\3\20\3\20\7\20\u0365\n\20\f\20\16\20\u0368\13\20\3\20\3\20\5"+
		"\20\u036c\n\20\3\20\3\20\3\20\5\20\u0371\n\20\3\20\7\20\u0374\n\20\f\20"+
		"\16\20\u0377\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0382"+
		"\n\21\3\21\5\21\u0385\n\21\3\21\3\21\5\21\u0389\n\21\3\21\5\21\u038c\n"+
		"\21\3\21\3\21\5\21\u0390\n\21\3\21\5\21\u0393\n\21\3\21\3\21\5\21\u0397"+
		"\n\21\3\21\5\21\u039a\n\21\3\21\5\21\u039d\n\21\3\21\3\21\5\21\u03a1\n"+
		"\21\3\21\5\21\u03a4\n\21\3\21\3\21\5\21\u03a8\n\21\3\21\3\21\3\22\3\22"+
		"\5\22\u03ae\n\22\3\22\3\22\3\22\3\22\5\22\u03b4\n\22\3\22\3\22\7\22\u03b8"+
		"\n\22\f\22\16\22\u03bb\13\22\3\22\3\22\7\22\u03bf\n\22\f\22\16\22\u03c2"+
		"\13\22\3\22\3\22\3\23\3\23\5\23\u03c8\n\23\3\23\3\23\3\23\3\23\5\23\u03ce"+
		"\n\23\3\23\3\23\7\23\u03d2\n\23\f\23\16\23\u03d5\13\23\3\23\3\23\3\23"+
		"\3\23\7\23\u03db\n\23\f\23\16\23\u03de\13\23\3\23\3\23\5\23\u03e2\n\23"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u03f0"+
		"\n\24\f\24\16\24\u03f3\13\24\3\24\3\24\3\25\3\25\5\25\u03f9\n\25\3\25"+
		"\3\25\5\25\u03fd\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0407"+
		"\n\25\3\25\3\25\5\25\u040b\n\25\3\25\3\25\5\25\u040f\n\25\3\25\3\25\5"+
		"\25\u0413\n\25\3\25\3\25\5\25\u0417\n\25\3\25\7\25\u041a\n\25\f\25\16"+
		"\25\u041d\13\25\5\25\u041f\n\25\3\25\5\25\u0422\n\25\3\25\5\25\u0425\n"+
		"\25\3\25\5\25\u0428\n\25\3\25\3\25\3\25\3\25\5\25\u042e\n\25\3\25\3\25"+
		"\5\25\u0432\n\25\3\25\3\25\3\25\3\25\5\25\u0438\n\25\3\25\7\25\u043b\n"+
		"\25\f\25\16\25\u043e\13\25\5\25\u0440\n\25\3\25\5\25\u0443\n\25\5\25\u0445"+
		"\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0450\n\26\3\26"+
		"\3\26\5\26\u0454\n\26\3\26\5\26\u0457\n\26\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0465\n\27\3\27\5\27\u0468\n\27"+
		"\3\27\3\27\5\27\u046c\n\27\3\27\5\27\u046f\n\27\3\27\3\27\5\27\u0473\n"+
		"\27\3\27\5\27\u0476\n\27\3\27\3\27\5\27\u047a\n\27\3\27\5\27\u047d\n\27"+
		"\3\27\3\27\5\27\u0481\n\27\3\27\5\27\u0484\n\27\3\27\5\27\u0487\n\27\3"+
		"\27\3\27\5\27\u048b\n\27\3\27\5\27\u048e\n\27\3\27\3\27\5\27\u0492\n\27"+
		"\3\27\3\27\3\30\3\30\5\30\u0498\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\5\30\u04a5\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u04ac"+
		"\n\31\3\31\3\31\3\31\5\31\u04b1\n\31\3\31\5\31\u04b4\n\31\3\31\3\31\3"+
		"\31\5\31\u04b9\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u04c1\n\31\3\31"+
		"\3\31\3\31\3\31\5\31\u04c7\n\31\3\31\3\31\5\31\u04cb\n\31\3\32\5\32\u04ce"+
		"\n\32\3\32\3\32\3\32\5\32\u04d3\n\32\3\32\5\32\u04d6\n\32\3\32\3\32\5"+
		"\32\u04da\n\32\3\32\5\32\u04dd\n\32\3\32\3\32\5\32\u04e1\n\32\3\32\5\32"+
		"\u04e4\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u04ec\n\33\5\33\u04ee\n"+
		"\33\3\34\3\34\3\34\7\34\u04f3\n\34\f\34\16\34\u04f6\13\34\3\34\3\34\3"+
		"\34\5\34\u04fb\n\34\3\34\3\34\3\34\3\34\7\34\u0501\n\34\f\34\16\34\u0504"+
		"\13\34\5\34\u0506\n\34\3\34\3\34\3\34\7\34\u050b\n\34\f\34\16\34\u050e"+
		"\13\34\5\34\u0510\n\34\5\34\u0512\n\34\3\35\3\35\3\35\3\35\5\35\u0518"+
		"\n\35\3\36\3\36\3\36\3\36\5\36\u051e\n\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u052f\n\37\3 \3 \3"+
		" \3 \3 \5 \u0536\n \3!\3!\3!\3\"\3\"\5\"\u053d\n\"\3\"\3\"\3\"\3\"\3\""+
		"\3\"\3\"\3\"\3\"\5\"\u0548\n\"\3#\5#\u054b\n#\3#\3#\3#\3$\3$\3$\3%\3%"+
		"\3%\3%\3%\5%\u0558\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0565\n%\3%"+
		"\3%\3%\5%\u056a\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u057a"+
		"\n&\3\'\3\'\3\'\3\'\7\'\u0580\n\'\f\'\16\'\u0583\13\'\3\'\3\'\3(\3(\3"+
		"(\3(\3(\5(\u058c\n(\3)\3)\7)\u0590\n)\f)\16)\u0593\13)\3*\3*\3*\3*\3*"+
		"\3*\3*\5*\u059c\n*\3*\5*\u059f\n*\3*\3*\3*\5*\u05a4\n*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\5*\u05b1\n*\3*\3*\3*\3*\3*\5*\u05b8\n*\3*\3*\3*\3*"+
		"\3*\5*\u05bf\n*\5*\u05c1\n*\3*\3*\3*\3*\3*\5*\u05c8\n*\3+\3+\5+\u05cc"+
		"\n+\5+\u05ce\n+\3+\3+\3+\5+\u05d3\n+\3+\5+\u05d6\n+\3+\3+\7+\u05da\n+"+
		"\f+\16+\u05dd\13+\3+\3+\5+\u05e1\n+\5+\u05e3\n+\3+\3+\5+\u05e7\n+\3+\5"+
		"+\u05ea\n+\3+\5+\u05ed\n+\3+\3+\7+\u05f1\n+\f+\16+\u05f4\13+\3+\3+\5+"+
		"\u05f8\n+\5+\u05fa\n+\3+\3+\3+\5+\u05ff\n+\3+\3+\3+\3+\3+\5+\u0606\n+"+
		"\5+\u0608\n+\3+\3+\3+\3+\3+\5+\u060f\n+\3,\3,\3,\5,\u0614\n,\3,\3,\5,"+
		"\u0618\n,\3,\5,\u061b\n,\3-\3-\3-\3-\3-\3-\5-\u0623\n-\3-\3-\3-\3-\3-"+
		"\3-\5-\u062b\n-\5-\u062d\n-\3.\3.\3.\3.\3.\3.\5.\u0635\n.\3/\3/\5/\u0639"+
		"\n/\3/\5/\u063c\n/\3/\3/\7/\u0640\n/\f/\16/\u0643\13/\3/\3/\5/\u0647\n"+
		"/\3/\5/\u064a\n/\3/\3/\7/\u064e\n/\f/\16/\u0651\13/\5/\u0653\n/\3\60\3"+
		"\60\5\60\u0657\n\60\3\60\3\60\3\60\5\60\u065c\n\60\3\60\3\60\3\60\5\60"+
		"\u0661\n\60\3\60\3\60\5\60\u0665\n\60\3\60\3\60\3\60\5\60\u066a\n\60\3"+
		"\60\5\60\u066d\n\60\3\60\3\60\5\60\u0671\n\60\3\60\3\60\5\60\u0675\n\60"+
		"\3\60\3\60\5\60\u0679\n\60\3\60\3\60\5\60\u067d\n\60\3\60\3\60\3\60\5"+
		"\60\u0682\n\60\3\60\3\60\3\60\5\60\u0687\n\60\3\60\3\60\3\60\5\60\u068c"+
		"\n\60\3\60\3\60\3\60\3\60\5\60\u0692\n\60\3\60\3\60\3\60\5\60\u0697\n"+
		"\60\3\60\3\60\3\60\5\60\u069c\n\60\3\60\3\60\3\60\3\60\5\60\u06a2\n\60"+
		"\3\60\3\60\3\60\5\60\u06a7\n\60\3\60\3\60\3\60\5\60\u06ac\n\60\3\60\3"+
		"\60\3\60\5\60\u06b1\n\60\3\60\3\60\3\60\5\60\u06b6\n\60\3\60\3\60\3\60"+
		"\5\60\u06bb\n\60\3\60\3\60\3\60\5\60\u06c0\n\60\3\60\3\60\3\60\5\60\u06c5"+
		"\n\60\3\60\3\60\3\60\5\60\u06ca\n\60\3\60\3\60\3\60\5\60\u06cf\n\60\3"+
		"\60\3\60\3\60\5\60\u06d4\n\60\3\60\3\60\3\60\3\60\5\60\u06da\n\60\3\60"+
		"\3\60\3\60\5\60\u06df\n\60\3\60\3\60\3\60\3\60\5\60\u06e5\n\60\3\61\3"+
		"\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u06ef\n\62\3\62\3\62\3\62\3\62"+
		"\3\62\5\62\u06f6\n\62\5\62\u06f8\n\62\3\62\3\62\3\62\3\62\7\62\u06fe\n"+
		"\62\f\62\16\62\u0701\13\62\3\62\3\62\5\62\u0705\n\62\3\63\5\63\u0708\n"+
		"\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0710\n\63\3\63\3\63\3\63\3\63"+
		"\5\63\u0716\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\5\63\u0726\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\5\63\u0732\n\63\5\63\u0734\n\63\3\64\5\64\u0737\n\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\5\64\u073f\n\64\3\64\3\64\3\64\3\64\5\64\u0745"+
		"\n\64\3\64\3\64\3\64\3\64\5\64\u074b\n\64\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\7\65\u0756\n\65\f\65\16\65\u0759\13\65\3\65\3\65\7\65"+
		"\u075d\n\65\f\65\16\65\u0760\13\65\3\65\3\65\3\65\7\65\u0765\n\65\f\65"+
		"\16\65\u0768\13\65\5\65\u076a\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\7\65\u0773\n\65\f\65\16\65\u0776\13\65\3\65\3\65\3\65\7\65\u077b\n\65"+
		"\f\65\16\65\u077e\13\65\5\65\u0780\n\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\7\65\u078a\n\65\f\65\16\65\u078d\13\65\3\65\3\65\7\65\u0791"+
		"\n\65\f\65\16\65\u0794\13\65\3\65\3\65\3\65\7\65\u0799\n\65\f\65\16\65"+
		"\u079c\13\65\5\65\u079e\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7"+
		"\65\u07a8\n\65\f\65\16\65\u07ab\13\65\3\65\3\65\7\65\u07af\n\65\f\65\16"+
		"\65\u07b2\13\65\3\65\3\65\3\65\7\65\u07b7\n\65\f\65\16\65\u07ba\13\65"+
		"\5\65\u07bc\n\65\3\65\3\65\3\65\7\65\u07c1\n\65\f\65\16\65\u07c4\13\65"+
		"\3\65\3\65\3\65\7\65\u07c9\n\65\f\65\16\65\u07cc\13\65\5\65\u07ce\n\65"+
		"\5\65\u07d0\n\65\3\66\3\66\3\66\5\66\u07d5\n\66\3\67\3\67\3\67\3\67\6"+
		"\67\u07db\n\67\r\67\16\67\u07dc\3\67\3\67\38\38\38\78\u07e4\n8\f8\168"+
		"\u07e7\138\39\59\u07ea\n9\39\39\59\u07ee\n9\39\39\39\59\u07f3\n9\39\3"+
		"9\39\39\59\u07f9\n9\39\39\39\39\59\u07ff\n9\39\39\39\59\u0804\n9\39\3"+
		"9\39\59\u0809\n9\39\39\39\59\u080e\n9\39\39\39\59\u0813\n9\39\59\u0816"+
		"\n9\3:\3:\3:\5:\u081b\n:\3:\6:\u081e\n:\r:\16:\u081f\3:\3:\3:\3:\3:\3"+
		":\3:\3:\5:\u082a\n:\3;\3;\5;\u082e\n;\3;\3;\3;\3;\3;\5;\u0835\n;\3;\3"+
		";\3;\5;\u083a\n;\3;\5;\u083d\n;\3;\3;\3;\5;\u0842\n;\3;\5;\u0845\n;\3"+
		";\3;\5;\u0849\n;\3;\3;\5;\u084d\n;\3<\3<\3<\3<\7<\u0853\n<\f<\16<\u0856"+
		"\13<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0868\n>\3>\5"+
		">\u086b\n>\3>\5>\u086e\n>\3>\3>\5>\u0872\n>\3>\3>\3?\3?\3?\3?\7?\u087a"+
		"\n?\f?\16?\u087d\13?\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0887\n@\f@\16@\u088a"+
		"\13@\3@\3@\3A\3A\5A\u0890\nA\3A\5A\u0893\nA\3A\3A\3A\3A\3A\7A\u089a\n"+
		"A\fA\16A\u089d\13A\5A\u089f\nA\3A\5A\u08a2\nA\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\3B\5B\u08ad\nB\3B\5B\u08b0\nB\3B\3B\5B\u08b4\nB\3B\3B\3C\3C\3C\3C\5C"+
		"\u08bc\nC\3C\5C\u08bf\nC\3C\3C\3C\5C\u08c4\nC\3C\3C\3C\3C\3C\3C\5C\u08cc"+
		"\nC\3C\3C\3C\3C\5C\u08d2\nC\3C\3C\5C\u08d6\nC\3D\3D\5D\u08da\nD\3D\7D"+
		"\u08dd\nD\fD\16D\u08e0\13D\3D\3D\5D\u08e4\nD\3D\3D\3D\3D\3D\5D\u08eb\n"+
		"D\3D\3D\5D\u08ef\nD\3D\3D\3D\3D\3D\3D\3D\7D\u08f8\nD\fD\16D\u08fb\13D"+
		"\3D\3D\3D\3D\3D\5D\u0902\nD\3D\5D\u0905\nD\3D\3D\7D\u0909\nD\fD\16D\u090c"+
		"\13D\3D\3D\3D\5D\u0911\nD\5D\u0913\nD\3D\3D\3D\5D\u0918\nD\3D\5D\u091b"+
		"\nD\3D\3D\7D\u091f\nD\fD\16D\u0922\13D\3D\3D\3D\5D\u0927\nD\5D\u0929\n"+
		"D\3D\3D\5D\u092d\nD\3D\5D\u0930\nD\3D\5D\u0933\nD\3D\3D\7D\u0937\nD\f"+
		"D\16D\u093a\13D\3D\3D\3D\5D\u093f\nD\3D\5D\u0942\nD\3D\3D\7D\u0946\nD"+
		"\fD\16D\u0949\13D\3D\3D\3D\5D\u094e\nD\5D\u0950\nD\3D\3D\3D\5D\u0955\n"+
		"D\3D\3D\3D\3D\3D\3D\5D\u095d\nD\5D\u095f\nD\3D\3D\3D\3D\3D\3D\3D\5D\u0968"+
		"\nD\3D\3D\3D\5D\u096d\nD\3D\3D\3D\3D\3D\3D\5D\u0975\nD\3D\3D\5D\u0979"+
		"\nD\3D\3D\3D\3D\3D\3D\5D\u0981\nD\3D\3D\3D\3D\3D\3D\3D\3D\5D\u098b\nD"+
		"\3D\3D\3D\5D\u0990\nD\3D\3D\3D\3D\3D\5D\u0997\nD\3D\3D\5D\u099b\nD\3D"+
		"\3D\5D\u099f\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u09bc\nD\3D\3D\5D\u09c0\nD\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\5D\u09cc\nD\3D\5D\u09cf\nD\3D\3D\3D\3D\3D\3D\3D\5D"+
		"\u09d8\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09e7\nD\fD\16D\u09ea"+
		"\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u09f5\nD\3D\3D\3D\3D\3D\5D\u09fc\n"+
		"D\3D\3D\3D\3D\3D\5D\u0a03\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u0a10"+
		"\nD\fD\16D\u0a13\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0a1f\nD\3D\3D\3"+
		"D\3D\5D\u0a25\nD\3D\3D\3D\3D\5D\u0a2b\nD\3D\3D\3D\3D\5D\u0a31\nD\3D\3"+
		"D\3D\3D\5D\u0a37\nD\3D\3D\3D\3D\5D\u0a3d\nD\3D\3D\3D\3D\5D\u0a43\nD\3"+
		"E\3E\3E\5E\u0a48\nE\3E\3E\3F\3F\3F\5F\u0a4f\nF\3F\3F\3G\3G\3G\5G\u0a56"+
		"\nG\3G\3G\3G\3G\3G\5G\u0a5d\nG\3G\3G\3G\5G\u0a62\nG\3G\7G\u0a65\nG\fG"+
		"\16G\u0a68\13G\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\5I\u0a75\nI\3I\3I\3J\3"+
		"J\3J\5J\u0a7c\nJ\3J\3J\3K\3K\3K\5K\u0a83\nK\3K\3K\3L\3L\5L\u0a89\nL\3"+
		"L\3L\5L\u0a8d\nL\3L\3L\5L\u0a91\nL\3M\3M\3M\3M\3M\5M\u0a98\nM\3M\5M\u0a9b"+
		"\nM\3N\3N\3N\5N\u0aa0\nN\3N\3N\3O\3O\3O\5O\u0aa7\nO\3O\3O\3O\7O\u0aac"+
		"\nO\fO\16O\u0aaf\13O\3O\5O\u0ab2\nO\3P\3P\3P\3P\3P\7P\u0ab9\nP\fP\16P"+
		"\u0abc\13P\3Q\3Q\3Q\3Q\3R\3R\5R\u0ac4\nR\3R\3R\3S\3S\3S\3S\3S\5S\u0acd"+
		"\nS\3S\5S\u0ad0\nS\3T\3T\5T\u0ad4\nT\3U\3U\3U\3V\3V\3V\3V\5V\u0add\nV"+
		"\3W\3W\5W\u0ae1\nW\3W\5W\u0ae4\nW\3W\5W\u0ae7\nW\3W\3W\3W\3W\5W\u0aed"+
		"\nW\3W\5W\u0af0\nW\3W\3W\3W\3W\5W\u0af6\nW\3W\3W\3W\3W\3W\7W\u0afd\nW"+
		"\fW\16W\u0b00\13W\5W\u0b02\nW\3W\3W\3W\3W\3W\3W\3W\7W\u0b0b\nW\fW\16W"+
		"\u0b0e\13W\5W\u0b10\nW\3X\3X\3X\5X\u0b15\nX\3X\5X\u0b18\nX\3X\3X\3X\5"+
		"X\u0b1d\nX\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0b27\nX\3X\3X\3X\5X\u0b2c\nX\3"+
		"X\3X\6X\u0b30\nX\rX\16X\u0b31\5X\u0b34\nX\3X\3X\6X\u0b38\nX\rX\16X\u0b39"+
		"\5X\u0b3c\nX\3X\3X\3X\3X\5X\u0b42\nX\3X\3X\3X\3X\7X\u0b48\nX\fX\16X\u0b4b"+
		"\13X\3X\3X\5X\u0b4f\nX\3X\3X\3X\3X\7X\u0b55\nX\fX\16X\u0b58\13X\5X\u0b5a"+
		"\nX\3Y\3Y\3Y\5Y\u0b5f\nY\3Y\5Y\u0b62\nY\3Y\3Y\3Y\5Y\u0b67\nY\3Y\3Y\3Y"+
		"\3Y\3Y\3Y\5Y\u0b6f\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b77\nY\3Y\3Y\3Y\3Y\5Y\u0b7d"+
		"\nY\3Y\3Y\3Y\3Y\7Y\u0b83\nY\fY\16Y\u0b86\13Y\3Y\3Y\5Y\u0b8a\nY\3Y\3Y\3"+
		"Y\3Y\7Y\u0b90\nY\fY\16Y\u0b93\13Y\5Y\u0b95\nY\3Z\3Z\5Z\u0b99\nZ\3Z\5Z"+
		"\u0b9c\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0ba4\nZ\3Z\3Z\3Z\3Z\5Z\u0baa\nZ\3Z\3Z"+
		"\3Z\3Z\3Z\7Z\u0bb1\nZ\fZ\16Z\u0bb4\13Z\5Z\u0bb6\nZ\3[\3[\5[\u0bba\n[\3"+
		"[\3[\5[\u0bbe\n[\3[\3[\6[\u0bc2\n[\r[\16[\u0bc3\3[\3[\5[\u0bc8\n[\3[\3"+
		"[\5[\u0bcc\n[\5[\u0bce\n[\3[\5[\u0bd1\n[\3[\5[\u0bd4\n[\3[\5[\u0bd7\n"+
		"[\3[\3[\6[\u0bdb\n[\r[\16[\u0bdc\3[\3[\5[\u0be1\n[\3[\5[\u0be4\n[\3[\5"+
		"[\u0be7\n[\3[\5[\u0bea\n[\3[\5[\u0bed\n[\5[\u0bef\n[\3\\\3\\\5\\\u0bf3"+
		"\n\\\3]\3]\3]\3]\5]\u0bf9\n]\3]\3]\3]\3]\5]\u0bff\n]\3]\7]\u0c02\n]\f"+
		"]\16]\u0c05\13]\5]\u0c07\n]\3^\3^\3^\3^\5^\u0c0d\n^\3_\3_\5_\u0c11\n_"+
		"\3`\3`\3`\3`\3`\3`\5`\u0c19\n`\3a\3a\5a\u0c1d\na\3a\5a\u0c20\na\3a\5a"+
		"\u0c23\na\3a\3a\3a\3a\3a\3a\3a\5a\u0c2c\na\3a\3a\5a\u0c30\na\3a\5a\u0c33"+
		"\na\3a\3a\5a\u0c37\na\3b\3b\5b\u0c3b\nb\3b\5b\u0c3e\nb\3b\5b\u0c41\nb"+
		"\3b\3b\3b\5b\u0c46\nb\3b\3b\3b\3b\5b\u0c4c\nb\7b\u0c4e\nb\fb\16b\u0c51"+
		"\13b\3b\3b\3b\3b\3b\3b\3b\5b\u0c5a\nb\3b\3b\3b\3b\5b\u0c60\nb\7b\u0c62"+
		"\nb\fb\16b\u0c65\13b\3b\3b\3b\5b\u0c6a\nb\3b\3b\5b\u0c6e\nb\3c\3c\3c\3"+
		"c\5c\u0c74\nc\3c\5c\u0c77\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0c83\n"+
		"d\3d\3d\5d\u0c87\nd\3d\3d\5d\u0c8b\nd\3e\3e\3e\3e\3e\3e\5e\u0c93\ne\3"+
		"e\3e\5e\u0c97\ne\3f\3f\3f\3f\3g\3g\5g\u0c9f\ng\3g\5g\u0ca2\ng\3g\3g\5"+
		"g\u0ca6\ng\3g\5g\u0ca9\ng\3g\3g\3g\3g\7g\u0caf\ng\fg\16g\u0cb2\13g\3g"+
		"\3g\5g\u0cb6\ng\3g\5g\u0cb9\ng\3g\5g\u0cbc\ng\3h\3h\5h\u0cc0\nh\3h\5h"+
		"\u0cc3\nh\3h\3h\3h\3h\3h\7h\u0cca\nh\fh\16h\u0ccd\13h\3h\3h\5h\u0cd1\n"+
		"h\3i\3i\3i\3i\3i\7i\u0cd8\ni\fi\16i\u0cdb\13i\3j\3j\5j\u0cdf\nj\3k\3k"+
		"\3k\7k\u0ce4\nk\fk\16k\u0ce7\13k\3l\3l\7l\u0ceb\nl\fl\16l\u0cee\13l\3"+
		"l\3l\3l\7l\u0cf3\nl\fl\16l\u0cf6\13l\3l\3l\5l\u0cfa\nl\3m\3m\3m\3m\3m"+
		"\3m\5m\u0d02\nm\3m\5m\u0d05\nm\3m\5m\u0d08\nm\3m\3m\3m\7m\u0d0d\nm\fm"+
		"\16m\u0d10\13m\5m\u0d12\nm\3m\3m\3m\3m\3m\5m\u0d19\nm\3m\5m\u0d1c\nm\3"+
		"m\3m\3m\3m\3m\3m\5m\u0d24\nm\3n\3n\3n\3n\5n\u0d2a\nn\3n\3n\3n\3n\3o\3"+
		"o\3o\3o\3o\5o\u0d35\no\3p\5p\u0d38\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d43"+
		"\np\3p\3p\3p\3p\5p\u0d49\np\3p\3p\5p\u0d4d\np\3p\3p\3p\3p\3p\3p\3p\3p"+
		"\3p\5p\u0d58\np\3p\3p\3p\5p\u0d5d\np\5p\u0d5f\np\3p\3p\5p\u0d63\np\3q"+
		"\3q\3q\3q\3q\3q\3q\3q\5q\u0d6d\nq\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0d77\nr"+
		"\3s\3s\7s\u0d7b\ns\fs\16s\u0d7e\13s\3s\3s\5s\u0d82\ns\3s\5s\u0d85\ns\3"+
		"s\5s\u0d88\ns\3s\5s\u0d8b\ns\3s\3s\7s\u0d8f\ns\fs\16s\u0d92\13s\3s\3s"+
		"\5s\u0d96\ns\3s\5s\u0d99\ns\3s\5s\u0d9c\ns\3s\5s\u0d9f\ns\5s\u0da1\ns"+
		"\3t\3t\7t\u0da5\nt\ft\16t\u0da8\13t\3t\3t\5t\u0dac\nt\3t\5t\u0daf\nt\3"+
		"t\5t\u0db2\nt\3u\3u\5u\u0db6\nu\3u\3u\3v\3v\5v\u0dbc\nv\3v\3v\5v\u0dc0"+
		"\nv\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0dca\nw\3x\3x\5x\u0dce\nx\3x\3x\7x\u0dd2"+
		"\nx\fx\16x\u0dd5\13x\3y\3y\3y\3y\3y\3y\5y\u0ddd\ny\3y\5y\u0de0\ny\3y\3"+
		"y\5y\u0de4\ny\3y\5y\u0de7\ny\3y\3y\5y\u0deb\ny\3y\3y\5y\u0def\ny\3y\5"+
		"y\u0df2\ny\5y\u0df4\ny\3z\3z\3z\3z\7z\u0dfa\nz\fz\16z\u0dfd\13z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\5z\u0e08\nz\3z\3z\6z\u0e0c\nz\rz\16z\u0e0d\5z\u0e10"+
		"\nz\3z\3z\6z\u0e14\nz\rz\16z\u0e15\5z\u0e18\nz\5z\u0e1a\nz\3{\3{\3{\3"+
		"{\5{\u0e20\n{\3{\3{\3{\3{\3{\3{\5{\u0e28\n{\3|\3|\3|\3|\3|\3|\5|\u0e30"+
		"\n|\3}\3}\3}\3}\5}\u0e36\n}\3}\3}\3}\3}\3}\7}\u0e3d\n}\f}\16}\u0e40\13"+
		"}\3}\3}\5}\u0e44\n}\5}\u0e46\n}\3}\3}\5}\u0e4a\n}\3~\3~\5~\u0e4e\n~\3"+
		"\177\3\177\3\177\3\177\5\177\u0e54\n\177\3\177\3\177\3\177\3\177\3\177"+
		"\5\177\u0e5b\n\177\3\u0080\3\u0080\5\u0080\u0e5f\n\u0080\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\7\u0081\u0e66\n\u0081\f\u0081\16\u0081\u0e69"+
		"\13\u0081\5\u0081\u0e6b\n\u0081\3\u0082\3\u0082\5\u0082\u0e6f\n\u0082"+
		"\3\u0083\3\u0083\5\u0083\u0e73\n\u0083\3\u0083\3\u0083\5\u0083\u0e77\n"+
		"\u0083\3\u0083\5\u0083\u0e7a\n\u0083\3\u0083\5\u0083\u0e7d\n\u0083\3\u0083"+
		"\5\u0083\u0e80\n\u0083\3\u0084\3\u0084\5\u0084\u0e84\n\u0084\3\u0084\3"+
		"\u0084\5\u0084\u0e88\n\u0084\3\u0084\5\u0084\u0e8b\n\u0084\3\u0084\5\u0084"+
		"\u0e8e\n\u0084\3\u0084\5\u0084\u0e91\n\u0084\3\u0085\3\u0085\3\u0085\3"+
		"\u0086\3\u0086\5\u0086\u0e98\n\u0086\3\u0086\3\u0086\5\u0086\u0e9c\n\u0086"+
		"\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\7\u0088\u0ea9\n\u0088\f\u0088\16\u0088\u0eac\13\u0088"+
		"\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b"+
		"\3\u008b\5\u008b\u0eb8\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b"+
		"\u0ebe\n\u008b\f\u008b\16\u008b\u0ec1\13\u008b\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0eca\n\u008c\3\u008d\3\u008d"+
		"\5\u008d\u0ece\n\u008d\3\u008d\5\u008d\u0ed1\n\u008d\3\u008d\3\u008d\3"+
		"\u008e\3\u008e\5\u008e\u0ed7\n\u008e\3\u008e\5\u008e\u0eda\n\u008e\3\u008e"+
		"\5\u008e\u0edd\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\5\u008f\u0ee6\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\5\u0090\u0eef\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\7\u0091\u0ef7\n\u0091\f\u0091\16\u0091\u0efa\13\u0091"+
		"\3\u0091\5\u0091\u0efd\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\7\u0092\u0f05\n\u0092\f\u0092\16\u0092\u0f08\13\u0092\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0f11\n\u0093"+
		"\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u0f19\n\u0095"+
		"\3\u0095\5\u0095\u0f1c\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\7\u0096\u0f23\n\u0096\f\u0096\16\u0096\u0f26\13\u0096\5\u0096\u0f28\n"+
		"\u0096\3\u0096\3\u0096\5\u0096\u0f2c\n\u0096\3\u0096\7\u0096\u0f2f\n\u0096"+
		"\f\u0096\16\u0096\u0f32\13\u0096\3\u0096\5\u0096\u0f35\n\u0096\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u0f3c\n\u0097\f\u0097\16\u0097"+
		"\u0f3f\13\u0097\5\u0097\u0f41\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099"+
		"\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0f5e\n\u009a\f\u009a"+
		"\16\u009a\u0f61\13\u009a\5\u009a\u0f63\n\u009a\3\u009a\5\u009a\u0f66\n"+
		"\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f"+
		"\u0f9c\n\u009f\f\u009f\16\u009f\u0f9f\13\u009f\3\u009f\3\u009f\5\u009f"+
		"\u0fa3\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1"+
		"\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\5\u00a2\u0fbf\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0fcd"+
		"\n\u00a3\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0fd2\n\u00a4\f\u00a4\16\u00a4"+
		"\u0fd5\13\u00a4\3\u00a4\5\u00a4\u0fd8\n\u00a4\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\5\u00a5\u0fde\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u0fe6\n\u00a6\5\u00a6\u0fe8\n\u00a6\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0ff3\n"+
		"\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\5\u00aa\u0ffd\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u1004\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u100a\n\u00ac\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae\u1012\n\u00ae\3"+
		"\u00af\3\u00af\3\u00af\5\u00af\u1017\n\u00af\3\u00af\3\u00af\3\u00af\3"+
		"\u00af\7\u00af\u101d\n\u00af\f\u00af\16\u00af\u1020\13\u00af\3\u00af\3"+
		"\u00af\3\u00af\7\u00af\u1025\n\u00af\f\u00af\16\u00af\u1028\13\u00af\3"+
		"\u00af\3\u00af\3\u00af\7\u00af\u102d\n\u00af\f\u00af\16\u00af\u1030\13"+
		"\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u1035\n\u00af\f\u00af\16\u00af"+
		"\u1038\13\u00af\3\u00af\7\u00af\u103b\n\u00af\f\u00af\16\u00af\u103e\13"+
		"\u00af\3\u00af\3\u00af\5\u00af\u1042\n\u00af\3\u00b0\3\u00b0\3\u00b0\5"+
		"\u00b0\u1047\n\u00b0\3\u00b0\6\u00b0\u104a\n\u00b0\r\u00b0\16\u00b0\u104b"+
		"\3\u00b0\3\u00b0\6\u00b0\u1050\n\u00b0\r\u00b0\16\u00b0\u1051\5\u00b0"+
		"\u1054\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\6\u00b1\u105d\n\u00b1\r\u00b1\16\u00b1\u105e\3\u00b1\7\u00b1\u1062\n"+
		"\u00b1\f\u00b1\16\u00b1\u1065\13\u00b1\3\u00b1\3\u00b1\6\u00b1\u1069\n"+
		"\u00b1\r\u00b1\16\u00b1\u106a\5\u00b1\u106d\n\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u107b\n\u00b4\3\u00b4\3\u00b4\6\u00b4\u107f\n\u00b4\r"+
		"\u00b4\16\u00b4\u1080\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1086\n\u00b4\3"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u108b\n\u00b5\3\u00b5\3\u00b5\6\u00b5\u108f"+
		"\n\u00b5\r\u00b5\16\u00b5\u1090\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\5\u00b5\u1098\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\5\u00b7\u10a0\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\6\u00b7\u10a6\n"+
		"\u00b7\r\u00b7\16\u00b7\u10a7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10ad\n"+
		"\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10b3\n\u00b8\3\u00b8\5"+
		"\u00b8\u10b6\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5"+
		"\u00b8\u10be\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u10c5"+
		"\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u10ce\n\u00ba\3\u00ba\5\u00ba\u10d1\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\7\u00bc\u10e0\n\u00bc\f\u00bc\16\u00bc\u10e3\13\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u10ea\n\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u10f2\n\u00bd\3\u00be\3\u00be"+
		"\5\u00be\u10f6\n\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u10fd\n\u00bf\3\u00bf\3\u00bf\6\u00bf\u1101\n\u00bf\r\u00bf\16\u00bf"+
		"\u1102\3\u00c0\3\u00c0\3\u00c0\3\u00c0\6\u00c0\u1109\n\u00c0\r\u00c0\16"+
		"\u00c0\u110a\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u1112\n\u00c1"+
		"\f\u00c1\16\u00c1\u1115\13\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u111a"+
		"\n\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u111f\n\u00c1\f\u00c1\16\u00c1"+
		"\u1122\13\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1128\n\u00c1"+
		"\3\u00c1\7\u00c1\u112b\n\u00c1\f\u00c1\16\u00c1\u112e\13\u00c1\5\u00c1"+
		"\u1130\n\u00c1\5\u00c1\u1132\n\u00c1\3\u00c1\3\u00c1\6\u00c1\u1136\n\u00c1"+
		"\r\u00c1\16\u00c1\u1137\5\u00c1\u113a\n\u00c1\3\u00c1\3\u00c1\7\u00c1"+
		"\u113e\n\u00c1\f\u00c1\16\u00c1\u1141\13\u00c1\5\u00c1\u1143\n\u00c1\3"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u114a\n\u00c2\f\u00c2\16"+
		"\u00c2\u114d\13\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1152\n\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c2\7\u00c2\u1157\n\u00c2\f\u00c2\16\u00c2\u115a\13"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1160\n\u00c2\3\u00c2\7"+
		"\u00c2\u1163\n\u00c2\f\u00c2\16\u00c2\u1166\13\u00c2\5\u00c2\u1168\n\u00c2"+
		"\5\u00c2\u116a\n\u00c2\3\u00c2\3\u00c2\6\u00c2\u116e\n\u00c2\r\u00c2\16"+
		"\u00c2\u116f\5\u00c2\u1172\n\u00c2\3\u00c2\3\u00c2\7\u00c2\u1176\n\u00c2"+
		"\f\u00c2\16\u00c2\u1179\13\u00c2\5\u00c2\u117b\n\u00c2\3\u00c3\3\u00c3"+
		"\3\u00c3\5\u00c3\u1180\n\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u1185\n"+
		"\u00c3\f\u00c3\16\u00c3\u1188\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\7\u00c4\u118e\n\u00c4\f\u00c4\16\u00c4\u1191\13\u00c4\3\u00c4\3\u00c4"+
		"\5\u00c4\u1195\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4"+
		"\u119c\n\u00c4\f\u00c4\16\u00c4\u119f\13\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\5\u00c4\u11a5\n\u00c4\3\u00c4\7\u00c4\u11a8\n\u00c4\f\u00c4\16"+
		"\u00c4\u11ab\13\u00c4\5\u00c4\u11ad\n\u00c4\5\u00c4\u11af\n\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u11b5\n\u00c4\f\u00c4\16\u00c4\u11b8"+
		"\13\u00c4\5\u00c4\u11ba\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u11c4\n\u00c5\f\u00c5\16\u00c5\u11c7"+
		"\13\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u11cc\n\u00c5\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u11d3\n\u00c6\f\u00c6\16\u00c6\u11d6"+
		"\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11dc\n\u00c7\f\u00c7"+
		"\16\u00c7\u11df\13\u00c7\3\u00c7\3\u00c7\5\u00c7\u11e3\n\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11ea\n\u00c7\f\u00c7\16\u00c7"+
		"\u11ed\13\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11f2\n\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11fb\n\u00c7"+
		"\f\u00c7\16\u00c7\u11fe\13\u00c7\5\u00c7\u1200\n\u00c7\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u120a\n\u00c8"+
		"\f\u00c8\16\u00c8\u120d\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u1213\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1218\n\u00c9\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u1227\n\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u1232\n\u00cb"+
		"\3\u00cb\5\u00cb\u1235\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u123f\n\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1249\n\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1253"+
		"\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u125d\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u1261\n\u00d1\3\u00d1\3"+
		"\u00d1\5\u00d1\u1265\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\5\u00d1\u126f\n\u00d1\3\u00d1\3\u00d1\3\u00d1\5"+
		"\u00d1\u1274\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u12a6\n\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u12b8"+
		"\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\5\u00d4\u12c0"+
		"\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5"+
		"\u12c9\n\u00d5\f\u00d5\16\u00d5\u12cc\13\u00d5\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u12d2\n\u00d6\3\u00d7\3\u00d7\5\u00d7\u12d6\n\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\5\u00d8\u12dd\n\u00d8\3\u00d8\3"+
		"\u00d8\3\u00d8\5\u00d8\u12e2\n\u00d8\3\u00d8\5\u00d8\u12e5\n\u00d8\3\u00d8"+
		"\5\u00d8\u12e8\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\5\u00d9\u12f1\n\u00d9\3\u00da\3\u00da\5\u00da\u12f5\n\u00da\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd"+
		"\u1311\n\u00dd\f\u00dd\16\u00dd\u1314\13\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u131a\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u131e\n\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1325\n\u00dd\3\u00dd\5"+
		"\u00dd\u1328\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u1336\n\u00dd\f"+
		"\u00dd\16\u00dd\u1339\13\u00dd\5\u00dd\u133b\n\u00dd\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1345\n\u00de\3"+
		"\u00de\3\u00de\5\u00de\u1349\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5"+
		"\u00de\u134f\n\u00de\3\u00de\5\u00de\u1352\n\u00de\3\u00de\3\u00de\3\u00de"+
		"\5\u00de\u1357\n\u00de\3\u00de\3\u00de\5\u00de\u135b\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1362\n\u00de\3\u00de\5\u00de\u1365"+
		"\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u136b\n\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u1383\n\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u1390\n\u00de\3\u00de\5\u00de\u1393\n\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u139d\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u13a5\n\u00de\3\u00de\3"+
		"\u00de\5\u00de\u13a9\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5"+
		"\u00de\u13b0\n\u00de\3\u00de\5\u00de\u13b3\n\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\7\u00de\u13ba\n\u00de\f\u00de\16\u00de\u13bd\13\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u13c2\n\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\5\u00de\u13c8\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u13d2\n\u00de\5\u00de\u13d4\n\u00de\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u13da\n\u00df\3\u00df\5\u00df\u13dd"+
		"\n\u00df\3\u00df\5\u00df\u13e0\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u13ec\n\u00e0"+
		"\3\u00e0\5\u00e0\u13ef\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1"+
		"\u13f5\n\u00e1\3\u00e2\5\u00e2\u13f8\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\5\u00e2\u1400\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\5\u00e2\u1408\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3"+
		"\u00e3\5\u00e3\u140e\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u1412\n\u00e3\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u1420\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u142a\n\u00e6\f\u00e6\16\u00e6"+
		"\u142d\13\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1433\n\u00e6"+
		"\3\u00e6\5\u00e6\u1436\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7"+
		"\5\u00e7\u143d\n\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u1442\n\u00e7\f"+
		"\u00e7\16\u00e7\u1445\13\u00e7\3\u00e8\3\u00e8\5\u00e8\u1449\n\u00e8\3"+
		"\u00e8\6\u00e8\u144c\n\u00e8\r\u00e8\16\u00e8\u144d\3\u00e9\3\u00e9\3"+
		"\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u1457\n\u00e9\f\u00e9\16"+
		"\u00e9\u145a\13\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb"+
		"\3\u00ec\3\u00ec\5\u00ec\u1464\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u146a\n\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u146f\n\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u147c\n\u00ed\5\u00ed\u147e\n\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\5\u00ed\u1483\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1488"+
		"\n\u00ed\5\u00ed\u148a\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\5\u00ee\u1491\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u1498\n\u00ef\3\u00ef\5\u00ef\u149b\n\u00ef\3\u00ef\5\u00ef\u149e\n\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u14a4\n\u00ef\3\u00ef\3\u00ef"+
		"\5\u00ef\u14a8\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u14ae\n"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u14b4\n\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u14c1\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u14c6\n"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u14cc\n\u00f4\f\u00f4\16"+
		"\u00f4\u14cf\13\u00f4\5\u00f4\u14d1\n\u00f4\3\u00f5\3\u00f5\3\u00f5\5"+
		"\u00f5\u14d6\n\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u14db\n\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u14e1\n\u00f5\f\u00f5\16\u00f5\u14e4"+
		"\13\u00f5\5\u00f5\u14e6\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u14ec\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u14f0\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u14fb\n"+
		"\u00f7\f\u00f7\16\u00f7\u14fe\13\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u1503\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\7\u00f7\u150d\n\u00f7\f\u00f7\16\u00f7\u1510\13\u00f7\5\u00f7"+
		"\u1512\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\5\u00f9\u151b\n\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1520\n\u00f9\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1526\n\u00fa\3\u00fb\3\u00fb\3"+
		"\u00fc\3\u00fc\3\u00fc\5\u00fc\u152d\n\u00fc\5\u00fc\u152f\n\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\5\u00fc\u1534\n\u00fc\5\u00fc\u1536\n\u00fc\3\u00fd\3"+
		"\u00fd\5\u00fd\u153a\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1540"+
		"\n\u00fd\3\u00fd\5\u00fd\u1543\n\u00fd\3\u00fe\3\u00fe\3\u00ff\3\u00ff"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u154d\n\u0100\3\u0101\3\u0101"+
		"\5\u0101\u1551\n\u0101\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\6\u0103\u1563\n\u0103\r\u0103\16\u0103\u1564\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\5\u0104\u156c\n\u0104\5\u0104\u156e\n\u0104\3"+
		"\u0105\3\u0105\3\u0105\6\u0105\u1573\n\u0105\r\u0105\16\u0105\u1574\5"+
		"\u0105\u1577\n\u0105\3\u0106\3\u0106\5\u0106\u157b\n\u0106\3\u0107\3\u0107"+
		"\3\u0107\5\u0107\u1580\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u158b\n\u0108\3\u0109\3\u0109"+
		"\3\u0109\5\u0109\u1590\n\u0109\3\u010a\3\u010a\3\u010b\3\u010b\5\u010b"+
		"\u1596\n\u010b\3\u010c\5\u010c\u1599\n\u010c\3\u010c\3\u010c\5\u010c\u159d"+
		"\n\u010c\3\u010c\6\u010c\u15a0\n\u010c\r\u010c\16\u010c\u15a1\3\u010c"+
		"\5\u010c\u15a5\n\u010c\3\u010c\3\u010c\5\u010c\u15a9\n\u010c\3\u010c\3"+
		"\u010c\5\u010c\u15ad\n\u010c\5\u010c\u15af\n\u010c\3\u010d\3\u010d\3\u010e"+
		"\5\u010e\u15b4\n\u010e\3\u010e\3\u010e\3\u010f\5\u010f\u15b9\n\u010f\3"+
		"\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\5\u0110\u15c6\n\u0110\3\u0110\5\u0110\u15c9\n\u0110\3"+
		"\u0111\3\u0111\5\u0111\u15cd\n\u0111\3\u0111\5\u0111\u15d0\n\u0111\3\u0111"+
		"\3\u0111\3\u0111\5\u0111\u15d5\n\u0111\3\u0111\5\u0111\u15d8\n\u0111\3"+
		"\u0111\3\u0111\5\u0111\u15dc\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u15e1"+
		"\n\u0111\3\u0111\5\u0111\u15e4\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111"+
		"\u15e9\n\u0111\3\u0111\5\u0111\u15ec\n\u0111\3\u0111\3\u0111\3\u0111\3"+
		"\u0111\5\u0111\u15f2\n\u0111\3\u0111\5\u0111\u15f5\n\u0111\3\u0111\3\u0111"+
		"\5\u0111\u15f9\n\u0111\3\u0111\5\u0111\u15fc\n\u0111\3\u0111\5\u0111\u15ff"+
		"\n\u0111\3\u0111\3\u0111\5\u0111\u1603\n\u0111\3\u0111\5\u0111\u1606\n"+
		"\u0111\3\u0111\5\u0111\u1609\n\u0111\3\u0111\3\u0111\5\u0111\u160d\n\u0111"+
		"\3\u0111\5\u0111\u1610\n\u0111\3\u0111\5\u0111\u1613\n\u0111\3\u0111\5"+
		"\u0111\u1616\n\u0111\3\u0111\3\u0111\5\u0111\u161a\n\u0111\3\u0111\5\u0111"+
		"\u161d\n\u0111\3\u0111\5\u0111\u1620\n\u0111\3\u0111\3\u0111\3\u0111\5"+
		"\u0111\u1625\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u162a\n\u0111\3\u0111"+
		"\3\u0111\3\u0111\5\u0111\u162f\n\u0111\3\u0111\5\u0111\u1632\n\u0111\3"+
		"\u0111\3\u0111\3\u0111\5\u0111\u1637\n\u0111\3\u0111\5\u0111\u163a\n\u0111"+
		"\3\u0111\3\u0111\3\u0111\5\u0111\u163f\n\u0111\3\u0111\5\u0111\u1642\n"+
		"\u0111\3\u0111\3\u0111\5\u0111\u1646\n\u0111\3\u0111\3\u0111\5\u0111\u164a"+
		"\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\7\u0112\u1650\n\u0112\f\u0112"+
		"\16\u0112\u1653\13\u0112\3\u0112\3\u0112\3\u0113\3\u0113\5\u0113\u1659"+
		"\n\u0113\3\u0113\3\u0113\5\u0113\u165d\n\u0113\3\u0113\3\u0113\3\u0113"+
		"\5\u0113\u1662\n\u0113\3\u0113\5\u0113\u1665\n\u0113\3\u0113\3\u0113\3"+
		"\u0113\5\u0113\u166a\n\u0113\3\u0113\3\u0113\5\u0113\u166e\n\u0113\5\u0113"+
		"\u1670\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u1680"+
		"\n\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u1687\n\u0117"+
		"\f\u0117\16\u0117\u168a\13\u0117\3\u0118\3\u0118\3\u0118\7\u0118\u168f"+
		"\n\u0118\f\u0118\16\u0118\u1692\13\u0118\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\7\u0119\u1698\n\u0119\f\u0119\16\u0119\u169b\13\u0119\3\u0119\3\u0119"+
		"\3\u011a\3\u011a\3\u011a\7\u011a\u16a2\n\u011a\f\u011a\16\u011a\u16a5"+
		"\13\u011a\3\u011b\3\u011b\3\u011b\7\u011b\u16aa\n\u011b\f\u011b\16\u011b"+
		"\u16ad\13\u011b\3\u011c\3\u011c\3\u011c\7\u011c\u16b2\n\u011c\f\u011c"+
		"\16\u011c\u16b5\13\u011c\3\u011d\3\u011d\3\u011d\7\u011d\u16ba\n\u011d"+
		"\f\u011d\16\u011d\u16bd\13\u011d\3\u011e\3\u011e\3\u011e\7\u011e\u16c2"+
		"\n\u011e\f\u011e\16\u011e\u16c5\13\u011e\3\u011f\3\u011f\5\u011f\u16c9"+
		"\n\u011f\3\u011f\3\u011f\5\u011f\u16cd\n\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u16d2\n\u011f\3\u0120\3\u0120\3\u0120\5\u0120\u16d7\n\u0120\3"+
		"\u0120\5\u0120\u16da\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u16df\n\u0120"+
		"\3\u0120\5\u0120\u16e2\n\u0120\3\u0121\3\u0121\5\u0121\u16e6\n\u0121\3"+
		"\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\5\u0124\u16f4\n\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\5\u0124\u16fb\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\5\u0124\u1701\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\6\u0125\u1721\n\u0125"+
		"\r\u0125\16\u0125\u1722\3\u0125\3\u0125\5\u0125\u1727\n\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\6\u0125\u172d\n\u0125\r\u0125\16\u0125\u172e"+
		"\3\u0125\3\u0125\5\u0125\u1733\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u173c\n\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u1744\n\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1749\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1751\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1756\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u175b\n\u0125\5\u0125\u175d\n\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1766\n\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u176b\n\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\5\u0125\u1773\n\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1778\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1780\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1788\n\u0125\3\u0125\5\u0125\u178b\n\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1795\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u17a0\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\7\u0127\u17ab\n\u0127\f\u0127\16\u0127\u17ae"+
		"\13\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u17b5\n\u0127"+
		"\3\u0128\3\u0128\5\u0128\u17b9\n\u0128\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u17be\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\5\u0129\u17c7\n\u0129\3\u0129\5\u0129\u17ca\n\u0129\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u17d6\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u17de\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129"+
		"\u17e6\n\u0129\f\u0129\16\u0129\u17e9\13\u0129\5\u0129\u17eb\n\u0129\3"+
		"\u0129\3\u0129\5\u0129\u17ef\n\u0129\3\u0129\3\u0129\5\u0129\u17f3\n\u0129"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\7\u012a\u17ff\n\u012a\f\u012a\16\u012a\u1802\13\u012a\5\u012a"+
		"\u1804\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a\u180b\n"+
		"\u012a\f\u012a\16\u012a\u180e\13\u012a\5\u012a\u1810\n\u012a\3\u012a\3"+
		"\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u182b\n\u012b"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u1836\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u183d\n\u012d\7\u012d\u183f\n\u012d\f\u012d\16\u012d\u1842\13\u012d\3"+
		"\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1848\n\u012e\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1850\n\u012f\3\u012f\3\u012f\3"+
		"\u012f\5\u012f\u1855\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u185b"+
		"\n\u012f\f\u012f\16\u012f\u185e\13\u012f\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u1863\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\5\u0130\u186d\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u187a\n\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u1880\n\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\5\u0130\u1886\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\5\u0130\u1896\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u189c\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\7\u0130\u18a5\n\u0130\f\u0130\16\u0130\u18a8\13\u0130\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\7\u0131\u18b8\n\u0131\f\u0131\16\u0131\u18bb"+
		"\13\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\6\u0131"+
		"\u18c4\n\u0131\r\u0131\16\u0131\u18c5\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u18d7\n\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u18ec\n\u0131"+
		"\f\u0131\16\u0131\u18ef\13\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\5\u0133\u1901\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\5\u0134\u190a\n\u0134\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1913\n\u0135\3\u0136\3\u0136"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u191c\n\u0137\3\u0138"+
		"\3\u0138\3\u0139\3\u0139\3\u013a\3\u013a\3\u013b\3\u013b\3\u013c\3\u013c"+
		"\3\u013d\3\u013d\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f\2\5\u025c\u025e"+
		"\u0260\u0140\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64"+
		"\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088"+
		"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0"+
		"\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8"+
		"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0"+
		"\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8"+
		"\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100"+
		"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118"+
		"\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130"+
		"\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148"+
		"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160"+
		"\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178"+
		"\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190"+
		"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8"+
		"\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0"+
		"\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8"+
		"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0"+
		"\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208"+
		"\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220"+
		"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238"+
		"\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250"+
		"\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268"+
		"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\2\u0081\4"+
		"\2&&\u008a\u008a\4\2\u01ce\u01ce\u01d4\u01d4\5\2AA\u0091\u0091\u00a6\u00a6"+
		"\5\2))\u014a\u014a\u0189\u0189\6\2))\u016a\u016a\u01cd\u01cd\u0214\u0214"+
		"\4\2\u01c4\u01c4\u0418\u0418\4\2II\u0082\u0082\4\2\20\20\u011a\u011a\5"+
		"\2++OO\u00a9\u00a9\4\2\u0177\u0177\u01e6\u01e6\5\2\u01bc\u01bc\u023a\u023a"+
		"\u0241\u0241\4\2\u0151\u0151\u018e\u018e\4\2\u012c\u012c\u019c\u019c\4"+
		"\2\u012a\u012a\u0180\u0180\5\2JJNNss\5\2))\u015b\u015b\u0175\u0175\5\2"+
		"))\u0157\u0157\u02b6\u02b6\4\2\u022e\u022e\u024f\u024f\4\2KKUU\5\2\u0179"+
		"\u0179\u01dd\u01dd\u0216\u0216\4\2AA\u0091\u0091\3\2\u0130\u0131\3\2\u040e"+
		"\u040f\4\2\u0418\u0418\u0420\u0420\5\2\u0174\u0174\u0197\u0197\u01cb\u01cb"+
		"\4\2))\u040e\u040f\b\2))\u013d\u013d\u013f\u013f\u015b\u015b\u0175\u0175"+
		"\u01f3\u01f3\3\2\u040f\u0410\4\2\b\b\62\62\4\2\u018d\u018d\u0250\u0250"+
		"\4\2\16\16\u00a0\u00a0\4\2\u00b1\u00b1\u0253\u0253\4\2\25\25\u0085\u0085"+
		"\5\2**GGbb\4\2bb\u0141\u0141\4\2\u0138\u0138\u0171\u0171\4\2^^\u020c\u020c"+
		"\4\2**bb\4\2\t\t\60\60\4\2\u00ad\u00ad\u024c\u024c\6\2\u0174\u0174\u0197"+
		"\u0197\u01ca\u01ca\u01e9\u01e9\4\2\u0174\u0174\u01ca\u01ca\4\2\17\17,"+
		",\5\2>>II\u00ab\u00ab\4\2\"\"MM\4\2ZZ\u0088\u0088\4\2\t\t\60\61\3\2\u0223"+
		"\u0224\4\2\u017c\u017c\u0212\u0212\4\2\u00d3\u00d3\u019f\u019f\7\2cc\u01a4"+
		"\u01a5\u01a7\u01a7\u01ab\u01b3\u01f5\u01f5\6\2\u01a1\u01a2\u01a6\u01a6"+
		"\u01a8\u01a9\u01f6\u01f6\5\2dd\u01a0\u01a0\u01aa\u01aa\4\2\u0190\u0190"+
		"\u0225\u0225\4\2\u021f\u021f\u0221\u0221\4\2\u0124\u0124\u0226\u0226\4"+
		"\2TT\u0204\u0204\4\2\62\62\u014f\u014f\5\2\37\3799\u00a4\u00a4\5\2xx\u009d"+
		"\u009d\u017a\u017a\4\2``\u00a7\u00a7\4\2\u0134\u0134\u0217\u0217\4\2\'"+
		"\'\u024e\u024e\4\2jj\u019c\u019c\4\2\u016d\u016d\u01ef\u01ef\6\2\u00bf"+
		"\u00bf\u00c1\u00c1\u00c7\u00c7\u022f\u022f\4\2\u03ee\u03ee\u0400\u0400"+
		"\4\2\u0125\u0125\u01f7\u01f7\4\2@@JJ\b\2xx\u009d\u009d\u00a2\u00a2\u0166"+
		"\u0166\u017a\u017a\u024e\u024e\4\2\u01c3\u01c3\u022b\u022b\4\2\u0163\u0163"+
		"\u0252\u0252\4\2xx\u017a\u017a\5\2KKVV\u0187\u0187\5\2\u017c\u017c\u019c"+
		"\u019c\u0212\u0212\4\2\u022b\u022b\u024d\u024d\4\2\u0142\u0142\u01ee\u01ee"+
		"\b\2\u00d3\u00d3\u0160\u0160\u0162\u0162\u017b\u017b\u01f4\u01f4\u0218"+
		"\u0218\4\2,-::\5\2\u016d\u016d\u01df\u01df\u0312\u0312\4\2\u0194\u0194"+
		"\u023c\u023c\f\2\u0133\u0133\u013a\u013a\u0144\u0146\u014c\u014c\u01bd"+
		"\u01bd\u01c5\u01c5\u0230\u0230\u0237\u0237\u02e2\u02e2\u0388\u0388\4\2"+
		"##\u009a\u009a\4\2ll\u0380\u0380\r\2\u0133\u0133\u013a\u013a\u0144\u0146"+
		"\u014c\u014c\u01bd\u01bd\u01c5\u01c5\u0205\u0205\u0230\u0230\u0237\u0237"+
		"\u02e2\u02e2\u0388\u0388\5\2\u0418\u0418\u0420\u0420\u0422\u0422\3\2\u0423"+
		"\u0424\5\2\u02b1\u02bc\u0418\u0418\u0420\u0421\4\2\u040e\u0410\u0419\u0419"+
		"\4\2;;\u00a3\u00a3\4\2kk\u041c\u041c\7\2\31\31\u00cf\u00d1\u00d8\u00d8"+
		"\u00da\u00dd\u01c8\u01c8\4\2\31\31\u00d0\u00d0\4\2\31\31\u00cf\u00cf\3"+
		"\2\u00b5\u00c0\4\2\u00a8\u00a8\u0215\u0215\4\2\u00c4\u00c9\u0175\u0175"+
		"\b\2\u00ca\u00ca\u00d5\u00d5\u00d7\u00d7\u00d9\u00d9\u00e0\u00e0\u0128"+
		"\u0129\6\2\u00cb\u00ce\u00d3\u00d4\u00d6\u00d6\u0126\u0126\4\2\u008d\u008d"+
		"\u00de\u00de\4\2\u0194\u0194\u02c1\u02c9\4\2\u00d3\u00d3\u01c8\u01c8\5"+
		"\2\u00ca\u00cb\u00cd\u00cd\u0194\u0194\4\2\u0107\u0108\u010e\u010e\4\2"+
		"$$\u0105\u0108\3\2\u0111\u0112\5\2\22\22XX\u00a1\u00a1\4\2\u00cf\u00cf"+
		"\u00d3\u00d3\4\2\u00ca\u00cb\u00cd\u00cd\5\2\17\17,,\u037e\u037e\5\2\u00ee"+
		"\u00ee\u00f4\u00f5\u00fa\u00fa\5\2\u00ef\u00f1\u00f6\u00f9\u00fb\u00fd"+
		"\6\2\u00ee\u00ee\u00f2\u00f2\u00fa\u00fa\u00ff\u0104\4\2\u01d2\u01d2\u01e0"+
		"\u01e0\4\2ii\u0403\u0403\5\2;;\u00a3\u00a3\u0245\u0245\4\2~~\u0089\u0089"+
		"\5\2\t\t\u011d\u011d\u021b\u021b\6\2ii\u03fa\u03fa\u03fc\u03fc\u0403\u0404"+
		"\3\2\u03f7\u03fe\3\2\u0289\u02b0\3\2\u02bd\u02c0\3\2\u0266\u026e\3\2\u025e"+
		"\u0265\5\2\u00ca\u00ce\u00db\u00db\u00de\u00de\21\2##//ll\u009a\u009a"+
		"\u00e0\u00e0\u00ee\u00fd\u0118\u018c\u018e\u022d\u022f\u024e\u0251\u0258"+
		"\u025d\u025d\u0270\u0288\u02b6\u02b6\u02e2\u02e2\u0388\u0388\22\2&&ZZ"+
		"\u0088\u0088\u00ca\u00cc\u00ce\u00ce\u00ec\u00ed\u00f2\u00f2\u0110\u0110"+
		"\u018d\u018d\u0250\u0250\u025e\u0265\u0282\u0282\u02c1\u02c1\u02c4\u02e1"+
		"\u02e3\u0387\u0389\u03ed\2\u1d97\2\u027f\3\2\2\2\4\u0290\3\2\2\2\6\u02a4"+
		"\3\2\2\2\b\u02a6\3\2\2\2\n\u02cb\3\2\2\2\f\u02d7\3\2\2\2\16\u02e2\3\2"+
		"\2\2\20\u02f3\3\2\2\2\22\u02f8\3\2\2\2\24\u0304\3\2\2\2\26\u031f\3\2\2"+
		"\2\30\u0328\3\2\2\2\32\u032a\3\2\2\2\34\u0336\3\2\2\2\36\u0354\3\2\2\2"+
		" \u0378\3\2\2\2\"\u03ab\3\2\2\2$\u03c5\3\2\2\2&\u03e3\3\2\2\2(\u0444\3"+
		"\2\2\2*\u0446\3\2\2\2,\u0458\3\2\2\2.\u0495\3\2\2\2\60\u04a8\3\2\2\2\62"+
		"\u04e3\3\2\2\2\64\u04e5\3\2\2\2\66\u0511\3\2\2\28\u0517\3\2\2\2:\u0519"+
		"\3\2\2\2<\u052e\3\2\2\2>\u0535\3\2\2\2@\u0537\3\2\2\2B\u0547\3\2\2\2D"+
		"\u054a\3\2\2\2F\u054f\3\2\2\2H\u0569\3\2\2\2J\u0579\3\2\2\2L\u057b\3\2"+
		"\2\2N\u058b\3\2\2\2P\u058d\3\2\2\2R\u05c7\3\2\2\2T\u060e\3\2\2\2V\u0610"+
		"\3\2\2\2X\u062c\3\2\2\2Z\u0634\3\2\2\2\\\u0652\3\2\2\2^\u06e4\3\2\2\2"+
		"`\u06e6\3\2\2\2b\u06e9\3\2\2\2d\u0733\3\2\2\2f\u074a\3\2\2\2h\u07cf\3"+
		"\2\2\2j\u07d4\3\2\2\2l\u07d6\3\2\2\2n\u07e0\3\2\2\2p\u0815\3\2\2\2r\u0829"+
		"\3\2\2\2t\u082b\3\2\2\2v\u084e\3\2\2\2x\u0857\3\2\2\2z\u085e\3\2\2\2|"+
		"\u0875\3\2\2\2~\u087e\3\2\2\2\u0080\u088d\3\2\2\2\u0082\u08a3\3\2\2\2"+
		"\u0084\u08b7\3\2\2\2\u0086\u0a42\3\2\2\2\u0088\u0a44\3\2\2\2\u008a\u0a4b"+
		"\3\2\2\2\u008c\u0a52\3\2\2\2\u008e\u0a69\3\2\2\2\u0090\u0a71\3\2\2\2\u0092"+
		"\u0a78\3\2\2\2\u0094\u0a7f\3\2\2\2\u0096\u0a86\3\2\2\2\u0098\u0a92\3\2"+
		"\2\2\u009a\u0a9c\3\2\2\2\u009c\u0aa3\3\2\2\2\u009e\u0ab3\3\2\2\2\u00a0"+
		"\u0abd\3\2\2\2\u00a2\u0ac1\3\2\2\2\u00a4\u0ac7\3\2\2\2\u00a6\u0ad3\3\2"+
		"\2\2\u00a8\u0ad5\3\2\2\2\u00aa\u0adc\3\2\2\2\u00ac\u0ade\3\2\2\2\u00ae"+
		"\u0b11\3\2\2\2\u00b0\u0b5b\3\2\2\2\u00b2\u0b96\3\2\2\2\u00b4\u0bee\3\2"+
		"\2\2\u00b6\u0bf2\3\2\2\2\u00b8\u0c06\3\2\2\2\u00ba\u0c08\3\2\2\2\u00bc"+
		"\u0c10\3\2\2\2\u00be\u0c18\3\2\2\2\u00c0\u0c1a\3\2\2\2\u00c2\u0c38\3\2"+
		"\2\2\u00c4\u0c6f\3\2\2\2\u00c6\u0c78\3\2\2\2\u00c8\u0c8c\3\2\2\2\u00ca"+
		"\u0c98\3\2\2\2\u00cc\u0c9c\3\2\2\2\u00ce\u0cbd\3\2\2\2\u00d0\u0cd2\3\2"+
		"\2\2\u00d2\u0cdc\3\2\2\2\u00d4\u0ce0\3\2\2\2\u00d6\u0cf9\3\2\2\2\u00d8"+
		"\u0d23\3\2\2\2\u00da\u0d25\3\2\2\2\u00dc\u0d34\3\2\2\2\u00de\u0d62\3\2"+
		"\2\2\u00e0\u0d6c\3\2\2\2\u00e2\u0d76\3\2\2\2\u00e4\u0da0\3\2\2\2\u00e6"+
		"\u0da2\3\2\2\2\u00e8\u0db3\3\2\2\2\u00ea\u0db9\3\2\2\2\u00ec\u0dc9\3\2"+
		"\2\2\u00ee\u0dcd\3\2\2\2\u00f0\u0df3\3\2\2\2\u00f2\u0e19\3\2\2\2\u00f4"+
		"\u0e27\3\2\2\2\u00f6\u0e2f\3\2\2\2\u00f8\u0e31\3\2\2\2\u00fa\u0e4b\3\2"+
		"\2\2\u00fc\u0e4f\3\2\2\2\u00fe\u0e5e\3\2\2\2\u0100\u0e60\3\2\2\2\u0102"+
		"\u0e6c\3\2\2\2\u0104\u0e70\3\2\2\2\u0106\u0e81\3\2\2\2\u0108\u0e92\3\2"+
		"\2\2\u010a\u0e95\3\2\2\2\u010c\u0e9f\3\2\2\2\u010e\u0ea3\3\2\2\2\u0110"+
		"\u0ead\3\2\2\2\u0112\u0eb0\3\2\2\2\u0114\u0eb5\3\2\2\2\u0116\u0ec9\3\2"+
		"\2\2\u0118\u0ecb\3\2\2\2\u011a\u0edc\3\2\2\2\u011c\u0ee5\3\2\2\2\u011e"+
		"\u0eee\3\2\2\2\u0120\u0ef0\3\2\2\2\u0122\u0efe\3\2\2\2\u0124\u0f09\3\2"+
		"\2\2\u0126\u0f12\3\2\2\2\u0128\u0f15\3\2\2\2\u012a\u0f1d\3\2\2\2\u012c"+
		"\u0f36\3\2\2\2\u012e\u0f42\3\2\2\2\u0130\u0f45\3\2\2\2\u0132\u0f65\3\2"+
		"\2\2\u0134\u0f67\3\2\2\2\u0136\u0f69\3\2\2\2\u0138\u0f6b\3\2\2\2\u013a"+
		"\u0f6d\3\2\2\2\u013c\u0fa2\3\2\2\2\u013e\u0fa4\3\2\2\2\u0140\u0faa\3\2"+
		"\2\2\u0142\u0fbe\3\2\2\2\u0144\u0fcc\3\2\2\2\u0146\u0fd7\3\2\2\2\u0148"+
		"\u0fd9\3\2\2\2\u014a\u0fdf\3\2\2\2\u014c\u0fe9\3\2\2\2\u014e\u0fed\3\2"+
		"\2\2\u0150\u0ff4\3\2\2\2\u0152\u0ff8\3\2\2\2\u0154\u0ffe\3\2\2\2\u0156"+
		"\u1005\3\2\2\2\u0158\u100b\3\2\2\2\u015a\u1011\3\2\2\2\u015c\u1016\3\2"+
		"\2\2\u015e\u1043\3\2\2\2\u0160\u1058\3\2\2\2\u0162\u1071\3\2\2\2\u0164"+
		"\u1074\3\2\2\2\u0166\u107a\3\2\2\2\u0168\u108a\3\2\2\2\u016a\u1099\3\2"+
		"\2\2\u016c\u109f\3\2\2\2\u016e\u10bd\3\2\2\2\u0170\u10bf\3\2\2\2\u0172"+
		"\u10c6\3\2\2\2\u0174\u10d2\3\2\2\2\u0176\u10d8\3\2\2\2\u0178\u10f1\3\2"+
		"\2\2\u017a\u10f5\3\2\2\2\u017c\u10f9\3\2\2\2\u017e\u1104\3\2\2\2\u0180"+
		"\u1142\3\2\2\2\u0182\u117a\3\2\2\2\u0184\u117c\3\2\2\2\u0186\u1189\3\2"+
		"\2\2\u0188\u11bb\3\2\2\2\u018a\u11cd\3\2\2\2\u018c\u11ff\3\2\2\2\u018e"+
		"\u1201\3\2\2\2\u0190\u120e\3\2\2\2\u0192\u1219\3\2\2\2\u0194\u1234\3\2"+
		"\2\2\u0196\u123e\3\2\2\2\u0198\u1248\3\2\2\2\u019a\u124a\3\2\2\2\u019c"+
		"\u1254\3\2\2\2\u019e\u1257\3\2\2\2\u01a0\u12a5\3\2\2\2\u01a2\u12b7\3\2"+
		"\2\2\u01a4\u12b9\3\2\2\2\u01a6\u12bd\3\2\2\2\u01a8\u12c4\3\2\2\2\u01aa"+
		"\u12cd\3\2\2\2\u01ac\u12d3\3\2\2\2\u01ae\u12da\3\2\2\2\u01b0\u12f0\3\2"+
		"\2\2\u01b2\u12f2\3\2\2\2\u01b4\u12fd\3\2\2\2\u01b6\u1303\3\2\2\2\u01b8"+
		"\u133a\3\2\2\2\u01ba\u13d3\3\2\2\2\u01bc\u13df\3\2\2\2\u01be\u13ee\3\2"+
		"\2\2\u01c0\u13f4\3\2\2\2\u01c2\u1407\3\2\2\2\u01c4\u1411\3\2\2\2\u01c6"+
		"\u141f\3\2\2\2\u01c8\u1421\3\2\2\2\u01ca\u1424\3\2\2\2\u01cc\u143a\3\2"+
		"\2\2\u01ce\u1446\3\2\2\2\u01d0\u144f\3\2\2\2\u01d2\u145b\3\2\2\2\u01d4"+
		"\u145f\3\2\2\2\u01d6\u1461\3\2\2\2\u01d8\u1489\3\2\2\2\u01da\u1490\3\2"+
		"\2\2\u01dc\u1492\3\2\2\2\u01de\u14a9\3\2\2\2\u01e0\u14af\3\2\2\2\u01e2"+
		"\u14b7\3\2\2\2\u01e4\u14ba\3\2\2\2\u01e6\u14bd\3\2\2\2\u01e8\u14d2\3\2"+
		"\2\2\u01ea\u14e7\3\2\2\2\u01ec\u14ed\3\2\2\2\u01ee\u1513\3\2\2\2\u01f0"+
		"\u151f\3\2\2\2\u01f2\u1521\3\2\2\2\u01f4\u1527\3\2\2\2\u01f6\u1535\3\2"+
		"\2\2\u01f8\u1539\3\2\2\2\u01fa\u1544\3\2\2\2\u01fc\u1546\3\2\2\2\u01fe"+
		"\u154c\3\2\2\2\u0200\u1550\3\2\2\2\u0202\u1552\3\2\2\2\u0204\u1554\3\2"+
		"\2\2\u0206\u1566\3\2\2\2\u0208\u1576\3\2\2\2\u020a\u157a\3\2\2\2\u020c"+
		"\u157f\3\2\2\2\u020e\u158a\3\2\2\2\u0210\u158f\3\2\2\2\u0212\u1591\3\2"+
		"\2\2\u0214\u1595\3\2\2\2\u0216\u15ae\3\2\2\2\u0218\u15b0\3\2\2\2\u021a"+
		"\u15b3\3\2\2\2\u021c\u15b8\3\2\2\2\u021e\u15c8\3\2\2\2\u0220\u1649\3\2"+
		"\2\2\u0222\u164b\3\2\2\2\u0224\u166f\3\2\2\2\u0226\u1671\3\2\2\2\u0228"+
		"\u1675\3\2\2\2\u022a\u167b\3\2\2\2\u022c\u1683\3\2\2\2\u022e\u168b\3\2"+
		"\2\2\u0230\u1693\3\2\2\2\u0232\u169e\3\2\2\2\u0234\u16a6\3\2\2\2\u0236"+
		"\u16ae\3\2\2\2\u0238\u16b6\3\2\2\2\u023a\u16be\3\2\2\2\u023c\u16cc\3\2"+
		"\2\2\u023e\u16e1\3\2\2\2\u0240\u16e5\3\2\2\2\u0242\u16e7\3\2\2\2\u0244"+
		"\u16ea\3\2\2\2\u0246\u1700\3\2\2\2\u0248\u179f\3\2\2\2\u024a\u17a1\3\2"+
		"\2\2\u024c\u17b4\3\2\2\2\u024e\u17b6\3\2\2\2\u0250\u17f2\3\2\2\2\u0252"+
		"\u17f4\3\2\2\2\u0254\u182a\3\2\2\2\u0256\u182c\3\2\2\2\u0258\u1835\3\2"+
		"\2\2\u025a\u1847\3\2\2\2\u025c\u1854\3\2\2\2\u025e\u185f\3\2\2\2\u0260"+
		"\u18d6\3\2\2\2\u0262\u18f0\3\2\2\2\u0264\u1900\3\2\2\2\u0266\u1909\3\2"+
		"\2\2\u0268\u1912\3\2\2\2\u026a\u1914\3\2\2\2\u026c\u191b\3\2\2\2\u026e"+
		"\u191d\3\2\2\2\u0270\u191f\3\2\2\2\u0272\u1921\3\2\2\2\u0274\u1923\3\2"+
		"\2\2\u0276\u1925\3\2\2\2\u0278\u1927\3\2\2\2\u027a\u1929\3\2\2\2\u027c"+
		"\u192b\3\2\2\2\u027e\u0280\5\4\3\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2"+
		"\2\2\u0280\u0282\3\2\2\2\u0281\u0283\7\u03fb\2\2\u0282\u0281\3\2\2\2\u0282"+
		"\u0283\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0285\7\2\2\3\u0285\3\3\2\2\2"+
		"\u0286\u0288\5\6\4\2\u0287\u0289\7\u03fb\2\2\u0288\u0287\3\2\2\2\u0288"+
		"\u0289\3\2\2\2\u0289\u028b\3\2\2\2\u028a\u028c\7\u040c\2\2\u028b\u028a"+
		"\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028f\5\b\5\2\u028e"+
		"\u0286\3\2\2\2\u028e\u028d\3\2\2\2\u028f\u0292\3\2\2\2\u0290\u028e\3\2"+
		"\2\2\u0290\u0291\3\2\2\2\u0291\u029b\3\2\2\2\u0292\u0290\3\2\2\2\u0293"+
		"\u0298\5\6\4\2\u0294\u0296\7\u03fb\2\2\u0295\u0294\3\2\2\2\u0295\u0296"+
		"\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299\7\u040c\2\2\u0298\u0295\3\2\2"+
		"\2\u0298\u0299\3\2\2\2\u0299\u029c\3\2\2\2\u029a\u029c\5\b\5\2\u029b\u0293"+
		"\3\2\2\2\u029b\u029a\3\2\2\2\u029c\5\3\2\2\2\u029d\u02a5\5\n\6\2\u029e"+
		"\u02a5\5\f\7\2\u029f\u02a5\5\16\b\2\u02a0\u02a5\5\20\t\2\u02a1\u02a5\5"+
		"\22\n\2\u02a2\u02a5\5\26\f\2\u02a3\u02a5\5\30\r\2\u02a4\u029d\3\2\2\2"+
		"\u02a4\u029e\3\2\2\2\u02a4\u029f\3\2\2\2\u02a4\u02a0\3\2\2\2\u02a4\u02a1"+
		"\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a3\3\2\2\2\u02a5\7\3\2\2\2\u02a6"+
		"\u02a7\7\u040c\2\2\u02a7\t\3\2\2\2\u02a8\u02cc\5\32\16\2\u02a9\u02cc\5"+
		"\34\17\2\u02aa\u02cc\5\36\20\2\u02ab\u02cc\5 \21\2\u02ac\u02cc\5\"\22"+
		"\2\u02ad\u02cc\5$\23\2\u02ae\u02cc\5&\24\2\u02af\u02cc\5(\25\2\u02b0\u02cc"+
		"\5*\26\2\u02b1\u02cc\5,\27\2\u02b2\u02cc\5.\30\2\u02b3\u02cc\5\60\31\2"+
		"\u02b4\u02cc\5r:\2\u02b5\u02cc\5t;\2\u02b6\u02cc\5v<\2\u02b7\u02cc\5x"+
		"=\2\u02b8\u02cc\5z>\2\u02b9\u02cc\5|?\2\u02ba\u02cc\5~@\2\u02bb\u02cc"+
		"\5\u0080A\2\u02bc\u02cc\5\u0082B\2\u02bd\u02cc\5\u0084C\2\u02be\u02cc"+
		"\5\u0088E\2\u02bf\u02cc\5\u008aF\2\u02c0\u02cc\5\u008cG\2\u02c1\u02cc"+
		"\5\u008eH\2\u02c2\u02cc\5\u0090I\2\u02c3\u02cc\5\u0092J\2\u02c4\u02cc"+
		"\5\u0094K\2\u02c5\u02cc\5\u0096L\2\u02c6\u02cc\5\u0098M\2\u02c7\u02cc"+
		"\5\u009aN\2\u02c8\u02cc\5\u009cO\2\u02c9\u02cc\5\u009eP\2\u02ca\u02cc"+
		"\5\u00a2R\2\u02cb\u02a8\3\2\2\2\u02cb\u02a9\3\2\2\2\u02cb\u02aa\3\2\2"+
		"\2\u02cb\u02ab\3\2\2\2\u02cb\u02ac\3\2\2\2\u02cb\u02ad\3\2\2\2\u02cb\u02ae"+
		"\3\2\2\2\u02cb\u02af\3\2\2\2\u02cb\u02b0\3\2\2\2\u02cb\u02b1\3\2\2\2\u02cb"+
		"\u02b2\3\2\2\2\u02cb\u02b3\3\2\2\2\u02cb\u02b4\3\2\2\2\u02cb\u02b5\3\2"+
		"\2\2\u02cb\u02b6\3\2\2\2\u02cb\u02b7\3\2\2\2\u02cb\u02b8\3\2\2\2\u02cb"+
		"\u02b9\3\2\2\2\u02cb\u02ba\3\2\2\2\u02cb\u02bb\3\2\2\2\u02cb\u02bc\3\2"+
		"\2\2\u02cb\u02bd\3\2\2\2\u02cb\u02be\3\2\2\2\u02cb\u02bf\3\2\2\2\u02cb"+
		"\u02c0\3\2\2\2\u02cb\u02c1\3\2\2\2\u02cb\u02c2\3\2\2\2\u02cb\u02c3\3\2"+
		"\2\2\u02cb\u02c4\3\2\2\2\u02cb\u02c5\3\2\2\2\u02cb\u02c6\3\2\2\2\u02cb"+
		"\u02c7\3\2\2\2\u02cb\u02c8\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02ca\3\2"+
		"\2\2\u02cc\13\3\2\2\2\u02cd\u02d8\5\u00b4[\2\u02ce\u02d8\5\u00acW\2\u02cf"+
		"\u02d8\5\u00b6\\\2\u02d0\u02d8\5\u00a6T\2\u02d1\u02d8\5\u00b2Z\2\u02d2"+
		"\u02d8\5\u00a4S\2\u02d3\u02d8\5\u00aeX\2\u02d4\u02d8\5\u00b0Y\2\u02d5"+
		"\u02d8\5\u00a8U\2\u02d6\u02d8\5\u00aaV\2\u02d7\u02cd\3\2\2\2\u02d7\u02ce"+
		"\3\2\2\2\u02d7\u02cf\3\2\2\2\u02d7\u02d0\3\2\2\2\u02d7\u02d1\3\2\2\2\u02d7"+
		"\u02d2\3\2\2\2\u02d7\u02d3\3\2\2\2\u02d7\u02d4\3\2\2\2\u02d7\u02d5\3\2"+
		"\2\2\u02d7\u02d6\3\2\2\2\u02d8\r\3\2\2\2\u02d9\u02e3\5\u0100\u0081\2\u02da"+
		"\u02e3\5\u0102\u0082\2\u02db\u02e3\5\u0104\u0083\2\u02dc\u02e3\5\u0106"+
		"\u0084\2\u02dd\u02e3\5\u0108\u0085\2\u02de\u02e3\5\u010a\u0086\2\u02df"+
		"\u02e3\5\u010c\u0087\2\u02e0\u02e3\5\u010e\u0088\2\u02e1\u02e3\5\u0110"+
		"\u0089\2\u02e2\u02d9\3\2\2\2\u02e2\u02da\3\2\2\2\u02e2\u02db\3\2\2\2\u02e2"+
		"\u02dc\3\2\2\2\u02e2\u02dd\3\2\2\2\u02e2\u02de\3\2\2\2\u02e2\u02df\3\2"+
		"\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e1\3\2\2\2\u02e3\17\3\2\2\2\u02e4\u02f4"+
		"\5\u0120\u0091\2\u02e5\u02f4\5\u0122\u0092\2\u02e6\u02f4\5\u0124\u0093"+
		"\2\u02e7\u02f4\5\u0126\u0094\2\u02e8\u02f4\5\u0128\u0095\2\u02e9\u02f4"+
		"\5\u012a\u0096\2\u02ea\u02f4\5\u012c\u0097\2\u02eb\u02f4\5\u012e\u0098"+
		"\2\u02ec\u02f4\5\u0130\u0099\2\u02ed\u02f4\5\u0148\u00a5\2\u02ee\u02f4"+
		"\5\u014a\u00a6\2\u02ef\u02f4\5\u014c\u00a7\2\u02f0\u02f4\5\u014e\u00a8"+
		"\2\u02f1\u02f4\5\u0150\u00a9\2\u02f2\u02f4\5\u0152\u00aa\2\u02f3\u02e4"+
		"\3\2\2\2\u02f3\u02e5\3\2\2\2\u02f3\u02e6\3\2\2\2\u02f3\u02e7\3\2\2\2\u02f3"+
		"\u02e8\3\2\2\2\u02f3\u02e9\3\2\2\2\u02f3\u02ea\3\2\2\2\u02f3\u02eb\3\2"+
		"\2\2\u02f3\u02ec\3\2\2\2\u02f3\u02ed\3\2\2\2\u02f3\u02ee\3\2\2\2\u02f3"+
		"\u02ef\3\2\2\2\u02f3\u02f0\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f2\3\2"+
		"\2\2\u02f4\21\3\2\2\2\u02f5\u02f9\5\u0154\u00ab\2\u02f6\u02f9\5\u0156"+
		"\u00ac\2\u02f7\u02f9\5\u0158\u00ad\2\u02f8\u02f5\3\2\2\2\u02f8\u02f6\3"+
		"\2\2\2\u02f8\u02f7\3\2\2\2\u02f9\23\3\2\2\2\u02fa\u0305\5\u015c\u00af"+
		"\2\u02fb\u0305\5\u015e\u00b0\2\u02fc\u0305\5\u0160\u00b1\2\u02fd\u0305"+
		"\5\u0164\u00b3\2\u02fe\u0305\5\u0166\u00b4\2\u02ff\u0305\5\u0168\u00b5"+
		"\2\u0300\u0305\5\u016c\u00b7\2\u0301\u0305\5\u0162\u00b2\2\u0302\u0305"+
		"\5\u016a\u00b6\2\u0303\u0305\5\u016e\u00b8\2\u0304\u02fa\3\2\2\2\u0304"+
		"\u02fb\3\2\2\2\u0304\u02fc\3\2\2\2\u0304\u02fd\3\2\2\2\u0304\u02fe\3\2"+
		"\2\2\u0304\u02ff\3\2\2\2\u0304\u0300\3\2\2\2\u0304\u0301\3\2\2\2\u0304"+
		"\u0302\3\2\2\2\u0304\u0303\3\2\2\2\u0305\25\3\2\2\2\u0306\u0320\5\u0180"+
		"\u00c1\2\u0307\u0320\5\u0182\u00c2\2\u0308\u0320\5\u0184\u00c3\2\u0309"+
		"\u0320\5\u0186\u00c4\2\u030a\u0320\5\u0188\u00c5\2\u030b\u0320\5\u018a"+
		"\u00c6\2\u030c\u0320\5\u018c\u00c7\2\u030d\u0320\5\u018e\u00c8\2\u030e"+
		"\u0320\5\u01a6\u00d4\2\u030f\u0320\5\u01a8\u00d5\2\u0310\u0320\5\u01aa"+
		"\u00d6\2\u0311\u0320\5\u01ac\u00d7\2\u0312\u0320\5\u01ae\u00d8\2\u0313"+
		"\u0320\5\u01b2\u00da\2\u0314\u0320\5\u01b4\u00db\2\u0315\u0320\5\u01b6"+
		"\u00dc\2\u0316\u0320\5\u01b8\u00dd\2\u0317\u0320\5\u01ba\u00de\2\u0318"+
		"\u0320\5\u01c8\u00e5\2\u0319\u0320\5\u01ca\u00e6\2\u031a\u0320\5\u01cc"+
		"\u00e7\2\u031b\u0320\5\u01ce\u00e8\2\u031c\u0320\5\u01d0\u00e9\2\u031d"+
		"\u0320\5\u01d2\u00ea\2\u031e\u0320\5\u01d4\u00eb\2\u031f\u0306\3\2\2\2"+
		"\u031f\u0307\3\2\2\2\u031f\u0308\3\2\2\2\u031f\u0309\3\2\2\2\u031f\u030a"+
		"\3\2\2\2\u031f\u030b\3\2\2\2\u031f\u030c\3\2\2\2\u031f\u030d\3\2\2\2\u031f"+
		"\u030e\3\2\2\2\u031f\u030f\3\2\2\2\u031f\u0310\3\2\2\2\u031f\u0311\3\2"+
		"\2\2\u031f\u0312\3\2\2\2\u031f\u0313\3\2\2\2\u031f\u0314\3\2\2\2\u031f"+
		"\u0315\3\2\2\2\u031f\u0316\3\2\2\2\u031f\u0317\3\2\2\2\u031f\u0318\3\2"+
		"\2\2\u031f\u0319\3\2\2\2\u031f\u031a\3\2\2\2\u031f\u031b\3\2\2\2\u031f"+
		"\u031c\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u031e\3\2\2\2\u0320\27\3\2\2"+
		"\2\u0321\u0329\5\u01de\u00f0\2\u0322\u0329\5\u01e0\u00f1\2\u0323\u0329"+
		"\5\u01e2\u00f2\2\u0324\u0329\5\u01e4\u00f3\2\u0325\u0329\5\u01e6\u00f4"+
		"\2\u0326\u0329\5\u01e8\u00f5\2\u0327\u0329\5\u01ec\u00f7\2\u0328\u0321"+
		"\3\2\2\2\u0328\u0322\3\2\2\2\u0328\u0323\3\2\2\2\u0328\u0324\3\2\2\2\u0328"+
		"\u0325\3\2\2\2\u0328\u0326\3\2\2\2\u0328\u0327\3\2\2\2\u0329\31\3\2\2"+
		"\2\u032a\u032b\7!\2\2\u032b\u032d\t\2\2\2\u032c\u032e\5\u0244\u0123\2"+
		"\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0333"+
		"\5\u020c\u0107\2\u0330\u0332\5\62\32\2\u0331\u0330\3\2\2\2\u0332\u0335"+
		"\3\2\2\2\u0333\u0331\3\2\2\2\u0333\u0334\3\2\2\2\u0334\33\3\2\2\2\u0335"+
		"\u0333\3\2\2\2\u0336\u0338\7!\2\2\u0337\u0339\5\64\33\2\u0338\u0337\3"+
		"\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033c\7\u0166\2\2"+
		"\u033b\u033d\5\u0244\u0123\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d"+
		"\u033e\3\2\2\2\u033e\u033f\5\u01f2\u00fa\2\u033f\u0340\7m\2\2\u0340\u0341"+
		"\7\u020f\2\2\u0341\u0348\5\66\34\2\u0342\u0343\7m\2\2\u0343\u0345\7\u013e"+
		"\2\2\u0344\u0346\7i\2\2\u0345\u0344\3\2\2\2\u0345\u0346\3\2\2\2\u0346"+
		"\u0347\3\2\2\2\u0347\u0349\7\u01e8\2\2\u0348\u0342\3\2\2\2\u0348\u0349"+
		"\3\2\2\2\u0349\u034b\3\2\2\2\u034a\u034c\5> \2\u034b\u034a\3\2\2\2\u034b"+
		"\u034c\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034e\7\u013b\2\2\u034e\u0350"+
		"\7\u0418\2\2\u034f\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351\3\2\2"+
		"\2\u0351\u0352\7\u0158\2\2\u0352\u0353\5\u015a\u00ae\2\u0353\35\3\2\2"+
		"\2\u0354\u0356\7!\2\2\u0355\u0357\t\3\2\2\u0356\u0355\3\2\2\2\u0356\u0357"+
		"\3\2\2\2\u0357\u0359\3\2\2\2\u0358\u035a\t\4\2\2\u0359\u0358\3\2\2\2\u0359"+
		"\u035a\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\7K\2\2\u035c\u035e\5\u020c"+
		"\u0107\2\u035d\u035f\5@!\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f"+
		"\u0360\3\2\2\2\u0360\u0361\7m\2\2\u0361\u0362\5\u01f4\u00fb\2\u0362\u0366"+
		"\5\u0230\u0119\2\u0363\u0365\5B\"\2\u0364\u0363\3\2\2\2\u0365\u0368\3"+
		"\2\2\2\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0375\3\2\2\2\u0368"+
		"\u0366\3\2\2\2\u0369\u036b\7\u011c\2\2\u036a\u036c\7\u0400\2\2\u036b\u036a"+
		"\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u0374\t\5\2\2\u036e"+
		"\u0370\7`\2\2\u036f\u0371\7\u0400\2\2\u0370\u036f\3\2\2\2\u0370\u0371"+
		"\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0374\t\6\2\2\u0373\u0369\3\2\2\2\u0373"+
		"\u036e\3\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2"+
		"\2\2\u0376\37\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u0379\7!\2\2\u0379\u037a"+
		"\7\u019d\2\2\u037a\u037b\7E\2\2\u037b\u037c\5\u020c\u0107\2\u037c\u037d"+
		"\7\b\2\2\u037d\u037e\7\u0242\2\2\u037e\u0384\7\u0418\2\2\u037f\u0381\7"+
		"\u0188\2\2\u0380\u0382\7\u0400\2\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2"+
		"\2\2\u0382\u0383\3\2\2\2\u0383\u0385\5\u0214\u010b\2\u0384\u037f\3\2\2"+
		"\2\u0384\u0385\3\2\2\2\u0385\u038b\3\2\2\2\u0386\u0388\7\u0243\2\2\u0387"+
		"\u0389\7\u0400\2\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a"+
		"\3\2\2\2\u038a\u038c\5\u0214\u010b\2\u038b\u0386\3\2\2\2\u038b\u038c\3"+
		"\2\2\2\u038c\u0392\3\2\2\2\u038d\u038f\7\u01f2\2\2\u038e\u0390\7\u0400"+
		"\2\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\3\2\2\2\u0391"+
		"\u0393\5\u0214\u010b\2\u0392\u038d\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0399"+
		"\3\2\2\2\u0394\u0396\7\u01cc\2\2\u0395\u0397\7\u0400\2\2\u0396\u0395\3"+
		"\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a\5\u020c\u0107"+
		"\2\u0399\u0394\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u039d"+
		"\7\u0251\2\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u03a3\3\2\2"+
		"\2\u039e\u03a0\7\u013b\2\2\u039f\u03a1\7\u0400\2\2\u03a0\u039f\3\2\2\2"+
		"\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\7\u0418\2\2\u03a3"+
		"\u039e\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\7\u0160"+
		"\2\2\u03a6\u03a8\7\u0400\2\2\u03a7\u03a6\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8"+
		"\u03a9\3\2\2\2\u03a9\u03aa\5\u0202\u0102\2\u03aa!\3\2\2\2\u03ab\u03ad"+
		"\7!\2\2\u03ac\u03ae\5\64\33\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae\3\2\2\2"+
		"\u03ae\u03af\3\2\2\2\u03af\u03b0\7x\2\2\u03b0\u03b1\5\u01f2\u00fa\2\u03b1"+
		"\u03b3\7\u0409\2\2\u03b2\u03b4\5D#\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3"+
		"\2\2\2\u03b4\u03b9\3\2\2\2\u03b5\u03b6\7\u040b\2\2\u03b6\u03b8\5D#\2\u03b7"+
		"\u03b5\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2"+
		"\2\2\u03ba\u03bc\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bc\u03c0\7\u040a\2\2\u03bd"+
		"\u03bf\5H%\2\u03be\u03bd\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be\3\2\2"+
		"\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03c4"+
		"\5\u015a\u00ae\2\u03c4#\3\2\2\2\u03c5\u03c7\7!\2\2\u03c6\u03c8\5\64\33"+
		"\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca"+
		"\7\u017a\2\2\u03ca\u03cb\5\u01f2\u00fa\2\u03cb\u03cd\7\u0409\2\2\u03cc"+
		"\u03ce\5F$\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d3\3\2\2"+
		"\2\u03cf\u03d0\7\u040b\2\2\u03d0\u03d2\5F$\2\u03d1\u03cf\3\2\2\2\u03d2"+
		"\u03d5\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03d6\3\2"+
		"\2\2\u03d5\u03d3\3\2\2\2\u03d6\u03d7\7\u040a\2\2\u03d7\u03d8\7\u0206\2"+
		"\2\u03d8\u03dc\5\u0220\u0111\2\u03d9\u03db\5H%\2\u03da\u03d9\3\2\2\2\u03db"+
		"\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03e1\3\2"+
		"\2\2\u03de\u03dc\3\2\2\2\u03df\u03e2\5\u015a\u00ae\2\u03e0\u03e2\5\u016a"+
		"\u00b6\2\u03e1\u03df\3\2\2\2\u03e1\u03e0\3\2\2\2\u03e2%\3\2\2\2\u03e3"+
		"\u03e4\7!\2\2\u03e4\u03e5\7\u0211\2\2\u03e5\u03e6\5\u020c\u0107\2\u03e6"+
		"\u03e7\7?\2\2\u03e7\u03e8\7\u014d\2\2\u03e8\u03e9\7\u0255\2\2\u03e9\u03ea"+
		"\t\7\2\2\u03ea\u03eb\7\u01d8\2\2\u03eb\u03ec\7\u0409\2\2\u03ec\u03f1\5"+
		"J&\2\u03ed\u03ee\7\u040b\2\2\u03ee\u03f0\5J&\2\u03ef\u03ed\3\2\2\2\u03f0"+
		"\u03f3\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\3\2"+
		"\2\2\u03f3\u03f1\3\2\2\2\u03f4\u03f5\7\u040a\2\2\u03f5\'\3\2\2\2\u03f6"+
		"\u03f8\7!\2\2\u03f7\u03f9\7\u0239\2\2\u03f8\u03f7\3\2\2\2\u03f8\u03f9"+
		"\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\7\u009d\2\2\u03fb\u03fd\5\u0244"+
		"\u0123\2\u03fc\u03fb\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe"+
		"\u0406\5\u01f4\u00fb\2\u03ff\u0400\7[\2\2\u0400\u0407\5\u01f4\u00fb\2"+
		"\u0401\u0402\7\u0409\2\2\u0402\u0403\7[\2\2\u0403\u0404\5\u01f4\u00fb"+
		"\2\u0404\u0405\7\u040a\2\2\u0405\u0407\3\2\2\2\u0406\u03ff\3\2\2\2\u0406"+
		"\u0401\3\2\2\2\u0407\u0445\3\2\2\2\u0408\u040a\7!\2\2\u0409\u040b\7\u0239"+
		"\2\2\u040a\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040c\3\2\2\2\u040c"+
		"\u040e\7\u009d\2\2\u040d\u040f\5\u0244\u0123\2\u040e\u040d\3\2\2\2\u040e"+
		"\u040f\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0412\5\u01f4\u00fb\2\u0411\u0413"+
		"\5L\'\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u041e\3\2\2\2\u0414"+
		"\u041b\5^\60\2\u0415\u0417\7\u040b\2\2\u0416\u0415\3\2\2\2\u0416\u0417"+
		"\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\5^\60\2\u0419\u0416\3\2\2\2\u041a"+
		"\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041f\3\2"+
		"\2\2\u041d\u041b\3\2\2\2\u041e\u0414\3\2\2\2\u041e\u041f\3\2\2\2\u041f"+
		"\u0421\3\2\2\2\u0420\u0422\5b\62\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2"+
		"\2\2\u0422\u0424\3\2\2\2\u0423\u0425\t\b\2\2\u0424\u0423\3\2\2\2\u0424"+
		"\u0425\3\2\2\2\u0425\u0427\3\2\2\2\u0426\u0428\7\16\2\2\u0427\u0426\3"+
		"\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042a\5\u00b4[\2"+
		"\u042a\u0445\3\2\2\2\u042b\u042d\7!\2\2\u042c\u042e\7\u0239\2\2\u042d"+
		"\u042c\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\7\u009d"+
		"\2\2\u0430\u0432\5\u0244\u0123\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2\2"+
		"\2\u0432\u0433\3\2\2\2\u0433\u0434\5\u01f4\u00fb\2\u0434\u043f\5L\'\2"+
		"\u0435\u043c\5^\60\2\u0436\u0438\7\u040b\2\2\u0437\u0436\3\2\2\2\u0437"+
		"\u0438\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b\5^\60\2\u043a\u0437\3\2"+
		"\2\2\u043b\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043d\3\2\2\2\u043d"+
		"\u0440\3\2\2\2\u043e\u043c\3\2\2\2\u043f\u0435\3\2\2\2\u043f\u0440\3\2"+
		"\2\2\u0440\u0442\3\2\2\2\u0441\u0443\5b\62\2\u0442\u0441\3\2\2\2\u0442"+
		"\u0443\3\2\2\2\u0443\u0445\3\2\2\2\u0444\u03f6\3\2\2\2\u0444\u0408\3\2"+
		"\2\2\u0444\u042b\3\2\2\2\u0445)\3\2\2\2\u0446\u0447\7!\2\2\u0447\u0448"+
		"\7\u0238\2\2\u0448\u0449\5\u020c\u0107\2\u0449\u044a\7\b\2\2\u044a\u044b"+
		"\7\u014e\2\2\u044b\u044f\7\u0418\2\2\u044c\u044d\7\u0172\2\2\u044d\u044e"+
		"\7\u0400\2\2\u044e\u0450\5\u0214\u010b\2\u044f\u044c\3\2\2\2\u044f\u0450"+
		"\3\2\2\2\u0450\u0456\3\2\2\2\u0451\u0453\7\u0160\2\2\u0452\u0454\7\u0400"+
		"\2\2\u0453\u0452\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0455\3\2\2\2\u0455"+
		"\u0457\5\u0202\u0102\2\u0456\u0451\3\2\2\2\u0456\u0457\3\2\2\2\u0457+"+
		"\3\2\2\2\u0458\u0459\7!\2\2\u0459\u045a\7\u0238\2\2\u045a\u045b\5\u020c"+
		"\u0107\2\u045b\u045c\7\b\2\2\u045c\u045d\7\u014e\2\2\u045d\u045e\7\u0418"+
		"\2\2\u045e\u045f\7\u00ab\2\2\u045f\u0460\7\u019d\2\2\u0460\u0461\7E\2"+
		"\2\u0461\u0467\5\u020c\u0107\2\u0462\u0464\7\u016e\2\2\u0463\u0465\7\u0400"+
		"\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0466\3\2\2\2\u0466"+
		"\u0468\5\u0214\u010b\2\u0467\u0462\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046e"+
		"\3\2\2\2\u0469\u046b\7\u0188\2\2\u046a\u046c\7\u0400\2\2\u046b\u046a\3"+
		"\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u046f\5\u0214\u010b"+
		"\2\u046e\u0469\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0475\3\2\2\2\u0470\u0472"+
		"\7\u0121\2\2\u0471\u0473\7\u0400\2\2\u0472\u0471\3\2\2\2\u0472\u0473\3"+
		"\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\5\u0214\u010b\2\u0475\u0470\3\2"+
		"\2\2\u0475\u0476\3\2\2\2\u0476\u047c\3\2\2\2\u0477\u0479\7\u01b7\2\2\u0478"+
		"\u047a\7\u0400\2\2\u0479\u0478\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047b"+
		"\3\2\2\2\u047b\u047d\5\u0214\u010b\2\u047c\u0477\3\2\2\2\u047c\u047d\3"+
		"\2\2\2\u047d\u0483\3\2\2\2\u047e\u0480\7\u01cc\2\2\u047f\u0481\7\u0400"+
		"\2\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\3\2\2\2\u0482"+
		"\u0484\5\u020c\u0107\2\u0483\u047e\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486"+
		"\3\2\2\2\u0485\u0487\7\u0251\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2"+
		"\2\u0487\u048d\3\2\2\2\u0488\u048a\7\u013b\2\2\u0489\u048b\7\u0400\2\2"+
		"\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u048e"+
		"\7\u0418\2\2\u048d\u0488\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\3\2\2"+
		"\2\u048f\u0491\7\u0160\2\2\u0490\u0492\7\u0400\2\2\u0491\u0490\3\2\2\2"+
		"\u0491\u0492\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\5\u0202\u0102\2\u0494"+
		"-\3\2\2\2\u0495\u0497\7!\2\2\u0496\u0498\5\64\33\2\u0497\u0496\3\2\2\2"+
		"\u0497\u0498\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049a\7\u00a2\2\2\u049a"+
		"\u049b\5\u01f2\u00fa\2\u049b\u049c\t\t\2\2\u049c\u049d\t\n\2\2\u049d\u049e"+
		"\7m\2\2\u049e\u049f\5\u01f4\u00fb\2\u049f\u04a0\7=\2\2\u04a0\u04a1\7\63"+
		"\2\2\u04a1\u04a4\7\u020b\2\2\u04a2\u04a3\t\13\2\2\u04a3\u04a5\5\u01f2"+
		"\u00fa\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6"+
		"\u04a7\5\u015a\u00ae\2\u04a7/\3\2\2\2\u04a8\u04ab\7!\2\2\u04a9\u04aa\7"+
		"q\2\2\u04aa\u04ac\7\u0082\2\2\u04ab\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2"+
		"\u04ac\u04b0\3\2\2\2\u04ad\u04ae\7\u011c\2\2\u04ae\u04af\7\u0400\2\2\u04af"+
		"\u04b1\t\f\2\2\u04b0\u04ad\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b3\3\2"+
		"\2\2\u04b2\u04b4\5\64\33\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4"+
		"\u04b8\3\2\2\2\u04b5\u04b6\7\u0092\2\2\u04b6\u04b7\7\u0210\2\2\u04b7\u04b9"+
		"\t\r\2\2\u04b8\u04b5\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba"+
		"\u04bb\7\u024e\2\2\u04bb\u04c0\5\u01f2\u00fa\2\u04bc\u04bd\7\u0409\2\2"+
		"\u04bd\u04be\5\u022c";
	private static final String _serializedATNSegment1 =
		"\u0117\2\u04be\u04bf\7\u040a\2\2\u04bf\u04c1\3\2\2\2\u04c0\u04bc\3\2\2"+
		"\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\7\16\2\2\u04c3"+
		"\u04ca\5\u00b4[\2\u04c4\u04c6\7\u00b1\2\2\u04c5\u04c7\t\16\2\2\u04c6\u04c5"+
		"\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\7\32\2\2"+
		"\u04c9\u04cb\7o\2\2\u04ca\u04c4\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\61\3"+
		"\2\2\2\u04cc\u04ce\7)\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce"+
		"\u04d2\3\2\2\2\u04cf\u04d0\7\31\2\2\u04d0\u04d3\7\u008d\2\2\u04d1\u04d3"+
		"\7\u02e7\2\2\u04d2\u04cf\3\2\2\2\u04d2\u04d1\3\2\2\2\u04d3\u04d5\3\2\2"+
		"\2\u04d4\u04d6\7\u0400\2\2\u04d5\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6"+
		"\u04d9\3\2\2\2\u04d7\u04da\5\u01fe\u0100\2\u04d8\u04da\7)\2\2\u04d9\u04d7"+
		"\3\2\2\2\u04d9\u04d8\3\2\2\2\u04da\u04e4\3\2\2\2\u04db\u04dd\7)\2\2\u04dc"+
		"\u04db\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\7\33"+
		"\2\2\u04df\u04e1\7\u0400\2\2\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1"+
		"\u04e2\3\2\2\2\u04e2\u04e4\5\u0200\u0101\2\u04e3\u04cd\3\2\2\2\u04e3\u04dc"+
		"\3\2\2\2\u04e4\63\3\2\2\2\u04e5\u04e6\7\u0151\2\2\u04e6\u04ed\7\u0400"+
		"\2\2\u04e7\u04ee\5\u01fa\u00fe\2\u04e8\u04eb\7$\2\2\u04e9\u04ea\7\u0409"+
		"\2\2\u04ea\u04ec\7\u040a\2\2\u04eb\u04e9\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec"+
		"\u04ee\3\2\2\2\u04ed\u04e7\3\2\2\2\u04ed\u04e8\3\2\2\2\u04ee\65\3\2\2"+
		"\2\u04ef\u04f0\7\u011e\2\2\u04f0\u04f4\58\35\2\u04f1\u04f3\5:\36\2\u04f2"+
		"\u04f1\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4\u04f5\3\2"+
		"\2\2\u04f5\u0512\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f7\u04fa\7\u0168\2\2\u04f8"+
		"\u04fb\5\u0212\u010a\2\u04f9\u04fb\5\u025c\u012f\2\u04fa\u04f8\3\2\2\2"+
		"\u04fa\u04f9\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u0505\5<\37\2\u04fd\u04fe"+
		"\7\u0227\2\2\u04fe\u0502\58\35\2\u04ff\u0501\5:\36\2\u0500\u04ff\3\2\2"+
		"\2\u0501\u0504\3\2\2\2\u0502\u0500\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0506"+
		"\3\2\2\2\u0504\u0502\3\2\2\2\u0505\u04fd\3\2\2\2\u0505\u0506\3\2\2\2\u0506"+
		"\u050f\3\2\2\2\u0507\u0508\7\u015f\2\2\u0508\u050c\58\35\2\u0509\u050b"+
		"\5:\36\2\u050a\u0509\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050a\3\2\2\2\u050c"+
		"\u050d\3\2\2\2\u050d\u0510\3\2\2\2\u050e\u050c\3\2\2\2\u050f\u0507\3\2"+
		"\2\2\u050f\u0510\3\2\2\2\u0510\u0512\3\2\2\2\u0511\u04ef\3\2\2\2\u0511"+
		"\u04f7\3\2\2\2\u0512\67\3\2\2\2\u0513\u0518\7\u0107\2\2\u0514\u0518\5"+
		"\u0216\u010c\2\u0515\u0518\5\u0212\u010a\2\u0516\u0518\5\u025c\u012f\2"+
		"\u0517\u0513\3\2\2\2\u0517\u0514\3\2\2\2\u0517\u0515\3\2\2\2\u0517\u0516"+
		"\3\2\2\2\u05189\3\2\2\2\u0519\u051a\7\u03fa\2\2\u051a\u051d\7P\2\2\u051b"+
		"\u051e\5\u0212\u010a\2\u051c\u051e\5\u025c\u012f\2\u051d\u051b\3\2\2\2"+
		"\u051d\u051c\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0520\5<\37\2\u0520;\3"+
		"\2\2\2\u0521\u052f\5\u0276\u013c\2\u0522\u052f\7\u00ce\2\2\u0523\u052f"+
		"\7\u00e1\2\2\u0524\u052f\7\u00e2\2\2\u0525\u052f\7\u00e3\2\2\u0526\u052f"+
		"\7\u00e4\2\2\u0527\u052f\7\u00e5\2\2\u0528\u052f\7\u00e6\2\2\u0529\u052f"+
		"\7\u00e7\2\2\u052a\u052f\7\u00e8\2\2\u052b\u052f\7\u00e9\2\2\u052c\u052f"+
		"\7\u00ea\2\2\u052d\u052f\7\u00eb\2\2\u052e\u0521\3\2\2\2\u052e\u0522\3"+
		"\2\2\2\u052e\u0523\3\2\2\2\u052e\u0524\3\2\2\2\u052e\u0525\3\2\2\2\u052e"+
		"\u0526\3\2\2\2\u052e\u0527\3\2\2\2\u052e\u0528\3\2\2\2\u052e\u0529\3\2"+
		"\2\2\u052e\u052a\3\2\2\2\u052e\u052b\3\2\2\2\u052e\u052c\3\2\2\2\u052e"+
		"\u052d\3\2\2\2\u052f=\3\2\2\2\u0530\u0536\7\u015c\2\2\u0531\u0536\7\u0155"+
		"\2\2\u0532\u0533\7\u0155\2\2\u0533\u0534\7m\2\2\u0534\u0536\7\u0217\2"+
		"\2\u0535\u0530\3\2\2\2\u0535\u0531\3\2\2\2\u0535\u0532\3\2\2\2\u0536?"+
		"\3\2\2\2\u0537\u0538\7\u00ac\2\2\u0538\u0539\t\17\2\2\u0539A\3\2\2\2\u053a"+
		"\u053c\7\u0195\2\2\u053b\u053d\7\u0400\2\2\u053c\u053b\3\2\2\2\u053c\u053d"+
		"\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0548\5\u0214\u010b\2\u053f\u0548\5"+
		"@!\2\u0540\u0541\7\u00b1\2\2\u0541\u0542\7\u01dc\2\2\u0542\u0548\5\u020c"+
		"\u0107\2\u0543\u0544\7\u013b\2\2\u0544\u0548\7\u0418\2\2\u0545\u0548\7"+
		"\u018d\2\2\u0546\u0548\7\u0250\2\2\u0547\u053a\3\2\2\2\u0547\u053f\3\2"+
		"\2\2\u0547\u0540\3\2\2\2\u0547\u0543\3\2\2\2\u0547\u0545\3\2\2\2\u0547"+
		"\u0546\3\2\2\2\u0548C\3\2\2\2\u0549\u054b\t\20\2\2\u054a\u0549\3\2\2\2"+
		"\u054a\u054b\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d\5\u020c\u0107\2\u054d"+
		"\u054e\5\u0220\u0111\2\u054eE\3\2\2\2\u054f\u0550\5\u020c\u0107\2\u0550"+
		"\u0551\5\u0220\u0111\2\u0551G\3\2\2\2\u0552\u0553\7\u013b\2\2\u0553\u056a"+
		"\7\u0418\2\2\u0554\u0555\7\u0196\2\2\u0555\u056a\7\u0092\2\2\u0556\u0558"+
		"\7i\2\2\u0557\u0556\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u0559\3\2\2\2\u0559"+
		"\u056a\7.\2\2\u055a\u055b\7\u0147\2\2\u055b\u0565\7\u0092\2\2\u055c\u055d"+
		"\7\u01cb\2\2\u055d\u0565\7\u0092\2\2\u055e\u055f\7|\2\2\u055f\u0560\7"+
		"\u0092\2\2\u0560\u0565\7\u014d\2\2\u0561\u0562\7g\2\2\u0562\u0563\7\u0092"+
		"\2\2\u0563\u0565\7\u014d\2\2\u0564\u055a\3\2\2\2\u0564\u055c\3\2\2\2\u0564"+
		"\u055e\3\2\2\2\u0564\u0561\3\2\2\2\u0565\u056a\3\2\2\2\u0566\u0567\7\u0092"+
		"\2\2\u0567\u0568\7\u0210\2\2\u0568\u056a\t\r\2\2\u0569\u0552\3\2\2\2\u0569"+
		"\u0554\3\2\2\2\u0569\u0557\3\2\2\2\u0569\u0564\3\2\2\2\u0569\u0566\3\2"+
		"\2\2\u056aI\3\2\2\2\u056b\u056c\7\u0182\2\2\u056c\u057a\7\u0418\2\2\u056d"+
		"\u056e\7&\2\2\u056e\u057a\7\u0418\2\2\u056f\u0570\7\u0248\2\2\u0570\u057a"+
		"\7\u0418\2\2\u0571\u0572\7\u01e0\2\2\u0572\u057a\7\u0418\2\2\u0573\u0574"+
		"\7\u021a\2\2\u0574\u057a\7\u0418\2\2\u0575\u0576\7\u01d9\2\2\u0576\u057a"+
		"\7\u0418\2\2\u0577\u0578\7\u01e5\2\2\u0578\u057a\5\u0212\u010a\2\u0579"+
		"\u056b\3\2\2\2\u0579\u056d\3\2\2\2\u0579\u056f\3\2\2\2\u0579\u0571\3\2"+
		"\2\2\u0579\u0573\3\2\2\2\u0579\u0575\3\2\2\2\u0579\u0577\3\2\2\2\u057a"+
		"K\3\2\2\2\u057b\u057c\7\u0409\2\2\u057c\u0581\5N(\2\u057d\u057e\7\u040b"+
		"\2\2\u057e\u0580\5N(\2\u057f\u057d\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f"+
		"\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0584\3\2\2\2\u0583\u0581\3\2\2\2\u0584"+
		"\u0585\7\u040a\2\2\u0585M\3\2\2\2\u0586\u0587\5\u020c\u0107\2\u0587\u0588"+
		"\5P)\2\u0588\u058c\3\2\2\2\u0589\u058c\5T+\2\u058a\u058c\5\\/\2\u058b"+
		"\u0586\3\2\2\2\u058b\u0589\3\2\2\2\u058b\u058a\3\2\2\2\u058cO\3\2\2\2"+
		"\u058d\u0591\5\u0220\u0111\2\u058e\u0590\5R*\2\u058f\u058e\3\2\2\2\u0590"+
		"\u0593\3\2\2\2\u0591\u058f\3\2\2\2\u0591\u0592\3\2\2\2\u0592Q\3\2\2\2"+
		"\u0593\u0591\3\2\2\2\u0594\u05c8\5\u021c\u010f\2\u0595\u0596\7)\2\2\u0596"+
		"\u05c8\5\u023c\u011f\2\u0597\u059c\7\u0122\2\2\u0598\u0599\7m\2\2\u0599"+
		"\u059a\7\u00a9\2\2\u059a\u059c\5\u023e\u0120\2\u059b\u0597\3\2\2\2\u059b"+
		"\u0598\3\2\2\2\u059c\u05c8\3\2\2\2\u059d\u059f\7w\2\2\u059e\u059d\3\2"+
		"\2\2\u059e\u059f\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05c8\7U\2\2\u05a1"+
		"\u05a3\7\u00a6\2\2\u05a2\u05a4\7U\2\2\u05a3\u05a2\3\2\2\2\u05a3\u05a4"+
		"\3\2\2\2\u05a4\u05c8\3\2\2\2\u05a5\u05a6\7\u013b\2\2\u05a6\u05c8\7\u0418"+
		"\2\2\u05a7\u05a8\7\u0139\2\2\u05a8\u05c8\t\21\2\2\u05a9\u05aa\7\u022d"+
		"\2\2\u05aa\u05c8\t\22\2\2\u05ab\u05c8\5V,\2\u05ac\u05ad\7\33\2\2\u05ad"+
		"\u05c8\5\u0200\u0101\2\u05ae\u05af\7B\2\2\u05af\u05b1\7\13\2\2\u05b0\u05ae"+
		"\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b3\7\16\2\2"+
		"\u05b3\u05b4\7\u0409\2\2\u05b4\u05b5\5\u025c\u012f\2\u05b5\u05b7\7\u040a"+
		"\2\2\u05b6\u05b8\t\23\2\2\u05b7\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8"+
		"\u05c8\3\2\2\2\u05b9\u05ba\7\u00e0\2\2\u05ba\u05bb\7)\2\2\u05bb\u05c8"+
		"\7\u024c\2\2\u05bc\u05be\7\36\2\2\u05bd\u05bf\5\u020c\u0107\2\u05be\u05bd"+
		"\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u05c1\3\2\2\2\u05c0\u05bc\3\2\2\2\u05c0"+
		"\u05c1\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\7\32\2\2\u05c3\u05c4\7"+
		"\u0409\2\2\u05c4\u05c5\5\u025c\u012f\2\u05c5\u05c6\7\u040a\2\2\u05c6\u05c8"+
		"\3\2\2\2\u05c7\u0594\3\2\2\2\u05c7\u0595\3\2\2\2\u05c7\u059b\3\2\2\2\u05c7"+
		"\u059e\3\2\2\2\u05c7\u05a1\3\2\2\2\u05c7\u05a5\3\2\2\2\u05c7\u05a7\3\2"+
		"\2\2\u05c7\u05a9\3\2\2\2\u05c7\u05ab\3\2\2\2\u05c7\u05ac\3\2\2\2\u05c7"+
		"\u05b0\3\2\2\2\u05c7\u05b9\3\2\2\2\u05c7\u05c0\3\2\2\2\u05c8S\3\2\2\2"+
		"\u05c9\u05cb\7\36\2\2\u05ca\u05cc\5\u020c\u0107\2\u05cb\u05ca\3\2\2\2"+
		"\u05cb\u05cc\3\2\2\2\u05cc\u05ce\3\2\2\2\u05cd\u05c9\3\2\2\2\u05cd\u05ce"+
		"\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0\7w\2\2\u05d0\u05d2\7U\2\2\u05d1"+
		"\u05d3\5\u020c\u0107\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d5"+
		"\3\2\2\2\u05d4\u05d6\5@!\2\u05d5\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6"+
		"\u05d7\3\2\2\2\u05d7\u05db\5\u0230\u0119\2\u05d8\u05da\5B\"\2\u05d9\u05d8"+
		"\3\2\2\2\u05da\u05dd\3\2\2\2\u05db\u05d9\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc"+
		"\u060f\3\2\2\2\u05dd\u05db\3\2\2\2\u05de\u05e0\7\36\2\2\u05df\u05e1\5"+
		"\u020c\u0107\2\u05e0\u05df\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e3\3\2"+
		"\2\2\u05e2\u05de\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\3\2\2\2\u05e4"+
		"\u05e6\7\u00a6\2\2\u05e5\u05e7\t\24\2\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7"+
		"\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05ea\5\u020c\u0107\2\u05e9\u05e8\3"+
		"\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ec\3\2\2\2\u05eb\u05ed\5@!\2\u05ec"+
		"\u05eb\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f2\5\u0230"+
		"\u0119\2\u05ef\u05f1\5B\"\2\u05f0\u05ef\3\2\2\2\u05f1\u05f4\3\2\2\2\u05f2"+
		"\u05f0\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u060f\3\2\2\2\u05f4\u05f2\3\2"+
		"\2\2\u05f5\u05f7\7\36\2\2\u05f6\u05f8\5\u020c\u0107\2\u05f7\u05f6\3\2"+
		"\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05fa\3\2\2\2\u05f9\u05f5\3\2\2\2\u05f9"+
		"\u05fa\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc\7?\2\2\u05fc\u05fe\7U\2"+
		"\2\u05fd\u05ff\5\u020c\u0107\2\u05fe\u05fd\3\2\2\2\u05fe\u05ff\3\2\2\2"+
		"\u05ff\u0600\3\2\2\2\u0600\u0601\5\u0230\u0119\2\u0601\u0602\5V,\2\u0602"+
		"\u060f\3\2\2\2\u0603\u0605\7\36\2\2\u0604\u0606\5\u020c\u0107\2\u0605"+
		"\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0608\3\2\2\2\u0607\u0603\3\2"+
		"\2\2\u0607\u0608\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060a\7\32\2\2\u060a"+
		"\u060b\7\u0409\2\2\u060b\u060c\5\u025c\u012f\2\u060c\u060d\7\u040a\2\2"+
		"\u060d\u060f\3\2\2\2\u060e\u05cd\3\2\2\2\u060e\u05e2\3\2\2\2\u060e\u05f9"+
		"\3\2\2\2\u060e\u0607\3\2\2\2\u060fU\3\2\2\2\u0610\u0611\7}\2\2\u0611\u0613"+
		"\5\u01f4\u00fb\2\u0612\u0614\5\u0230\u0119\2\u0613\u0612\3\2\2\2\u0613"+
		"\u0614\3\2\2\2\u0614\u0617\3\2\2\2\u0615\u0616\7e\2\2\u0616\u0618\t\25"+
		"\2\2\u0617\u0615\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u061a\3\2\2\2\u0619"+
		"\u061b\5X-\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061bW\3\2\2\2\u061c"+
		"\u061d\7m\2\2\u061d\u061e\7+\2\2\u061e\u0622\5Z.\2\u061f\u0620\7m\2\2"+
		"\u0620\u0621\7\u00a9\2\2\u0621\u0623\5Z.\2\u0622\u061f\3\2\2\2\u0622\u0623"+
		"\3\2\2\2\u0623\u062d\3\2\2\2\u0624\u0625\7m\2\2\u0625\u0626\7\u00a9\2"+
		"\2\u0626\u062a\5Z.\2\u0627\u0628\7m\2\2\u0628\u0629\7+\2\2\u0629\u062b"+
		"\5Z.\2\u062a\u0627\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062d\3\2\2\2\u062c"+
		"\u061c\3\2\2\2\u062c\u0624\3\2\2\2\u062dY\3\2\2\2\u062e\u0635\7\u0085"+
		"\2\2\u062f\u0635\7\25\2\2\u0630\u0631\7\u008d\2\2\u0631\u0635\7k\2\2\u0632"+
		"\u0633\7\u01cb\2\2\u0633\u0635\7\u0119\2\2\u0634\u062e\3\2\2\2\u0634\u062f"+
		"\3\2\2\2\u0634\u0630\3\2\2\2\u0634\u0632\3\2\2\2\u0635[\3\2\2\2\u0636"+
		"\u0638\t\24\2\2\u0637\u0639\5\u020c\u0107\2\u0638\u0637\3\2\2\2\u0638"+
		"\u0639\3\2\2\2\u0639\u063b\3\2\2\2\u063a\u063c\5@!\2\u063b\u063a\3\2\2"+
		"\2\u063b\u063c\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u0641\5\u0230\u0119\2"+
		"\u063e\u0640\5B\"\2\u063f\u063e\3\2\2\2\u0640\u0643\3\2\2\2\u0641\u063f"+
		"\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0653\3\2\2\2\u0643\u0641\3\2\2\2\u0644"+
		"\u0646\t\26\2\2\u0645\u0647\t\24\2\2\u0646\u0645\3\2\2\2\u0646\u0647\3"+
		"\2\2\2\u0647\u0649\3\2\2\2\u0648\u064a\5\u020c\u0107\2\u0649\u0648\3\2"+
		"\2\2\u0649\u064a\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064f\5\u0230\u0119"+
		"\2\u064c\u064e\5B\"\2\u064d\u064c\3\2\2\2\u064e\u0651\3\2\2\2\u064f\u064d"+
		"\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u0653\3\2\2\2\u0651\u064f\3\2\2\2\u0652"+
		"\u0636\3\2\2\2\u0652\u0644\3\2\2\2\u0653]\3\2\2\2\u0654\u0656\7\u0160"+
		"\2\2\u0655\u0657\7\u0400\2\2\u0656\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657"+
		"\u0658\3\2\2\2\u0658\u06e5\5\u0202\u0102\2\u0659\u065b\7\u0122\2\2\u065a"+
		"\u065c\7\u0400\2\2\u065b\u065a\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u065d"+
		"\3\2\2\2\u065d\u06e5\5\u0212\u010a\2\u065e\u0660\7\u0123\2\2\u065f\u0661"+
		"\7\u0400\2\2\u0660\u065f\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0662\3\2\2"+
		"\2\u0662\u06e5\5\u0212\u010a\2\u0663\u0665\7)\2\2\u0664\u0663\3\2\2\2"+
		"\u0664\u0665\3\2\2\2\u0665\u0669\3\2\2\2\u0666\u0667\7\31\2\2\u0667\u066a"+
		"\7\u008d\2\2\u0668\u066a\7\u02e7\2\2\u0669\u0666\3\2\2\2\u0669\u0668\3"+
		"\2\2\2\u066a\u066c\3\2\2\2\u066b\u066d\7\u0400\2\2\u066c\u066b\3\2\2\2"+
		"\u066c\u066d\3\2\2\2\u066d\u0670\3\2\2\2\u066e\u0671\5\u01fe\u0100\2\u066f"+
		"\u0671\7)\2\2\u0670\u066e\3\2\2\2\u0670\u066f\3\2\2\2\u0671\u06e5\3\2"+
		"\2\2\u0672\u0674\t\27\2\2\u0673\u0675\7\u0400\2\2\u0674\u0673\3\2\2\2"+
		"\u0674\u0675\3\2\2\2\u0675\u0676\3\2\2\2\u0676\u06e5\t\30\2\2\u0677\u0679"+
		"\7)\2\2\u0678\u0677\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\3\2\2\2\u067a"+
		"\u067c\7\33\2\2\u067b\u067d\7\u0400\2\2\u067c\u067b\3\2\2\2\u067c\u067d"+
		"\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u06e5\5\u0200\u0101\2\u067f\u0681\7"+
		"\u013b\2\2\u0680\u0682\7\u0400\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2"+
		"\2\2\u0682\u0683\3\2\2\2\u0683\u06e5\7\u0418\2\2\u0684\u0686\7\u0140\2"+
		"\2\u0685\u0687\7\u0400\2\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2\2\u0687"+
		"\u0688\3\2\2\2\u0688\u06e5\t\31\2\2\u0689\u068b\7\u0142\2\2\u068a\u068c"+
		"\7\u0400\2\2\u068b\u068a\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u068d\3\2\2"+
		"\2\u068d\u06e5\7\u0418\2\2\u068e\u068f\7\u014d\2\2\u068f\u0691\7\u0154"+
		"\2\2\u0690\u0692\7\u0400\2\2\u0691\u0690\3\2\2\2\u0691\u0692\3\2\2\2\u0692"+
		"\u0693\3\2\2\2\u0693\u06e5\7\u0418\2\2\u0694\u0696\7\u0152\2\2\u0695\u0697"+
		"\7\u0400\2\2\u0696\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2"+
		"\2\u0698\u06e5\t\30\2\2\u0699\u069b\7\u015d\2\2\u069a\u069c\7\u0400\2"+
		"\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u06e5"+
		"\7\u0418\2\2\u069e\u069f\7K\2\2\u069f\u06a1\7\u0154\2\2\u06a0\u06a2\7"+
		"\u0400\2\2\u06a1\u06a0\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\3\2\2\2"+
		"\u06a3\u06e5\7\u0418\2\2\u06a4\u06a6\7\u018a\2\2\u06a5\u06a7\7\u0400\2"+
		"\2\u06a6\u06a5\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06e5"+
		"\t\32\2\2\u06a9\u06ab\7\u0195\2\2\u06aa\u06ac\7\u0400\2\2\u06ab\u06aa"+
		"\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06e5\5\u0214\u010b"+
		"\2\u06ae\u06b0\7\u01b6\2\2\u06af\u06b1\7\u0400\2\2\u06b0\u06af\3\2\2\2"+
		"\u06b0\u06b1\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06e5\5\u0212\u010a\2\u06b3"+
		"\u06b5\7\u01c0\2\2\u06b4\u06b6\7\u0400\2\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6"+
		"\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06e5\5\u0212\u010a\2\u06b8\u06ba\7"+
		"\u01da\2\2\u06b9\u06bb\7\u0400\2\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2"+
		"\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06e5\t\33\2\2\u06bd\u06bf\7\u01e0\2\2"+
		"\u06be\u06c0\7\u0400\2\2\u06bf\u06be\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0"+
		"\u06c1\3\2\2\2\u06c1\u06e5\7\u0418\2\2\u06c2\u06c4\7\u020d\2\2\u06c3\u06c5"+
		"\7\u0400\2\2\u06c4\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6\3\2\2"+
		"\2\u06c6\u06e5\t\34\2\2\u06c7\u06c9\7\u0228\2\2\u06c8\u06ca\7\u0400\2"+
		"\2\u06c9\u06c8\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06e5"+
		"\t\33\2\2\u06cc\u06ce\7\u0229\2\2\u06cd\u06cf\7\u0400\2\2\u06ce\u06cd"+
		"\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06e5\t\33\2\2"+
		"\u06d1\u06d3\7\u022a\2\2\u06d2\u06d4\7\u0400\2\2\u06d3\u06d2\3\2\2\2\u06d3"+
		"\u06d4\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06e5\5\u0212\u010a\2\u06d6\u06d7"+
		"\7\u0238\2\2\u06d7\u06d9\5\u020c\u0107\2\u06d8\u06da\5`\61\2\u06d9\u06d8"+
		"\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06e5\3\2\2\2\u06db\u06e5\5`\61\2\u06dc"+
		"\u06de\7\u00a5\2\2\u06dd\u06df\7\u0400\2\2\u06de\u06dd\3\2\2\2\u06de\u06df"+
		"\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\7\u0409\2\2\u06e1\u06e2\5\u022e"+
		"\u0118\2\u06e2\u06e3\7\u040a\2\2\u06e3\u06e5\3\2\2\2\u06e4\u0654\3\2\2"+
		"\2\u06e4\u0659\3\2\2\2\u06e4\u065e\3\2\2\2\u06e4\u0664\3\2\2\2\u06e4\u0672"+
		"\3\2\2\2\u06e4\u0678\3\2\2\2\u06e4\u067f\3\2\2\2\u06e4\u0684\3\2\2\2\u06e4"+
		"\u0689\3\2\2\2\u06e4\u068e\3\2\2\2\u06e4\u0694\3\2\2\2\u06e4\u0699\3\2"+
		"\2\2\u06e4\u069e\3\2\2\2\u06e4\u06a4\3\2\2\2\u06e4\u06a9\3\2\2\2\u06e4"+
		"\u06ae\3\2\2\2\u06e4\u06b3\3\2\2\2\u06e4\u06b8\3\2\2\2\u06e4\u06bd\3\2"+
		"\2\2\u06e4\u06c2\3\2\2\2\u06e4\u06c7\3\2\2\2\u06e4\u06cc\3\2\2\2\u06e4"+
		"\u06d1\3\2\2\2\u06e4\u06d6\3\2\2\2\u06e4\u06db\3\2\2\2\u06e4\u06dc\3\2"+
		"\2\2\u06e5_\3\2\2\2\u06e6\u06e7\7\u022d\2\2\u06e7\u06e8\t\22\2\2\u06e8"+
		"a\3\2\2\2\u06e9\u06ea\7v\2\2\u06ea\u06eb\7\23\2\2\u06eb\u06ee\5d\63\2"+
		"\u06ec\u06ed\7\u01df\2\2\u06ed\u06ef\5\u0212\u010a\2\u06ee\u06ec\3\2\2"+
		"\2\u06ee\u06ef\3\2\2\2\u06ef\u06f7\3\2\2\2\u06f0\u06f1\7\u0232\2\2\u06f1"+
		"\u06f2\7\23\2\2\u06f2\u06f5\5f\64\2\u06f3\u06f4\7\u0233\2\2\u06f4\u06f6"+
		"\5\u0212\u010a\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f8\3"+
		"\2\2\2\u06f7\u06f0\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8\u0704\3\2\2\2\u06f9"+
		"\u06fa\7\u0409\2\2\u06fa\u06ff\5h\65\2\u06fb\u06fc\7\u040b\2\2\u06fc\u06fe"+
		"\5h\65\2\u06fd\u06fb\3\2\2\2\u06fe\u0701\3\2\2\2\u06ff\u06fd\3\2\2\2\u06ff"+
		"\u0700\3\2\2\2\u0700\u0702\3\2\2\2\u0701\u06ff\3\2\2\2\u0702\u0703\7\u040a"+
		"\2\2\u0703\u0705\3\2\2\2\u0704\u06f9\3\2\2\2\u0704\u0705\3\2\2\2\u0705"+
		"c\3\2\2\2\u0706\u0708\7]\2\2\u0707\u0706\3\2\2\2\u0707\u0708\3\2\2\2\u0708"+
		"\u0709\3\2\2\2\u0709\u070a\7\u0180\2\2\u070a\u070b\7\u0409\2\2\u070b\u070c"+
		"\5\u025c\u012f\2\u070c\u070d\7\u040a\2\2\u070d\u0734\3\2\2\2\u070e\u0710"+
		"\7]\2\2\u070f\u070e\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u0711\3\2\2\2\u0711"+
		"\u0715\7U\2\2\u0712\u0713\7\u011c\2\2\u0713\u0714\7\u0400\2\2\u0714\u0716"+
		"\t\35\2\2\u0715\u0712\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2"+
		"\u0717\u0718\7\u0409\2\2\u0718\u0719\5\u022c\u0117\2\u0719\u071a\7\u040a"+
		"\2\2\u071a\u0734\3\2\2\2\u071b\u0725\7z\2\2\u071c\u071d\7\u0409\2\2\u071d"+
		"\u071e\5\u025c\u012f\2\u071e\u071f\7\u040a\2\2\u071f\u0726\3\2\2\2\u0720"+
		"\u0721\7\u0138\2\2\u0721\u0722\7\u0409\2\2\u0722\u0723\5\u022c\u0117\2"+
		"\u0723\u0724\7\u040a\2\2\u0724\u0726\3\2\2\2\u0725\u071c\3\2\2\2\u0725"+
		"\u0720\3\2\2\2\u0726\u0734\3\2\2\2\u0727\u0731\7\u019b\2\2\u0728\u0729"+
		"\7\u0409\2\2\u0729\u072a\5\u025c\u012f\2\u072a\u072b\7\u040a\2\2\u072b"+
		"\u0732\3\2\2\2\u072c\u072d\7\u0138\2\2\u072d\u072e\7\u0409\2\2\u072e\u072f"+
		"\5\u022c\u0117\2\u072f\u0730\7\u040a\2\2\u0730\u0732\3\2\2\2\u0731\u0728"+
		"\3\2\2\2\u0731\u072c\3\2\2\2\u0732\u0734\3\2\2\2\u0733\u0707\3\2\2\2\u0733"+
		"\u070f\3\2\2\2\u0733\u071b\3\2\2\2\u0733\u0727\3\2\2\2\u0734e\3\2\2\2"+
		"\u0735\u0737\7]\2\2\u0736\u0735\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0738"+
		"\3\2\2\2\u0738\u0739\7\u0180\2\2\u0739\u073a\7\u0409\2\2\u073a\u073b\5"+
		"\u025c\u012f\2\u073b\u073c\7\u040a\2\2\u073c\u074b\3\2\2\2\u073d\u073f"+
		"\7]\2\2\u073e\u073d\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740\3\2\2\2\u0740"+
		"\u0744\7U\2\2\u0741\u0742\7\u011c\2\2\u0742\u0743\7\u0400\2\2\u0743\u0745"+
		"\t\35\2\2\u0744\u0741\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746\3\2\2\2"+
		"\u0746\u0747\7\u0409\2\2\u0747\u0748\5\u022c\u0117\2\u0748\u0749\7\u040a"+
		"\2\2\u0749\u074b\3\2\2\2\u074a\u0736\3\2\2\2\u074a\u073e\3\2\2\2\u074b"+
		"g\3\2\2\2\u074c\u074d\7v\2\2\u074d\u074e\5\u020c\u0107\2\u074e\u074f\7"+
		"\u00ad\2\2\u074f\u0750\7\u0199\2\2\u0750\u0751\7\u023b\2\2\u0751\u0752"+
		"\7\u0409\2\2\u0752\u0757\5j\66\2\u0753\u0754\7\u040b\2\2\u0754\u0756\5"+
		"j\66\2\u0755\u0753\3\2\2\2\u0756\u0759\3\2\2\2\u0757\u0755\3\2\2\2\u0757"+
		"\u0758\3\2\2\2\u0758\u075a\3\2\2\2\u0759\u0757\3\2\2\2\u075a\u075e\7\u040a"+
		"\2\2\u075b\u075d\5p9\2\u075c\u075b\3\2\2\2\u075d\u0760\3\2\2\2\u075e\u075c"+
		"\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0769\3\2\2\2\u0760\u075e\3\2\2\2\u0761"+
		"\u0766\5n8\2\u0762\u0763\7\u040b\2\2\u0763\u0765\5n8\2\u0764\u0762\3\2"+
		"\2\2\u0765\u0768\3\2\2\2\u0766\u0764\3\2\2\2\u0766\u0767\3\2\2\2\u0767"+
		"\u076a\3\2\2\2\u0768\u0766\3\2\2\2\u0769\u0761\3\2\2\2\u0769\u076a\3\2"+
		"\2\2\u076a\u07d0\3\2\2\2\u076b\u076c\7v\2\2\u076c\u076d\5\u020c\u0107"+
		"\2\u076d\u076e\7\u00ad\2\2\u076e\u076f\7\u0199\2\2\u076f\u0770\7\u023b"+
		"\2\2\u0770\u0774\5j\66\2\u0771\u0773\5p9\2\u0772\u0771\3\2\2\2\u0773\u0776"+
		"\3\2\2\2\u0774\u0772\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u077f\3\2\2\2\u0776"+
		"\u0774\3\2\2\2\u0777\u077c\5n8\2\u0778\u0779\7\u040b\2\2\u0779\u077b\5"+
		"n8\2\u077a\u0778\3\2\2\2\u077b\u077e\3\2\2\2\u077c\u077a\3\2\2\2\u077c"+
		"\u077d\3\2\2\2\u077d\u0780\3\2\2\2\u077e\u077c\3\2\2\2\u077f\u0777\3\2"+
		"\2\2\u077f\u0780\3\2\2\2\u0780\u07d0\3\2\2\2\u0781\u0782\7v\2\2\u0782"+
		"\u0783\5\u020c\u0107\2\u0783\u0784\7\u00ad\2\2\u0784\u0785\7J\2\2\u0785"+
		"\u0786\7\u0409\2\2\u0786\u078b\5j\66\2\u0787\u0788\7\u040b\2\2\u0788\u078a"+
		"\5j\66\2\u0789\u0787\3\2\2\2\u078a\u078d\3\2\2\2\u078b\u0789\3\2\2\2\u078b"+
		"\u078c\3\2\2\2\u078c\u078e\3\2\2\2\u078d\u078b\3\2\2\2\u078e\u0792\7\u040a"+
		"\2\2\u078f\u0791\5p9\2\u0790\u078f\3\2\2\2\u0791\u0794\3\2\2\2\u0792\u0790"+
		"\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u079d\3\2\2\2\u0794\u0792\3\2\2\2\u0795"+
		"\u079a\5n8\2\u0796\u0797\7\u040b\2\2\u0797\u0799\5n8\2\u0798\u0796\3\2"+
		"\2\2\u0799\u079c\3\2\2\2\u079a\u0798\3\2\2\2\u079a\u079b\3\2\2\2\u079b"+
		"\u079e\3\2\2\2\u079c\u079a\3\2\2\2\u079d\u0795\3\2\2\2\u079d\u079e\3\2"+
		"\2\2\u079e\u07d0\3\2\2\2\u079f\u07a0\7v\2\2\u07a0\u07a1\5\u020c\u0107"+
		"\2\u07a1\u07a2\7\u00ad\2\2\u07a2\u07a3\7J\2\2\u07a3\u07a4\7\u0409\2\2"+
		"\u07a4\u07a9\5l\67\2\u07a5\u07a6\7\u040b\2\2\u07a6\u07a8\5l\67\2\u07a7"+
		"\u07a5\3\2\2\2\u07a8\u07ab\3\2\2\2\u07a9\u07a7\3\2\2\2\u07a9\u07aa\3\2"+
		"\2\2\u07aa\u07ac\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ac\u07b0\7\u040a\2\2\u07ad"+
		"\u07af\5p9\2\u07ae\u07ad\3\2\2\2\u07af\u07b2\3\2\2\2\u07b0\u07ae\3\2\2"+
		"\2\u07b0\u07b1\3\2\2\2\u07b1\u07bb\3\2\2\2\u07b2\u07b0\3\2\2\2\u07b3\u07b8"+
		"\5n8\2\u07b4\u07b5\7\u040b\2\2\u07b5\u07b7\5n8\2\u07b6\u07b4\3\2\2\2\u07b7"+
		"\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bc\3\2"+
		"\2\2\u07ba\u07b8\3\2\2\2\u07bb\u07b3\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc"+
		"\u07d0\3\2\2\2\u07bd\u07be\7v\2\2\u07be\u07c2\5\u020c\u0107\2\u07bf\u07c1"+
		"\5p9\2\u07c0\u07bf\3\2\2\2\u07c1\u07c4\3\2\2\2\u07c2\u07c0\3\2\2\2\u07c2"+
		"\u07c3\3\2\2\2\u07c3\u07cd\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c5\u07ca\5n"+
		"8\2\u07c6\u07c7\7\u040b\2\2\u07c7\u07c9\5n8\2\u07c8\u07c6\3\2\2\2\u07c9"+
		"\u07cc\3\2\2\2\u07ca\u07c8\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07ce\3\2"+
		"\2\2\u07cc\u07ca\3\2\2\2\u07cd\u07c5\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce"+
		"\u07d0\3\2\2\2\u07cf\u074c\3\2\2\2\u07cf\u076b\3\2\2\2\u07cf\u0781\3\2"+
		"\2\2\u07cf\u079f\3\2\2\2\u07cf\u07bd\3\2\2\2\u07d0i\3\2\2\2\u07d1\u07d5"+
		"\5\u021e\u0110\2\u07d2\u07d5\5\u025c\u012f\2\u07d3\u07d5\7f\2\2\u07d4"+
		"\u07d1\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d4\u07d3\3\2\2\2\u07d5k\3\2\2\2"+
		"\u07d6\u07d7\7\u0409\2\2\u07d7\u07da\5j\66\2\u07d8\u07d9\7\u040b\2\2\u07d9"+
		"\u07db\5j\66\2\u07da\u07d8\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07da\3\2"+
		"\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07df\7\u040a\2\2\u07df"+
		"m\3\2\2\2\u07e0\u07e1\7\u0232\2\2\u07e1\u07e5\5\u020c\u0107\2\u07e2\u07e4"+
		"\5p9\2\u07e3\u07e2\3\2\2\2\u07e4\u07e7\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e5"+
		"\u07e6\3\2\2\2\u07e6o\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e8\u07ea\7\u022d"+
		"\2\2\u07e9\u07e8\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb"+
		"\u07ed\7\u0160\2\2\u07ec\u07ee\7\u0400\2\2\u07ed\u07ec\3\2\2\2\u07ed\u07ee"+
		"\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u0816\5\u0202\u0102\2\u07f0\u07f2\7"+
		"\u013b\2\2\u07f1\u07f3\7\u0400\2\2\u07f2\u07f1\3\2\2\2\u07f2\u07f3\3\2"+
		"\2\2\u07f3\u07f4\3\2\2\2\u07f4\u0816\7\u0418\2\2\u07f5\u07f6\7\u014d\2"+
		"\2\u07f6\u07f8\7\u0154\2\2\u07f7\u07f9\7\u0400\2\2\u07f8\u07f7\3\2\2\2"+
		"\u07f8\u07f9\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u0816\7\u0418\2\2\u07fb"+
		"\u07fc\7K\2\2\u07fc\u07fe\7\u0154\2\2\u07fd\u07ff\7\u0400\2\2\u07fe\u07fd"+
		"\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0816\7\u0418\2"+
		"\2\u0801\u0803\7\u01b6\2\2\u0802\u0804\7\u0400\2\2\u0803\u0802\3\2\2\2"+
		"\u0803\u0804\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0816\5\u0212\u010a\2\u0806"+
		"\u0808\7\u01c0\2\2\u0807\u0809\7\u0400\2\2\u0808\u0807\3\2\2\2\u0808\u0809"+
		"\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u0816\5\u0212\u010a\2\u080b\u080d\7"+
		"\u0238\2\2\u080c\u080e\7\u0400\2\2\u080d\u080c\3\2\2\2\u080d\u080e\3\2"+
		"\2\2\u080e\u080f\3\2\2\2\u080f\u0816\5\u020c\u0107\2\u0810\u0812\7\u01cc"+
		"\2\2\u0811\u0813\7\u0400\2\2\u0812\u0811\3\2\2\2\u0812\u0813\3\2\2\2\u0813"+
		"\u0814\3\2\2\2\u0814\u0816\5\u020c\u0107\2\u0815\u07e9\3\2\2\2\u0815\u07f0"+
		"\3\2\2\2\u0815\u07f5\3\2\2\2\u0815\u07fb\3\2\2\2\u0815\u0801\3\2\2\2\u0815"+
		"\u0806\3\2\2\2\u0815\u080b\3\2\2\2\u0815\u0810\3\2\2\2\u0816q\3\2\2\2"+
		"\u0817\u0818\7\n\2\2\u0818\u081a\t\2\2\2\u0819\u081b\5\u020c\u0107\2\u081a"+
		"\u0819\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081d\3\2\2\2\u081c\u081e\5\62"+
		"\32\2\u081d\u081c\3\2\2\2\u081e\u081f\3\2\2\2\u081f\u081d\3\2\2\2\u081f"+
		"\u0820\3\2\2\2\u0820\u082a\3\2\2\2\u0821\u0822\7\n\2\2\u0822\u0823\t\2"+
		"\2\2\u0823\u0824\5\u020c\u0107\2\u0824\u0825\7\u0247\2\2\u0825\u0826\7"+
		"\u014d\2\2\u0826\u0827\7\u0154\2\2\u0827\u0828\7\u01c6\2\2\u0828\u082a"+
		"\3\2\2\2\u0829\u0817\3\2\2\2\u0829\u0821\3\2\2\2\u082as\3\2\2\2\u082b"+
		"\u082d\7\n\2\2\u082c\u082e\5\64\33\2\u082d\u082c\3\2\2\2\u082d\u082e\3"+
		"\2\2\2\u082e\u082f\3\2\2\2\u082f\u0830\7\u0166\2\2\u0830\u0834\5\u01f2"+
		"\u00fa\2\u0831\u0832\7m\2\2\u0832\u0833\7\u020f\2\2\u0833\u0835\5\66\34"+
		"\2\u0834\u0831\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u083c\3\2\2\2\u0836\u0837"+
		"\7m\2\2\u0837\u0839\7\u013e\2\2\u0838\u083a\7i\2\2\u0839\u0838\3\2\2\2"+
		"\u0839\u083a\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083d\7\u01e8\2\2\u083c"+
		"\u0836\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u0841\3\2\2\2\u083e\u083f\7\u0080"+
		"\2\2\u083f\u0840\7\u00a0\2\2\u0840\u0842\5\u01f2\u00fa\2\u0841\u083e\3"+
		"\2\2\2\u0841\u0842\3\2\2\2\u0842\u0844\3\2\2\2\u0843\u0845\5> \2\u0844"+
		"\u0843\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0848\3\2\2\2\u0846\u0847\7\u013b"+
		"\2\2\u0847\u0849\7\u0418\2\2\u0848\u0846\3\2\2\2\u0848\u0849\3\2\2\2\u0849"+
		"\u084c\3\2\2\2\u084a\u084b\7\u0158\2\2\u084b\u084d\5\u015a\u00ae\2\u084c"+
		"\u084a\3\2\2\2\u084c\u084d\3\2\2\2\u084du\3\2\2\2\u084e\u084f\7\n\2\2"+
		"\u084f\u0850\7\u017a\2\2\u0850\u0854\5\u01f2\u00fa\2\u0851\u0853\5H%\2"+
		"\u0852\u0851\3\2\2\2\u0853\u0856\3\2\2\2\u0854\u0852\3\2\2\2\u0854\u0855"+
		"\3\2\2\2\u0855w\3\2\2\2\u0856\u0854\3\2\2\2\u0857\u0858\7\n\2\2\u0858"+
		"\u0859\7\u018c\2\2\u0859\u085a\7\u020a\2\2\u085a\u085b\7\u02b5\2\2\u085b"+
		"\u085c\7\u019f\2\2\u085c\u085d\7U\2\2\u085dy\3\2\2\2\u085e\u085f\7\n\2"+
		"\2\u085f\u0860\7\u019d\2\2\u0860\u0861\7E\2\2\u0861\u0862\5\u020c\u0107"+
		"\2\u0862\u0863\7\b\2\2\u0863\u0864\7\u0242\2\2\u0864\u086a\7\u0418\2\2"+
		"\u0865\u0867\7\u0188\2\2\u0866\u0868\7\u0400\2\2\u0867\u0866\3\2\2\2\u0867"+
		"\u0868\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086b\5\u0214\u010b\2\u086a\u0865"+
		"\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u086d\3\2\2\2\u086c\u086e\7\u0251\2"+
		"\2\u086d\u086c\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0871"+
		"\7\u0160\2\2\u0870\u0872\7\u0400\2\2\u0871\u0870\3\2\2\2\u0871\u0872\3"+
		"\2\2\2\u0872\u0873\3\2\2\2\u0873\u0874\5\u0202\u0102\2\u0874{\3\2\2\2"+
		"\u0875\u0876\7\n\2\2\u0876\u0877\7x\2\2\u0877\u087b\5\u01f2\u00fa\2\u0878"+
		"\u087a\5H%\2\u0879\u0878\3\2\2\2\u087a\u087d\3\2\2\2\u087b\u0879\3\2\2"+
		"\2\u087b\u087c\3\2\2\2\u087c}\3\2\2\2\u087d\u087b\3\2\2\2\u087e\u087f"+
		"\7\n\2\2\u087f\u0880\7\u0211\2\2\u0880\u0881\5\u020c\u0107\2\u0881\u0882"+
		"\7\u01d8\2\2\u0882\u0883\7\u0409\2\2\u0883\u0888\5J&\2\u0884\u0885\7\u040b"+
		"\2\2\u0885\u0887\5J&\2\u0886\u0884\3\2\2\2\u0887\u088a\3\2\2\2\u0888\u0886"+
		"\3\2\2\2\u0888\u0889\3\2\2\2\u0889\u088b\3\2\2\2\u088a\u0888\3\2\2\2\u088b"+
		"\u088c\7\u040a\2\2\u088c\177\3\2\2\2\u088d\u088f\7\n\2\2\u088e\u0890\t"+
		"\3\2\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0892\3\2\2\2\u0891"+
		"\u0893\7I\2\2\u0892\u0891\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0894\3\2"+
		"\2\2\u0894\u0895\7\u009d\2\2\u0895\u089e\5\u01f4\u00fb\2\u0896\u089b\5"+
		"\u0086D\2\u0897\u0898\7\u040b\2\2\u0898\u089a\5\u0086D\2\u0899\u0897\3"+
		"\2\2\2\u089a\u089d\3\2\2\2\u089b\u0899\3\2\2\2\u089b\u089c\3\2\2\2\u089c"+
		"\u089f\3\2\2\2\u089d\u089b\3\2\2\2\u089e\u0896\3\2\2\2\u089e\u089f\3\2"+
		"\2\2\u089f\u08a1\3\2\2\2\u08a0\u08a2\5b\62\2\u08a1\u08a0\3\2\2\2\u08a1"+
		"\u08a2\3\2\2\2\u08a2\u0081\3\2\2\2\u08a3\u08a4\7\n\2\2\u08a4\u08a5\7\u0238"+
		"\2\2\u08a5\u08a6\5\u020c\u0107\2\u08a6\u08a7\t\36\2\2\u08a7\u08a8\7\u014e"+
		"\2\2\u08a8\u08ac\7\u0418\2\2\u08a9\u08aa\7\u0188\2\2\u08aa\u08ab\7\u0400"+
		"\2\2\u08ab\u08ad\5\u0214\u010b\2\u08ac\u08a9\3\2\2\2\u08ac\u08ad\3\2\2"+
		"\2\u08ad\u08af\3\2\2\2\u08ae\u08b0\7\u0251\2\2\u08af\u08ae\3\2\2\2\u08af"+
		"\u08b0\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b3\7\u0160\2\2\u08b2\u08b4"+
		"\7\u0400\2\2\u08b3\u08b2\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b5\3\2\2"+
		"\2\u08b5\u08b6\5\u0202\u0102\2\u08b6\u0083\3\2\2\2\u08b7\u08bb\7\n\2\2"+
		"\u08b8\u08b9\7\u011c\2\2\u08b9\u08ba\7\u0400\2\2\u08ba\u08bc\t\f\2\2\u08bb"+
		"\u08b8\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08be\3\2\2\2\u08bd\u08bf\5\64"+
		"\33\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c3\3\2\2\2\u08c0"+
		"\u08c1\7\u0092\2\2\u08c1\u08c2\7\u0210\2\2\u08c2\u08c4\t\r\2\2\u08c3\u08c0"+
		"\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\7\u024e\2"+
		"\2\u08c6\u08cb\5\u01f2\u00fa\2\u08c7\u08c8\7\u0409\2\2\u08c8\u08c9\5\u022c"+
		"\u0117\2\u08c9\u08ca\7\u040a\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08c7\3\2\2"+
		"\2\u08cb\u08cc\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce\7\16\2\2\u08ce"+
		"\u08d5\5\u00b4[\2\u08cf\u08d1\7\u00b1\2\2\u08d0\u08d2\t\16\2\2\u08d1\u08d0"+
		"\3\2\2\2\u08d1\u08d2\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\7\32\2\2"+
		"\u08d4\u08d6\7o\2\2\u08d5\u08cf\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u0085"+
		"\3\2\2\2\u08d7\u08de\5^\60\2\u08d8\u08da\7\u040b\2\2\u08d9\u08d8\3\2\2"+
		"\2\u08d9\u08da\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dd\5^\60\2\u08dc\u08d9"+
		"\3\2\2\2\u08dd\u08e0\3\2\2\2\u08de\u08dc\3\2\2\2\u08de\u08df\3\2\2\2\u08df"+
		"\u0a43\3\2\2\2\u08e0\u08de\3\2\2\2\u08e1\u08e3\7\b\2\2\u08e2\u08e4\7\34"+
		"\2\2\u08e3\u08e2\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5"+
		"\u08e6\5\u020c\u0107\2\u08e6\u08ea\5P)\2\u08e7\u08eb\7\u0174\2\2\u08e8"+
		"\u08e9\7\u011a\2\2\u08e9\u08eb\5\u020c\u0107\2\u08ea\u08e7\3\2\2\2\u08ea"+
		"\u08e8\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u0a43\3\2\2\2\u08ec\u08ee\7\b"+
		"\2\2\u08ed\u08ef\7\34\2\2\u08ee\u08ed\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef"+
		"\u08f0\3\2\2\2\u08f0\u08f1\7\u0409\2\2\u08f1\u08f2\5\u020c\u0107\2\u08f2"+
		"\u08f9\5P)\2\u08f3\u08f4\7\u040b\2\2\u08f4\u08f5\5\u020c\u0107\2\u08f5"+
		"\u08f6\5P)\2\u08f6\u08f8\3\2\2\2\u08f7\u08f3\3\2\2\2\u08f8\u08fb\3\2\2"+
		"\2\u08f9\u08f7\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fc\3\2\2\2\u08fb\u08f9"+
		"\3\2\2\2\u08fc\u08fd\7\u040a\2\2\u08fd\u0a43\3\2\2\2\u08fe\u08ff\7\b\2"+
		"\2\u08ff\u0901\t\24\2\2\u0900\u0902\5\u020c\u0107\2\u0901\u0900\3\2\2"+
		"\2\u0901\u0902\3\2\2\2\u0902\u0904\3\2\2\2\u0903\u0905\5@!\2\u0904\u0903"+
		"\3\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u090a\5\u0230\u0119"+
		"\2\u0907\u0909\5B\"\2\u0908\u0907\3\2\2\2\u0909\u090c\3\2\2\2\u090a\u0908"+
		"\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u0a43\3\2\2\2\u090c\u090a\3\2\2\2\u090d"+
		"\u0912\7\b\2\2\u090e\u0910\7\36\2\2\u090f\u0911\5\u020c\u0107\2\u0910"+
		"\u090f\3\2\2\2\u0910\u0911\3\2\2\2\u0911\u0913\3\2\2\2\u0912\u090e\3\2"+
		"\2\2\u0912\u0913\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915\7w\2\2\u0915"+
		"\u0917\7U\2\2\u0916\u0918\5\u020c\u0107\2\u0917\u0916\3\2\2\2\u0917\u0918"+
		"\3\2\2\2\u0918\u091a\3\2\2\2\u0919\u091b\5@!\2\u091a\u0919\3\2\2\2\u091a"+
		"\u091b\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u0920\5\u0230\u0119\2\u091d\u091f"+
		"\5B\"\2\u091e\u091d\3\2\2\2\u091f\u0922\3\2\2\2\u0920\u091e\3\2\2\2\u0920"+
		"\u0921\3\2\2\2\u0921\u0a43\3\2\2\2\u0922\u0920\3\2\2\2\u0923\u0928\7\b"+
		"\2\2\u0924\u0926\7\36\2\2\u0925\u0927\5\u020c\u0107\2\u0926\u0925\3\2"+
		"\2\2\u0926\u0927\3\2\2\2\u0927\u0929\3\2\2\2\u0928\u0924\3\2\2\2\u0928"+
		"\u0929\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092c\7\u00a6\2\2\u092b\u092d"+
		"\t\24\2\2\u092c\u092b\3\2\2\2\u092c\u092d\3\2\2\2\u092d\u092f\3\2\2\2"+
		"\u092e\u0930\5\u020c\u0107\2\u092f\u092e\3\2\2\2\u092f\u0930\3\2\2\2\u0930"+
		"\u0932\3\2\2\2\u0931\u0933\5@!\2\u0932\u0931\3\2\2\2\u0932\u0933\3\2\2"+
		"\2\u0933\u0934\3\2\2\2\u0934\u0938\5\u0230\u0119\2\u0935\u0937\5B\"\2"+
		"\u0936\u0935\3\2\2\2\u0937\u093a\3\2\2\2\u0938\u0936\3\2\2\2\u0938\u0939"+
		"\3\2\2\2\u0939\u0a43\3\2\2\2\u093a\u0938\3\2\2\2\u093b\u093c\7\b\2\2\u093c"+
		"\u093e\t\26\2\2\u093d\u093f\t\24\2\2\u093e\u093d\3\2\2\2\u093e\u093f\3"+
		"\2\2\2\u093f\u0941\3\2\2\2\u0940\u0942\5\u020c\u0107\2\u0941\u0940\3\2"+
		"\2\2\u0941\u0942\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0947\5\u0230\u0119"+
		"\2\u0944\u0946\5B\"\2\u0945\u0944\3\2\2\2\u0946\u0949\3\2\2\2\u0947\u0945"+
		"\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0a43\3\2\2\2\u0949\u0947\3\2\2\2\u094a"+
		"\u094f\7\b\2\2\u094b\u094d\7\36\2\2\u094c\u094e\5\u020c\u0107\2\u094d"+
		"\u094c\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u0950\3\2\2\2\u094f\u094b\3\2"+
		"\2\2\u094f\u0950\3\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\7?\2\2\u0952"+
		"\u0954\7U\2\2\u0953\u0955\5\u020c\u0107\2\u0954\u0953\3\2\2\2\u0954\u0955"+
		"\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u0957\5\u0230\u0119\2\u0957\u0958\5"+
		"V,\2\u0958\u0a43\3\2\2\2\u0959\u095e\7\b\2\2\u095a\u095c\7\36\2\2\u095b"+
		"\u095d\5\u020c\u0107\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095f"+
		"\3\2\2\2\u095e\u095a\3\2\2\2\u095e\u095f\3\2\2\2\u095f\u0960\3\2\2\2\u0960"+
		"\u0961\7\32\2\2\u0961\u0962\7\u0409\2\2\u0962\u0963\5\u025c\u012f\2\u0963"+
		"\u0964\7\u040a\2\2\u0964\u0a43\3\2\2\2\u0965\u0967\7\u011c\2\2\u0966\u0968"+
		"\7\u0400\2\2\u0967\u0966\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0969\3\2\2"+
		"\2\u0969\u0a43\t\5\2\2\u096a\u096c\7\n\2\2\u096b\u096d\7\34\2\2\u096c"+
		"\u096b\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u0974\5\u020c"+
		"\u0107\2\u096f\u0970\7\u008d\2\2\u0970\u0971\7)\2\2\u0971\u0975\5\u023c"+
		"\u011f\2\u0972\u0973\7\62\2\2\u0973\u0975\7)\2\2\u0974\u096f\3\2\2\2\u0974"+
		"\u0972\3\2\2\2\u0975\u0a43\3\2\2\2\u0976\u0978\7\30\2\2\u0977\u0979\7"+
		"\34\2\2\u0978\u0977\3\2\2\2\u0978\u0979\3\2\2\2\u0979\u097a\3\2\2\2\u097a"+
		"\u097b\5\u020c\u0107\2\u097b\u097c\5\u020c\u0107\2\u097c\u0980\5P)\2\u097d"+
		"\u0981\7\u0174\2\2\u097e\u097f\7\u011a\2\2\u097f\u0981\5\u020c\u0107\2"+
		"\u0980\u097d\3\2\2\2\u0980\u097e\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0a43"+
		"\3\2\2\2\u0982\u0983\7\u0080\2\2\u0983\u0984\7\34\2\2\u0984\u0985\5\u020c"+
		"\u0107\2\u0985\u0986\7\u00a0\2\2\u0986\u0987\5\u020c\u0107\2\u0987\u0a43"+
		"\3\2\2\2\u0988\u098a\7`\2\2\u0989\u098b\7\u0400\2\2\u098a\u0989\3\2\2"+
		"\2\u098a\u098b\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u0a43\t\6\2\2\u098d\u098f"+
		"\7\u01c2\2\2\u098e\u0990\7\34\2\2\u098f\u098e\3\2\2\2\u098f\u0990\3\2"+
		"\2\2\u0990\u0991\3\2\2\2\u0991\u0992\5\u020c\u0107\2\u0992\u0996\5P)\2"+
		"\u0993\u0997\7\u0174\2\2\u0994\u0995\7\u011a\2\2\u0995\u0997\5\u020c\u0107"+
		"\2\u0996\u0993\3\2\2\2\u0996\u0994\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0a43"+
		"\3\2\2\2\u0998\u099a\7\62\2\2\u0999\u099b\7\34\2\2\u099a\u0999\3\2\2\2"+
		"\u099a\u099b\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u099e\5\u020c\u0107\2\u099d"+
		"\u099f\7\u0085\2\2\u099e\u099d\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u0a43"+
		"\3\2\2\2\u09a0\u09a1\7\62\2\2\u09a1\u09a2\7w\2\2\u09a2\u0a43\7U\2\2\u09a3"+
		"\u09a4\7\u0080\2\2\u09a4\u09a5\t\24\2\2\u09a5\u09a6\5\u020c\u0107\2\u09a6"+
		"\u09a7\7\u00a0\2\2\u09a7\u09a8\5\u020c\u0107\2\u09a8\u0a43\3\2\2\2\u09a9"+
		"\u09aa\7\n\2\2\u09aa\u09ab\7K\2\2\u09ab\u09ac\5\u020c\u0107\2\u09ac\u09ad"+
		"\t\37\2\2\u09ad\u0a43\3\2\2\2\u09ae\u09af\7\62\2\2\u09af\u09b0\t\24\2"+
		"\2\u09b0\u0a43\5\u020c\u0107\2\u09b1\u09b2\7\62\2\2\u09b2\u09b3\7?\2\2"+
		"\u09b3\u09b4\7U\2\2\u09b4\u0a43\5\u020c\u0107\2\u09b5\u09b6\7\u0155\2"+
		"\2\u09b6\u0a43\7V\2\2\u09b7\u09b8\7\u015c\2\2\u09b8\u0a43\7V\2\2\u09b9"+
		"\u09bb\7\u0080\2\2\u09ba\u09bc\t \2\2\u09bb\u09ba\3\2\2\2\u09bb\u09bc"+
		"\3\2\2\2\u09bc\u09bf\3\2\2\2\u09bd\u09c0\5\u020c\u0107\2\u09be\u09c0\5"+
		"\u01f2\u00fa\2\u09bf\u09bd\3\2\2\2\u09bf\u09be\3\2\2\2\u09c0\u0a43\3\2"+
		"\2\2\u09c1\u09c2\7r\2\2\u09c2\u09c3\7\23\2\2\u09c3\u0a43\5\u022c\u0117"+
		"\2\u09c4\u09c5\7 \2\2\u09c5\u09c6\7\u00a0\2\2\u09c6\u09c7\7\31\2\2\u09c7"+
		"\u09c8\7\u008d\2\2\u09c8\u09cb\5\u01fe\u0100\2\u09c9\u09ca\7\33\2\2\u09ca"+
		"\u09cc\5\u0200\u0101\2\u09cb\u09c9\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u0a43"+
		"\3\2\2\2\u09cd\u09cf\7)\2\2\u09ce\u09cd\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf"+
		"\u09d0\3\2\2\2\u09d0\u09d1\7\31\2\2\u09d1\u09d2\7\u008d\2\2\u09d2\u09d3"+
		"\7\u0400\2\2\u09d3\u09d7\5\u01fe\u0100\2\u09d4\u09d5\7\33\2\2\u09d5\u09d6"+
		"\7\u0400\2\2\u09d6\u09d8\5\u0200\u0101\2\u09d7\u09d4\3\2\2\2\u09d7\u09d8"+
		"\3\2\2\2\u09d8\u0a43\3\2\2\2\u09d9\u09da\7\u0156\2\2\u09da\u0a43\7\u0238"+
		"\2\2\u09db\u09dc\7\u0186\2\2\u09dc\u0a43\7\u0238\2\2\u09dd\u0a43\7>\2"+
		"\2\u09de\u09df\t!\2\2\u09df\u0a43\7\u024b\2\2\u09e0\u09e1\7\b\2\2\u09e1"+
		"\u09e2\7v\2\2\u09e2\u09e3\7\u0409\2\2\u09e3\u09e8\5h\65\2\u09e4\u09e5"+
		"\7\u040b\2\2\u09e5\u09e7\5h\65\2\u09e6\u09e4\3\2\2\2\u09e7\u09ea\3\2\2"+
		"\2\u09e8\u09e6\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09eb\3\2\2\2\u09ea\u09e8"+
		"\3\2\2\2\u09eb\u09ec\7\u040a\2\2\u09ec\u0a43\3\2\2\2\u09ed\u09ee\7\62"+
		"\2\2\u09ee\u09ef\7v\2\2\u09ef\u0a43\5\u022c\u0117\2\u09f0\u09f1\7\u0156"+
		"\2\2\u09f1\u09f4\7v\2\2\u09f2\u09f5\5\u022c\u0117\2\u09f3\u09f5\7\t\2"+
		"\2\u09f4\u09f2\3\2\2\2\u09f4\u09f3\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u0a43"+
		"\7\u0238\2\2\u09f7\u09f8\7\u0186\2\2\u09f8\u09fb\7v\2\2\u09f9\u09fc\5"+
		"\u022c\u0117\2\u09fa\u09fc\7\t\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fa\3\2"+
		"\2\2\u09fc\u09fd\3\2\2\2\u09fd\u0a43\7\u0238\2\2\u09fe\u09ff\7\u0240\2"+
		"\2\u09ff\u0a02\7v\2\2\u0a00\u0a03\5\u022c\u0117\2\u0a01\u0a03\7\t\2\2"+
		"\u0a02\u0a00\3\2\2\2\u0a02\u0a01\3\2\2\2\u0a03\u0a43\3\2\2\2\u0a04\u0a05"+
		"\7\u0136\2\2\u0a05\u0a06\7v\2\2\u0a06\u0a43\5\u0212\u010a\2\u0a07\u0a08"+
		"\7\u01f9\2\2\u0a08\u0a09\7v\2\2\u0a09\u0a0a\5\u022c\u0117\2\u0a0a\u0a0b"+
		"\7Q\2\2\u0a0b\u0a0c\7\u0409\2\2\u0a0c\u0a11\5h\65\2\u0a0d\u0a0e\7\u040b"+
		"\2\2\u0a0e\u0a10\5h\65\2\u0a0f\u0a0d\3\2\2\2\u0a10\u0a13\3\2\2\2\u0a11"+
		"\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a14\3\2\2\2\u0a13\u0a11\3\2"+
		"\2\2\u0a14\u0a15\7\u040a\2\2\u0a15\u0a43\3\2\2\2\u0a16\u0a17\7\u0169\2"+
		"\2\u0a17\u0a18\7v\2\2\u0a18\u0a19\5\u020c\u0107\2\u0a19\u0a1a\7\u00b1"+
		"\2\2\u0a1a\u0a1b\7\u009d\2\2\u0a1b\u0a1e\5\u01f4\u00fb\2\u0a1c\u0a1d\t"+
		"!\2\2\u0a1d\u0a1f\7\u024b\2\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2"+
		"\u0a1f\u0a43\3\2\2\2\u0a20\u0a21\7\f\2\2\u0a21\u0a24\7v\2\2\u0a22\u0a25"+
		"\5\u022c\u0117\2\u0a23\u0a25\7\t\2\2\u0a24\u0a22\3\2\2\2\u0a24\u0a23\3"+
		"\2\2\2\u0a25\u0a43\3\2\2\2\u0a26\u0a27\7\32\2\2\u0a27\u0a2a\7v\2\2\u0a28"+
		"\u0a2b\5\u022c\u0117\2\u0a29\u0a2b\7\t\2\2\u0a2a\u0a28\3\2\2\2\u0a2a\u0a29"+
		"\3\2\2\2\u0a2b\u0a43\3\2\2\2\u0a2c\u0a2d\7n\2\2\u0a2d\u0a30\7v\2\2\u0a2e"+
		"\u0a31\5\u022c\u0117\2\u0a2f\u0a31\7\t\2\2\u0a30\u0a2e\3\2\2\2\u0a30\u0a2f"+
		"\3\2\2\2\u0a31\u0a43\3\2\2\2\u0a32\u0a33\7\u01f0\2\2\u0a33\u0a36\7v\2"+
		"\2\u0a34\u0a37\5\u022c\u0117\2\u0a35\u0a37\7\t\2\2\u0a36\u0a34\3\2\2\2"+
		"\u0a36\u0a35\3\2\2\2\u0a37\u0a43\3\2\2\2\u0a38\u0a39\7\u01fa\2\2\u0a39"+
		"\u0a3c\7v\2\2\u0a3a\u0a3d\5\u022c\u0117\2\u0a3b\u0a3d\7\t\2\2\u0a3c\u0a3a"+
		"\3\2\2\2\u0a3c\u0a3b\3\2\2\2\u0a3d\u0a43\3\2\2\2\u0a3e\u0a3f\7\u01f8\2"+
		"\2\u0a3f\u0a43\7\u01de\2\2\u0a40\u0a41\7\u0247\2\2\u0a41\u0a43\7\u01de"+
		"\2\2\u0a42\u08d7\3\2\2\2\u0a42\u08e1\3\2\2\2\u0a42\u08ec\3\2\2\2\u0a42"+
		"\u08fe\3\2\2\2\u0a42\u090d\3\2\2\2\u0a42\u0923\3\2\2\2\u0a42\u093b\3\2"+
		"\2\2\u0a42\u094a\3\2\2\2\u0a42\u0959\3\2\2\2\u0a42\u0965\3\2\2\2\u0a42"+
		"\u096a\3\2\2\2\u0a42\u0976\3\2\2\2\u0a42\u0982\3\2\2\2\u0a42\u0988\3\2"+
		"\2\2\u0a42\u098d\3\2\2\2\u0a42\u0998\3\2\2\2\u0a42\u09a0\3\2\2\2\u0a42"+
		"\u09a3\3\2\2\2\u0a42\u09a9\3\2\2\2\u0a42\u09ae\3\2\2\2\u0a42\u09b1\3\2"+
		"\2\2\u0a42\u09b5\3\2\2\2\u0a42\u09b7\3\2\2\2\u0a42\u09b9\3\2\2\2\u0a42"+
		"\u09c1\3\2\2\2\u0a42\u09c4\3\2\2\2\u0a42\u09ce\3\2\2\2\u0a42\u09d9\3\2"+
		"\2\2\u0a42\u09db\3\2\2\2\u0a42\u09dd\3\2\2\2\u0a42\u09de\3\2\2\2\u0a42"+
		"\u09e0\3\2\2\2\u0a42\u09ed\3\2\2\2\u0a42\u09f0\3\2\2\2\u0a42\u09f7\3\2"+
		"\2\2\u0a42\u09fe\3\2\2\2\u0a42\u0a04\3\2\2\2\u0a42\u0a07\3\2\2\2\u0a42"+
		"\u0a16\3\2\2\2\u0a42\u0a20\3\2\2\2\u0a42\u0a26\3\2\2\2\u0a42\u0a2c\3\2"+
		"\2\2\u0a42\u0a32\3\2\2\2\u0a42\u0a38\3\2\2\2\u0a42\u0a3e\3\2\2\2\u0a42"+
		"\u0a40\3\2\2\2\u0a43\u0087\3\2\2\2\u0a44\u0a45\7\62\2\2\u0a45\u0a47\t"+
		"\2\2\2\u0a46\u0a48\5\u0242\u0122\2\u0a47\u0a46\3\2\2\2\u0a47\u0a48\3\2"+
		"\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a4a\5\u020c\u0107\2\u0a4a\u0089\3\2\2"+
		"\2\u0a4b\u0a4c\7\62\2\2\u0a4c\u0a4e\7\u0166\2\2\u0a4d\u0a4f\5\u0242\u0122"+
		"\2\u0a4e\u0a4d\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0a51"+
		"\5\u01f2\u00fa\2\u0a51\u008b\3\2\2\2\u0a52\u0a53\7\62\2\2\u0a53\u0a55"+
		"\7K\2\2\u0a54\u0a56\t\3\2\2\u0a55\u0a54\3\2\2\2\u0a55\u0a56\3\2\2\2\u0a56"+
		"\u0a57\3\2\2\2\u0a57\u0a58\5\u020c\u0107\2\u0a58\u0a59\7m\2\2\u0a59\u0a66"+
		"\5\u01f4\u00fb\2\u0a5a\u0a5c\7\u011c\2\2\u0a5b\u0a5d\7\u0400\2\2\u0a5c"+
		"\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e\u0a65\t\5"+
		"\2\2\u0a5f\u0a61\7`\2\2\u0a60\u0a62\7\u0400\2\2\u0a61\u0a60\3\2\2\2\u0a61"+
		"\u0a62\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a65\t\6\2\2\u0a64\u0a5a\3\2"+
		"\2\2\u0a64\u0a5f\3\2\2\2\u0a65\u0a68\3\2\2\2\u0a66\u0a64\3\2\2\2\u0a66"+
		"\u0a67\3\2\2\2\u0a67\u008d\3\2\2\2\u0a68\u0a66\3\2\2\2\u0a69\u0a6a\7\62"+
		"\2\2\u0a6a\u0a6b\7\u019d\2\2\u0a6b\u0a6c\7E\2\2\u0a6c\u0a6d\5\u020c\u0107"+
		"\2\u0a6d\u0a6e\7\u0160\2\2\u0a6e\u0a6f\7\u0400\2\2\u0a6f\u0a70\5\u0202"+
		"\u0102\2\u0a70\u008f\3\2\2\2\u0a71\u0a72\7\62\2\2\u0a72\u0a74\7x\2\2\u0a73"+
		"\u0a75\5\u0242\u0122\2\u0a74\u0a73\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a76"+
		"\3\2\2\2\u0a76\u0a77\5\u01f2\u00fa\2\u0a77\u0091\3\2\2\2\u0a78\u0a79\7"+
		"\62\2\2\u0a79\u0a7b\7\u017a\2\2\u0a7a\u0a7c\5\u0242\u0122\2\u0a7b\u0a7a"+
		"\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a7e\5\u01f2\u00fa"+
		"\2\u0a7e\u0093\3\2\2\2\u0a7f\u0a80\7\62\2\2\u0a80\u0a82\7\u0211\2\2\u0a81"+
		"\u0a83\5\u0242\u0122\2\u0a82\u0a81\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a84"+
		"\3\2\2\2\u0a84\u0a85\5\u020c\u0107\2\u0a85\u0095\3\2\2\2\u0a86\u0a88\7"+
		"\62\2\2\u0a87\u0a89\7\u0239\2\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89\3\2\2"+
		"\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8c\7\u009d\2\2\u0a8b\u0a8d\5\u0242\u0122"+
		"\2\u0a8c\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a90"+
		"\5\u022e\u0118\2\u0a8f\u0a91\t\"\2\2\u0a90\u0a8f\3\2\2\2\u0a90\u0a91\3"+
		"\2\2\2\u0a91\u0097\3\2\2\2\u0a92\u0a93\7\62\2\2\u0a93\u0a94\7\u0238\2"+
		"\2\u0a94\u0a9a\5\u020c\u0107\2\u0a95\u0a97\7\u0160\2\2\u0a96\u0a98\7\u0400"+
		"\2\2\u0a97\u0a96\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99"+
		"\u0a9b\5\u0202\u0102\2\u0a9a\u0a95\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0099"+
		"\3\2\2\2\u0a9c\u0a9d\7\62\2\2\u0a9d\u0a9f\7\u00a2\2\2\u0a9e\u0aa0\5\u0242"+
		"\u0122\2\u0a9f\u0a9e\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1"+
		"\u0aa2\5\u01f2\u00fa\2\u0aa2\u009b\3\2\2\2\u0aa3\u0aa4\7\62\2\2\u0aa4"+
		"\u0aa6\7\u024e\2\2\u0aa5\u0aa7\5\u0242\u0122\2\u0aa6\u0aa5\3\2\2\2\u0aa6"+
		"\u0aa7\3\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aad\5\u01f2\u00fa\2\u0aa9\u0aaa"+
		"\7\u040b\2\2\u0aaa\u0aac\5\u01f2\u00fa\2\u0aab\u0aa9\3\2\2\2\u0aac\u0aaf"+
		"\3\2\2\2\u0aad\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab1\3\2\2\2\u0aaf"+
		"\u0aad\3\2\2\2\u0ab0\u0ab2\t\"\2\2\u0ab1\u0ab0\3\2\2\2\u0ab1\u0ab2\3\2"+
		"\2\2\u0ab2\u009d\3\2\2\2\u0ab3\u0ab4\7\u0080\2\2\u0ab4\u0ab5\7\u009d\2"+
		"\2\u0ab5\u0aba\5\u00a0Q\2\u0ab6\u0ab7\7\u040b\2\2\u0ab7\u0ab9\5\u00a0"+
		"Q\2\u0ab8\u0ab6\3\2\2\2\u0ab9\u0abc\3\2\2\2\u0aba\u0ab8\3\2\2\2\u0aba"+
		"\u0abb\3\2\2\2\u0abb\u009f\3\2\2\2\u0abc\u0aba\3\2\2\2\u0abd\u0abe\5\u01f4"+
		"\u00fb\2\u0abe\u0abf\7\u00a0\2\2\u0abf\u0ac0\5\u01f4\u00fb\2\u0ac0\u00a1"+
		"\3\2\2\2\u0ac1\u0ac3\7\u0240\2\2\u0ac2\u0ac4\7\u009d\2\2\u0ac3\u0ac2\3"+
		"\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac6\5\u01f4\u00fb"+
		"\2\u0ac6\u00a3\3\2\2\2\u0ac7\u0ac8\7\24\2\2\u0ac8\u0acf\5\u01f2\u00fa"+
		"\2\u0ac9\u0acc\7\u0409\2\2\u0aca\u0acd\5\u0236\u011c\2\u0acb\u0acd\5\u0232"+
		"\u011a\2\u0acc\u0aca\3\2\2\2\u0acc\u0acb\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd"+
		"\u0ace\3\2\2\2\u0ace\u0ad0\7\u040a\2\2\u0acf\u0ac9\3\2\2\2\u0acf\u0ad0"+
		"\3\2\2\2\u0ad0\u00a5\3\2\2\2\u0ad1\u0ad4\5\u00c0a\2\u0ad2\u0ad4\5\u00c2"+
		"b\2\u0ad3\u0ad1\3\2\2\2\u0ad3\u0ad2\3\2\2\2\u0ad4\u00a7\3\2\2\2\u0ad5"+
		"\u0ad6\7\u0158\2\2\u0ad6\u0ad7\5\u0232\u011a\2\u0ad7\u00a9\3\2\2\2\u0ad8"+
		"\u0add\5\u00c4c\2\u0ad9\u0add\5\u00c6d\2\u0ada\u0add\5\u00c8e\2\u0adb"+
		"\u0add\5\u00caf\2\u0adc\u0ad8\3\2\2\2\u0adc\u0ad9\3\2\2\2\u0adc\u0ada"+
		"\3\2\2\2\u0adc\u0adb\3\2\2\2\u0add\u00ab\3\2\2\2\u0ade\u0ae0\7O\2\2\u0adf"+
		"\u0ae1\t#\2\2\u0ae0\u0adf\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae3\3\2"+
		"\2\2\u0ae2\u0ae4\7I\2\2\u0ae3\u0ae2\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4"+
		"\u0ae6\3\2\2\2\u0ae5\u0ae7\7Q\2\2\u0ae6\u0ae5\3\2\2\2\u0ae6\u0ae7\3\2"+
		"\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0aef\5\u01f4\u00fb\2\u0ae9\u0aea\7v\2"+
		"\2\u0aea\u0aec\7\u0409\2\2\u0aeb\u0aed\5\u022c\u0117\2\u0aec\u0aeb\3\2"+
		"\2\2\u0aec\u0aed\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0af0\7\u040a\2\2\u0aef"+
		"\u0ae9\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0b01\3\2\2\2\u0af1\u0af2\7\u0409"+
		"\2\2\u0af2\u0af3\5\u022c\u0117\2\u0af3\u0af4\7\u040a\2\2\u0af4\u0af6\3"+
		"\2\2\2\u0af5\u0af1\3\2\2\2\u0af5\u0af6\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7"+
		"\u0b02\5\u00b8]\2\u0af8\u0af9\7\u008d\2\2\u0af9\u0afe\5\u00ba^\2\u0afa"+
		"\u0afb\7\u040b\2\2\u0afb\u0afd\5\u00ba^\2\u0afc\u0afa\3\2\2\2\u0afd\u0b00"+
		"\3\2\2\2\u0afe\u0afc\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b02\3\2\2\2\u0b00"+
		"\u0afe\3\2\2\2\u0b01\u0af5\3\2\2\2\u0b01\u0af8\3\2\2\2\u0b02\u0b0f\3\2"+
		"\2\2\u0b03\u0b04\7m\2\2\u0b04\u0b05\7\u015a\2\2\u0b05\u0b06\7U\2\2\u0b06"+
		"\u0b07\7\u00a9\2\2\u0b07\u0b0c\5\u00ba^\2\u0b08\u0b09\7\u040b\2\2\u0b09"+
		"\u0b0b\5\u00ba^\2\u0b0a\u0b08\3\2\2\2\u0b0b\u0b0e\3\2\2\2\u0b0c\u0b0a"+
		"\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u0b10\3\2\2\2\u0b0e\u0b0c\3\2\2\2\u0b0f"+
		"\u0b03\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u00ad\3\2\2\2\u0b11\u0b12\7_"+
		"\2\2\u0b12\u0b14\7\u014d\2\2\u0b13\u0b15\t$\2\2\u0b14\u0b13\3\2\2\2\u0b14"+
		"\u0b15\3\2\2\2\u0b15\u0b17\3\2\2\2\u0b16\u0b18\7\u019c\2\2\u0b17\u0b16"+
		"\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1a\7L\2\2\u0b1a"+
		"\u0b1c\7\u0418\2\2\u0b1b\u0b1d\t\b\2\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d"+
		"\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f\7Q\2\2\u0b1f\u0b20\7\u009d\2"+
		"\2\u0b20\u0b26\5\u01f4\u00fb\2\u0b21\u0b22\7v\2\2\u0b22\u0b23\7\u0409"+
		"\2\2\u0b23\u0b24\5\u022c\u0117\2\u0b24\u0b25\7\u040a\2\2\u0b25\u0b27\3"+
		"\2\2\2\u0b26\u0b21\3\2\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b2b\3\2\2\2\u0b28"+
		"\u0b29\7\31\2\2\u0b29\u0b2a\7\u008d\2\2\u0b2a\u0b2c\5\u01fe\u0100\2\u0b2b"+
		"\u0b28\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b33\3\2\2\2\u0b2d\u0b2f\t%"+
		"\2\2\u0b2e\u0b30\5\u00f4{\2\u0b2f\u0b2e\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31"+
		"\u0b2f\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b34\3\2\2\2\u0b33\u0b2d\3\2"+
		"\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b3b\3\2\2\2\u0b35\u0b37\7^\2\2\u0b36"+
		"\u0b38\5\u00f6|\2\u0b37\u0b36\3\2\2\2\u0b38\u0b39\3\2\2\2\u0b39\u0b37"+
		"\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3c\3\2\2\2\u0b3b\u0b35\3\2\2\2\u0b3b"+
		"\u0b3c\3\2\2\2\u0b3c\u0b41\3\2\2\2\u0b3d\u0b3e\7I\2\2\u0b3e\u0b3f\5\u0212"+
		"\u010a\2\u0b3f\u0b40\t&\2\2\u0b40\u0b42\3\2\2\2\u0b41\u0b3d\3\2\2\2\u0b41"+
		"\u0b42\3\2\2\2\u0b42\u0b4e\3\2\2\2\u0b43\u0b44\7\u0409\2\2\u0b44\u0b49"+
		"\5\u00bc_\2\u0b45\u0b46\7\u040b\2\2\u0b46\u0b48\5\u00bc_\2\u0b47\u0b45"+
		"\3\2\2\2\u0b48\u0b4b\3\2\2\2\u0b49\u0b47\3\2\2\2\u0b49\u0b4a\3\2\2\2\u0b4a"+
		"\u0b4c\3\2\2\2\u0b4b\u0b49\3\2\2\2\u0b4c\u0b4d\7\u040a\2\2\u0b4d\u0b4f"+
		"\3\2\2\2\u0b4e\u0b43\3\2\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b59\3\2\2\2\u0b50"+
		"\u0b51\7\u008d\2\2\u0b51\u0b56\5\u00ba^\2\u0b52\u0b53\7\u040b\2\2\u0b53"+
		"\u0b55\5\u00ba^\2\u0b54\u0b52\3\2\2\2\u0b55\u0b58\3\2\2\2\u0b56\u0b54"+
		"\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57\u0b5a\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b59"+
		"\u0b50\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a\u00af\3\2\2\2\u0b5b\u0b5c\7_"+
		"\2\2\u0b5c\u0b5e\7\u0258\2\2\u0b5d\u0b5f\t$\2\2\u0b5e\u0b5d\3\2\2\2\u0b5e"+
		"\u0b5f\3\2\2\2\u0b5f\u0b61\3\2\2\2\u0b60\u0b62\7\u019c\2\2\u0b61\u0b60"+
		"\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b64\7L\2\2\u0b64"+
		"\u0b66\7\u0418\2\2\u0b65\u0b67\t\b\2\2\u0b66\u0b65\3\2\2\2\u0b66\u0b67"+
		"\3\2\2\2\u0b67\u0b68\3\2\2\2\u0b68\u0b69\7Q\2\2\u0b69\u0b6a\7\u009d\2"+
		"\2\u0b6a\u0b6e\5\u01f4\u00fb\2\u0b6b\u0b6c\7\31\2\2\u0b6c\u0b6d\7\u008d"+
		"\2\2\u0b6d\u0b6f\5\u01fe\u0100\2\u0b6e\u0b6b\3\2\2\2\u0b6e\u0b6f\3\2\2"+
		"\2\u0b6f\u0b76\3\2\2\2\u0b70\u0b71\7\u020c\2\2\u0b71\u0b72\7\u0184\2\2"+
		"\u0b72\u0b73\7\23\2\2\u0b73\u0b74\7\u0402\2\2\u0b74\u0b75\7\u0418\2\2"+
		"\u0b75\u0b77\7\u0401\2\2\u0b76\u0b70\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77"+
		"\u0b7c\3\2\2\2\u0b78\u0b79\7I\2\2\u0b79\u0b7a\5\u0212\u010a\2\u0b7a\u0b7b"+
		"\t&\2\2\u0b7b\u0b7d\3\2\2\2\u0b7c\u0b78\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d"+
		"\u0b89\3\2\2\2\u0b7e\u0b7f\7\u0409\2\2\u0b7f\u0b84\5\u00bc_\2\u0b80\u0b81"+
		"\7\u040b\2\2\u0b81\u0b83\5\u00bc_\2\u0b82\u0b80\3\2\2\2\u0b83\u0b86\3"+
		"\2\2\2\u0b84\u0b82\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b87\3\2\2\2\u0b86"+
		"\u0b84\3\2\2\2\u0b87\u0b88\7\u040a\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b7e"+
		"\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b94\3\2\2\2\u0b8b\u0b8c\7\u008d\2"+
		"\2\u0b8c\u0b91\5\u00ba^\2\u0b8d\u0b8e\7\u040b\2\2\u0b8e\u0b90\5\u00ba"+
		"^\2\u0b8f\u0b8d\3\2\2\2\u0b90\u0b93\3\2\2\2\u0b91\u0b8f\3\2\2\2\u0b91"+
		"\u0b92\3\2\2\2\u0b92\u0b95\3\2\2\2\u0b93\u0b91\3\2\2\2\u0b94\u0b8b\3\2"+
		"\2\2\u0b94\u0b95\3\2\2\2\u0b95\u00b1\3\2\2\2\u0b96\u0b98\7\u0082\2\2\u0b97"+
		"\u0b99\t\'\2\2\u0b98\u0b97\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0b9b\3\2"+
		"\2\2\u0b9a\u0b9c\7Q\2\2\u0b9b\u0b9a\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c"+
		"\u0b9d\3\2\2\2\u0b9d\u0ba3\5\u01f4\u00fb\2\u0b9e\u0b9f\7v\2\2\u0b9f\u0ba0"+
		"\7\u0409\2\2\u0ba0\u0ba1\5\u022c\u0117\2\u0ba1\u0ba2\7\u040a\2\2\u0ba2"+
		"\u0ba4\3\2\2\2\u0ba3\u0b9e\3\2\2\2\u0ba3\u0ba4\3\2\2\2\u0ba4\u0bb5\3\2"+
		"\2\2\u0ba5\u0ba6\7\u0409\2\2\u0ba6\u0ba7\5\u022c\u0117\2\u0ba7\u0ba8\7"+
		"\u040a\2\2\u0ba8\u0baa\3\2\2\2\u0ba9\u0ba5\3\2\2\2\u0ba9\u0baa\3\2\2\2"+
		"\u0baa\u0bab\3\2\2\2\u0bab\u0bb6\5\u00b8]\2\u0bac\u0bad\7\u008d\2\2\u0bad"+
		"\u0bb2\5\u00ba^\2\u0bae\u0baf\7\u040b\2\2\u0baf\u0bb1\5\u00ba^\2\u0bb0"+
		"\u0bae\3\2\2\2\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb3\3\2"+
		"\2\2\u0bb3\u0bb6\3\2\2\2\u0bb4\u0bb2\3\2\2\2\u0bb5\u0ba9\3\2\2\2\u0bb5"+
		"\u0bac\3\2\2\2\u0bb6\u00b3\3\2\2\2\u0bb7\u0bb9\5\u00e4s\2\u0bb8\u0bba"+
		"\5\u00be`\2\u0bb9\u0bb8\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bef\3\2\2"+
		"\2\u0bbb\u0bbd\5\u00e0q\2\u0bbc\u0bbe\5\u00be`\2\u0bbd\u0bbc\3\2\2\2\u0bbd"+
		"\u0bbe\3\2\2\2\u0bbe\u0bef\3\2\2\2\u0bbf\u0bc1\5\u00e6t\2\u0bc0\u0bc2"+
		"\5\u00eav\2\u0bc1\u0bc0\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0bc1\3\2\2"+
		"\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bcd\3\2\2\2\u0bc5\u0bc7\7\u00a5\2\2\u0bc6"+
		"\u0bc8\t(\2\2\u0bc7\u0bc6\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bcb\3\2"+
		"\2\2\u0bc9\u0bcc\5\u00e4s\2\u0bca\u0bcc\5\u00e0q\2\u0bcb\u0bc9\3\2\2\2"+
		"\u0bcb\u0bca\3\2\2\2\u0bcc\u0bce\3\2\2\2\u0bcd\u0bc5\3\2\2\2\u0bcd\u0bce"+
		"\3\2\2\2\u0bce\u0bd0\3\2\2\2\u0bcf\u0bd1\5\u00d0i\2\u0bd0\u0bcf\3\2\2"+
		"\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd3\3\2\2\2\u0bd2\u0bd4\5\u00fc\177\2\u0bd3"+
		"\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0bd6\3\2\2\2\u0bd5\u0bd7\5\u00be"+
		"`\2\u0bd6\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bef\3\2\2\2\u0bd8"+
		"\u0bda\5\u00e2r\2\u0bd9\u0bdb\5\u00e8u\2\u0bda\u0bd9\3\2\2\2\u0bdb\u0bdc"+
		"\3\2\2\2\u0bdc\u0bda\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0be3\3\2\2\2\u0bde"+
		"\u0be0\7\u00a5\2\2\u0bdf\u0be1\t(\2\2\u0be0\u0bdf\3\2\2\2\u0be0\u0be1"+
		"\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be4\5\u00e0q\2\u0be3\u0bde\3\2\2"+
		"\2\u0be3\u0be4\3\2\2\2\u0be4\u0be6\3\2\2\2\u0be5\u0be7\5\u00d0i\2\u0be6"+
		"\u0be5\3\2\2\2\u0be6\u0be7\3\2\2\2\u0be7\u0be9\3\2\2\2\u0be8\u0bea\5\u00fc"+
		"\177\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0bec\3\2\2\2\u0beb"+
		"\u0bed\5\u00be`\2\u0bec\u0beb\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0bef"+
		"\3\2\2\2\u0bee\u0bb7\3\2\2\2\u0bee\u0bbb\3\2\2\2\u0bee\u0bbf\3\2\2\2\u0bee"+
		"\u0bd8\3\2\2\2\u0bef\u00b5\3\2\2\2\u0bf0\u0bf3\5\u00ccg\2\u0bf1\u0bf3"+
		"\5\u00ceh\2\u0bf2\u0bf0\3\2\2\2\u0bf2\u0bf1\3\2\2\2\u0bf3\u00b7\3\2\2"+
		"\2\u0bf4\u0c07\5\u00b4[\2\u0bf5\u0bf6\t)\2\2\u0bf6\u0bf8\7\u0409\2\2\u0bf7"+
		"\u0bf9\5\u0234\u011b\2\u0bf8\u0bf7\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u0bfa"+
		"\3\2\2\2\u0bfa\u0c03\7\u040a\2\2\u0bfb\u0bfc\7\u040b\2\2\u0bfc\u0bfe\7"+
		"\u0409\2\2\u0bfd\u0bff\5\u0234\u011b\2\u0bfe\u0bfd\3\2\2\2\u0bfe\u0bff"+
		"\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00\u0c02\7\u040a\2\2\u0c01\u0bfb\3\2\2"+
		"\2\u0c02\u0c05\3\2\2\2\u0c03\u0c01\3\2\2\2\u0c03\u0c04\3\2\2\2\u0c04\u0c07"+
		"\3\2\2\2\u0c05\u0c03\3\2\2\2\u0c06\u0bf4\3\2\2\2\u0c06\u0bf5\3\2\2\2\u0c07"+
		"\u00b9\3\2\2\2\u0c08\u0c09\5\u01f6\u00fc\2\u0c09\u0c0c\7\u0400\2\2\u0c0a"+
		"\u0c0d\5\u025c\u012f\2\u0c0b\u0c0d\7)\2\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0b"+
		"\3\2\2\2\u0c0d\u00bb\3\2\2\2\u0c0e\u0c11\5\u020c\u0107\2\u0c0f\u0c11\7"+
		"\u0423\2\2\u0c10\u0c0e\3\2\2\2\u0c10\u0c0f\3\2\2\2\u0c11\u00bd\3\2\2\2"+
		"\u0c12\u0c13\7=\2\2\u0c13\u0c19\7\u00a9\2\2\u0c14\u0c15\7`\2\2\u0c15\u0c16"+
		"\7J\2\2\u0c16\u0c17\7\u0213\2\2\u0c17\u0c19\7\u01c1\2\2\u0c18\u0c12\3"+
		"\2\2\2\u0c18\u0c14\3\2\2\2\u0c19\u00bf\3\2\2\2\u0c1a\u0c1c\7+\2\2\u0c1b"+
		"\u0c1d\7b\2\2\u0c1c\u0c1b\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1f\3\2"+
		"\2\2\u0c1e\u0c20\7\u01ef\2\2\u0c1f\u0c1e\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20"+
		"\u0c22\3\2\2\2\u0c21\u0c23\7I\2\2\u0c22\u0c21\3\2\2\2\u0c22\u0c23\3\2"+
		"\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25\7@\2\2\u0c25\u0c2b\5\u01f4\u00fb"+
		"\2\u0c26\u0c27\7v\2\2\u0c27\u0c28\7\u0409\2\2\u0c28\u0c29\5\u022c\u0117"+
		"\2\u0c29\u0c2a\7\u040a\2\2\u0c2a\u0c2c\3\2\2\2\u0c2b\u0c26\3\2\2\2\u0c2b"+
		"\u0c2c\3\2\2\2\u0c2c\u0c2f\3\2\2\2\u0c2d\u0c2e\7\u00af\2\2\u0c2e\u0c30"+
		"\5\u025c\u012f\2\u0c2f\u0c2d\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c32\3"+
		"\2\2\2\u0c31\u0c33\5\u00d0i\2\u0c32\u0c31\3\2\2\2\u0c32\u0c33\3\2\2\2"+
		"\u0c33\u0c36\3\2\2\2\u0c34\u0c35\7\\\2\2\u0c35\u0c37\5\u00fe\u0080\2\u0c36"+
		"\u0c34\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u00c1\3\2\2\2\u0c38\u0c3a\7+"+
		"\2\2\u0c39\u0c3b\7b\2\2\u0c3a\u0c39\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b"+
		"\u0c3d\3\2\2\2\u0c3c\u0c3e\7\u01ef\2\2\u0c3d\u0c3c\3\2\2\2\u0c3d\u0c3e"+
		"\3\2\2\2\u0c3e\u0c40\3\2\2\2\u0c3f\u0c41\7I\2\2\u0c40\u0c3f\3\2\2\2\u0c40"+
		"\u0c41\3\2\2\2\u0c41\u0c69\3\2\2\2\u0c42\u0c45\5\u01f4\u00fb\2\u0c43\u0c44"+
		"\7\u0408\2\2\u0c44\u0c46\7\u03f7\2\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46\3"+
		"\2\2\2\u0c46\u0c4f\3\2\2\2\u0c47\u0c48\7\u040b\2\2\u0c48\u0c4b\5\u01f4"+
		"\u00fb\2\u0c49\u0c4a\7\u0408\2\2\u0c4a\u0c4c\7\u03f7\2\2\u0c4b\u0c49\3"+
		"\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c4e\3\2\2\2\u0c4d\u0c47\3\2\2\2\u0c4e"+
		"\u0c51\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c4f\u0c50\3\2\2\2\u0c50\u0c52\3\2"+
		"\2\2\u0c51\u0c4f\3\2\2\2\u0c52\u0c53\7@\2\2\u0c53\u0c54\5\u00d4k\2\u0c54"+
		"\u0c6a\3\2\2\2\u0c55\u0c56\7@\2\2\u0c56\u0c59\5\u01f4\u00fb\2\u0c57\u0c58"+
		"\7\u0408\2\2\u0c58\u0c5a\7\u03f7\2\2\u0c59\u0c57\3\2\2\2\u0c59\u0c5a\3"+
		"\2\2\2\u0c5a\u0c63\3\2\2\2\u0c5b\u0c5c\7\u040b\2\2\u0c5c\u0c5f\5\u01f4"+
		"\u00fb\2\u0c5d\u0c5e\7\u0408\2\2\u0c5e\u0c60\7\u03f7\2\2\u0c5f\u0c5d\3"+
		"\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c62\3\2\2\2\u0c61\u0c5b\3\2\2\2\u0c62"+
		"\u0c65\3\2\2\2\u0c63\u0c61\3\2\2\2\u0c63\u0c64\3\2\2\2\u0c64\u0c66\3\2"+
		"\2\2\u0c65\u0c63\3\2\2\2\u0c66\u0c67\7\u00ac\2\2\u0c67\u0c68\5\u00d4k"+
		"\2\u0c68\u0c6a\3\2\2\2\u0c69\u0c42\3\2\2\2\u0c69\u0c55\3\2\2\2\u0c6a\u0c6d"+
		"\3\2\2\2\u0c6b\u0c6c\7\u00af\2\2\u0c6c\u0c6e\5\u025c\u012f\2\u0c6d\u0c6b"+
		"\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u00c3\3\2\2\2\u0c6f\u0c70\7\u017f\2"+
		"\2\u0c70\u0c71\5\u01f4\u00fb\2\u0c71\u0c76\7\u01d6\2\2\u0c72\u0c74\7\16"+
		"\2\2\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75"+
		"\u0c77\5\u020c\u0107\2\u0c76\u0c73\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u00c5"+
		"\3\2\2\2\u0c78\u0c79\7\u017f\2\2\u0c79\u0c7a\5\u01f4\u00fb\2\u0c7a\u0c7b"+
		"\7{\2\2\u0c7b\u0c82\5\u020c\u0107\2\u0c7c\u0c7d\5\u0264\u0133\2\u0c7d"+
		"\u0c7e\7\u0409\2\2\u0c7e\u0c7f\5\u0236\u011c\2\u0c7f\u0c80\7\u040a\2\2"+
		"\u0c80\u0c83\3\2\2\2\u0c81\u0c83\t*\2\2\u0c82\u0c7c\3\2\2\2\u0c82\u0c81"+
		"\3\2\2\2\u0c83\u0c86\3\2\2\2\u0c84\u0c85\7\u00af\2\2\u0c85\u0c87\5\u025c"+
		"\u012f\2\u0c86\u0c84\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c8a\3\2\2\2\u0c88"+
		"\u0c89\7\\\2\2\u0c89\u0c8b\5\u00fe\u0080\2\u0c8a\u0c88\3\2\2\2\u0c8a\u0c8b"+
		"\3\2\2\2\u0c8b\u00c7\3\2\2\2\u0c8c\u0c8d\7\u017f\2\2\u0c8d\u0c8e\5\u01f4"+
		"\u00fb\2\u0c8e\u0c8f\7{\2\2\u0c8f\u0c92\t+\2\2\u0c90\u0c91\7\u00af\2\2"+
		"\u0c91\u0c93\5\u025c\u012f\2\u0c92\u0c90\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93"+
		"\u0c96\3\2\2\2\u0c94\u0c95\7\\\2\2\u0c95\u0c97\5\u00fe\u0080\2\u0c96\u0c94"+
		"\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u00c9\3\2\2\2\u0c98\u0c99\7\u017f\2"+
		"\2\u0c99\u0c9a\5\u01f4\u00fb\2\u0c9a\u0c9b\7\u0135\2\2\u0c9b\u00cb\3\2"+
		"\2\2\u0c9c\u0c9e\7\u00a9\2\2\u0c9d\u0c9f\7b\2\2\u0c9e\u0c9d\3\2\2\2\u0c9e"+
		"\u0c9f\3\2\2\2\u0c9f\u0ca1\3\2\2\2\u0ca0\u0ca2\7I\2\2\u0ca1\u0ca0\3\2"+
		"\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca8\5\u01f4\u00fb"+
		"\2\u0ca4\u0ca6\7\16\2\2\u0ca5\u0ca4\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6"+
		"\u0ca7\3\2\2\2\u0ca7\u0ca9\5\u020c\u0107\2\u0ca8\u0ca5\3\2\2\2\u0ca8\u0ca9"+
		"\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa\u0cab\7\u008d\2\2\u0cab\u0cb0\5\u00ba"+
		"^\2\u0cac\u0cad\7\u040b\2\2\u0cad\u0caf\5\u00ba^\2\u0cae\u0cac\3\2\2\2"+
		"\u0caf\u0cb2\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cb5"+
		"\3\2\2\2\u0cb2\u0cb0\3\2\2\2\u0cb3\u0cb4\7\u00af\2\2\u0cb4\u0cb6\5\u025c"+
		"\u012f\2\u0cb5\u0cb3\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb8\3\2\2\2\u0cb7"+
		"\u0cb9\5\u00d0i\2\u0cb8\u0cb7\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cbb"+
		"\3\2\2\2\u0cba\u0cbc\5\u00fc\177\2\u0cbb\u0cba\3\2\2\2\u0cbb\u0cbc\3\2"+
		"\2\2\u0cbc\u00cd\3\2\2\2\u0cbd\u0cbf\7\u00a9\2\2\u0cbe\u0cc0\7b\2\2\u0cbf"+
		"\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cc2\3\2\2\2\u0cc1\u0cc3\7I"+
		"\2\2\u0cc2\u0cc1\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4"+
		"\u0cc5\5\u00d4k\2\u0cc5\u0cc6\7\u008d\2\2\u0cc6\u0ccb\5\u00ba^\2\u0cc7"+
		"\u0cc8\7\u040b\2\2\u0cc8\u0cca\5\u00ba^\2\u0cc9\u0cc7\3\2\2\2\u0cca\u0ccd"+
		"\3\2\2\2\u0ccb\u0cc9\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0cd0\3\2\2\2\u0ccd"+
		"\u0ccb\3\2\2\2\u0cce\u0ccf\7\u00af\2\2\u0ccf\u0cd1\5\u025c\u012f\2\u0cd0"+
		"\u0cce\3\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1\u00cf\3\2\2\2\u0cd2\u0cd3\7r"+
		"\2\2\u0cd3\u0cd4\7\23\2\2\u0cd4\u0cd9\5\u00d2j\2\u0cd5\u0cd6\7\u040b\2"+
		"\2\u0cd6\u0cd8\5\u00d2j\2\u0cd7\u0cd5\3\2\2\2\u0cd8\u0cdb\3\2\2\2\u0cd9"+
		"\u0cd7\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u00d1\3\2\2\2\u0cdb\u0cd9\3\2"+
		"\2\2\u0cdc\u0cde\5\u025c\u012f\2\u0cdd\u0cdf\t,\2\2\u0cde\u0cdd\3\2\2"+
		"\2\u0cde\u0cdf\3\2\2\2\u0cdf\u00d3\3\2\2\2\u0ce0\u0ce5\5\u00d6l\2\u0ce1"+
		"\u0ce2\7\u040b\2\2\u0ce2\u0ce4\5\u00d6l\2\u0ce3\u0ce1\3\2\2\2\u0ce4\u0ce7"+
		"\3\2\2\2\u0ce5\u0ce3\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u00d5\3\2\2\2\u0ce7"+
		"\u0ce5\3\2\2\2\u0ce8\u0cec\5\u00d8m\2\u0ce9\u0ceb\5\u00dep\2\u0cea\u0ce9"+
		"\3\2\2\2\u0ceb\u0cee\3\2\2\2\u0cec\u0cea\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced"+
		"\u0cfa\3\2\2\2\u0cee\u0cec\3\2\2\2\u0cef\u0cf0\7\u0409\2\2\u0cf0\u0cf4"+
		"\5\u00d8m\2\u0cf1\u0cf3\5\u00dep\2\u0cf2\u0cf1\3\2\2\2\u0cf3\u0cf6\3\2"+
		"\2\2\u0cf4\u0cf2\3\2\2\2\u0cf4\u0cf5\3\2\2\2\u0cf5\u0cf7\3\2\2\2\u0cf6"+
		"\u0cf4\3\2\2\2\u0cf7\u0cf8\7\u040a\2\2\u0cf8\u0cfa\3\2\2\2\u0cf9\u0ce8"+
		"\3\2\2\2\u0cf9\u0cef\3\2\2\2\u0cfa\u00d7\3\2\2\2\u0cfb\u0d01\5\u01f4\u00fb"+
		"\2\u0cfc\u0cfd\7v\2\2\u0cfd\u0cfe\7\u0409\2\2\u0cfe\u0cff\5\u022c\u0117"+
		"\2\u0cff\u0d00\7\u040a\2\2\u0d00\u0d02\3\2\2\2\u0d01\u0cfc\3\2\2\2\u0d01"+
		"\u0d02\3\2\2\2\u0d02\u0d07\3\2\2\2\u0d03\u0d05\7\16\2\2\u0d04\u0d03\3"+
		"\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d08\5\u020c\u0107"+
		"\2\u0d07\u0d04\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d11\3\2\2\2\u0d09\u0d0e"+
		"\5\u00dan\2\u0d0a\u0d0b\7\u040b\2\2\u0d0b\u0d0d\5\u00dan\2\u0d0c\u0d0a"+
		"\3\2\2\2\u0d0d\u0d10\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f"+
		"\u0d12\3\2\2\2\u0d10\u0d0e\3\2\2\2\u0d11\u0d09\3\2\2\2\u0d11\u0d12\3\2"+
		"\2\2\u0d12\u0d24\3\2\2\2\u0d13\u0d19\5\u00b4[\2\u0d14\u0d15\7\u0409\2"+
		"\2\u0d15\u0d16\5\u00b4[\2\u0d16\u0d17\7\u040a\2\2\u0d17\u0d19\3\2\2\2"+
		"\u0d18\u0d13\3\2\2\2\u0d18\u0d14\3\2\2\2\u0d19\u0d1b\3\2\2\2\u0d1a\u0d1c"+
		"\7\16\2\2\u0d1b\u0d1a\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c\u0d1d\3\2\2\2"+
		"\u0d1d\u0d1e\5\u020c\u0107\2\u0d1e\u0d24\3\2\2\2\u0d1f\u0d20\7\u0409\2"+
		"\2\u0d20\u0d21\5\u00d4k\2\u0d21\u0d22\7\u040a\2\2\u0d22\u0d24\3\2\2\2"+
		"\u0d23\u0cfb\3\2\2\2\u0d23\u0d18\3\2\2\2\u0d23\u0d1f\3\2\2\2\u0d24\u00d9"+
		"\3\2\2\2\u0d25\u0d26\t-\2\2\u0d26\u0d29\t\24\2\2\u0d27\u0d28\7=\2\2\u0d28"+
		"\u0d2a\5\u00dco\2\u0d29\u0d27\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0d2b"+
		"\3\2\2\2\u0d2b\u0d2c\7\u0409\2\2\u0d2c\u0d2d\5\u022c\u0117\2\u0d2d\u0d2e"+
		"\7\u040a\2\2\u0d2e\u00db\3\2\2\2\u0d2f\u0d35\7T\2\2\u0d30\u0d31\7r\2\2"+
		"\u0d31\u0d35\7\23\2\2\u0d32\u0d33\7E\2\2\u0d33\u0d35\7\23\2\2\u0d34\u0d2f"+
		"\3\2\2\2\u0d34\u0d30\3\2\2\2\u0d34\u0d32\3\2\2\2\u0d35\u00dd\3\2\2\2\u0d36"+
		"\u0d38\t.\2\2\u0d37\u0d36\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d39\3\2"+
		"\2\2\u0d39\u0d3a\7T\2\2\u0d3a\u0d42\5\u00d8m\2\u0d3b\u0d3c\7m\2\2\u0d3c"+
		"\u0d43\5\u025c\u012f\2\u0d3d\u0d3e\7\u00ac\2\2\u0d3e\u0d3f\7\u0409\2\2"+
		"\u0d3f\u0d40\5\u022c\u0117\2\u0d40\u0d41\7\u040a\2\2\u0d41\u0d43\3\2\2"+
		"\2\u0d42\u0d3b\3\2\2\2\u0d42\u0d3d\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d63"+
		"\3\2\2\2\u0d44\u0d45\7\u009c\2\2\u0d45\u0d48\5\u00d8m\2\u0d46\u0d47\7"+
		"m\2\2\u0d47\u0d49\5\u025c\u012f\2\u0d48\u0d46\3\2\2\2\u0d48\u0d49\3\2"+
		"\2\2\u0d49\u0d63\3\2\2\2\u0d4a\u0d4c\t/\2\2\u0d4b\u0d4d\7t\2\2\u0d4c\u0d4b"+
		"\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u0d4f\7T\2\2\u0d4f"+
		"\u0d57\5\u00d8m\2\u0d50\u0d51\7m\2\2\u0d51\u0d58\5\u025c\u012f\2\u0d52"+
		"\u0d53\7\u00ac\2\2\u0d53\u0d54\7\u0409\2\2\u0d54\u0d55\5\u022c\u0117\2"+
		"\u0d55\u0d56\7\u040a\2\2\u0d56\u0d58\3\2\2\2\u0d57\u0d50\3\2\2\2\u0d57"+
		"\u0d52\3\2\2\2\u0d58\u0d63\3\2\2\2\u0d59\u0d5e\7h\2\2\u0d5a\u0d5c\t/\2"+
		"\2\u0d5b\u0d5d\7t\2\2\u0d5c\u0d5b\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5f"+
		"\3\2\2\2\u0d5e\u0d5a\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60"+
		"\u0d61\7T\2\2\u0d61\u0d63\5\u00d8m\2\u0d62\u0d37\3\2\2\2\u0d62\u0d44\3"+
		"\2\2\2\u0d62\u0d4a\3\2\2\2\u0d62\u0d59\3\2\2\2\u0d63\u00df\3\2\2\2\u0d64"+
		"\u0d65\7\u0409\2\2\u0d65\u0d66\5\u00e4s\2\u0d66\u0d67\7\u040a\2\2\u0d67"+
		"\u0d6d\3\2\2\2\u0d68\u0d69\7\u0409\2\2\u0d69\u0d6a\5\u00e0q\2\u0d6a\u0d6b"+
		"\7\u040a\2\2\u0d6b\u0d6d\3\2\2\2\u0d6c\u0d64\3\2\2\2\u0d6c\u0d68\3\2\2"+
		"\2\u0d6d\u00e1\3\2\2\2\u0d6e\u0d6f\7\u0409\2\2\u0d6f\u0d70\5\u00e6t\2"+
		"\u0d70\u0d71\7\u040a\2\2\u0d71\u0d77\3\2\2\2\u0d72\u0d73\7\u0409\2\2\u0d73"+
		"\u0d74\5\u00e2r\2\u0d74\u0d75\7\u040a\2\2\u0d75\u0d77\3\2\2\2\u0d76\u0d6e"+
		"\3\2\2\2\u0d76\u0d72\3\2\2\2\u0d77\u00e3\3\2\2\2\u0d78\u0d7c\7\u008c\2"+
		"\2\u0d79\u0d7b\5\u00ecw\2\u0d7a\u0d79\3\2\2\2\u0d7b\u0d7e\3\2\2\2\u0d7c"+
		"\u0d7a\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7f\3\2\2\2\u0d7e\u0d7c\3\2"+
		"\2\2\u0d7f\u0d81\5\u00eex\2\u0d80\u0d82\5\u00f2z\2\u0d81\u0d80\3\2\2\2"+
		"\u0d81\u0d82\3\2\2\2\u0d82\u0d84\3\2\2\2\u0d83\u0d85\5\u00f8}\2\u0d84"+
		"\u0d83\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d87\3\2\2\2\u0d86\u0d88\5\u00d0"+
		"i\2\u0d87\u0d86\3\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0d8a\3\2\2\2\u0d89"+
		"\u0d8b\5\u00fc\177\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b\u0da1"+
		"\3\2\2\2\u0d8c\u0d90\7\u008c\2\2\u0d8d\u0d8f\5\u00ecw\2\u0d8e\u0d8d\3"+
		"\2\2\2\u0d8f\u0d92\3\2\2\2\u0d90\u0d8e\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91"+
		"\u0d93\3\2\2\2\u0d92\u0d90\3\2\2\2\u0d93\u0d95\5\u00eex\2\u0d94\u0d96"+
		"\5\u00f8}\2\u0d95\u0d94\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d98\3\2\2"+
		"\2\u0d97\u0d99\5\u00d0i\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99"+
		"\u0d9b\3\2\2\2\u0d9a\u0d9c\5\u00fc\177\2\u0d9b\u0d9a\3\2\2\2\u0d9b\u0d9c"+
		"\3\2\2\2\u0d9c\u0d9e\3\2\2\2\u0d9d\u0d9f\5\u00f2z\2\u0d9e\u0d9d\3\2\2"+
		"\2\u0d9e\u0d9f\3\2\2\2\u0d9f\u0da1\3\2\2\2\u0da0\u0d78\3\2\2\2\u0da0\u0d8c"+
		"\3\2\2\2\u0da1\u00e5\3\2\2\2\u0da2\u0da6\7\u008c\2\2\u0da3\u0da5\5\u00ec"+
		"w\2\u0da4\u0da3\3\2\2\2\u0da5\u0da8\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da6"+
		"\u0da7\3\2\2\2\u0da7\u0da9\3\2\2\2\u0da8\u0da6\3\2\2\2\u0da9\u0dab\5\u00ee"+
		"x\2\u0daa\u0dac\5\u00f8}\2\u0dab\u0daa\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac"+
		"\u0dae\3\2\2\2\u0dad\u0daf\5\u00d0i\2\u0dae\u0dad\3\2\2\2\u0dae\u0daf"+
		"\3\2\2\2\u0daf\u0db1\3\2\2\2\u0db0\u0db2\5\u00fc\177\2\u0db1\u0db0\3\2"+
		"\2\2\u0db1\u0db2\3\2\2\2\u0db2\u00e7\3\2\2\2\u0db3\u0db5\7\u00a5\2\2\u0db4"+
		"\u0db6\t(\2\2\u0db5\u0db4\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u0db7\3\2"+
		"\2\2\u0db7\u0db8\5\u00e2r\2\u0db8\u00e9\3\2\2\2\u0db9\u0dbb\7\u00a5\2"+
		"\2\u0dba\u0dbc\t(\2\2\u0dbb\u0dba\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dbf"+
		"\3\2\2\2\u0dbd\u0dc0\5\u00e6t\2\u0dbe\u0dc0\5\u00e2r\2\u0dbf\u0dbd\3\2"+
		"\2\2\u0dbf\u0dbe\3\2\2\2\u0dc0\u00eb\3\2\2\2\u0dc1\u0dca\t\60\2\2\u0dc2"+
		"\u0dca\7G\2\2\u0dc3\u0dca\7\u009c\2\2\u0dc4\u0dca\7\u0098\2\2\u0dc5\u0dca"+
		"\7\u0096\2\2\u0dc6\u0dca\7\u0222\2\2\u0dc7\u0dca\t\61\2\2\u0dc8\u0dca"+
		"\7\u0097\2\2\u0dc9\u0dc1\3\2\2\2\u0dc9\u0dc2\3\2\2\2\u0dc9\u0dc3\3\2\2"+
		"\2\u0dc9\u0dc4\3\2\2\2\u0dc9\u0dc5\3\2\2\2\u0dc9\u0dc6\3\2\2\2\u0dc9\u0dc7"+
		"\3\2\2\2\u0dc9\u0dc8\3\2\2\2\u0dca\u00ed\3\2\2\2\u0dcb\u0dce\7\u03f7\2"+
		"\2\u0dcc\u0dce\5\u00f0y\2\u0dcd\u0dcb\3\2\2\2\u0dcd\u0dcc\3\2\2\2\u0dce"+
		"\u0dd3\3\2\2\2\u0dcf\u0dd0\7\u040b\2\2\u0dd0\u0dd2\5\u00f0y\2\u0dd1\u0dcf"+
		"\3\2\2\2\u0dd2\u0dd5\3\2\2\2\u0dd3\u0dd1\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4"+
		"\u00ef\3\2\2\2\u0dd5\u0dd3\3\2\2\2\u0dd6\u0dd7\5\u01f2\u00fa\2\u0dd7\u0dd8"+
		"\7\u0408\2\2\u0dd8\u0dd9\7\u03f7\2\2\u0dd9\u0df4\3\2\2\2\u0dda\u0ddf\5"+
		"\u01f6\u00fc\2\u0ddb\u0ddd\7\16\2\2\u0ddc\u0ddb\3\2\2\2\u0ddc\u0ddd\3"+
		"\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0de0\5\u020c\u0107\2\u0ddf\u0ddc\3\2"+
		"\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0df4\3\2\2\2\u0de1\u0de6\5\u0246\u0124"+
		"\2\u0de2\u0de4\7\16\2\2\u0de3\u0de2\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4"+
		"\u0de5\3\2\2\2\u0de5\u0de7\5\u020c\u0107\2\u0de6\u0de3\3\2\2\2\u0de6\u0de7"+
		"\3\2\2\2\u0de7\u0df4\3\2\2\2\u0de8\u0de9\7\u0423\2\2\u0de9\u0deb\7\u03ee"+
		"\2\2\u0dea\u0de8\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0dec\3\2\2\2\u0dec"+
		"\u0df1\5\u025c\u012f\2\u0ded\u0def\7\16\2\2\u0dee\u0ded\3\2\2\2\u0dee"+
		"\u0def\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df2\5\u020c\u0107\2\u0df1\u0dee"+
		"\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u0df4\3\2\2\2\u0df3\u0dd6\3\2\2\2\u0df3"+
		"\u0dda\3\2\2\2\u0df3\u0de1\3\2\2\2\u0df3\u0dea\3\2\2\2\u0df4\u00f1\3\2"+
		"\2\2\u0df5\u0df6\7Q\2\2\u0df6\u0dfb\5\u00bc_\2\u0df7\u0df8\7\u040b\2\2"+
		"\u0df8\u0dfa\5\u00bc_\2\u0df9\u0df7\3\2\2\2\u0dfa\u0dfd\3\2\2\2\u0dfb"+
		"\u0df9\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0e1a\3\2\2\2\u0dfd\u0dfb\3\2"+
		"\2\2\u0dfe\u0dff\7Q\2\2\u0dff\u0e00\7\u0159\2\2\u0e00\u0e1a\7\u0418\2"+
		"\2\u0e01\u0e02\7Q\2\2\u0e02\u0e03\7u\2\2\u0e03\u0e07\7\u0418\2\2\u0e04"+
		"\u0e05\7\31\2\2\u0e05\u0e06\7\u008d\2\2\u0e06\u0e08\5\u01fe\u0100\2\u0e07"+
		"\u0e04\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e0f\3\2\2\2\u0e09\u0e0b\t%"+
		"\2\2\u0e0a\u0e0c\5\u00f4{\2\u0e0b\u0e0a\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d"+
		"\u0e0b\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e\u0e10\3\2\2\2\u0e0f\u0e09\3\2"+
		"\2\2\u0e0f\u0e10\3\2\2\2\u0e10\u0e17\3\2\2\2\u0e11\u0e13\7^\2\2\u0e12"+
		"\u0e14\5\u00f6|\2\u0e13\u0e12\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e13"+
		"\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e18\3\2\2\2\u0e17\u0e11\3\2\2\2\u0e17"+
		"\u0e18\3\2\2\2\u0e18\u0e1a\3\2\2\2\u0e19\u0df5\3\2\2\2\u0e19\u0dfe\3\2"+
		"\2\2\u0e19\u0e01\3\2\2\2\u0e1a\u00f3\3\2\2\2\u0e1b\u0e1c\7\u009e\2\2\u0e1c"+
		"\u0e1d\7\23\2\2\u0e1d\u0e28\7\u0418\2\2\u0e1e\u0e20\7p\2\2\u0e1f\u0e1e"+
		"\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e22\7\66\2\2"+
		"\u0e22\u0e23\7\23\2\2\u0e23\u0e28\7\u0418\2\2\u0e24\u0e25\7\67\2\2\u0e25"+
		"\u0e26\7\23\2\2\u0e26\u0e28\7\u0418\2\2\u0e27\u0e1b\3\2\2\2\u0e27\u0e1f"+
		"\3\2\2\2\u0e27\u0e24\3\2\2\2\u0e28\u00f5\3\2\2\2\u0e29\u0e2a\7\u009b\2"+
		"\2\u0e2a\u0e2b\7\23\2\2\u0e2b\u0e30\7\u0418\2\2\u0e2c\u0e2d\7\u009e\2"+
		"\2\u0e2d\u0e2e\7\23\2\2\u0e2e\u0e30\7\u0418\2\2\u0e2f\u0e29\3\2\2\2\u0e2f"+
		"\u0e2c\3\2\2\2\u0e30\u00f7\3\2\2\2\u0e31\u0e32\7@\2\2\u0e32\u0e35\5\u00d4"+
		"k\2\u0e33\u0e34\7\u00af\2\2\u0e34\u0e36\5\u025c\u012f\2\u0e35\u0e33\3"+
		"\2\2\2\u0e35\u0e36\3\2\2\2\u0e36\u0e45\3\2\2\2\u0e37\u0e38\7E\2\2\u0e38"+
		"\u0e39\7\23\2\2\u0e39\u0e3e\5\u00fa~\2\u0e3a\u0e3b\7\u040b\2\2\u0e3b\u0e3d"+
		"\5\u00fa~\2\u0e3c\u0e3a\3\2\2\2\u0e3d\u0e40\3\2\2\2\u0e3e\u0e3c\3\2\2"+
		"\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e43\3\2\2\2\u0e40\u0e3e\3\2\2\2\u0e41\u0e42"+
		"\7\u00b1\2\2\u0e42\u0e44\7\u0209\2\2\u0e43\u0e41\3\2\2\2\u0e43\u0e44\3"+
		"\2\2\2\u0e44\u0e46\3\2\2\2\u0e45\u0e37\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46"+
		"\u0e49\3\2\2\2\u0e47\u0e48\7F\2\2\u0e48\u0e4a\5\u025c\u012f\2\u0e49\u0e47"+
		"\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a\u00f9\3\2\2\2\u0e4b\u0e4d\5\u025c\u012f"+
		"\2\u0e4c\u0e4e\t,\2\2\u0e4d\u0e4c\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u00fb"+
		"\3\2\2\2\u0e4f\u0e5a\7\\\2\2\u0e50\u0e51\5\u00fe\u0080\2\u0e51\u0e52\7"+
		"\u040b\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e50\3\2\2\2\u0e53\u0e54\3\2\2\2"+
		"\u0e54\u0e55\3\2\2\2\u0e55\u0e5b\5\u00fe\u0080\2\u0e56\u0e57\5\u00fe\u0080"+
		"\2\u0e57\u0e58\7\u01cf\2\2\u0e58\u0e59\5\u00fe\u0080\2\u0e59\u0e5b\3\2"+
		"\2\2\u0e5a\u0e53\3\2\2\2\u0e5a\u0e56\3\2\2\2\u0e5b\u00fd\3\2\2\2\u0e5c"+
		"\u0e5f\5\u0212\u010a\2\u0e5d\u0e5f\5\u01fc\u00ff\2\u0e5e\u0e5c\3\2\2\2"+
		"\u0e5e\u0e5d\3\2\2\2\u0e5f\u00ff\3\2\2\2\u0e60\u0e61\7\u0226\2\2\u0e61"+
		"\u0e6a\7\u023d\2\2\u0e62\u0e67\5\u0116\u008c\2\u0e63\u0e64\7\u040b\2\2"+
		"\u0e64\u0e66\5\u0116\u008c\2\u0e65\u0e63\3\2\2\2\u0e66\u0e69\3\2\2\2\u0e67"+
		"\u0e65\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0e6b\3\2\2\2\u0e69\u0e67\3\2"+
		"\2\2\u0e6a\u0e62\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0101\3\2\2\2\u0e6c"+
		"\u0e6e\7\u0124\2\2\u0e6d\u0e6f\7\u0254\2\2\u0e6e\u0e6d\3\2\2\2\u0e6e\u0e6f"+
		"\3\2\2\2\u0e6f\u0103\3\2\2\2\u0e70\u0e72\7\u013c\2\2\u0e71\u0e73\7\u0254"+
		"\2\2\u0e72\u0e71\3\2\2\2\u0e72\u0e73\3\2\2\2\u0e73\u0e79\3\2\2\2\u0e74"+
		"\u0e76\7\r\2\2\u0e75\u0e77\7\u01cb\2\2\u0e76\u0e75\3\2\2\2\u0e76\u0e77"+
		"\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0e7a\7\u012d\2\2\u0e79\u0e74\3\2\2"+
		"\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7f\3\2\2\2\u0e7b\u0e7d\7\u01cb\2\2\u0e7c"+
		"\u0e7b\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u0e80\7\177"+
		"\2\2\u0e7f\u0e7c\3\2\2\2\u0e7f\u0e80\3\2\2\2\u0e80\u0105\3\2\2\2\u0e81"+
		"\u0e83\7\u0208\2\2\u0e82\u0e84\7\u0254\2\2\u0e83\u0e82\3\2\2\2\u0e83\u0e84"+
		"\3\2\2\2\u0e84\u0e8a\3\2\2\2\u0e85\u0e87\7\r\2\2\u0e86\u0e88\7\u01cb\2"+
		"\2\u0e87\u0e86\3\2\2\2\u0e87\u0e88\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0e8b"+
		"\7\u012d\2\2\u0e8a\u0e85\3\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e90\3\2\2"+
		"\2\u0e8c\u0e8e\7\u01cb\2\2\u0e8d\u0e8c\3\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e"+
		"\u0e8f\3\2\2\2\u0e8f\u0e91\7\177\2\2\u0e90\u0e8d\3\2\2\2\u0e90\u0e91\3"+
		"\2\2\2\u0e91\u0107\3\2\2\2\u0e92\u0e93\7\u020e\2\2\u0e93\u0e94\5\u020c"+
		"\u0107\2\u0e94\u0109\3\2\2\2\u0e95\u0e97\7\u0208\2\2\u0e96\u0e98\7\u0254"+
		"\2\2\u0e97\u0e96\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0e99\3\2\2\2\u0e99"+
		"\u0e9b\7\u00a0\2\2\u0e9a\u0e9c\7\u020e\2\2\u0e9b\u0e9a\3\2\2\2\u0e9b\u0e9c"+
		"\3\2\2\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0e9e\5\u020c\u0107\2\u0e9e\u010b\3"+
		"\2\2\2\u0e9f\u0ea0\7\177\2\2\u0ea0\u0ea1\7\u020e\2\2\u0ea1\u0ea2\5\u020c"+
		"\u0107\2\u0ea2\u010d\3\2\2\2\u0ea3\u0ea4\7`\2\2\u0ea4\u0ea5\7\u0266\2"+
		"\2\u0ea5\u0eaa\5\u0118\u008d\2\u0ea6\u0ea7\7\u040b\2\2\u0ea7\u0ea9\5\u0118"+
		"\u008d\2\u0ea8\u0ea6\3\2\2\2\u0ea9\u0eac\3\2\2\2\u0eaa\u0ea8\3\2\2\2\u0eaa"+
		"\u0eab\3\2\2\2\u0eab\u010f\3\2\2\2\u0eac\u0eaa\3\2\2\2\u0ead\u0eae\7\u00a7"+
		"\2\2\u0eae\u0eaf\7\u0266\2\2\u0eaf\u0111\3\2\2\2\u0eb0\u0eb1\7\u008d\2"+
		"\2\u0eb1\u0eb2\7\u0120\2\2\u0eb2\u0eb3\7\u0400\2\2\u0eb3\u0eb4\t\30\2"+
		"\2\u0eb4\u0113\3\2\2\2\u0eb5\u0eb7\7\u008d\2\2\u0eb6\u0eb8\t\62\2\2\u0eb7"+
		"\u0eb6\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0eba\7\u023d"+
		"\2\2\u0eba\u0ebf\5\u011c\u008f\2\u0ebb\u0ebc\7\u040b\2\2\u0ebc\u0ebe\5"+
		"\u011c\u008f\2\u0ebd\u0ebb\3\2\2\2\u0ebe\u0ec1\3\2\2\2\u0ebf\u0ebd\3\2"+
		"\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0115\3\2\2\2\u0ec1\u0ebf\3\2\2\2\u0ec2"+
		"\u0ec3\7\u00b1\2\2\u0ec3\u0ec4\7\u0143\2\2\u0ec4\u0eca\7\u0219\2\2\u0ec5"+
		"\u0ec6\7{\2\2\u0ec6\u0eca\7\u00b2\2\2\u0ec7\u0ec8\7{\2\2\u0ec8\u0eca\7"+
		"\u01d5\2\2\u0ec9\u0ec2\3\2\2\2\u0ec9\u0ec5\3\2\2\2\u0ec9\u0ec7\3\2\2\2"+
		"\u0eca\u0117\3\2\2\2\u0ecb\u0ed0\5\u01f4\u00fb\2\u0ecc\u0ece\7\16\2\2"+
		"\u0ecd\u0ecc\3\2\2\2\u0ecd\u0ece\3\2\2\2\u0ece\u0ecf\3\2\2\2\u0ecf\u0ed1"+
		"\5\u020c\u0107\2\u0ed0\u0ecd\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed2\3"+
		"\2\2\2\u0ed2\u0ed3\5\u011a\u008e\2\u0ed3\u0119\3\2\2\2\u0ed4\u0ed6\7{"+
		"\2\2\u0ed5\u0ed7\7\u019c\2\2\u0ed6\u0ed5\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7"+
		"\u0edd\3\2\2\2\u0ed8\u0eda\7b\2\2\u0ed9\u0ed8\3\2\2\2\u0ed9\u0eda\3\2"+
		"\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0edd\7\u00b2\2\2\u0edc\u0ed4\3\2\2\2\u0edc"+
		"\u0ed9\3\2\2\2\u0edd\u011b\3\2\2\2\u0ede\u0edf\7\u0192\2\2\u0edf\u0ee0"+
		"\7\u019a\2\2\u0ee0\u0ee6\5\u011e\u0090\2\u0ee1\u0ee2\7{\2\2\u0ee2\u0ee6"+
		"\7\u00b2\2\2\u0ee3\u0ee4\7{\2\2\u0ee4\u0ee6\7\u01d5\2\2\u0ee5\u0ede\3"+
		"\2\2\2\u0ee5\u0ee1\3\2\2\2\u0ee5\u0ee3\3\2\2\2\u0ee6\u011d\3\2\2\2\u0ee7"+
		"\u0ee8\7\u02bd\2\2\u0ee8\u0eef\7{\2\2\u0ee9\u0eea\7{\2\2\u0eea\u0eef\7"+
		"\u02be\2\2\u0eeb\u0eec\7{\2\2\u0eec\u0eef\7\u02bf\2\2\u0eed\u0eef\7\u02c0"+
		"\2\2\u0eee\u0ee7\3\2\2\2\u0eee\u0ee9\3\2\2\2\u0eee\u0eeb\3\2\2\2\u0eee"+
		"\u0eed\3\2\2\2\u0eef\u011f\3\2\2\2\u0ef0\u0ef1\7\30\2\2\u0ef1\u0ef2\7"+
		"\u019f\2\2\u0ef2\u0ef3\7\u00a0\2\2\u0ef3\u0ef8\5\u0132\u009a\2\u0ef4\u0ef5"+
		"\7\u040b\2\2\u0ef5\u0ef7\5\u0132\u009a\2\u0ef6\u0ef4\3\2\2\2\u0ef7\u0efa"+
		"\3\2\2\2\u0ef8\u0ef6\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efc\3\2\2\2\u0efa"+
		"\u0ef8\3\2\2\2\u0efb\u0efd\5\u013a\u009e\2\u0efc\u0efb\3\2\2\2\u0efc\u0efd"+
		"\3\2\2\2\u0efd\u0121\3\2\2\2\u0efe\u0eff\7\30\2\2\u0eff\u0f00\7\u0202"+
		"\2\2\u0f00\u0f01\7\u0173\2\2\u0f01\u0f06\5\u013c\u009f\2\u0f02\u0f03\7"+
		"\u040b\2\2\u0f03\u0f05\5\u013c\u009f\2\u0f04\u0f02\3\2\2\2\u0f05\u0f08"+
		"\3\2\2\2\u0f06\u0f04\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0123\3\2\2\2\u0f08"+
		"\u0f06\3\2\2\2\u0f09\u0f0a\7y\2\2\u0f0a\u0f0b\t\63\2\2\u0f0b\u0f10\7\u019e"+
		"\2\2\u0f0c\u0f0d\7\u00a0\2\2\u0f0d\u0f11\7\u0418\2\2\u0f0e\u0f0f\7\20"+
		"\2\2\u0f0f\u0f11\7\u0418\2\2\u0f10\u0f0c\3\2\2\2\u0f10\u0f0e\3\2\2\2\u0f11"+
		"\u0125\3\2\2\2\u0f12\u0f13\7\u0203\2\2\u0f13\u0f14\7\u019f\2\2\u0f14\u0127"+
		"\3\2\2\2\u0f15\u0f16\7\u0203\2\2\u0f16\u0f18\7\u0217\2\2\u0f17\u0f19\7"+
		"\t\2\2\u0f18\u0f17\3\2\2\2\u0f18\u0f19\3\2\2\2\u0f19\u0f1b\3\2\2\2\u0f1a"+
		"\u0f1c\5\u013a\u009e\2\u0f1b\u0f1a\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0129"+
		"\3\2\2\2\u0f1d\u0f1e\7\u0226\2\2\u0f1e\u0f27\7\u0217\2\2\u0f1f\u0f24\5"+
		"\u0140\u00a1\2\u0f20\u0f21\7\u040b\2\2\u0f21\u0f23\5\u0140\u00a1\2\u0f22"+
		"\u0f20\3\2\2\2\u0f23\u0f26\3\2\2\2\u0f24\u0f22\3\2\2\2\u0f24\u0f25\3\2"+
		"\2\2\u0f25\u0f28\3\2\2\2\u0f26\u0f24\3\2\2\2\u0f27\u0f1f\3\2\2\2\u0f27"+
		"\u0f28\3\2\2\2\u0f28\u0f2b\3\2\2\2\u0f29\u0f2a\7\u0246\2\2\u0f2a\u0f2c"+
		"\5\u0142\u00a2\2\u0f2b\u0f29\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f30\3"+
		"\2\2\2\u0f2d\u0f2f\5\u0144\u00a3\2\u0f2e\u0f2d\3\2\2\2\u0f2f\u0f32\3\2"+
		"\2\2\u0f30\u0f2e\3\2\2\2\u0f30\u0f31\3\2\2\2\u0f31\u0f34\3\2\2\2\u0f32"+
		"\u0f30\3\2\2\2\u0f33\u0f35\5\u013a\u009e\2\u0f34\u0f33\3\2\2\2\u0f34\u0f35"+
		"\3\2\2\2\u0f35\u012b\3\2\2\2\u0f36\u0f37\7\u022c\2\2\u0f37\u0f40\7\u0217"+
		"\2\2\u0f38\u0f3d\5\u0140\u00a1\2\u0f39\u0f3a\7\u040b\2\2\u0f3a\u0f3c\5"+
		"\u0140\u00a1\2\u0f3b\u0f39\3\2\2\2\u0f3c\u0f3f\3\2\2\2\u0f3d\u0f3b\3\2"+
		"\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f41\3\2\2\2\u0f3f\u0f3d\3\2\2\2\u0f40"+
		"\u0f38\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41\u012d\3\2\2\2\u0f42\u0f43\7\u0226"+
		"\2\2\u0f43\u0f44\7\u017e\2\2\u0f44\u012f\3\2\2\2\u0f45\u0f46\7\u022c\2"+
		"\2\u0f46\u0f47\7\u017e\2\2\u0f47\u0131\3\2\2\2\u0f48\u0f49\5\u0134\u009b"+
		"\2\u0f49\u0f4a\7\u0400\2\2\u0f4a\u0f4b\7\u0418\2\2\u0f4b\u0f66\3\2\2\2"+
		"\u0f4c\u0f4d\5\u0136\u009c\2\u0f4d\u0f4e\7\u0400\2\2\u0f4e\u0f4f\5\u0212"+
		"\u010a\2\u0f4f\u0f66\3\2\2\2\u0f50\u0f51\5\u0138\u009d\2\u0f51\u0f52\7"+
		"\u0400\2\2\u0f52\u0f53\t\30\2\2\u0f53\u0f66\3\2\2\2\u0f54\u0f55\7\u01a3"+
		"\2\2\u0f55\u0f56\7\u0400\2\2\u0f56\u0f66\7\u041b\2\2\u0f57\u0f58\7\u0185"+
		"\2\2\u0f58\u0f59\7\u0400\2\2\u0f59\u0f62\7\u0409\2\2\u0f5a\u0f5f\5\u020c"+
		"\u0107\2\u0f5b\u0f5c\7\u040b\2\2\u0f5c\u0f5e\5\u020c\u0107\2\u0f5d\u0f5b"+
		"\3\2\2\2\u0f5e\u0f61\3\2\2\2\u0f5f\u0f5d\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60"+
		"\u0f63\3\2\2\2\u0f61\u0f5f\3\2\2\2\u0f62\u0f5a\3\2\2\2\u0f62\u0f63\3\2"+
		"\2\2\u0f63\u0f64\3\2\2\2\u0f64\u0f66\7\u040a\2\2\u0f65\u0f48\3\2\2\2\u0f65"+
		"\u0f4c\3\2\2\2\u0f65\u0f50\3\2\2\2\u0f65\u0f54\3\2\2\2\u0f65\u0f57\3\2"+
		"\2\2\u0f66\u0133\3\2\2\2\u0f67\u0f68\t\64\2\2\u0f68\u0135\3\2\2\2\u0f69"+
		"\u0f6a\t\65\2\2\u0f6a\u0137\3\2\2\2\u0f6b\u0f6c\t\66\2\2\u0f6c\u0139\3"+
		"\2\2\2\u0f6d\u0f6e\7=\2\2\u0f6e\u0f6f\7\u012f\2\2\u0f6f\u0f70\7\u0418"+
		"\2\2\u0f70\u013b\3\2\2\2\u0f71\u0f72\7\u01fb\2\2\u0f72\u0f73\7\u0400\2"+
		"\2\u0f73\u0f74\7\u0409\2\2\u0f74\u0f75\5\u022c\u0117\2\u0f75\u0f76\7\u040a"+
		"\2\2\u0f76\u0fa3\3\2\2\2\u0f77\u0f78\7\u01fd\2\2\u0f78\u0f79\7\u0400\2"+
		"\2\u0f79\u0f7a\7\u0409\2\2\u0f7a\u0f7b\5\u022c\u0117\2\u0f7b\u0f7c\7\u040a"+
		"\2\2\u0f7c\u0fa3\3\2\2\2\u0f7d\u0f7e\7\u01fc\2\2\u0f7e\u0f7f\7\u0400\2"+
		"\2\u0f7f\u0f80\7\u0409\2\2\u0f80\u0f81\5\u022e\u0118\2\u0f81\u0f82\7\u040a"+
		"\2\2\u0f82\u0fa3\3\2\2\2\u0f83\u0f84\7\u01fe\2\2\u0f84\u0f85\7\u0400\2"+
		"\2\u0f85\u0f86\7\u0409\2\2\u0f86\u0f87\5\u022e\u0118\2\u0f87\u0f88\7\u040a"+
		"\2\2\u0f88\u0fa3\3\2\2\2\u0f89\u0f8a\7\u0200\2\2\u0f8a\u0f8b\7\u0400\2"+
		"\2\u0f8b\u0f8c\7\u0409\2\2\u0f8c\u0f8d\5\u0238\u011d\2\u0f8d\u0f8e\7\u040a"+
		"\2\2\u0f8e\u0fa3\3\2\2\2\u0f8f\u0f90\7\u0201\2\2\u0f90\u0f91\7\u0400\2"+
		"\2\u0f91\u0f92\7\u0409\2\2\u0f92\u0f93\5\u0238\u011d\2\u0f93\u0f94\7\u040a"+
		"\2\2\u0f94\u0fa3\3\2\2\2\u0f95\u0f96\7\u01ff\2\2\u0f96\u0f97\7\u0400\2"+
		"\2\u0f97\u0f98\7\u0409\2\2\u0f98\u0f9d\5\u013e\u00a0\2\u0f99\u0f9a\7\u040b"+
		"\2\2\u0f9a\u0f9c\5\u013e\u00a0\2\u0f9b\u0f99\3\2\2\2\u0f9c\u0f9f\3\2\2"+
		"\2\u0f9d\u0f9b\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0fa0\3\2\2\2\u0f9f\u0f9d"+
		"\3\2\2\2\u0fa0\u0fa1\7\u040a\2\2\u0fa1\u0fa3\3\2\2\2\u0fa2\u0f71\3\2\2"+
		"\2\u0fa2\u0f77\3\2\2\2\u0fa2\u0f7d\3\2\2\2\u0fa2\u0f83\3\2\2\2\u0fa2\u0f89"+
		"\3\2\2\2\u0fa2\u0f8f\3\2\2\2\u0fa2\u0f95\3\2\2\2\u0fa3\u013d\3\2\2\2\u0fa4"+
		"\u0fa5\7\u0409\2\2\u0fa5\u0fa6\5\u01f4\u00fb\2\u0fa6\u0fa7\7\u040b\2\2"+
		"\u0fa7\u0fa8\5\u01f4\u00fb\2\u0fa8\u0fa9\7\u040a\2\2\u0fa9\u013f\3\2\2"+
		"\2\u0faa\u0fab\t\67\2\2\u0fab\u0141\3\2\2\2\u0fac\u0fad\t8\2\2\u0fad\u0fae"+
		"\7\u0400\2\2\u0fae\u0fbf\5\u0146\u00a4\2\u0faf\u0fb0\7\u01a5\2\2\u0fb0"+
		"\u0fb1\7\u0400\2\2\u0fb1\u0fb2\7\u0418\2\2\u0fb2\u0fb3\7\u040b\2\2\u0fb3"+
		"\u0fb4\7\u01a6\2\2\u0fb4\u0fb5\7\u0400\2\2\u0fb5\u0fbf\5\u0212\u010a\2"+
		"\u0fb6\u0fb7\7\u01f5\2\2\u0fb7\u0fb8\7\u0400\2\2\u0fb8\u0fb9\7\u0418\2"+
		"\2\u0fb9\u0fba\7\u040b\2\2\u0fba\u0fbb\7\u01f6\2\2\u0fbb\u0fbc\7\u0400"+
		"\2\2\u0fbc\u0fbf\5\u0212\u010a\2\u0fbd\u0fbf\7\u0220\2\2\u0fbe\u0fac\3"+
		"\2\2\2\u0fbe\u0faf\3\2\2\2\u0fbe\u0fb6\3\2\2\2\u0fbe\u0fbd\3\2\2\2\u0fbf"+
		"\u0143\3\2\2\2\u0fc0\u0fc1\7\u0248\2\2\u0fc1\u0fc2\7\u0400\2\2\u0fc2\u0fcd"+
		"\7\u0418\2\2\u0fc3\u0fc4\7\u01e0\2\2\u0fc4\u0fc5\7\u0400\2\2\u0fc5\u0fcd"+
		"\7\u0418\2\2\u0fc6\u0fc7\7\u0150\2\2\u0fc7\u0fc8\7\u0400\2\2\u0fc8\u0fcd"+
		"\7\u0418\2\2\u0fc9\u0fca\7\u01e3\2\2\u0fca\u0fcb\7\u0400\2\2\u0fcb\u0fcd"+
		"\7\u0418\2\2\u0fcc\u0fc0\3\2\2\2\u0fcc\u0fc3\3\2\2\2\u0fcc\u0fc6\3\2\2"+
		"\2\u0fcc\u0fc9\3\2\2\2\u0fcd\u0145\3\2\2\2\u0fce\u0fd3\5\u0204\u0103\2"+
		"\u0fcf\u0fd0\7\u040b\2\2\u0fd0\u0fd2\5\u0204\u0103\2\u0fd1\u0fcf\3\2\2"+
		"\2\u0fd2\u0fd5\3\2\2\2\u0fd3\u0fd1\3\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd8"+
		"\3\2\2\2\u0fd5\u0fd3\3\2\2\2\u0fd6\u0fd8\7\u0418\2\2\u0fd7\u0fce\3\2\2"+
		"\2\u0fd7\u0fd6\3\2\2\2\u0fd8\u0147\3\2\2\2\u0fd9\u0fda\7\u0257\2\2\u0fda"+
		"\u0fdb\t9\2\2\u0fdb\u0fdd\5\u0206\u0104\2\u0fdc\u0fde\t:\2\2\u0fdd\u0fdc"+
		"\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde\u0149\3\2\2\2\u0fdf\u0fe0\7\u0257\2"+
		"\2\u0fe0\u0fe1\7\u015e\2\2\u0fe1\u0fe7\5\u0206\u0104\2\u0fe2\u0fe5\7\u0234"+
		"\2\2\u0fe3\u0fe4\7=\2\2\u0fe4\u0fe6\7\u01bf\2\2\u0fe5\u0fe3\3\2\2\2\u0fe5"+
		"\u0fe6\3\2\2\2\u0fe6\u0fe8\3\2\2\2\u0fe7\u0fe2\3\2\2\2\u0fe7\u0fe8\3\2"+
		"\2\2\u0fe8\u014b\3\2\2\2\u0fe9\u0fea\7\u0257\2\2\u0fea\u0feb\7\u01e7\2"+
		"\2\u0feb\u0fec\5\u0206\u0104\2\u0fec\u014d\3\2\2\2\u0fed\u0fee\7\u0257"+
		"\2\2\u0fee\u0fef\7\u013c\2\2\u0fef\u0ff2\5\u0206\u0104\2\u0ff0\u0ff1\7"+
		"\u01d3\2\2\u0ff1\u0ff3\7\u01e1\2\2\u0ff2\u0ff0\3\2\2\2\u0ff2\u0ff3\3\2"+
		"\2\2\u0ff3\u014f\3\2\2\2\u0ff4\u0ff5\7\u0257\2\2\u0ff5\u0ff6\7\u0208\2"+
		"\2\u0ff6\u0ff7\5\u0206\u0104\2\u0ff7\u0151\3\2\2\2\u0ff8\u0ff9\7\u0257"+
		"\2\2\u0ff9\u0ffc\7\u01f1\2\2\u0ffa\u0ffb\7 \2\2\u0ffb\u0ffd\5\u0206\u0104"+
		"\2\u0ffc\u0ffa\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd\u0153\3\2\2\2\u0ffe\u0fff"+
		"\7\u01e7\2\2\u0fff\u1000\5\u020c\u0107\2\u1000\u1003\7@\2\2\u1001\u1004"+
		"\7\u0418\2\2\u1002\u1004\7\u0423\2\2\u1003\u1001\3\2\2\2\u1003\u1002\3"+
		"\2\2\2\u1004\u0155\3\2\2\2\u1005\u1006\7\u0268\2\2\u1006\u1009\5\u020c"+
		"\u0107\2\u1007\u1008\7\u00ac\2\2\u1008\u100a\5\u023a\u011e\2\u1009\u1007"+
		"\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u0157\3\2\2\2\u100b\u100c\t;\2\2\u100c"+
		"\u100d\7\u01e7\2\2\u100d\u100e\5\u020c\u0107\2\u100e\u0159\3\2\2\2\u100f"+
		"\u1012\5\u015c\u00af\2\u1010\u1012\5\6\4\2\u1011\u100f\3\2\2\2\u1011\u1010"+
		"\3\2\2\2\u1012\u015b\3\2\2\2\u1013\u1014\5\u020c\u0107\2\u1014\u1015\7"+
		"\u0414\2\2\u1015\u1017\3\2\2\2\u1016\u1013\3\2\2\2\u1016\u1017\3\2\2\2"+
		"\u1017\u1018\3\2\2\2\u1018\u101e\7\u0124\2\2\u1019\u101a\5\u0170\u00b9"+
		"\2\u101a\u101b\7\u040c\2\2\u101b\u101d\3\2\2\2\u101c\u1019\3\2\2\2\u101d"+
		"\u1020\3\2\2\2\u101e\u101c\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u1026\3\2"+
		"\2\2\u1020\u101e\3\2\2\2\u1021\u1022\5\u0172\u00ba\2\u1022\u1023\7\u040c"+
		"\2\2\u1023\u1025\3\2\2\2\u1024\u1021\3\2\2\2\u1025\u1028\3\2\2\2\u1026"+
		"\u1024\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u102e\3\2\2\2\u1028\u1026\3\2"+
		"\2\2\u1029\u102a\5\u0174\u00bb\2\u102a\u102b\7\u040c\2\2\u102b\u102d\3"+
		"\2\2\2\u102c\u1029\3\2\2\2\u102d\u1030\3\2\2\2\u102e\u102c\3\2\2\2\u102e"+
		"\u102f\3\2\2\2\u102f\u1036\3\2\2\2\u1030\u102e\3\2\2\2\u1031\u1032\5\u0176"+
		"\u00bc\2\u1032\u1033\7\u040c\2\2\u1033\u1035\3\2\2\2\u1034\u1031\3\2\2"+
		"\2\u1035\u1038\3\2\2\2\u1036\u1034\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u103c"+
		"\3\2\2\2\u1038\u1036\3\2\2\2\u1039\u103b\5\u017a\u00be\2\u103a\u1039\3"+
		"\2\2\2\u103b\u103e\3\2\2\2\u103c\u103a\3\2\2\2\u103c\u103d\3\2\2\2\u103d"+
		"\u103f\3\2\2\2\u103e\u103c\3\2\2\2\u103f\u1041\7\u015e\2\2\u1040\u1042"+
		"\5\u020c\u0107\2\u1041\u1040\3\2\2\2\u1041\u1042\3\2\2\2\u1042\u015d\3"+
		"\2\2\2\u1043\u1046\7\26\2\2\u1044\u1047\5\u020c\u0107\2\u1045\u1047\5"+
		"\u025c\u012f\2\u1046\u1044\3\2\2\2\u1046\u1045\3\2\2\2\u1046\u1047\3\2"+
		"\2\2\u1047\u1049\3\2\2\2\u1048\u104a\5\u017c\u00bf\2\u1049\u1048\3\2\2"+
		"\2\u104a\u104b\3\2\2\2\u104b\u1049\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u1053"+
		"\3\2\2\2\u104d\u104f\7\64\2\2\u104e\u1050\5\u017a\u00be\2\u104f\u104e"+
		"\3\2\2\2\u1050\u1051\3\2\2\2\u1051\u104f\3\2\2\2\u1051\u1052\3\2\2\2\u1052"+
		"\u1054\3\2\2\2\u1053\u104d\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1055\3\2"+
		"\2\2\u1055\u1056\7\u015e\2\2\u1056\u1057\7\26\2\2\u1057\u015f\3\2\2\2"+
		"\u1058\u1059\7H\2\2\u1059\u105a\5\u025c\u012f\2\u105a\u105c\7\u009f\2"+
		"\2\u105b\u105d\5";
	private static final String _serializedATNSegment2 =
		"\u017a\u00be\2\u105c\u105b\3\2\2\2\u105d\u105e\3\2\2\2\u105e\u105c\3\2"+
		"\2\2\u105e\u105f\3\2\2\2\u105f\u1063\3\2\2\2\u1060\u1062\5\u017e\u00c0"+
		"\2\u1061\u1060\3\2\2\2\u1062\u1065\3\2\2\2\u1063\u1061\3\2\2\2\u1063\u1064"+
		"\3\2\2\2\u1064\u106c\3\2\2\2\u1065\u1063\3\2\2\2\u1066\u1068\7\64\2\2"+
		"\u1067\u1069\5\u017a\u00be\2\u1068\u1067\3\2\2\2\u1069\u106a\3\2\2\2\u106a"+
		"\u1068\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u106d\3\2\2\2\u106c\u1066\3\2"+
		"\2\2\u106c\u106d\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u106f\7\u015e\2\2\u106f"+
		"\u1070\7H\2\2\u1070\u0161\3\2\2\2\u1071\u1072\7S\2\2\u1072\u1073\5\u020c"+
		"\u0107\2\u1073\u0163\3\2\2\2\u1074\u1075\7Y\2\2\u1075\u1076\5\u020c\u0107"+
		"\2\u1076\u0165\3\2\2\2\u1077\u1078\5\u020c\u0107\2\u1078\u1079\7\u0414"+
		"\2\2\u1079\u107b\3\2\2\2\u107a\u1077\3\2\2\2\u107a\u107b\3\2\2\2\u107b"+
		"\u107c\3\2\2\2\u107c\u107e\7a\2\2\u107d\u107f\5\u017a\u00be\2\u107e\u107d"+
		"\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u107e\3\2\2\2\u1080\u1081\3\2\2\2\u1081"+
		"\u1082\3\2\2\2\u1082\u1083\7\u015e\2\2\u1083\u1085\7a\2\2\u1084\u1086"+
		"\5\u020c\u0107\2\u1085\u1084\3\2\2\2\u1085\u1086\3\2\2\2\u1086\u0167\3"+
		"\2\2\2\u1087\u1088\5\u020c\u0107\2\u1088\u1089\7\u0414\2\2\u1089\u108b"+
		"\3\2\2\2\u108a\u1087\3\2\2\2\u108a\u108b\3\2\2\2\u108b\u108c\3\2\2\2\u108c"+
		"\u108e\7\u0081\2\2\u108d\u108f\5\u017a\u00be\2\u108e\u108d\3\2\2\2\u108f"+
		"\u1090\3\2\2\2\u1090\u108e\3\2\2\2\u1090\u1091\3\2\2\2\u1091\u1092\3\2"+
		"\2\2\u1092\u1093\7\u0246\2\2\u1093\u1094\5\u025c\u012f\2\u1094\u1095\7"+
		"\u015e\2\2\u1095\u1097\7\u0081\2\2\u1096\u1098\5\u020c\u0107\2\u1097\u1096"+
		"\3\2\2\2\u1097\u1098\3\2\2\2\u1098\u0169\3\2\2\2\u1099\u109a\7\u0086\2"+
		"\2\u109a\u109b\5\u025c\u012f\2\u109b\u016b\3\2\2\2\u109c\u109d\5\u020c"+
		"\u0107\2\u109d\u109e\7\u0414\2\2\u109e\u10a0\3\2\2\2\u109f\u109c\3\2\2"+
		"\2\u109f\u10a0\3\2\2\2\u10a0\u10a1\3\2\2\2\u10a1\u10a2\7\u00b0\2\2\u10a2"+
		"\u10a3\5\u025c\u012f\2\u10a3\u10a5\7\u0158\2\2\u10a4\u10a6\5\u017a\u00be"+
		"\2\u10a5\u10a4\3\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u10a5\3\2\2\2\u10a7\u10a8"+
		"\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u10aa\7\u015e\2\2\u10aa\u10ac\7\u00b0"+
		"\2\2\u10ab\u10ad\5\u020c\u0107\2\u10ac\u10ab\3\2\2\2\u10ac\u10ad\3\2\2"+
		"\2\u10ad\u016d\3\2\2\2\u10ae\u10af\7\u0135\2\2\u10af\u10be\5\u020c\u0107"+
		"\2\u10b0\u10b5\7<\2\2\u10b1\u10b3\7\u01ca\2\2\u10b2\u10b1\3\2\2\2\u10b2"+
		"\u10b3\3\2\2\2\u10b3\u10b4\3\2\2\2\u10b4\u10b6\7@\2\2\u10b5\u10b2\3\2"+
		"\2\2\u10b5\u10b6\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7\u10b8\5\u020c\u0107"+
		"\2\u10b8\u10b9\7Q\2\2\u10b9\u10ba\5\u022c\u0117\2\u10ba\u10be\3\2\2\2"+
		"\u10bb\u10bc\7\u01d6\2\2\u10bc\u10be\5\u020c\u0107\2\u10bd\u10ae\3\2\2"+
		"\2\u10bd\u10b0\3\2\2\2\u10bd\u10bb\3\2\2\2\u10be\u016f\3\2\2\2\u10bf\u10c0"+
		"\7(\2\2\u10c0\u10c1\5\u022c\u0117\2\u10c1\u10c4\5\u0220\u0111\2\u10c2"+
		"\u10c3\7)\2\2\u10c3\u10c5\5\u025c\u012f\2\u10c4\u10c2\3\2\2\2\u10c4\u10c5"+
		"\3\2\2\2\u10c5\u0171\3\2\2\2\u10c6\u10c7\7(\2\2\u10c7\u10c8\5\u020c\u0107"+
		"\2\u10c8\u10c9\7\35\2\2\u10c9\u10d0\7=\2\2\u10ca\u10d1\5\u0212\u010a\2"+
		"\u10cb\u10cd\7\u0094\2\2\u10cc\u10ce\7\u024c\2\2\u10cd\u10cc\3\2\2\2\u10cd"+
		"\u10ce\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u10d1\7\u0418\2\2\u10d0\u10ca"+
		"\3\2\2\2\u10d0\u10cb\3\2\2\2\u10d1\u0173\3\2\2\2\u10d2\u10d3\7(\2\2\u10d3"+
		"\u10d4\5\u020c\u0107\2\u10d4\u10d5\7%\2\2\u10d5\u10d6\7=\2\2\u10d6\u10d7"+
		"\5\u00b4[\2\u10d7\u0175\3\2\2\2\u10d8\u10d9\7(\2\2\u10d9\u10da\t<\2\2"+
		"\u10da\u10db\7\u017f\2\2\u10db\u10dc\7=\2\2\u10dc\u10e1\5\u0178\u00bd"+
		"\2\u10dd\u10de\7\u040b\2\2\u10de\u10e0\5\u0178\u00bd\2\u10df\u10dd\3\2"+
		"\2\2\u10e0\u10e3\3\2\2\2\u10e1\u10df\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2"+
		"\u10e4\3\2\2\2\u10e3\u10e1\3\2\2\2\u10e4\u10e5\5\u015a\u00ae\2\u10e5\u0177"+
		"\3\2\2\2\u10e6\u10f2\5\u0212\u010a\2\u10e7\u10e9\7\u0094\2\2\u10e8\u10ea"+
		"\7\u024c\2\2\u10e9\u10e8\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10eb\3\2\2"+
		"\2\u10eb\u10f2\7\u0418\2\2\u10ec\u10f2\5\u020c\u0107\2\u10ed\u10f2\7\u0095"+
		"\2\2\u10ee\u10ef\7i\2\2\u10ef\u10f2\7\u0178\2\2\u10f0\u10f2\7\u0093\2"+
		"\2\u10f1\u10e6\3\2\2\2\u10f1\u10e7\3\2\2\2\u10f1\u10ec\3\2\2\2\u10f1\u10ed"+
		"\3\2\2\2\u10f1\u10ee\3\2\2\2\u10f1\u10f0\3\2\2\2\u10f2\u0179\3\2\2\2\u10f3"+
		"\u10f6\5\24\13\2\u10f4\u10f6\5\6\4\2\u10f5\u10f3\3\2\2\2\u10f5\u10f4\3"+
		"\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u10f8\7\u040c\2\2\u10f8\u017b\3\2\2\2"+
		"\u10f9\u10fc\7\u00ae\2\2\u10fa\u10fd\5\u021e\u0110\2\u10fb\u10fd\5\u025c"+
		"\u012f\2\u10fc\u10fa\3\2\2\2\u10fc\u10fb\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe"+
		"\u1100\7\u009f\2\2\u10ff\u1101\5\u017a\u00be\2\u1100\u10ff\3\2\2\2\u1101"+
		"\u1102\3\2\2\2\u1102\u1100\3\2\2\2\u1102\u1103\3\2\2\2\u1103\u017d\3\2"+
		"\2\2\u1104\u1105\7\65\2\2\u1105\u1106\5\u025c\u012f\2\u1106\u1108\7\u009f"+
		"\2\2\u1107\u1109\5\u017a\u00be\2\u1108\u1107\3\2\2\2\u1109\u110a\3\2\2"+
		"\2\u110a\u1108\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u017f\3\2\2\2\u110c\u110d"+
		"\7\n\2\2\u110d\u110e\7\u0248\2\2\u110e\u1113\5\u0192\u00ca\2\u110f\u1110"+
		"\7\u040b\2\2\u1110\u1112\5\u0192\u00ca\2\u1111\u110f\3\2\2\2\u1112\u1115"+
		"\3\2\2\2\u1113\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1143\3\2\2\2\u1115"+
		"\u1113\3\2\2\2\u1116\u1117\7\n\2\2\u1117\u1119\7\u0248\2\2\u1118\u111a"+
		"\5\u0242\u0122\2\u1119\u1118\3\2\2\2\u1119\u111a\3\2\2\2\u111a\u111b\3"+
		"\2\2\2\u111b\u1120\5\u0194\u00cb\2\u111c\u111d\7\u040b\2\2\u111d\u111f"+
		"\5\u0194\u00cb\2\u111e\u111c\3\2\2\2\u111f\u1122\3\2\2\2\u1120\u111e\3"+
		"\2\2\2\u1120\u1121\3\2\2\2\u1121\u1131\3\2\2\2\u1122\u1120\3\2\2\2\u1123"+
		"\u112f\7\u0083\2\2\u1124\u1130\7\u01cd\2\2\u1125\u112c\5\u0196\u00cc\2"+
		"\u1126\u1128\7\r\2\2\u1127\u1126\3\2\2\2\u1127\u1128\3\2\2\2\u1128\u1129"+
		"\3\2\2\2\u1129\u112b\5\u0196\u00cc\2\u112a\u1127\3\2\2\2\u112b\u112e\3"+
		"\2\2\2\u112c\u112a\3\2\2\2\u112c\u112d\3\2\2\2\u112d\u1130\3\2\2\2\u112e"+
		"\u112c\3\2\2\2\u112f\u1124\3\2\2\2\u112f\u1125\3\2\2\2\u1130\u1132\3\2"+
		"\2\2\u1131\u1123\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1139\3\2\2\2\u1133"+
		"\u1135\7\u00b1\2\2\u1134\u1136\5\u0198\u00cd\2\u1135\u1134\3\2\2\2\u1136"+
		"\u1137\3\2\2\2\u1137\u1135\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u113a\3\2"+
		"\2\2\u1139\u1133\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u113f\3\2\2\2\u113b"+
		"\u113e\5\u019a\u00ce\2\u113c\u113e\5\u019c\u00cf\2\u113d\u113b\3\2\2\2"+
		"\u113d\u113c\3\2\2\2\u113e\u1141\3\2\2\2\u113f\u113d\3\2\2\2\u113f\u1140"+
		"\3\2\2\2\u1140\u1143\3\2\2\2\u1141\u113f\3\2\2\2\u1142\u110c\3\2\2\2\u1142"+
		"\u1116\3\2\2\2\u1143\u0181\3\2\2\2\u1144\u1145\7!\2\2\u1145\u1146\7\u0248"+
		"\2\2\u1146\u114b\5\u0194\u00cb\2\u1147\u1148\7\u040b\2\2\u1148\u114a\5"+
		"\u0194\u00cb\2\u1149\u1147\3\2\2\2\u114a\u114d\3\2\2\2\u114b\u1149\3\2"+
		"\2\2\u114b\u114c\3\2\2\2\u114c\u117b\3\2\2\2\u114d\u114b\3\2\2\2\u114e"+
		"\u114f\7!\2\2\u114f\u1151\7\u0248\2\2\u1150\u1152\5\u0244\u0123\2\u1151"+
		"\u1150\3\2\2\2\u1151\u1152\3\2\2\2\u1152\u1153\3\2\2\2\u1153\u1158\5\u0194"+
		"\u00cb\2\u1154\u1155\7\u040b\2\2\u1155\u1157\5\u0194\u00cb\2\u1156\u1154"+
		"\3\2\2\2\u1157\u115a\3\2\2\2\u1158\u1156\3\2\2\2\u1158\u1159\3\2\2\2\u1159"+
		"\u1169\3\2\2\2\u115a\u1158\3\2\2\2\u115b\u1167\7\u0083\2\2\u115c\u1168"+
		"\7\u01cd\2\2\u115d\u1164\5\u0196\u00cc\2\u115e\u1160\7\r\2\2\u115f\u115e"+
		"\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u1163\5\u0196\u00cc"+
		"\2\u1162\u115f\3\2\2\2\u1163\u1166\3\2\2\2\u1164\u1162\3\2\2\2\u1164\u1165"+
		"\3\2\2\2\u1165\u1168\3\2\2\2\u1166\u1164\3\2\2\2\u1167\u115c\3\2\2\2\u1167"+
		"\u115d\3\2\2\2\u1168\u116a\3\2\2\2\u1169\u115b\3\2\2\2\u1169\u116a\3\2"+
		"\2\2\u116a\u1171\3\2\2\2\u116b\u116d\7\u00b1\2\2\u116c\u116e\5\u0198\u00cd"+
		"\2\u116d\u116c\3\2\2\2\u116e\u116f\3\2\2\2\u116f\u116d\3\2\2\2\u116f\u1170"+
		"\3\2\2\2\u1170\u1172\3\2\2\2\u1171\u116b\3\2\2\2\u1171\u1172\3\2\2\2\u1172"+
		"\u1177\3\2\2\2\u1173\u1176\5\u019a\u00ce\2\u1174\u1176\5\u019c\u00cf\2"+
		"\u1175\u1173\3\2\2\2\u1175\u1174\3\2\2\2\u1176\u1179\3\2\2\2\u1177\u1175"+
		"\3\2\2\2\u1177\u1178\3\2\2\2\u1178\u117b\3\2\2\2\u1179\u1177\3\2\2\2\u117a"+
		"\u1144\3\2\2\2\u117a\u114e\3\2\2\2\u117b\u0183\3\2\2\2\u117c\u117d\7\62"+
		"\2\2\u117d\u117f\7\u0248\2\2\u117e\u1180\5\u0242\u0122\2\u117f\u117e\3"+
		"\2\2\2\u117f\u1180\3\2\2\2\u1180\u1181\3\2\2\2\u1181\u1186\5\u01fa\u00fe"+
		"\2\u1182\u1183\7\u040b\2\2\u1183\u1185\5\u01fa\u00fe\2\u1184\u1182\3\2"+
		"\2\2\u1185\u1188\3\2\2\2\u1186\u1184\3\2\2\2\u1186\u1187\3\2\2\2\u1187"+
		"\u0185\3\2\2\2\u1188\u1186\3\2\2\2\u1189\u118a\7D\2\2\u118a\u118f\5\u019e"+
		"\u00d0\2\u118b\u118c\7\u040b\2\2\u118c\u118e\5\u019e\u00d0\2\u118d\u118b"+
		"\3\2\2\2\u118e\u1191\3\2\2\2\u118f\u118d\3\2\2\2\u118f\u1190\3\2\2\2\u1190"+
		"\u1192\3\2\2\2\u1191\u118f\3\2\2\2\u1192\u1194\7m\2\2\u1193\u1195\t=\2"+
		"\2\u1194\u1193\3\2\2\2\u1194\u1195\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u1197"+
		"\5\u01a2\u00d2\2\u1197\u1198\7\u00a0\2\2\u1198\u119d\5\u0194\u00cb\2\u1199"+
		"\u119a\7\u040b\2\2\u119a\u119c\5\u0194\u00cb\2\u119b\u1199\3\2\2\2\u119c"+
		"\u119f\3\2\2\2\u119d\u119b\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u11ae\3\2"+
		"\2\2\u119f\u119d\3\2\2\2\u11a0\u11ac\7\u0083\2\2\u11a1\u11ad\7\u01cd\2"+
		"\2\u11a2\u11a9\5\u0196\u00cc\2\u11a3\u11a5\7\r\2\2\u11a4\u11a3\3\2\2\2"+
		"\u11a4\u11a5\3\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u11a8\5\u0196\u00cc\2\u11a7"+
		"\u11a4\3\2\2\2\u11a8\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11a9\u11aa\3\2"+
		"\2\2\u11aa\u11ad\3\2\2\2\u11ab\u11a9\3\2\2\2\u11ac\u11a1\3\2\2\2\u11ac"+
		"\u11a2\3\2\2\2\u11ad\u11af\3\2\2\2\u11ae\u11a0\3\2\2\2\u11ae\u11af\3\2"+
		"\2\2\u11af\u11b9\3\2\2\2\u11b0\u11b6\7\u00b1\2\2\u11b1\u11b2\7D\2\2\u11b2"+
		"\u11b5\7o\2\2\u11b3\u11b5\5\u0198\u00cd\2\u11b4\u11b1\3\2\2\2\u11b4\u11b3"+
		"\3\2\2\2\u11b5\u11b8\3\2\2\2\u11b6\u11b4\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7"+
		"\u11ba\3\2\2\2\u11b8\u11b6\3\2\2\2\u11b9\u11b0\3\2\2\2\u11b9\u11ba\3\2"+
		"\2\2\u11ba\u0187\3\2\2\2\u11bb\u11bc\7D\2\2\u11bc\u11bd\7\u01ed\2\2\u11bd"+
		"\u11be\7m\2\2\u11be\u11bf\5\u01fa\u00fe\2\u11bf\u11c0\7\u00a0\2\2\u11c0"+
		"\u11c5\5\u01fa\u00fe\2\u11c1\u11c2\7\u040b\2\2\u11c2\u11c4\5\u01fa\u00fe"+
		"\2\u11c3\u11c1\3\2\2\2\u11c4\u11c7\3\2\2\2\u11c5\u11c3\3\2\2\2\u11c5\u11c6"+
		"\3\2\2\2\u11c6\u11cb\3\2\2\2\u11c7\u11c5\3\2\2\2\u11c8\u11c9\7\u00b1\2"+
		"\2\u11c9\u11ca\7D\2\2\u11ca\u11cc\7o\2\2\u11cb\u11c8\3\2\2\2\u11cb\u11cc"+
		"\3\2\2\2\u11cc\u0189\3\2\2\2\u11cd\u11ce\7\u0080\2\2\u11ce\u11cf\7\u0248"+
		"\2\2\u11cf\u11d4\5\u01a4\u00d3\2\u11d0\u11d1\7\u040b\2\2\u11d1\u11d3\5"+
		"\u01a4\u00d3\2\u11d2\u11d0\3\2\2\2\u11d3\u11d6\3\2\2\2\u11d4\u11d2\3\2"+
		"\2\2\u11d4\u11d5\3\2\2\2\u11d5\u018b\3\2\2\2\u11d6\u11d4\3\2\2\2\u11d7"+
		"\u11d8\7\u0087\2\2\u11d8\u11dd\5\u019e\u00d0\2\u11d9\u11da\7\u040b\2\2"+
		"\u11da\u11dc\5\u019e\u00d0\2\u11db\u11d9\3\2\2\2\u11dc\u11df\3\2\2\2\u11dd"+
		"\u11db\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11e0\3\2\2\2\u11df\u11dd\3\2"+
		"\2\2\u11e0\u11e2\7m\2\2\u11e1\u11e3\t=\2\2\u11e2\u11e1\3\2\2\2\u11e2\u11e3"+
		"\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4\u11e5\5\u01a2\u00d2\2\u11e5\u11e6\7"+
		"@\2\2\u11e6\u11eb\5\u01fa\u00fe\2\u11e7\u11e8\7\u040b\2\2\u11e8\u11ea"+
		"\5\u01fa\u00fe\2\u11e9\u11e7\3\2\2\2\u11ea\u11ed\3\2\2\2\u11eb\u11e9\3"+
		"\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u1200\3\2\2\2\u11ed\u11eb\3\2\2\2\u11ee"+
		"\u11ef\7\u0087\2\2\u11ef\u11f1\7\t\2\2\u11f0\u11f2\7\u026e\2\2\u11f1\u11f0"+
		"\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u11f4\7\u040b\2"+
		"\2\u11f4\u11f5\7D\2\2\u11f5\u11f6\7o\2\2\u11f6\u11f7\7@\2\2\u11f7\u11fc"+
		"\5\u01fa\u00fe\2\u11f8\u11f9\7\u040b\2\2\u11f9\u11fb\5\u01fa\u00fe\2\u11fa"+
		"\u11f8\3\2\2\2\u11fb\u11fe\3\2\2\2\u11fc\u11fa\3\2\2\2\u11fc\u11fd\3\2"+
		"\2\2\u11fd\u1200\3\2\2\2\u11fe\u11fc\3\2\2\2\u11ff\u11d7\3\2\2\2\u11ff"+
		"\u11ee\3\2\2\2\u1200\u018d\3\2\2\2\u1201\u1202\7\u0087\2\2\u1202\u1203"+
		"\7\u01ed\2\2\u1203\u1204\7m\2\2\u1204\u1205\5\u01fa\u00fe\2\u1205\u1206"+
		"\7@\2\2\u1206\u120b\5\u01fa\u00fe\2\u1207\u1208\7\u040b\2\2\u1208\u120a"+
		"\5\u01fa\u00fe\2\u1209\u1207\3\2\2\2\u120a\u120d\3\2\2\2\u120b\u1209\3"+
		"\2\2\2\u120b\u120c\3\2\2\2\u120c\u018f\3\2\2\2\u120d\u120b\3\2\2\2\u120e"+
		"\u120f\7\u008d\2\2\u120f\u1212\7\u01e0\2\2\u1210\u1211\7=\2\2\u1211\u1213"+
		"\5\u01fa\u00fe\2\u1212\u1210\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1214\3"+
		"\2\2\2\u1214\u1217\7\u0400\2\2\u1215\u1218\5\u0256\u012c\2\u1216\u1218"+
		"\7\u0418\2\2\u1217\u1215\3\2\2\2\u1217\u1216\3\2\2\2\u1218\u0191\3\2\2"+
		"\2\u1219\u121a\5\u01fa\u00fe\2\u121a\u121b\5\u019a\u00ce\2\u121b\u0193"+
		"\3\2\2\2\u121c\u121d\5\u01fa\u00fe\2\u121d\u121e\7\u0184\2\2\u121e\u121f"+
		"\7\23\2\2\u121f\u1220\7\u01e0\2\2\u1220\u1221\7\u0418\2\2\u1221\u1235"+
		"\3\2\2\2\u1222\u1223\5\u01fa\u00fe\2\u1223\u1226\7\u0184\2\2\u1224\u1225"+
		"\7\u00b1\2\2\u1225\u1227\5\u020a\u0106\2\u1226\u1224\3\2\2\2\u1226\u1227"+
		"\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u1229\7\23\2\2\u1229\u122a\7\u0418"+
		"\2\2\u122a\u1235\3\2\2\2\u122b\u122c\5\u01fa\u00fe\2\u122c\u122d\7\u0184"+
		"\2\2\u122d\u122e\7\u00b1\2\2\u122e\u1231\5\u020a\u0106\2\u122f\u1230\7"+
		"\16\2\2\u1230\u1232\7\u0418\2\2\u1231\u122f\3\2\2\2\u1231\u1232\3\2\2"+
		"\2\u1232\u1235\3\2\2\2\u1233\u1235\5\u01fa\u00fe\2\u1234\u121c\3\2\2\2"+
		"\u1234\u1222\3\2\2\2\u1234\u122b\3\2\2\2\u1234\u1233\3\2\2\2\u1235\u0195"+
		"\3\2\2\2\u1236\u123f\7\u0099\2\2\u1237\u123f\7\u0256\2\2\u1238\u1239\7"+
		"\u0132\2\2\u1239\u123f\7\u0418\2\2\u123a\u123b\7\u0193\2\2\u123b\u123f"+
		"\7\u0418\2\2\u123c\u123d\7\u0231\2\2\u123d\u123f\7\u0418\2\2\u123e\u1236"+
		"\3\2\2\2\u123e\u1237\3\2\2\2\u123e\u1238\3\2\2\2\u123e\u123a\3\2\2\2\u123e"+
		"\u123c\3\2\2\2\u123f\u0197\3\2\2\2\u1240\u1241\7\u01b5\2\2\u1241\u1249"+
		"\5\u0212\u010a\2\u1242\u1243\7\u01b8\2\2\u1243\u1249\5\u0212\u010a\2\u1244"+
		"\u1245\7\u01b4\2\2\u1245\u1249\5\u0212\u010a\2\u1246\u1247\7\u01b9\2\2"+
		"\u1247\u1249\5\u0212\u010a\2\u1248\u1240\3\2\2\2\u1248\u1242\3\2\2\2\u1248"+
		"\u1244\3\2\2\2\u1248\u1246\3\2\2\2\u1249\u0199\3\2\2\2\u124a\u124b\7\u01e0"+
		"\2\2\u124b\u1252\7\u016b\2\2\u124c\u1253\7)\2\2\u124d\u1253\7\u01c9\2"+
		"\2\u124e\u124f\7P\2\2\u124f\u1250\5\u0212\u010a\2\u1250\u1251\7\u0260"+
		"\2\2\u1251\u1253\3\2\2\2\u1252\u124c\3\2\2\2\u1252\u124d\3\2\2\2\u1252"+
		"\u124e\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u019b\3\2\2\2\u1254\u1255\7\u0118"+
		"\2\2\u1255\u1256\t>\2\2\u1256\u019d\3\2\2\2\u1257\u125c\5\u01a0\u00d1"+
		"\2\u1258\u1259\7\u0409\2\2\u1259\u125a\5\u022c\u0117\2\u125a\u125b\7\u040a"+
		"\2\2\u125b\u125d\3\2\2\2\u125c\u1258\3\2\2\2\u125c\u125d\3\2\2\2\u125d"+
		"\u019f\3\2\2\2\u125e\u1260\7\t\2\2\u125f\u1261\7\u026e\2\2\u1260\u125f"+
		"\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u12a6\3\2\2\2\u1262\u1264\7\n\2\2\u1263"+
		"\u1265\7\u0267\2\2\u1264\u1263\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u12a6"+
		"\3\2\2\2\u1266\u126e\7!\2\2\u1267\u1268\7\u0239\2\2\u1268\u126f\7\u0266"+
		"\2\2\u1269\u126f\7\u0267\2\2\u126a\u126f\7\u024e\2\2\u126b\u126f\7\u0248"+
		"\2\2\u126c\u126f\7\u0238\2\2\u126d\u126f\7\u0207\2\2\u126e\u1267\3\2\2"+
		"\2\u126e\u1269\3\2\2\2\u126e\u126a\3\2\2\2\u126e\u126b\3\2\2\2\u126e\u126c"+
		"\3\2\2\2\u126e\u126d\3\2\2\2\u126e\u126f\3\2\2\2\u126f\u12a6\3\2\2\2\u1270"+
		"\u12a6\7+\2\2\u1271\u1273\7\62\2\2\u1272\u1274\7\u0207\2\2\u1273\u1272"+
		"\3\2\2\2\u1273\u1274\3\2\2\2\u1274\u12a6\3\2\2\2\u1275\u12a6\7\u0166\2"+
		"\2\u1276\u12a6\7\u0268\2\2\u1277\u12a6\7\u0269\2\2\u1278\u1279\7D\2\2"+
		"\u1279\u12a6\7o\2\2\u127a\u12a6\7K\2\2\u127b\u12a6\7O\2\2\u127c\u127d"+
		"\7`\2\2\u127d\u12a6\7\u0266\2\2\u127e\u12a6\7\u026a\2\2\u127f\u12a6\7"+
		"\u01ed\2\2\u1280\u12a6\7}\2\2\u1281\u12a6\7\u026b\2\2\u1282\u1283\7\u0202"+
		"\2\2\u1283\u12a6\t?\2\2\u1284\u12a6\7\u008c\2\2\u1285\u1286\7\u008f\2"+
		"\2\u1286\u12a6\t@\2\2\u1287\u12a6\7\u026c\2\2\u1288\u12a6\7\u026d\2\2"+
		"\u1289\u12a6\7\u00a2\2\2\u128a\u12a6\7\u00a9\2\2\u128b\u12a6\7\u00aa\2"+
		"\2\u128c\u12a6\7\u0270\2\2\u128d\u12a6\7\u0271\2\2\u128e\u12a6\7\u0272"+
		"\2\2\u128f\u12a6\7\u0273\2\2\u1290\u12a6\7\u0274\2\2\u1291\u12a6\7\u0275"+
		"\2\2\u1292\u12a6\7\u0276\2\2\u1293\u12a6\7\u0277\2\2\u1294\u12a6\7\u0278"+
		"\2\2\u1295\u12a6\7\u0279\2\2\u1296\u12a6\7\u027a\2\2\u1297\u12a6\7\u027b"+
		"\2\2\u1298\u12a6\7\u027c\2\2\u1299\u12a6\7\u027d\2\2\u129a\u12a6\7\u027e"+
		"\2\2\u129b\u12a6\7\u027f\2\2\u129c\u12a6\7\u0280\2\2\u129d\u12a6\7\u0281"+
		"\2\2\u129e\u12a6\7\u0282\2\2\u129f\u12a6\7\u0283\2\2\u12a0\u12a6\7\u0284"+
		"\2\2\u12a1\u12a6\7\u0285\2\2\u12a2\u12a6\7\u0286\2\2\u12a3\u12a6\7\u0287"+
		"\2\2\u12a4\u12a6\7\u0288\2\2\u12a5\u125e\3\2\2\2\u12a5\u1262\3\2\2\2\u12a5"+
		"\u1266\3\2\2\2\u12a5\u1270\3\2\2\2\u12a5\u1271\3\2\2\2\u12a5\u1275\3\2"+
		"\2\2\u12a5\u1276\3\2\2\2\u12a5\u1277\3\2\2\2\u12a5\u1278\3\2\2\2\u12a5"+
		"\u127a\3\2\2\2\u12a5\u127b\3\2\2\2\u12a5\u127c\3\2\2\2\u12a5\u127e\3\2"+
		"\2\2\u12a5\u127f\3\2\2\2\u12a5\u1280\3\2\2\2\u12a5\u1281\3\2\2\2\u12a5"+
		"\u1282\3\2\2\2\u12a5\u1284\3\2\2\2\u12a5\u1285\3\2\2\2\u12a5\u1287\3\2"+
		"\2\2\u12a5\u1288\3\2\2\2\u12a5\u1289\3\2\2\2\u12a5\u128a\3\2\2\2\u12a5"+
		"\u128b\3\2\2\2\u12a5\u128c\3\2\2\2\u12a5\u128d\3\2\2\2\u12a5\u128e\3\2"+
		"\2\2\u12a5\u128f\3\2\2\2\u12a5\u1290\3\2\2\2\u12a5\u1291\3\2\2\2\u12a5"+
		"\u1292\3\2\2\2\u12a5\u1293\3\2\2\2\u12a5\u1294\3\2\2\2\u12a5\u1295\3\2"+
		"\2\2\u12a5\u1296\3\2\2\2\u12a5\u1297\3\2\2\2\u12a5\u1298\3\2\2\2\u12a5"+
		"\u1299\3\2\2\2\u12a5\u129a\3\2\2\2\u12a5\u129b\3\2\2\2\u12a5\u129c\3\2"+
		"\2\2\u12a5\u129d\3\2\2\2\u12a5\u129e\3\2\2\2\u12a5\u129f\3\2\2\2\u12a5"+
		"\u12a0\3\2\2\2\u12a5\u12a1\3\2\2\2\u12a5\u12a2\3\2\2\2\u12a5\u12a3\3\2"+
		"\2\2\u12a5\u12a4\3\2\2\2\u12a6\u01a1\3\2\2\2\u12a7\u12b8\7\u03f7\2\2\u12a8"+
		"\u12a9\7\u03f7\2\2\u12a9\u12aa\7\u0408\2\2\u12aa\u12b8\7\u03f7\2\2\u12ab"+
		"\u12ac\5\u020c\u0107\2\u12ac\u12ad\7\u0408\2\2\u12ad\u12ae\7\u03f7\2\2"+
		"\u12ae\u12b8\3\2\2\2\u12af\u12b0\5\u020c\u0107\2\u12b0\u12b1\7\u0408\2"+
		"\2\u12b1\u12b2\5\u020c\u0107\2\u12b2\u12b8\3\2\2\2\u12b3\u12b4\5\u020c"+
		"\u0107\2\u12b4\u12b5\5\u0210\u0109\2\u12b5\u12b8\3\2\2\2\u12b6\u12b8\5"+
		"\u020c\u0107\2\u12b7\u12a7\3\2\2\2\u12b7\u12a8\3\2\2\2\u12b7\u12ab\3\2"+
		"\2\2\u12b7\u12af\3\2\2\2\u12b7\u12b3\3\2\2\2\u12b7\u12b6\3\2\2\2\u12b8"+
		"\u01a3\3\2\2\2\u12b9\u12ba\5\u01fa\u00fe\2\u12ba\u12bb\7\u00a0\2\2\u12bb"+
		"\u12bc\5\u01fa\u00fe\2\u12bc\u01a5\3\2\2\2\u12bd\u12bf\7\f\2\2\u12be\u12c0"+
		"\tA\2\2\u12bf\u12be\3\2\2\2\u12bf\u12c0\3\2\2\2\u12c0\u12c1\3\2\2\2\u12c1"+
		"\u12c2\7\u009d\2\2\u12c2\u12c3\5\u022e\u0118\2\u12c3\u01a7\3\2\2\2\u12c4"+
		"\u12c5\7\32\2\2\u12c5\u12c6\7\u009d\2\2\u12c6\u12ca\5\u022e\u0118\2\u12c7"+
		"\u12c9\5\u01b0\u00d9\2\u12c8\u12c7\3\2\2\2\u12c9\u12cc\3\2\2\2\u12ca\u12c8"+
		"\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u01a9\3\2\2\2\u12cc\u12ca\3\2\2\2\u12cd"+
		"\u12ce\7\u0130\2\2\u12ce\u12cf\7\u009d\2\2\u12cf\u12d1\5\u022e\u0118\2"+
		"\u12d0\u12d2\tB\2\2\u12d1\u12d0\3\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u01ab"+
		"\3\2\2\2\u12d3\u12d5\7n\2\2\u12d4\u12d6\tA\2\2\u12d5\u12d4\3\2\2\2\u12d5"+
		"\u12d6\3\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u12d8\7\u009d\2\2\u12d8\u12d9"+
		"\5\u022e\u0118\2\u12d9\u01ad\3\2\2\2\u12da\u12dc\7\u01fa\2\2\u12db\u12dd"+
		"\tA\2\2\u12dc\u12db\3\2\2\2\u12dc\u12dd\3\2\2\2\u12dd\u12de\3\2\2\2\u12de"+
		"\u12df\7\u009d\2\2\u12df\u12e1\5\u022e\u0118\2\u12e0\u12e2\7\u01ef\2\2"+
		"\u12e1\u12e0\3\2\2\2\u12e1\u12e2\3\2\2\2\u12e2\u12e4\3\2\2\2\u12e3\u12e5"+
		"\7\u016d\2\2\u12e4\u12e3\3\2\2\2\u12e4\u12e5\3\2\2\2\u12e5\u12e7\3\2\2"+
		"\2\u12e6\u12e8\7\u0249\2\2\u12e7\u12e6\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8"+
		"\u01af\3\2\2\2\u12e9\u12ea\7=\2\2\u12ea\u12f1\7\u0247\2\2\u12eb\u12f1"+
		"\7\u01ef\2\2\u12ec\u12f1\7\u016f\2\2\u12ed\u12f1\7\u01ba\2\2\u12ee\u12f1"+
		"\7\u016d\2\2\u12ef\u12f1\7\u012e\2\2\u12f0\u12e9\3\2\2\2\u12f0\u12eb\3"+
		"\2\2\2\u12f0\u12ec\3\2\2\2\u12f0\u12ed\3\2\2\2\u12f0\u12ee\3\2\2\2\u12f0"+
		"\u12ef\3\2\2\2\u12f1\u01b1\3\2\2\2\u12f2\u12f4\7!\2\2\u12f3\u12f5\7\u011b"+
		"\2\2\u12f4\u12f3\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5\u12f6\3\2\2\2\u12f6"+
		"\u12f7\7\u017a\2\2\u12f7\u12f8\5\u020c\u0107\2\u12f8\u12f9\7\u0206\2\2"+
		"\u12f9\u12fa\tC\2\2\u12fa\u12fb\7\u021c\2\2\u12fb\u12fc\7\u0418\2\2\u12fc"+
		"\u01b3\3\2\2\2\u12fd\u12fe\7\u018b\2\2\u12fe\u12ff\7\u01e2\2\2\u12ff\u1300"+
		"\5\u020c\u0107\2\u1300\u1301\7\u021c\2\2\u1301\u1302\7\u0418\2\2\u1302"+
		"\u01b5\3\2\2\2\u1303\u1304\7\u0244\2\2\u1304\u1305\7\u01e2\2\2\u1305\u1306"+
		"\5\u020c\u0107\2\u1306\u01b7\3\2\2\2\u1307\u1308\7\u008d\2\2\u1308\u1309"+
		"\5\u01bc\u00df\2\u1309\u130a\tD\2\2\u130a\u1312\5\u025c\u012f\2\u130b"+
		"\u130c\7\u040b\2\2\u130c\u130d\5\u01bc\u00df\2\u130d\u130e\tD\2\2\u130e"+
		"\u130f\5\u025c\u012f\2\u130f\u1311\3\2\2\2\u1310\u130b\3\2\2\2\u1311\u1314"+
		"\3\2\2\2\u1312\u1310\3\2\2\2\u1312\u1313\3\2\2\2\u1313\u133b\3\2\2\2\u1314"+
		"\u1312\3\2\2\2\u1315\u1319\7\u008d\2\2\u1316\u1317\7\31\2\2\u1317\u131a"+
		"\7\u008d\2\2\u1318\u131a\7\u02e7\2\2\u1319\u1316\3\2\2\2\u1319\u1318\3"+
		"\2\2\2\u131a\u131d\3\2\2\2\u131b\u131e\5\u01fe\u0100\2\u131c\u131e\7)"+
		"\2\2\u131d\u131b\3\2\2\2\u131d\u131c\3\2\2\2\u131e\u133b\3\2\2\2\u131f"+
		"\u1320\7\u008d\2\2\u1320\u1327\7\u01c7\2\2\u1321\u1324\5\u01fe\u0100\2"+
		"\u1322\u1323\7\33\2\2\u1323\u1325\5\u0200\u0101\2\u1324\u1322\3\2\2\2"+
		"\u1324\u1325\3\2\2\2\u1325\u1328\3\2\2\2\u1326\u1328\7)\2\2\u1327\u1321"+
		"\3\2\2\2\u1327\u1326\3\2\2\2\u1328\u133b\3\2\2\2\u1329\u133b\5\u0190\u00c9"+
		"\2\u132a\u133b\5\u0114\u008b\2\u132b\u133b\5\u0112\u008a\2\u132c\u132d"+
		"\7\u008d\2\2\u132d\u132e\5\u01f2\u00fa\2\u132e\u132f\tD\2\2\u132f\u1337"+
		"\5\u025c\u012f\2\u1330\u1331\7\u040b\2\2\u1331\u1332\5\u01f2\u00fa\2\u1332"+
		"\u1333\tD\2\2\u1333\u1334\5\u025c\u012f\2\u1334\u1336\3\2\2\2\u1335\u1330"+
		"\3\2\2\2\u1336\u1339\3\2\2\2\u1337\u1335\3\2\2\2\u1337\u1338\3\2\2\2\u1338"+
		"\u133b\3\2\2\2\u1339\u1337\3\2\2\2\u133a\u1307\3\2\2\2\u133a\u1315\3\2"+
		"\2\2\u133a\u131f\3\2\2\2\u133a\u1329\3\2\2\2\u133a\u132a\3\2\2\2\u133a"+
		"\u132b\3\2\2\2\u133a\u132c\3\2\2\2\u133b\u01b9\3\2\2\2\u133c\u133d\7\u008f"+
		"\2\2\u133d\u133e\t\63\2\2\u133e\u13d4\7\u019e\2\2\u133f\u1340\7\u008f"+
		"\2\2\u1340\u1341\tE\2\2\u1341\u1344\7\u0167\2\2\u1342\u1343\7J\2\2\u1343"+
		"\u1345\7\u0418\2\2\u1344\u1342\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1348"+
		"\3\2\2\2\u1346\u1347\7@\2\2\u1347\u1349\5\u0212\u010a\2\u1348\u1346\3"+
		"\2\2\2\u1348\u1349\3\2\2\2\u1349\u1351\3\2\2\2\u134a\u134e\7\\\2\2\u134b"+
		"\u134c\5\u0212\u010a\2\u134c\u134d\7\u040b\2\2\u134d\u134f\3\2\2\2\u134e"+
		"\u134b\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1350\3\2\2\2\u1350\u1352\5\u0212"+
		"\u010a\2\u1351\u134a\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u13d4\3\2\2\2\u1353"+
		"\u1354\7\u008f\2\2\u1354\u1356\5\u01be\u00e0\2\u1355\u1357\5\u01c0\u00e1"+
		"\2\u1356\u1355\3\2\2\2\u1356\u1357\3\2\2\2\u1357\u13d4\3\2\2\2\u1358\u135a"+
		"\7\u008f\2\2\u1359\u135b\7\u0179\2\2\u135a\u1359\3\2\2\2\u135a\u135b\3"+
		"\2\2\2\u135b\u135c\3\2\2\2\u135c\u135d\t%\2\2\u135d\u135e\tF\2\2\u135e"+
		"\u1361\5\u01f4\u00fb\2\u135f\u1360\tF\2\2\u1360\u1362\5\u020c\u0107\2"+
		"\u1361\u135f\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u1364\3\2\2\2\u1363\u1365"+
		"\5\u01c0\u00e1\2\u1364\u1363\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u13d4\3"+
		"\2\2\2\u1366\u1367\7\u008f\2\2\u1367\u1368\7!\2\2\u1368\u136a\t\2\2\2"+
		"\u1369\u136b\5\u0244\u0123\2\u136a\u1369\3\2\2\2\u136a\u136b\3\2\2\2\u136b"+
		"\u136c\3\2\2\2\u136c\u13d4\5\u020c\u0107\2\u136d\u136e\7\u008f\2\2\u136e"+
		"\u136f\7!\2\2\u136f\u1370\tG\2\2\u1370\u13d4\5\u01f2\u00fa\2\u1371\u1372"+
		"\7\u008f\2\2\u1372\u1373\7!\2\2\u1373\u1374\7\u0248\2\2\u1374\u13d4\5"+
		"\u01fa\u00fe\2\u1375\u1376\7\u008f\2\2\u1376\u1377\7\u0160\2\2\u1377\u1378"+
		"\5\u0202\u0102\2\u1378\u1379\tH\2\2\u1379\u13d4\3\2\2\2\u137a\u137b\7"+
		"\u008f\2\2\u137b\u13d4\5\u01c2\u00e2\2\u137c\u137d\7\u008f\2\2\u137d\u137e"+
		"\tI\2\2\u137e\u1382\7\\\2\2\u137f\u1380\5\u0212\u010a\2\u1380\u1381\7"+
		"\u040b\2\2\u1381\u1383\3\2\2\2\u1382\u137f\3\2\2\2\u1382\u1383\3\2\2\2"+
		"\u1383\u1384\3\2\2\2\u1384\u13d4\5\u0212\u010a\2\u1385\u1386\7\u008f\2"+
		"\2\u1386\u1387\7\u00f2\2\2\u1387\u1388\7\u0409\2\2\u1388\u1389\7\u03f7"+
		"\2\2\u1389\u138a\7\u040a\2\2\u138a\u13d4\tI\2\2\u138b\u138c\7\u008f\2"+
		"\2\u138c\u138f\5\u01c4\u00e3\2\u138d\u138e\tF\2\2\u138e\u1390\5\u020c"+
		"\u0107\2\u138f\u138d\3\2\2\2\u138f\u1390\3\2\2\2\u1390\u1392\3\2\2\2\u1391"+
		"\u1393\5\u01c0\u00e1\2\u1392\u1391\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u13d4"+
		"\3\2\2\2\u1394\u1395\7\u008f\2\2\u1395\u1396\tJ\2\2\u1396\u1397\7\u0137"+
		"\2\2\u1397\u13d4\5\u01f2\u00fa\2\u1398\u1399\7\u008f\2\2\u1399\u139c\7"+
		"\u017d\2\2\u139a\u139b\7=\2\2\u139b\u139d\5\u01fa\u00fe\2\u139c\u139a"+
		"\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u13d4\3\2\2\2\u139e\u139f\7\u008f\2"+
		"\2\u139f\u13a0\tK\2\2\u13a0\u13a1\tF\2\2\u13a1\u13a4\5\u01f4\u00fb\2\u13a2"+
		"\u13a3\tF\2\2\u13a3\u13a5\5\u020c\u0107\2\u13a4\u13a2\3\2\2\2\u13a4\u13a5"+
		"\3\2\2\2\u13a5\u13a8\3\2\2\2\u13a6\u13a7\7\u00af\2\2\u13a7\u13a9\5\u025c"+
		"\u012f\2\u13a8\u13a6\3\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u13d4\3\2\2\2\u13aa"+
		"\u13ab\7\u008f\2\2\u13ab\u13ac\7\u01d6\2\2\u13ac\u13af\7\u0266\2\2\u13ad"+
		"\u13ae\tF\2\2\u13ae\u13b0\5\u020c\u0107\2\u13af\u13ad\3\2\2\2\u13af\u13b0"+
		"\3\2\2\2\u13b0\u13b2\3\2\2\2\u13b1\u13b3\5\u01c0\u00e1\2\u13b2\u13b1\3"+
		"\2\2\2\u13b2\u13b3\3\2\2\2\u13b3\u13d4\3\2\2\2\u13b4\u13b5\7\u008f\2\2"+
		"\u13b5\u13b6\7\u01eb\2\2\u13b6\u13bb\5\u01c6\u00e4\2\u13b7\u13b8\7\u040b"+
		"\2\2\u13b8\u13ba\5\u01c6\u00e4\2\u13b9\u13b7\3\2\2\2\u13ba\u13bd\3\2\2"+
		"\2\u13bb\u13b9\3\2\2\2\u13bb\u13bc\3\2\2\2\u13bc\u13c1\3\2\2\2\u13bd\u13bb"+
		"\3\2\2\2\u13be\u13bf\7=\2\2\u13bf\u13c0\7\u01ee\2\2\u13c0\u13c2\5\u0212"+
		"\u010a\2\u13c1\u13be\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2\u13c3\3\2\2\2\u13c3"+
		"\u13c7\7\\\2\2\u13c4\u13c5\5\u0212\u010a\2\u13c5\u13c6\7\u040b\2\2\u13c6"+
		"\u13c8\3\2\2\2\u13c7\u13c4\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u13c9\3\2"+
		"\2\2\u13c9\u13ca\5\u0212\u010a\2\u13ca\u13d4\3\2\2\2\u13cb\u13cc\7\u008f"+
		"\2\2\u13cc\u13cd\7\u0217\2\2\u13cd\u13d1\7\u022b\2\2\u13ce\u13cf\7=\2"+
		"\2\u13cf\u13d0\7\u012f\2\2\u13d0\u13d2\7\u0418\2\2\u13d1\u13ce\3\2\2\2"+
		"\u13d1\u13d2\3\2\2\2\u13d2\u13d4\3\2\2\2\u13d3\u133c\3\2\2\2\u13d3\u133f"+
		"\3\2\2\2\u13d3\u1353\3\2\2\2\u13d3\u1358\3\2\2\2\u13d3\u1366\3\2\2\2\u13d3"+
		"\u136d\3\2\2\2\u13d3\u1371\3\2\2\2\u13d3\u1375\3\2\2\2\u13d3\u137a\3\2"+
		"\2\2\u13d3\u137c\3\2\2\2\u13d3\u1385\3\2\2\2\u13d3\u138b\3\2\2\2\u13d3"+
		"\u1394\3\2\2\2\u13d3\u1398\3\2\2\2\u13d3\u139e\3\2\2\2\u13d3\u13aa\3\2"+
		"\2\2\u13d3\u13b4\3\2\2\2\u13d3\u13cb\3\2\2\2\u13d4\u01bb\3\2\2\2\u13d5"+
		"\u13e0\7\u0423\2\2\u13d6\u13e0\7\u0424\2\2\u13d7\u13d8\7\u040d\2\2\u13d8"+
		"\u13da\7\u040d\2\2\u13d9\u13d7\3\2\2\2\u13d9\u13da\3\2\2\2\u13da\u13db"+
		"\3\2\2\2\u13db\u13dd\tL\2\2\u13dc\u13d9\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd"+
		"\u13de\3\2\2\2\u13de\u13e0\5\u020c\u0107\2\u13df\u13d5\3\2\2\2\u13df\u13d6"+
		"\3\2\2\2\u13df\u13dc\3\2\2\2\u13e0\u01bd\3\2\2\2\u13e1\u13e2\7\31\2\2"+
		"\u13e2\u13ef\7\u008d\2\2\u13e3\u13ef\7\u02ea\2\2\u13e4\u13ef\7\'\2\2\u13e5"+
		"\u13ef\7\u008b\2\2\u13e6\u13e7\7\u017a\2\2\u13e7\u13ef\7\u022b\2\2\u13e8"+
		"\u13e9\7x\2\2\u13e9\u13ef\7\u022b\2\2\u13ea\u13ec\t\62\2\2\u13eb\u13ea"+
		"\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u13ed\3\2\2\2\u13ed\u13ef\tM\2\2\u13ee"+
		"\u13e1\3\2\2\2\u13ee\u13e3\3\2\2\2\u13ee\u13e4\3\2\2\2\u13ee\u13e5\3\2"+
		"\2\2\u13ee\u13e6\3\2\2\2\u13ee\u13e8\3\2\2\2\u13ee\u13eb\3\2\2\2\u13ef"+
		"\u01bf\3\2\2\2\u13f0\u13f1\7[\2\2\u13f1\u13f5\7\u0418\2\2\u13f2\u13f3"+
		"\7\u00af\2\2\u13f3\u13f5\5\u025c\u012f\2\u13f4\u13f0\3\2\2\2\u13f4\u13f2"+
		"\3\2\2\2\u13f5\u01c1\3\2\2\2\u13f6\u13f8\7\u022d\2\2\u13f7\u13f6\3\2\2"+
		"\2\u13f7\u13f8\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u1408\7\u0161\2\2\u13fa"+
		"\u13fb\7\u019f\2\2\u13fb\u1408\7\u022b\2\2\u13fc\u1408\7\u01e4\2\2\u13fd"+
		"\u1408\7\u026e\2\2\u13fe\u1400\7\u0179\2\2\u13ff\u13fe\3\2\2\2\u13ff\u1400"+
		"\3\2\2\2\u1400\u1401\3\2\2\2\u1401\u1408\7\u01ea\2\2\u1402\u1408\7\u01ec"+
		"\2\2\u1403\u1404\7\u0217\2\2\u1404\u1408\7\u0183\2\2\u1405\u1408\7\u011f"+
		"\2\2\u1406\u1408\7\u0149\2\2\u1407\u13f7\3\2\2\2\u1407\u13fa\3\2\2\2\u1407"+
		"\u13fc\3\2\2\2\u1407\u13fd\3\2\2\2\u1407\u13ff\3\2\2\2\u1407\u1402\3\2"+
		"\2\2\u1407\u1403\3\2\2\2\u1407\u1405\3\2\2\2\u1407\u1406\3\2\2\2\u1408"+
		"\u01c3\3\2\2\2\u1409\u1412\7\u0167\2\2\u140a\u140b\7\u009d\2\2\u140b\u1412"+
		"\7\u022b\2\2\u140c\u140e\7\u0179\2\2\u140d\u140c\3\2\2\2\u140d\u140e\3"+
		"\2\2\2\u140e\u140f\3\2\2\2\u140f\u1412\7\u0266\2\2\u1410\u1412\7\u023f"+
		"\2\2\u1411\u1409\3\2\2\2\u1411\u140a\3\2\2\2\u1411\u140d\3\2\2\2\u1411"+
		"\u1410\3\2\2\2\u1412\u01c5\3\2\2\2\u1413\u1420\7\t\2\2\u1414\u1415\7\u0127"+
		"\2\2\u1415\u1420\7\u018f\2\2\u1416\u1417\7\u0148\2\2\u1417\u1420\7\u0236"+
		"\2\2\u1418\u1420\7\u014b\2\2\u1419\u1420\7\u0191\2\2\u141a\u1420\7\u02b6"+
		"\2\2\u141b\u141c\7\u01db\2\2\u141c\u1420\7\u0170\2\2\u141d\u1420\7\u021e"+
		"\2\2\u141e\u1420\7\u0235\2\2\u141f\u1413\3\2\2\2\u141f\u1414\3\2\2\2\u141f"+
		"\u1416\3\2\2\2\u141f\u1418\3\2\2\2\u141f\u1419\3\2\2\2\u141f\u141a\3\2"+
		"\2\2\u141f\u141b\3\2\2\2\u141f\u141d\3\2\2\2\u141f\u141e\3\2\2\2\u1420"+
		"\u01c7\3\2\2\2\u1421\u1422\7\u0125\2\2\u1422\u1423\7\u0418\2\2\u1423\u01c9"+
		"\3\2\2\2\u1424\u1425\7\u012b\2\2\u1425\u1426\7K\2\2\u1426\u142b\5\u01d6"+
		"\u00ec\2\u1427\u1428\7\u040b\2\2\u1428\u142a\5\u01d6\u00ec\2\u1429\u1427"+
		"\3\2\2\2\u142a\u142d\3\2\2\2\u142b\u1429\3\2\2\2\u142b\u142c\3\2\2\2\u142c"+
		"\u1435\3\2\2\2\u142d\u142b\3\2\2\2\u142e\u142f\7v\2\2\u142f\u1432\7\u0409"+
		"\2\2\u1430\u1433\5\u022c\u0117\2\u1431\u1433\7\t\2\2\u1432\u1430\3\2\2"+
		"\2\u1432\u1431\3\2\2\2\u1433\u1434\3\2\2\2\u1434\u1436\7\u040a\2\2\u1435"+
		"\u142e\3\2\2\2\u1435\u1436\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1438\7J"+
		"\2\2\u1438\u1439\5\u020c\u0107\2\u1439\u01cb\3\2\2\2\u143a\u143c\7\u0176"+
		"\2\2\u143b\u143d\tA\2\2\u143c\u143b\3\2\2\2\u143c\u143d\3\2\2\2\u143d"+
		"\u143e\3\2\2\2\u143e\u1443\5\u01d8\u00ed\2\u143f\u1440\7\u040b\2\2\u1440"+
		"\u1442\5\u01d8\u00ed\2\u1441\u143f\3\2\2\2\u1442\u1445\3\2\2\2\u1443\u1441"+
		"\3\2\2\2\u1443\u1444\3\2\2\2\u1444\u01cd\3\2\2\2\u1445\u1443\3\2\2\2\u1446"+
		"\u1448\7W\2\2\u1447\u1449\tN\2\2\u1448\u1447\3\2\2\2\u1448\u1449\3\2\2"+
		"\2\u1449\u144b\3\2\2\2\u144a\u144c\5\u0212\u010a\2\u144b\u144a\3\2\2\2"+
		"\u144c\u144d\3\2\2\2\u144d\u144b\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u01cf"+
		"\3\2\2\2\u144f\u1450\7_\2\2\u1450\u1451\7K\2\2\u1451\u1452\7Q\2\2\u1452"+
		"\u1453\7\u012b\2\2\u1453\u1458\5\u01dc\u00ef\2\u1454\u1455\7\u040b\2\2"+
		"\u1455\u1457\5\u01dc\u00ef\2\u1456\u1454\3\2\2\2\u1457\u145a\3\2\2\2\u1458"+
		"\u1456\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u01d1\3\2\2\2\u145a\u1458\3\2"+
		"\2\2\u145b\u145c\7\u0203\2\2\u145c\u145d\7\u01ee\2\2\u145d\u145e\7\u012b"+
		"\2\2\u145e\u01d3\3\2\2\2\u145f\u1460\7\u026c\2\2\u1460\u01d5\3\2\2\2\u1461"+
		"\u1469\5\u01f4\u00fb\2\u1462\u1464\t\24\2\2\u1463\u1462\3\2\2\2\u1463"+
		"\u1464\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u1466\7\u0409\2\2\u1466\u1467"+
		"\5\u022c\u0117\2\u1467\u1468\7\u040a\2\2\u1468\u146a\3\2\2\2\u1469\u1463"+
		"\3\2\2\2\u1469\u146a\3\2\2\2\u146a\u01d7\3\2\2\2\u146b\u147e\7\u0153\2"+
		"\2\u146c\u147e\7\u0183\2\2\u146d\u146f\tO\2\2\u146e\u146d\3\2\2\2\u146e"+
		"\u146f\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u147e\7\u019e\2\2\u1471\u147e"+
		"\7\u01d7\2\2\u1472\u147e\7\u026e\2\2\u1473\u1474\7\u01ee\2\2\u1474\u147e"+
		"\7\u012b\2\2\u1475\u147e\7\u022b\2\2\u1476\u147e\7\u024a\2\2\u1477\u147b"+
		"\7\u0266\2\2\u1478\u1479\7\u00b1\2\2\u1479\u147a\7{\2\2\u147a\u147c\7"+
		"`\2\2\u147b\u1478\3\2\2\2\u147b\u147c\3\2\2\2\u147c\u147e\3\2\2\2\u147d"+
		"\u146b\3\2\2\2\u147d\u146c\3\2\2\2\u147d\u146e\3\2\2\2\u147d\u1471\3\2"+
		"\2\2\u147d\u1472\3\2\2\2\u147d\u1473\3\2\2\2\u147d\u1475\3\2\2\2\u147d"+
		"\u1476\3\2\2\2\u147d\u1477\3\2\2\2\u147e\u148a\3\2\2\2\u147f\u1480\7\u01f4"+
		"\2\2\u1480\u1482\7\u019e\2\2\u1481\u1483\5\u013a\u009e\2\u1482\u1481\3"+
		"\2\2\2\u1482\u1483\3\2\2\2\u1483\u148a\3\2\2\2\u1484\u1485\7\u0266\2\2"+
		"\u1485\u1487\5\u022e\u0118\2\u1486\u1488\5\u01da\u00ee\2\u1487\u1486\3"+
		"\2\2\2\u1487\u1488\3\2\2\2\u1488\u148a\3\2\2\2\u1489\u147d\3\2\2\2\u1489"+
		"\u147f\3\2\2\2\u1489\u1484\3\2\2\2\u148a\u01d9\3\2\2\2\u148b\u148c\7\u00b1"+
		"\2\2\u148c\u148d\7{\2\2\u148d\u1491\7`\2\2\u148e\u148f\7=\2\2\u148f\u1491"+
		"\7\u016c\2\2\u1490\u148b\3\2\2\2\u1490\u148e\3\2\2\2\u1491\u01db\3\2\2"+
		"\2\u1492\u149a\5\u01f4\u00fb\2\u1493\u1494\7v\2\2\u1494\u1497\7\u0409"+
		"\2\2\u1495\u1498\5\u022c\u0117\2\u1496\u1498\7\t\2\2\u1497\u1495\3\2\2"+
		"\2\u1497\u1496\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u149b\7\u040a\2\2\u149a"+
		"\u1493\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u14a3\3\2\2\2\u149c\u149e\t\24"+
		"\2\2\u149d\u149c\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u149f\3\2\2\2\u149f"+
		"\u14a0\7\u0409\2\2\u14a0\u14a1\5\u022c\u0117\2\u14a1\u14a2\7\u040a\2\2"+
		"\u14a2\u14a4\3\2\2\2\u14a3\u149d\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14a7"+
		"\3\2\2\2\u14a5\u14a6\7I\2\2\u14a6\u14a8\7\u0198\2\2\u14a7\u14a5\3\2\2"+
		"\2\u14a7\u14a8\3\2\2\2\u14a8\u01dd\3\2\2\2\u14a9\u14aa\tP\2\2\u14aa\u14ad"+
		"\5\u01f4\u00fb\2\u14ab\u14ae\5\u020c\u0107\2\u14ac\u14ae\7\u0418\2\2\u14ad"+
		"\u14ab\3\2\2\2\u14ad\u14ac\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae\u01df\3\2"+
		"\2\2\u14af\u14b3\tP\2\2\u14b0\u14b1\tQ\2\2\u14b1\u14b2\7\u0400\2\2\u14b2"+
		"\u14b4\tR\2\2\u14b3\u14b0\3\2\2\2\u14b3\u14b4\3\2\2\2\u14b4\u14b5\3\2"+
		"\2\2\u14b5\u14b6\5\u01f0\u00f9\2\u14b6\u01e1\3\2\2\2\u14b7\u14b8\7\u0181"+
		"\2\2\u14b8\u14b9\7\u0418\2\2\u14b9\u01e3\3\2\2\2\u14ba\u14bb\7\u00ab\2"+
		"\2\u14bb\u14bc\5\u020c\u0107\2\u14bc\u01e5\3\2\2\2\u14bd\u14c5\7\u0090"+
		"\2\2\u14be\u14c0\7\u0094\2\2\u14bf\u14c1\7\u024c\2\2\u14c0\u14bf\3\2\2"+
		"\2\u14c0\u14c1\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u14c6\5\u0216\u010c\2"+
		"\u14c3\u14c6\7\u0420\2\2\u14c4\u14c6\7\u0421\2\2\u14c5\u14be\3\2\2\2\u14c5"+
		"\u14c3\3\2\2\2\u14c5\u14c4\3\2\2\2\u14c6\u14d0\3\2\2\2\u14c7\u14c8\7\u008d"+
		"\2\2\u14c8\u14cd\5\u01ea\u00f6\2\u14c9\u14ca\7\u040b\2\2\u14ca\u14cc\5"+
		"\u01ea\u00f6\2\u14cb\u14c9\3\2\2\2\u14cc\u14cf\3\2\2\2\u14cd\u14cb\3\2"+
		"\2\2\u14cd\u14ce\3\2\2\2\u14ce\u14d1\3\2\2\2\u14cf\u14cd\3\2\2\2\u14d0"+
		"\u14c7\3\2\2\2\u14d0\u14d1\3\2\2\2\u14d1\u01e7\3\2\2\2\u14d2\u14da\7\u0084"+
		"\2\2\u14d3\u14d5\7\u0094\2\2\u14d4\u14d6\7\u024c\2\2\u14d5\u14d4\3\2\2"+
		"\2\u14d5\u14d6\3\2\2\2\u14d6\u14d7\3\2\2\2\u14d7\u14db\5\u0216\u010c\2"+
		"\u14d8\u14db\7\u0420\2\2\u14d9\u14db\7\u0421\2\2\u14da\u14d3\3\2\2\2\u14da"+
		"\u14d8\3\2\2\2\u14da\u14d9\3\2\2\2\u14da\u14db\3\2\2\2\u14db\u14e5\3\2"+
		"\2\2\u14dc\u14dd\7\u008d\2\2\u14dd\u14e2\5\u01ea\u00f6\2\u14de\u14df\7"+
		"\u040b\2\2\u14df\u14e1\5\u01ea\u00f6\2\u14e0\u14de\3\2\2\2\u14e1\u14e4"+
		"\3\2\2\2\u14e2\u14e0\3\2\2\2\u14e2\u14e3\3\2\2\2\u14e3\u14e6\3\2\2\2\u14e4"+
		"\u14e2\3\2\2\2\u14e5\u14dc\3\2\2\2\u14e5\u14e6\3\2\2\2\u14e6\u01e9\3\2"+
		"\2\2\u14e7\u14e8\tS\2\2\u14e8\u14eb\7\u0400\2\2\u14e9\u14ec\5\u0216\u010c"+
		"\2\u14ea\u14ec\7\u0419\2\2\u14eb\u14e9\3\2\2\2\u14eb\u14ea\3\2\2\2\u14ec"+
		"\u01eb\3\2\2\2\u14ed\u14ef\7C\2\2\u14ee\u14f0\tT\2\2\u14ef\u14ee\3\2\2"+
		"\2\u14ef\u14f0\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u1511\7/\2\2\u14f2\u14f3"+
		"\5\u01bc\u00df\2\u14f3\u14f4\7\u0400\2\2\u14f4\u14fc\tU\2\2\u14f5\u14f6"+
		"\7\u040b\2\2\u14f6\u14f7\5\u01bc\u00df\2\u14f7\u14f8\7\u0400\2\2\u14f8"+
		"\u14f9\tU\2\2\u14f9\u14fb\3\2\2\2\u14fa\u14f5\3\2\2\2\u14fb\u14fe\3\2"+
		"\2\2\u14fc\u14fa\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u1512\3\2\2\2\u14fe"+
		"\u14fc\3\2\2\2\u14ff\u1502\7\35\2\2\u1500\u1503\5\u0212\u010a\2\u1501"+
		"\u1503\5\u01bc\u00df\2\u1502\u1500\3\2\2\2\u1502\u1501\3\2\2\2\u1503\u1504"+
		"\3\2\2\2\u1504\u1505\5\u01bc\u00df\2\u1505\u1506\7\u0400\2\2\u1506\u150e"+
		"\5\u01ee\u00f8\2\u1507\u1508\7\u040b\2\2\u1508\u1509\5\u01bc\u00df\2\u1509"+
		"\u150a\7\u0400\2\2\u150a\u150b\5\u01ee\u00f8\2\u150b\u150d\3\2\2\2\u150c"+
		"\u1507\3\2\2\2\u150d\u1510\3\2\2\2\u150e\u150c\3\2\2\2\u150e\u150f\3\2"+
		"\2\2\u150f\u1512\3\2\2\2\u1510\u150e\3\2\2\2\u1511\u14f2\3\2\2\2\u1511"+
		"\u14ff\3\2\2\2\u1512\u01ed\3\2\2\2\u1513\u1514\tV\2\2\u1514\u01ef\3\2"+
		"\2\2\u1515\u151b\5\u00b4[\2\u1516\u151b\5\u00a6T\2\u1517\u151b\5\u00ac"+
		"W\2\u1518\u151b\5\u00b2Z\2\u1519\u151b\5\u00b6\\\2\u151a\u1515\3\2\2\2"+
		"\u151a\u1516\3\2\2\2\u151a\u1517\3\2\2\2\u151a\u1518\3\2\2\2\u151a\u1519"+
		"\3\2\2\2\u151b\u1520\3\2\2\2\u151c\u151d\7=\2\2\u151d\u151e\7\u0142\2"+
		"\2\u151e\u1520\5\u020c\u0107\2\u151f\u151a\3\2\2\2\u151f\u151c\3\2\2\2"+
		"\u1520\u01f1\3\2\2\2\u1521\u1525\5\u020c\u0107\2\u1522\u1526\7\u041f\2"+
		"\2\u1523\u1524\7\u0408\2\2\u1524\u1526\5\u020c\u0107\2\u1525\u1522\3\2"+
		"\2\2\u1525\u1523\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u01f3\3\2\2\2\u1527"+
		"\u1528\5\u01f2\u00fa\2\u1528\u01f5\3\2\2\2\u1529\u152e\5\u020c\u0107\2"+
		"\u152a\u152c\5\u0210\u0109\2\u152b\u152d\5\u0210\u0109\2\u152c\u152b\3"+
		"\2\2\2\u152c\u152d\3\2\2\2\u152d\u152f\3\2\2\2\u152e\u152a\3\2\2\2\u152e"+
		"\u152f\3\2\2\2\u152f\u1536\3\2\2\2\u1530\u1531\13\2\2\2\u1531\u1533\5"+
		"\u0210\u0109\2\u1532\u1534\5\u0210\u0109\2\u1533\u1532\3\2\2\2\u1533\u1534"+
		"\3\2\2\2\u1534\u1536\3\2\2\2\u1535\u1529\3\2\2\2\u1535\u1530\3\2\2\2\u1536"+
		"\u01f7\3\2\2\2\u1537\u153a\5\u020c\u0107\2\u1538\u153a\7\u0418\2\2\u1539"+
		"\u1537\3\2\2\2\u1539\u1538\3\2\2\2\u153a\u153f\3\2\2\2\u153b\u153c\7\u0409"+
		"\2\2\u153c\u153d\5\u0212\u010a\2\u153d\u153e\7\u040a\2\2\u153e\u1540\3"+
		"\2\2\2\u153f\u153b\3\2\2\2\u153f\u1540\3\2\2\2\u1540\u1542\3\2\2\2\u1541"+
		"\u1543\t,\2\2\u1542\u1541\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u01f9\3\2"+
		"\2\2\u1544\u1545\tW\2\2\u1545\u01fb\3\2\2\2\u1546\u1547\tX\2\2\u1547\u01fd"+
		"\3\2\2\2\u1548\u154d\7\u00d3\2\2\u1549\u154d\5\u0270\u0139\2\u154a\u154d"+
		"\7\u0418\2\2\u154b\u154d\7\u0415\2\2\u154c\u1548\3\2\2\2\u154c\u1549\3"+
		"\2\2\2\u154c\u154a\3\2\2\2\u154c\u154b\3\2\2\2\u154d\u01ff\3\2\2\2\u154e"+
		"\u1551\5\u020c\u0107\2\u154f\u1551\7\u0418\2\2\u1550\u154e\3\2\2\2\u1550"+
		"\u154f\3\2\2\2\u1551\u0201\3\2\2\2\u1552\u1553\tY\2\2\u1553\u0203\3\2"+
		"\2\2\u1554\u1555\5\u0212\u010a\2\u1555\u1556\7\u03fc\2\2\u1556\u1557\5"+
		"\u0212\u010a\2\u1557\u1558\7\u03fc\2\2\u1558\u1559\5\u0212\u010a\2\u1559"+
		"\u155a\7\u03fc\2\2\u155a\u155b\5\u0212\u010a\2\u155b\u155c\7\u03fc\2\2"+
		"\u155c\u1562\5\u0212\u010a\2\u155d\u155e\7\u0414\2\2\u155e\u155f\5\u0212"+
		"\u010a\2\u155f\u1560\7\u03fc\2\2\u1560\u1561\5\u0212\u010a\2\u1561\u1563"+
		"\3\2\2\2\u1562\u155d\3\2\2\2\u1563\u1564\3\2\2\2\u1564\u1562\3\2\2\2\u1564"+
		"\u1565\3\2\2\2\u1565\u0205\3\2\2\2\u1566\u156d\5\u0208\u0105\2\u1567\u1568"+
		"\7\u040b\2\2\u1568\u156b\5\u0208\u0105\2\u1569\u156a\7\u040b\2\2\u156a"+
		"\u156c\5\u0212\u010a\2\u156b\u1569\3\2\2\2\u156b\u156c\3\2\2\2\u156c\u156e"+
		"\3\2\2\2\u156d\u1567\3\2\2\2\u156d\u156e\3\2\2\2\u156e\u0207\3\2\2\2\u156f"+
		"\u1577\7\u0418\2\2\u1570\u1577\7\u041d\2\2\u1571\u1573\7\u041a\2\2\u1572"+
		"\u1571\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u1572\3\2\2\2\u1574\u1575\3\2"+
		"\2\2\u1575\u1577\3\2\2\2\u1576\u156f\3\2\2\2\u1576\u1570\3\2\2\2\u1576"+
		"\u1572\3\2\2\2\u1577\u0209\3\2\2\2\u1578\u157b\5\u020c\u0107\2\u1579\u157b"+
		"\7\u0418\2\2\u157a\u1578\3\2\2\2\u157a\u1579\3\2\2\2\u157b\u020b\3\2\2"+
		"\2\u157c\u1580\5\u020e\u0108\2\u157d\u1580\7\u0421\2\2\u157e\u1580\7\u0415"+
		"\2\2\u157f\u157c\3\2\2\2\u157f\u157d\3\2\2\2\u157f\u157e\3\2\2\2\u1580"+
		"\u020d\3\2\2\2\u1581\u158b\7\u0420\2\2\u1582\u158b\5\u0270\u0139\2\u1583"+
		"\u158b\5\u0272\u013a\2\u1584\u158b\5\u0202\u0102\2\u1585\u158b\5\u0274"+
		"\u013b\2\u1586\u158b\5\u0276\u013c\2\u1587\u158b\5\u0278\u013d\2\u1588"+
		"\u158b\5\u027a\u013e\2\u1589\u158b\5\u027c\u013f\2\u158a\u1581\3\2\2\2"+
		"\u158a\u1582\3\2\2\2\u158a\u1583\3\2\2\2\u158a\u1584\3\2\2\2\u158a\u1585"+
		"\3\2\2\2\u158a\u1586\3\2\2\2\u158a\u1587\3\2\2\2\u158a\u1588\3\2\2\2\u158a"+
		"\u1589\3\2\2\2\u158b\u020f\3\2\2\2\u158c\u1590\7\u041f\2\2\u158d\u158e"+
		"\7\u0408\2\2\u158e\u1590\5\u020c\u0107\2\u158f\u158c\3\2\2\2\u158f\u158d"+
		"\3\2\2\2\u1590\u0211\3\2\2\2\u1591\u1592\tZ\2\2\u1592\u0213\3\2\2\2\u1593"+
		"\u1596\7\u0416\2\2\u1594\u1596\5\u0212\u010a\2\u1595\u1593\3\2\2\2\u1595"+
		"\u1594\3\2\2\2\u1596\u0215\3\2\2\2\u1597\u1599\7\u041e\2\2\u1598\u1597"+
		"\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159a\3\2\2\2\u159a\u159d\7\u0418\2"+
		"\2\u159b\u159d\7\u0417\2\2\u159c\u1598\3\2\2\2\u159c\u159b\3\2\2\2\u159d"+
		"\u159f\3\2\2\2\u159e\u15a0\7\u0418\2\2\u159f\u159e\3\2\2\2\u15a0\u15a1"+
		"\3\2\2\2\u15a1\u159f\3\2\2\2\u15a1\u15a2\3\2\2\2\u15a2\u15af\3\2\2\2\u15a3"+
		"\u15a5\7\u041e\2\2\u15a4\u15a3\3\2\2\2\u15a4\u15a5\3\2\2\2\u15a5\u15a6"+
		"\3\2\2\2\u15a6\u15a9\7\u0418\2\2\u15a7\u15a9\7\u0417\2\2\u15a8\u15a4\3"+
		"\2\2\2\u15a8\u15a7\3\2\2\2\u15a9\u15ac\3\2\2\2\u15aa\u15ab\7\33\2\2\u15ab"+
		"\u15ad\5\u0200\u0101\2\u15ac\u15aa\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15af"+
		"\3\2\2\2\u15ae\u159c\3\2\2\2\u15ae\u15a8\3\2\2\2\u15af\u0217\3\2\2\2\u15b0"+
		"\u15b1\t[\2\2\u15b1\u0219\3\2\2\2\u15b2\u15b4\7\u041e\2\2\u15b3\u15b2"+
		"\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b6\7\u041a\2"+
		"\2\u15b6\u021b\3\2\2\2\u15b7\u15b9\7i\2\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9"+
		"\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15bb\t\\\2\2\u15bb\u021d\3\2\2\2\u15bc"+
		"\u15c9\5\u0216\u010c\2\u15bd\u15c9\5\u0212\u010a\2\u15be\u15bf\7\u03fc"+
		"\2\2\u15bf\u15c9\5\u0212\u010a\2\u15c0\u15c9\5\u021a\u010e\2\u15c1\u15c9"+
		"\5\u0218\u010d\2\u15c2\u15c9\7\u041b\2\2\u15c3\u15c9\7\u041d\2\2\u15c4"+
		"\u15c6\7i\2\2\u15c5\u15c4\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15c7\3\2"+
		"\2\2\u15c7\u15c9\t\\\2\2\u15c8\u15bc\3\2\2\2\u15c8\u15bd\3\2\2\2\u15c8"+
		"\u15be\3\2\2\2\u15c8\u15c0\3\2\2\2\u15c8\u15c1\3\2\2\2\u15c8\u15c2\3\2"+
		"\2\2\u15c8\u15c3\3\2\2\2\u15c8\u15c5\3\2\2\2\u15c9\u021f\3\2\2\2\u15ca"+
		"\u15cc\t]\2\2\u15cb\u15cd\5\u0226\u0114\2\u15cc\u15cb\3\2\2\2\u15cc\u15cd"+
		"\3\2\2\2\u15cd\u15cf\3\2\2\2\u15ce\u15d0\7\u00d3\2\2\u15cf\u15ce\3\2\2"+
		"\2\u15cf\u15d0\3\2\2\2\u15d0\u15d7\3\2\2\2\u15d1\u15d2\7\31\2\2\u15d2"+
		"\u15d5\7\u008d\2\2\u15d3\u15d5\7\u02e7\2\2\u15d4\u15d1\3\2\2\2\u15d4\u15d3"+
		"\3\2\2\2\u15d5\u15d6\3\2\2\2\u15d6\u15d8\5\u01fe\u0100\2\u15d7\u15d4\3"+
		"\2\2\2\u15d7\u15d8\3\2\2\2\u15d8\u15db\3\2\2\2\u15d9\u15da\7\33\2\2\u15da"+
		"\u15dc\5\u0200\u0101\2\u15db\u15d9\3\2\2\2\u15db\u15dc\3\2\2\2\u15dc\u164a"+
		"\3\2\2\2\u15dd\u15de\7\u00d2\2\2\u15de\u15e0\t^\2\2\u15df\u15e1\5\u0226"+
		"\u0114\2\u15e0\u15df\3\2\2\2\u15e0\u15e1\3\2\2\2\u15e1\u15e3\3\2\2\2\u15e2"+
		"\u15e4\7\u00d3\2\2\u15e3\u15e2\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4\u164a"+
		"\3\2\2\2\u15e5\u15e6\7\u01c8\2\2\u15e6\u15e8\7\u00d0\2\2\u15e7\u15e9\5"+
		"\u0226\u0114\2\u15e8\u15e7\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9\u15eb\3\2"+
		"\2\2\u15ea\u15ec\7\u00d3\2\2\u15eb\u15ea\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec"+
		"\u164a\3\2\2\2\u15ed\u15ee\7\u00d2\2\2\u15ee\u15ef\t_\2\2\u15ef\u15f1"+
		"\7\u00df\2\2\u15f0\u15f2\5\u0226\u0114\2\u15f1\u15f0\3\2\2\2\u15f1\u15f2"+
		"\3\2\2\2\u15f2\u15f4\3\2\2\2\u15f3\u15f5\7\u00d3\2\2\u15f4\u15f3\3\2\2"+
		"\2\u15f4\u15f5\3\2\2\2\u15f5\u164a\3\2\2\2\u15f6\u15f8\t`\2\2\u15f7\u15f9"+
		"\5\u0226\u0114\2\u15f8\u15f7\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u15fb\3"+
		"\2\2\2\u15fa\u15fc\ta\2\2\u15fb\u15fa\3\2\2\2\u15fb\u15fc\3\2\2\2\u15fc"+
		"\u15fe\3\2\2\2\u15fd\u15ff\7\u00b4\2\2\u15fe\u15fd\3\2\2\2\u15fe\u15ff"+
		"\3\2\2\2\u15ff\u164a\3\2\2\2\u1600\u1602\7\u00c1\2\2\u1601\u1603\5\u0228"+
		"\u0115\2\u1602\u1601\3\2\2\2\u1602\u1603\3\2\2\2\u1603\u1605\3\2\2\2\u1604"+
		"\u1606\ta\2\2\u1605\u1604\3\2\2\2\u1605\u1606\3\2\2\2\u1606\u1608\3\2"+
		"\2\2\u1607\u1609\7\u00b4\2\2\u1608\u1607\3\2\2\2\u1608\u1609\3\2\2\2\u1609"+
		"\u164a\3\2\2\2\u160a\u160c\7\u00c2\2\2\u160b\u160d\7\u00c3\2\2\u160c\u160b"+
		"\3\2\2\2\u160c\u160d\3\2\2\2\u160d\u160f\3\2\2\2\u160e\u1610\5\u0228\u0115"+
		"\2\u160f\u160e\3\2\2\2\u160f\u1610\3\2\2\2\u1610\u1612\3\2\2\2\u1611\u1613"+
		"\ta\2\2\u1612\u1611\3\2\2\2\u1612\u1613\3\2\2\2\u1613\u1615\3\2\2\2\u1614"+
		"\u1616\7\u00b4\2\2\u1615\u1614\3\2\2\2\u1615\u1616\3\2\2\2\u1616\u164a"+
		"\3\2\2\2\u1617\u1619\tb\2\2\u1618\u161a\5\u022a\u0116\2\u1619\u1618\3"+
		"\2\2\2\u1619\u161a\3\2\2\2\u161a\u161c\3\2\2\2\u161b\u161d\ta\2\2\u161c"+
		"\u161b\3\2\2\2\u161c\u161d\3\2\2\2\u161d\u161f\3\2\2\2\u161e\u1620\7\u00b4"+
		"\2\2\u161f\u161e\3\2\2\2\u161f\u1620\3\2\2\2\u1620\u164a\3\2\2\2\u1621"+
		"\u164a\tc\2\2\u1622\u1624\td\2\2\u1623\u1625\5\u0226\u0114\2\u1624\u1623"+
		"\3\2\2\2\u1624\u1625\3\2\2\2\u1625\u164a\3\2\2\2\u1626\u1627\te\2\2\u1627"+
		"\u1629\5\u0222\u0112\2\u1628\u162a\7\u00d3\2\2\u1629\u1628\3\2\2\2\u1629"+
		"\u162a\3\2\2\2\u162a\u1631\3\2\2\2\u162b\u162c\7\31\2\2\u162c\u162f\7"+
		"\u008d\2\2\u162d\u162f\7\u02e7\2\2\u162e\u162b\3\2\2\2\u162e\u162d\3\2"+
		"\2\2\u162f\u1630\3\2\2\2\u1630\u1632\5\u01fe\u0100\2\u1631\u162e\3\2\2"+
		"\2\u1631\u1632\3\2\2\2\u1632\u164a\3\2\2\2\u1633\u164a\tf\2\2\u1634\u1636"+
		"\7\u00d8\2\2\u1635\u1637\7\u00d0\2\2\u1636\u1635\3\2\2\2\u1636\u1637\3"+
		"\2\2\2\u1637\u1639\3\2\2\2\u1638\u163a\7\u00d3\2\2\u1639\u1638\3\2\2\2"+
		"\u1639\u163a\3\2\2\2\u163a\u1641\3\2\2\2\u163b\u163c\7\31\2\2\u163c\u163f"+
		"\7\u008d\2\2\u163d\u163f\7\u02e7\2\2\u163e\u163b\3\2\2\2\u163e\u163d\3"+
		"\2\2\2\u163f\u1640\3\2\2\2\u1640\u1642\5\u01fe\u0100\2\u1641\u163e\3\2"+
		"\2\2\u1641\u1642\3\2\2\2\u1642\u1645\3\2\2\2\u1643\u1644\7\33\2\2\u1644"+
		"\u1646\5\u0200\u0101\2\u1645\u1643\3\2\2\2\u1645\u1646\3\2\2\2\u1646\u164a"+
		"\3\2\2\2\u1647\u1648\7\u00d8\2\2\u1648\u164a\7\u00d4\2\2\u1649\u15ca\3"+
		"\2\2\2\u1649\u15dd\3\2\2\2\u1649\u15e5\3\2\2\2\u1649\u15ed\3\2\2\2\u1649"+
		"\u15f6\3\2\2\2\u1649\u1600\3\2\2\2\u1649\u160a\3\2\2\2\u1649\u1617\3\2"+
		"\2\2\u1649\u1621\3\2\2\2\u1649\u1622\3\2\2\2\u1649\u1626\3\2\2\2\u1649"+
		"\u1633\3\2\2\2\u1649\u1634\3\2\2\2\u1649\u1647\3\2\2\2\u164a\u0221\3\2"+
		"\2\2\u164b\u164c\7\u0409\2\2\u164c\u1651\7\u0418\2\2\u164d\u164e\7\u040b"+
		"\2\2\u164e\u1650\7\u0418\2\2\u164f\u164d\3\2\2\2\u1650\u1653\3\2\2\2\u1651"+
		"\u164f\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1654\3\2\2\2\u1653\u1651\3\2"+
		"\2\2\u1654\u1655\7\u040a\2\2\u1655\u0223\3\2\2\2\u1656\u1658\tg\2\2\u1657"+
		"\u1659\5\u0226\u0114\2\u1658\u1657\3\2\2\2\u1658\u1659\3\2\2\2\u1659\u1670"+
		"\3\2\2\2\u165a\u165c\7\u00cf\2\2\u165b\u165d\5\u0226\u0114\2\u165c\u165b"+
		"\3\2\2\2\u165c\u165d\3\2\2\2\u165d\u1664\3\2\2\2\u165e\u165f\7\31\2\2"+
		"\u165f\u1662\7\u008d\2\2\u1660\u1662\7\u02e7\2\2\u1661\u165e\3\2\2\2\u1661"+
		"\u1660\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u1665\5\u01fe\u0100\2\u1664\u1661"+
		"\3\2\2\2\u1664\u1665\3\2\2\2\u1665\u1670\3\2\2\2\u1666\u1670\th\2\2\u1667"+
		"\u1669\7\u00c7\2\2\u1668\u166a\5\u0228\u0115\2\u1669\u1668\3\2\2\2\u1669"+
		"\u166a\3\2\2\2\u166a\u1670\3\2\2\2\u166b\u166d\ta\2\2\u166c\u166e\7\u00bf"+
		"\2\2\u166d\u166c\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u1670\3\2\2\2\u166f"+
		"\u1656\3\2\2\2\u166f\u165a\3\2\2\2\u166f\u1666\3\2\2\2\u166f\u1667\3\2"+
		"\2\2\u166f\u166b\3\2\2\2\u1670\u0225\3\2\2\2\u1671\u1672\7\u0409\2\2\u1672"+
		"\u1673\5\u0212\u010a\2\u1673\u1674\7\u040a\2\2\u1674\u0227\3\2\2\2\u1675"+
		"\u1676\7\u0409\2\2\u1676\u1677\5\u0212\u010a\2\u1677\u1678\7\u040b\2\2"+
		"\u1678\u1679\5\u0212\u010a\2\u1679\u167a\7\u040a\2\2\u167a\u0229\3\2\2"+
		"\2\u167b\u167c\7\u0409\2\2\u167c\u167f\5\u0212\u010a\2\u167d\u167e\7\u040b"+
		"\2\2\u167e\u1680\5\u0212\u010a\2\u167f\u167d\3\2\2\2\u167f\u1680\3\2\2"+
		"\2\u1680\u1681\3\2\2\2\u1681\u1682\7\u040a\2\2\u1682\u022b\3\2\2\2\u1683"+
		"\u1688\5\u020c\u0107\2\u1684\u1685\7\u040b\2\2\u1685\u1687\5\u020c\u0107"+
		"\2\u1686\u1684\3\2\2\2\u1687\u168a\3\2\2\2\u1688\u1686\3\2\2\2\u1688\u1689"+
		"\3\2\2\2\u1689\u022d\3\2\2\2\u168a\u1688\3\2\2\2\u168b\u1690\5\u01f4\u00fb"+
		"\2\u168c\u168d\7\u040b\2\2\u168d\u168f\5\u01f4\u00fb\2\u168e\u168c\3\2"+
		"\2\2\u168f\u1692\3\2\2\2\u1690\u168e\3\2\2\2\u1690\u1691\3\2\2\2\u1691"+
		"\u022f\3\2\2\2\u1692\u1690\3\2\2\2\u1693\u1694\7\u0409\2\2\u1694\u1699"+
		"\5\u01f8\u00fd\2\u1695\u1696\7\u040b\2\2\u1696\u1698\5\u01f8\u00fd\2\u1697"+
		"\u1695\3\2\2\2\u1698\u169b\3\2\2\2\u1699\u1697\3\2\2\2\u1699\u169a\3\2"+
		"\2\2\u169a\u169c\3\2\2\2\u169b\u1699\3\2\2\2\u169c\u169d\7\u040a\2\2\u169d"+
		"\u0231\3\2\2\2\u169e\u16a3\5\u025c\u012f\2\u169f\u16a0\7\u040b\2\2\u16a0"+
		"\u16a2\5\u025c\u012f\2\u16a1\u169f\3\2\2\2\u16a2\u16a5\3\2\2\2\u16a3\u16a1"+
		"\3\2\2\2\u16a3\u16a4\3\2\2\2\u16a4\u0233\3\2\2\2\u16a5\u16a3\3\2\2\2\u16a6"+
		"\u16ab\5\u0240\u0121\2\u16a7\u16a8\7\u040b\2\2\u16a8\u16aa\5\u0240\u0121"+
		"\2\u16a9\u16a7\3\2\2\2\u16aa\u16ad\3\2\2\2\u16ab\u16a9\3\2\2\2\u16ab\u16ac"+
		"\3\2\2\2\u16ac\u0235\3\2\2\2\u16ad\u16ab\3\2\2\2\u16ae\u16b3\5\u021e\u0110"+
		"\2\u16af\u16b0\7\u040b\2\2\u16b0\u16b2\5\u021e\u0110\2\u16b1\u16af\3\2"+
		"\2\2\u16b2\u16b5\3\2\2\2\u16b3\u16b1\3\2\2\2\u16b3\u16b4\3\2\2\2\u16b4"+
		"\u0237\3\2\2\2\u16b5\u16b3\3\2\2\2\u16b6\u16bb\7\u0418\2\2\u16b7\u16b8"+
		"\7\u040b\2\2\u16b8\u16ba\7\u0418\2\2\u16b9\u16b7\3\2\2\2\u16ba\u16bd\3"+
		"\2\2\2\u16bb\u16b9\3\2\2\2\u16bb\u16bc\3\2\2\2\u16bc\u0239\3\2\2\2\u16bd"+
		"\u16bb\3\2\2\2\u16be\u16c3\7\u0423\2\2\u16bf\u16c0\7\u040b\2\2\u16c0\u16c2"+
		"\7\u0423\2\2\u16c1\u16bf\3\2\2\2\u16c2\u16c5\3\2\2\2\u16c3\u16c1\3\2\2"+
		"\2\u16c3\u16c4\3\2\2\2\u16c4\u023b\3\2\2\2\u16c5\u16c3\3\2\2\2\u16c6\u16cd"+
		"\7k\2\2\u16c7\u16c9\5\u0262\u0132\2\u16c8\u16c7\3\2\2\2\u16c8\u16c9\3"+
		"\2\2\2\u16c9\u16ca\3\2\2\2\u16ca\u16cd\5\u021e\u0110\2\u16cb\u16cd\5\u023e"+
		"\u0120\2\u16cc\u16c6\3\2\2\2\u16cc\u16c8\3\2\2\2\u16cc\u16cb\3\2\2\2\u16cd"+
		"\u16d1\3\2\2\2\u16ce\u16cf\7m\2\2\u16cf\u16d0\7\u00a9\2\2\u16d0\u16d2"+
		"\5\u023e\u0120\2\u16d1\u16ce\3\2\2\2\u16d1\u16d2\3\2\2\2\u16d2\u023d\3"+
		"\2\2\2\u16d3\u16d9\ti\2\2\u16d4\u16d6\7\u0409\2\2\u16d5\u16d7\5\u0212"+
		"\u010a\2\u16d6\u16d5\3\2\2\2\u16d6\u16d7\3\2\2\2\u16d7\u16d8\3\2\2\2\u16d8"+
		"\u16da\7\u040a\2\2\u16d9\u16d4\3\2\2\2\u16d9\u16da\3\2\2\2\u16da\u16e2"+
		"\3\2\2\2\u16db\u16dc\7\u010f\2\2\u16dc\u16de\7\u0409\2\2\u16dd\u16df\5"+
		"\u0212\u010a\2\u16de\u16dd\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u16e0\3\2"+
		"\2\2\u16e0\u16e2\7\u040a\2\2\u16e1\u16d3\3\2\2\2\u16e1\u16db\3\2\2\2\u16e2"+
		"\u023f\3\2\2\2\u16e3\u16e6\5\u025c\u012f\2\u16e4\u16e6\7)\2\2\u16e5\u16e3"+
		"\3\2\2\2\u16e5\u16e4\3\2\2\2\u16e6\u0241\3\2\2\2\u16e7\u16e8\7H\2\2\u16e8"+
		"\u16e9\78\2\2\u16e9\u0243\3\2\2\2\u16ea\u16eb\7H\2\2\u16eb\u16ec\7i\2"+
		"\2\u16ec\u16ed\78\2\2\u16ed\u0245\3\2\2\2\u16ee\u1701\5\u0248\u0125\2"+
		"\u16ef\u1701\5\u0250\u0129\2\u16f0\u16f1\5\u0254\u012b\2\u16f1\u16f3\7"+
		"\u0409\2\2\u16f2\u16f4\5\u0258\u012d\2\u16f3\u16f2\3\2\2\2\u16f3\u16f4"+
		"\3\2\2\2\u16f4\u16f5\3\2\2\2\u16f5\u16f6\7\u040a\2\2\u16f6\u1701\3\2\2"+
		"\2\u16f7\u16f8\5\u01f2\u00fa\2\u16f8\u16fa\7\u0409\2\2\u16f9\u16fb\5\u0258"+
		"\u012d\2\u16fa\u16f9\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fc\3\2\2\2\u16fc"+
		"\u16fd\7\u040a\2\2\u16fd\u1701\3\2\2\2\u16fe\u1701\5\u0256\u012c\2\u16ff"+
		"\u1701\5\u0252\u012a\2\u1700\u16ee\3\2\2\2\u1700\u16ef\3\2\2\2\u1700\u16f0"+
		"\3\2\2\2\u1700\u16f7\3\2\2\2\u1700\u16fe\3\2\2\2\u1700\u16ff\3\2\2\2\u1701"+
		"\u0247\3\2\2\2\u1702\u17a0\tj\2\2\u1703\u1704\7 \2\2\u1704\u1705\7\u0409"+
		"\2\2\u1705\u1706\5\u025c\u012f\2\u1706\u1707\7\u040b\2\2\u1707\u1708\5"+
		"\u0224\u0113\2\u1708\u1709\7\u040a\2\2\u1709\u17a0\3\2\2\2\u170a\u170b"+
		"\7 \2\2\u170b\u170c\7\u0409\2\2\u170c\u170d\5\u025c\u012f\2\u170d\u170e"+
		"\7\u00ac\2\2\u170e\u170f\5\u01fe\u0100\2\u170f\u1710\7\u040a\2\2\u1710"+
		"\u17a0\3\2\2\2\u1711\u1712\7\27\2\2\u1712\u1713\7\u0409\2\2\u1713\u1714"+
		"\5\u025c\u012f\2\u1714\u1715\7\16\2\2\u1715\u1716\5\u0224\u0113\2\u1716"+
		"\u1717\7\u040a\2\2\u1717\u17a0\3\2\2\2\u1718\u1719\7\u00ad\2\2\u1719\u171a"+
		"\7\u0409\2\2\u171a\u171b\5\u01f6\u00fc\2\u171b\u171c\7\u040a\2\2\u171c"+
		"\u17a0\3\2\2\2\u171d\u171e\7\26\2\2\u171e\u1720\5\u025c\u012f\2\u171f"+
		"\u1721\5\u024a\u0126\2\u1720\u171f\3\2\2\2\u1721\u1722\3\2\2\2\u1722\u1720"+
		"\3\2\2\2\u1722\u1723\3\2\2\2\u1723\u1726\3\2\2\2\u1724\u1725\7\64\2\2"+
		"\u1725\u1727\5\u025a\u012e\2\u1726\u1724\3\2\2\2\u1726\u1727\3\2\2\2\u1727"+
		"\u1728\3\2\2\2\u1728\u1729\7\u015e\2\2\u1729\u17a0\3\2\2\2\u172a\u172c"+
		"\7\26\2\2\u172b\u172d\5\u024a\u0126\2\u172c\u172b\3\2\2\2\u172d\u172e"+
		"\3\2\2\2\u172e\u172c\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1732\3\2\2\2\u1730"+
		"\u1731\7\64\2\2\u1731\u1733\5\u025a\u012e\2\u1732\u1730\3\2\2\2\u1732"+
		"\u1733\3\2\2\2\u1733\u1734\3\2\2\2\u1734\u1735\7\u015e\2\2\u1735\u17a0"+
		"\3\2\2\2\u1736\u1737\7\u00cf\2\2\u1737\u1738\7\u0409\2\2\u1738\u173b\5"+
		"\u0258\u012d\2\u1739\u173a\7\u00ac\2\2\u173a\u173c\5\u01fe\u0100\2\u173b"+
		"\u1739\3\2\2\2\u173b\u173c\3\2\2\2\u173c\u173d\3\2\2\2\u173d\u173e\7\u040a"+
		"\2\2\u173e\u17a0\3\2\2\2\u173f\u1740\7\u0110\2\2\u1740\u1743\7\u0409\2"+
		"\2\u1741\u1744\5\u0216\u010c\2\u1742\u1744\5\u025c\u012f\2\u1743\u1741"+
		"\3\2\2\2\u1743\u1742\3\2\2\2\u1744\u1745\3\2\2\2\u1745\u1748\7J\2\2\u1746"+
		"\u1749\5\u0216\u010c\2\u1747\u1749\5\u025c\u012f\2\u1748\u1746\3\2\2\2"+
		"\u1748\u1747\3\2\2\2\u1749\u174a\3\2\2\2\u174a\u174b\7\u040a\2\2\u174b"+
		"\u17a0\3\2\2\2\u174c\u174d\tk\2\2\u174d\u1750\7\u0409\2\2\u174e\u1751"+
		"\5\u0216\u010c\2\u174f\u1751\5\u025c\u012f\2\u1750\u174e\3\2\2\2\u1750"+
		"\u174f\3\2\2\2\u1751\u1752\3\2\2\2\u1752\u1755\7@\2\2\u1753\u1756\5\u0212"+
		"\u010a\2\u1754\u1756\5\u025c\u012f\2\u1755\u1753\3\2\2\2\u1755\u1754\3"+
		"\2\2\2\u1756\u175c\3\2\2\2\u1757\u175a\7=\2\2\u1758\u175b\5\u0212\u010a"+
		"\2\u1759\u175b\5\u025c\u012f\2\u175a\u1758\3\2\2\2\u175a\u1759\3\2\2\2"+
		"\u175b\u175d\3\2\2\2\u175c\u1757\3\2\2\2\u175c\u175d\3\2\2\2\u175d\u175e"+
		"\3\2\2\2\u175e\u175f\7\u040a\2\2\u175f\u17a0\3\2\2\2\u1760\u1761\7\u0114"+
		"\2\2\u1761\u1762\7\u0409\2\2\u1762\u1765\tl\2\2\u1763\u1766\5\u0216\u010c"+
		"\2\u1764\u1766\5\u025c\u012f\2\u1765\u1763\3\2\2\2\u1765\u1764\3\2\2\2"+
		"\u1765\u1766\3\2\2\2\u1766\u1767\3\2\2\2\u1767\u176a\7@\2\2\u1768\u176b"+
		"\5\u0216\u010c\2\u1769\u176b\5\u025c\u012f\2\u176a\u1768\3\2\2\2\u176a"+
		"\u1769\3\2\2\2\u176b\u176c\3\2\2\2\u176c\u176d\7\u040a\2\2\u176d\u17a0"+
		"\3\2\2\2\u176e\u176f\7\u0114\2\2\u176f\u1772\7\u0409\2\2\u1770\u1773\5"+
		"\u0216\u010c\2\u1771\u1773\5\u025c\u012f\2\u1772\u1770\3\2\2\2\u1772\u1771"+
		"\3\2\2\2\u1773\u1774\3\2\2\2\u1774\u1777\7@\2\2\u1775\u1778\5\u0216\u010c"+
		"\2\u1776\u1778\5\u025c\u012f\2\u1777\u1775\3\2\2\2\u1777\u1776\3\2\2\2"+
		"\u1778\u1779\3\2\2\2\u1779\u177a\7\u040a\2\2\u177a\u17a0\3\2\2\2\u177b"+
		"\u177c\7\u03e9\2\2\u177c\u177f\7\u0409\2\2\u177d\u1780\5\u0216\u010c\2"+
		"\u177e\u1780\5\u025c\u012f\2\u177f\u177d\3\2\2\2\u177f\u177e\3\2\2\2\u1780"+
		"\u1787\3\2\2\2\u1781\u1782\7\16\2\2\u1782\u1783\tm\2\2\u1783\u1784\7\u0409"+
		"\2\2\u1784\u1785\5\u0212\u010a\2\u1785\u1786\7\u040a\2\2\u1786\u1788\3"+
		"\2\2\2\u1787\u1781\3\2\2\2\u1787\u1788\3\2\2\2\u1788\u178a\3\2\2\2\u1789"+
		"\u178b\5\u024c\u0127\2\u178a\u1789\3\2\2\2\u178a\u178b\3\2\2\2\u178b\u178c"+
		"\3\2\2\2\u178c\u178d\7\u040a\2\2\u178d\u17a0\3\2\2\2\u178e\u178f\7\u010d"+
		"\2\2\u178f\u1790\7\u0409\2\2\u1790\u1791\5<\37\2\u1791\u1794\7@\2\2\u1792"+
		"\u1795\5\u0216\u010c\2\u1793\u1795\5\u025c\u012f\2\u1794\u1792\3\2\2\2"+
		"\u1794\u1793\3\2\2\2\u1795\u1796\3\2\2\2\u1796\u1797\7\u040a\2\2\u1797"+
		"\u17a0\3\2\2\2\u1798\u1799\7\u0321\2\2\u1799\u179a\7\u0409\2\2\u179a\u179b"+
		"\tn\2\2\u179b\u179c\7\u040b\2\2\u179c\u179d\5\u0216\u010c\2\u179d\u179e"+
		"\7\u040a\2\2\u179e\u17a0\3\2\2\2\u179f\u1702\3\2\2\2\u179f\u1703\3\2\2"+
		"\2\u179f\u170a\3\2\2\2\u179f\u1711\3\2\2\2\u179f\u1718\3\2\2\2\u179f\u171d"+
		"\3\2\2\2\u179f\u172a\3\2\2\2\u179f\u1736\3\2\2\2\u179f\u173f\3\2\2\2\u179f"+
		"\u174c\3\2\2\2\u179f\u1760\3\2\2\2\u179f\u176e\3\2\2\2\u179f\u177b\3\2"+
		"\2\2\u179f\u178e\3\2\2\2\u179f\u1798\3\2\2\2\u17a0\u0249\3\2\2\2\u17a1"+
		"\u17a2\7\u00ae\2\2\u17a2\u17a3\5\u025a\u012e\2\u17a3\u17a4\7\u009f\2\2"+
		"\u17a4\u17a5\5\u025a\u012e\2\u17a5\u024b\3\2\2\2\u17a6\u17a7\7\u019a\2"+
		"\2\u17a7\u17ac\5\u024e\u0128\2\u17a8\u17a9\7\u040b\2\2\u17a9\u17ab\5\u024e"+
		"\u0128\2\u17aa\u17a8\3\2\2\2\u17ab\u17ae\3\2\2\2\u17ac\u17aa\3\2\2\2\u17ac"+
		"\u17ad\3\2\2\2\u17ad\u17b5\3\2\2\2\u17ae\u17ac\3\2\2\2\u17af\u17b0\7\u019a"+
		"\2\2\u17b0\u17b1\5\u0212\u010a\2\u17b1\u17b2\7\u03fc\2\2\u17b2\u17b3\5"+
		"\u0212\u010a\2\u17b3\u17b5\3\2\2\2\u17b4\u17a6\3\2\2\2\u17b4\u17af\3\2"+
		"\2\2\u17b5\u024d\3\2\2\2\u17b6\u17b8\5\u0212\u010a\2\u17b7\u17b9\to\2"+
		"\2\u17b8\u17b7\3\2\2\2\u17b8\u17b9\3\2\2\2\u17b9\u024f\3\2\2\2\u17ba\u17bb"+
		"\tp\2\2\u17bb\u17bd\7\u0409\2\2\u17bc\u17be\t(\2\2\u17bd\u17bc\3\2\2\2"+
		"\u17bd\u17be\3\2\2\2\u17be\u17bf\3\2\2\2\u17bf\u17c0\5\u025a\u012e\2\u17c0"+
		"\u17c1\7\u040a\2\2\u17c1\u17f3\3\2\2\2\u17c2\u17c3\7\u00f2\2\2\u17c3\u17c9"+
		"\7\u0409\2\2\u17c4\u17ca\7\u03f7\2\2\u17c5\u17c7\7\t\2\2\u17c6\u17c5\3"+
		"\2\2\2\u17c6\u17c7\3\2\2\2\u17c7\u17c8\3\2\2\2\u17c8\u17ca\5\u025a\u012e"+
		"\2\u17c9\u17c4\3\2\2\2\u17c9\u17c6\3\2\2\2\u17ca\u17cb\3\2\2\2\u17cb\u17f3"+
		"\7\u040a\2\2\u17cc\u17cd\7\u00f2\2\2\u17cd\u17ce\7\u0409\2\2\u17ce\u17cf"+
		"\7\60\2\2\u17cf\u17d0\5\u0258\u012d\2\u17d0\u17d1\7\u040a\2\2\u17d1\u17f3"+
		"\3\2\2\2\u17d2\u17d3\tq\2\2\u17d3\u17d5\7\u0409\2\2\u17d4\u17d6\7\t\2"+
		"\2\u17d5\u17d4\3\2\2\2\u17d5\u17d6\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7\u17d8"+
		"\5\u025a\u012e\2\u17d8\u17d9\7\u040a\2\2\u17d9\u17f3\3\2\2\2\u17da\u17db"+
		"\7\u00f3\2\2\u17db\u17dd\7\u0409\2\2\u17dc\u17de\7\60\2\2\u17dd\u17dc"+
		"\3\2\2\2\u17dd\u17de\3\2\2\2\u17de\u17df\3\2\2\2\u17df\u17ea\5\u0258\u012d"+
		"\2\u17e0\u17e1\7r\2\2\u17e1\u17e2\7\23\2\2\u17e2\u17e7\5\u00d2j\2\u17e3"+
		"\u17e4\7\u040b\2\2\u17e4\u17e6\5\u00d2j\2\u17e5\u17e3\3\2\2\2\u17e6\u17e9"+
		"\3\2\2\2\u17e7\u17e5\3\2\2\2\u17e7\u17e8\3\2\2\2\u17e8\u17eb\3\2\2\2\u17e9"+
		"\u17e7\3\2\2\2\u17ea\u17e0\3\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u17ee\3\2"+
		"\2\2\u17ec\u17ed\7\u008e\2\2\u17ed\u17ef\7\u0418\2\2\u17ee\u17ec\3\2\2"+
		"\2\u17ee\u17ef\3\2\2\2\u17ef\u17f0\3\2\2\2\u17f0\u17f1\7\u040a\2\2\u17f1"+
		"\u17f3\3\2\2\2\u17f2\u17ba\3\2\2\2\u17f2\u17c2\3\2\2\2\u17f2\u17cc\3\2"+
		"\2\2\u17f2\u17d2\3\2\2\2\u17f2\u17da\3\2\2\2\u17f3\u0251\3\2\2\2\u17f4"+
		"\u17f5\tr\2\2\u17f5\u17f6\7\u0409\2\2\u17f6\u17f7\7\u040a\2\2\u17f7\u17f8"+
		"\7\u00fe\2\2\u17f8\u1803\7\u0409\2\2\u17f9\u17fa\7v\2\2\u17fa\u17fb\7"+
		"\23\2\2\u17fb\u1800\5\u00fa~\2\u17fc\u17fd\7\u040b\2\2\u17fd\u17ff\5\u00fa"+
		"~\2\u17fe\u17fc\3\2\2\2\u17ff\u1802\3\2\2\2\u1800\u17fe\3\2\2\2\u1800"+
		"\u1801\3\2\2\2\u1801\u1804\3\2\2\2\u1802\u1800\3\2\2\2\u1803\u17f9\3\2"+
		"\2\2\u1803\u1804\3\2\2\2\u1804\u180f\3\2\2\2\u1805\u1806\7r\2\2\u1806"+
		"\u1807\7\23\2\2\u1807\u180c\5\u00d2j\2\u1808\u1809\7\u040b\2\2\u1809\u180b"+
		"\5\u00d2j\2\u180a\u1808\3\2\2\2\u180b\u180e\3\2\2\2\u180c\u180a\3\2\2"+
		"\2\u180c\u180d\3\2\2\2\u180d\u1810\3\2\2\2\u180e\u180c\3\2\2\2\u180f\u1805"+
		"\3\2\2\2\u180f\u1810\3\2\2\2\u1810\u1811\3\2\2\2\u1811\u1812\7\u040a\2"+
		"\2\u1812\u0253\3\2\2\2\u1813\u182b\5\u027c\u013f\2\u1814\u182b\7\u028a"+
		"\2\2\u1815\u182b\7\u0109\2\2\u1816\u182b\7\u0105\2\2\u1817\u182b\7\u0106"+
		"\2\2\u1818\u182b\7\u0107\2\2\u1819\u182b\7\u010a\2\2\u181a\u182b\7\u010b"+
		"\2\2\u181b\u182b\7\u010c\2\2\u181c\u182b\7H\2\2\u181d\u182b\7O\2\2\u181e"+
		"\u182b\7\u0108\2\2\u181f\u182b\7\u010e\2\2\u1820\u182b\7\u01be\2\2\u1821"+
		"\u182b\7\u010f\2\2\u1822\u182b\7\u0082\2\2\u1823\u182b\7\u0111\2\2\u1824"+
		"\u182b\7\u0112\2\2\u1825\u182b\7\u0113\2\2\u1826\u182b\7\u0114\2\2\u1827"+
		"\u182b\7\u0115\2\2\u1828\u182b\7\u0116\2\2\u1829\u182b\7\u0117\2\2\u182a"+
		"\u1813\3\2\2\2\u182a\u1814\3\2\2\2\u182a\u1815\3\2\2\2\u182a\u1816\3\2"+
		"\2\2\u182a\u1817\3\2\2\2\u182a\u1818\3\2\2\2\u182a\u1819\3\2\2\2\u182a"+
		"\u181a\3\2\2\2\u182a\u181b\3\2\2\2\u182a\u181c\3\2\2\2\u182a\u181d\3\2"+
		"\2\2\u182a\u181e\3\2\2\2\u182a\u181f\3\2\2\2\u182a\u1820\3\2\2\2\u182a"+
		"\u1821\3\2\2\2\u182a\u1822\3\2\2\2\u182a\u1823\3\2\2\2\u182a\u1824\3\2"+
		"\2\2\u182a\u1825\3\2\2\2\u182a\u1826\3\2\2\2\u182a\u1827\3\2\2\2\u182a"+
		"\u1828\3\2\2\2\u182a\u1829\3\2\2\2\u182b\u0255\3\2\2\2\u182c\u182d\ts"+
		"\2\2\u182d\u182e\7\u0409\2\2\u182e\u182f\5\u025a\u012e\2\u182f\u1830\7"+
		"\u040a\2\2\u1830\u0257\3\2\2\2\u1831\u1836\5\u021e\u0110\2\u1832\u1836"+
		"\5\u01f6\u00fc\2\u1833\u1836\5\u0246\u0124\2\u1834\u1836\5\u025c\u012f"+
		"\2\u1835\u1831\3\2\2\2\u1835\u1832\3\2\2\2\u1835\u1833\3\2\2\2\u1835\u1834"+
		"\3\2\2\2\u1836\u1840\3\2\2\2\u1837\u183c\7\u040b\2\2\u1838\u183d\5\u021e"+
		"\u0110\2\u1839\u183d\5\u01f6\u00fc\2\u183a\u183d\5\u0246\u0124\2\u183b"+
		"\u183d\5\u025c\u012f\2\u183c\u1838\3\2\2\2\u183c\u1839\3\2\2\2\u183c\u183a"+
		"\3\2\2\2\u183c\u183b\3\2\2\2\u183d\u183f\3\2\2\2\u183e\u1837\3\2\2\2\u183f"+
		"\u1842\3\2\2\2\u1840\u183e\3\2\2\2\u1840\u1841\3\2\2\2\u1841\u0259\3\2"+
		"\2\2\u1842\u1840\3\2\2\2\u1843\u1848\5\u021e\u0110\2\u1844\u1848\5\u01f6"+
		"\u00fc\2\u1845\u1848\5\u0246\u0124\2\u1846\u1848\5\u025c\u012f\2\u1847"+
		"\u1843\3\2\2\2\u1847\u1844\3\2\2\2\u1847\u1845\3\2\2\2\u1847\u1846\3\2"+
		"\2\2\u1848\u025b\3\2\2\2\u1849\u184a\b\u012f\1\2\u184a\u184b\tt\2\2\u184b"+
		"\u1855\5\u025c\u012f\6\u184c\u184d\5\u025e\u0130\2\u184d\u184f\7R\2\2"+
		"\u184e\u1850\7i\2\2\u184f\u184e\3\2\2\2\u184f\u1850\3\2\2\2\u1850\u1851"+
		"\3\2\2\2\u1851\u1852\tu\2\2\u1852\u1855\3\2\2\2\u1853\u1855\5\u025e\u0130"+
		"\2\u1854\u1849\3\2\2\2\u1854\u184c\3\2\2\2\u1854\u1853\3\2\2\2\u1855\u185c"+
		"\3\2\2\2\u1856\u1857\f\5\2\2\u1857\u1858\5\u0266\u0134\2\u1858\u1859\5"+
		"\u025c\u012f\6\u1859\u185b\3\2\2\2\u185a\u1856\3\2\2\2\u185b\u185e\3\2"+
		"\2\2\u185c\u185a\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u025d\3\2\2\2\u185e"+
		"\u185c\3\2\2\2\u185f\u1862\b\u0130\1\2\u1860\u1861\7\u0423\2\2\u1861\u1863"+
		"\7\u03ee\2\2\u1862\u1860\3\2\2\2\u1862\u1863\3\2\2\2\u1863\u1864\3\2\2"+
		"\2\u1864\u1865\5\u0260\u0131\2\u1865\u18a6\3\2\2\2\u1866\u1867\f\n\2\2"+
		"\u1867\u1868\5\u0264\u0133\2\u1868\u1869\5\u025e\u0130\13\u1869\u18a5"+
		"\3\2\2\2\u186a\u186c\f\b\2\2\u186b\u186d\7i\2\2\u186c\u186b\3\2\2\2\u186c"+
		"\u186d\3\2\2\2\u186d\u186e\3\2\2\2\u186e\u186f\7\21\2\2\u186f\u1870\5"+
		"\u025e\u0130\2\u1870\u1871\7\r\2\2\u1871\u1872\5\u025e\u0130\t\u1872\u18a5"+
		"\3\2\2\2\u1873\u1874\f\7\2\2\u1874\u1875\7\u021d\2\2\u1875\u1876\7[\2"+
		"\2\u1876\u18a5\5\u025e\u0130\b\u1877\u1879\f\5\2\2\u1878\u187a\7i\2\2"+
		"\u1879\u1878\3\2\2\2\u1879\u187a\3\2\2\2\u187a\u187b\3\2\2\2\u187b\u187c"+
		"\tv\2\2\u187c\u18a5\5\u025e\u0130\6\u187d\u187f\f\f\2\2\u187e\u1880\7"+
		"i\2\2\u187f\u187e\3\2\2\2\u187f\u1880\3\2\2\2\u1880\u1881\3\2\2\2\u1881"+
		"\u1882\7J\2\2\u1882\u1885\7\u0409\2\2\u1883\u1886\5\u00b4[\2\u1884\u1886"+
		"\5\u0232\u011a\2\u1885\u1883\3\2\2\2\u1885\u1884\3\2\2\2\u1886\u1887\3"+
		"\2\2\2\u1887\u1888\7\u040a\2\2\u1888\u18a5\3\2\2\2\u1889\u188a\f\13\2"+
		"\2\u188a\u188b\7R\2\2\u188b\u18a5\5\u021c\u010f\2\u188c\u188d\f\t\2\2"+
		"\u188d\u188e\5\u0264\u0133\2\u188e\u188f\tw\2\2\u188f\u1890\7\u0409\2"+
		"\2\u1890\u1891\5\u00b4[\2\u1891\u1892\7\u040a\2\2\u1892\u18a5\3\2\2\2"+
		"\u1893\u1895\f\6\2\2\u1894\u1896\7i\2\2\u1895\u1894\3\2\2\2\u1895\u1896"+
		"\3\2\2\2\u1896\u1897\3\2\2\2\u1897\u1898\7[\2\2\u1898\u189b\5\u025e\u0130"+
		"\2\u1899\u189a\7\u0164\2\2\u189a\u189c\7\u0418\2\2\u189b\u1899\3\2\2\2"+
		"\u189b\u189c\3\2\2\2\u189c\u18a5\3\2\2\2\u189d\u189e\f\3\2\2\u189e\u189f"+
		"\7\u01bb\2\2\u189f\u18a0\7\u01d0\2\2\u18a0\u18a1\7\u0409\2\2\u18a1\u18a2"+
		"\5\u025e\u0130\2\u18a2\u18a3\7\u040a\2\2\u18a3\u18a5\3\2\2\2\u18a4\u1866"+
		"\3\2\2\2\u18a4\u186a\3\2\2\2\u18a4\u1873\3\2\2\2\u18a4\u1877\3\2\2\2\u18a4"+
		"\u187d\3\2\2\2\u18a4\u1889\3\2\2\2\u18a4\u188c\3\2\2\2\u18a4\u1893\3\2"+
		"\2\2\u18a4\u189d\3\2\2\2\u18a5\u18a8\3\2\2\2\u18a6\u18a4\3\2\2\2\u18a6"+
		"\u18a7\3\2\2\2\u18a7\u025f\3\2\2\2\u18a8\u18a6\3\2\2\2\u18a9\u18aa\b\u0131"+
		"\1\2\u18aa\u18d7\5\u021e\u0110\2\u18ab\u18d7\5\u01f6\u00fc\2\u18ac\u18d7"+
		"\5\u0246\u0124\2\u18ad\u18d7\5\u01fc\u00ff\2\u18ae\u18af\5\u0262\u0132"+
		"\2\u18af\u18b0\5\u0260\u0131\r\u18b0\u18d7\3\2\2\2\u18b1\u18b2\7\u00d3"+
		"\2\2\u18b2\u18d7\5\u0260\u0131\f\u18b3\u18b4\7\u0409\2\2\u18b4\u18b9\5"+
		"\u025c\u012f\2\u18b5\u18b6\7\u040b\2\2\u18b6\u18b8\5\u025c\u012f\2\u18b7"+
		"\u18b5\3\2\2\2\u18b8\u18bb\3\2\2\2\u18b9\u18b7\3\2\2\2\u18b9\u18ba\3\2"+
		"\2\2\u18ba\u18bc\3\2\2\2\u18bb\u18b9\3\2\2\2\u18bc\u18bd\7\u040a\2\2\u18bd"+
		"\u18d7\3\2\2\2\u18be\u18bf\7\u020b\2\2\u18bf\u18c0\7\u0409\2\2\u18c0\u18c3"+
		"\5\u025c\u012f\2\u18c1\u18c2\7\u040b\2\2\u18c2\u18c4\5\u025c\u012f\2\u18c3"+
		"\u18c1\3\2\2\2\u18c4\u18c5\3\2\2\2\u18c5\u18c3\3\2\2\2\u18c5\u18c6\3\2"+
		"\2\2\u18c6\u18c7\3\2\2\2\u18c7\u18c8\7\u040a\2\2\u18c8\u18d7\3\2\2\2\u18c9"+
		"\u18ca\78\2\2\u18ca\u18cb\7\u0409\2\2\u18cb\u18cc\5\u00b4[\2\u18cc\u18cd"+
		"\7\u040a\2\2\u18cd\u18d7\3\2\2\2\u18ce\u18cf\7\u0409\2\2\u18cf\u18d0\5"+
		"\u00b4[\2\u18d0\u18d1\7\u040a\2\2\u18d1\u18d7\3\2\2\2\u18d2\u18d3\7P\2"+
		"\2\u18d3\u18d4\5\u025c\u012f\2\u18d4\u18d5\5<\37\2\u18d5\u18d7\3\2\2\2"+
		"\u18d6\u18a9\3\2\2\2\u18d6\u18ab\3\2\2\2\u18d6\u18ac\3\2\2\2\u18d6\u18ad"+
		"\3\2\2\2\u18d6\u18ae\3\2\2\2\u18d6\u18b1\3\2\2\2\u18d6\u18b3\3\2\2\2\u18d6"+
		"\u18be\3\2\2\2\u18d6\u18c9\3\2\2\2\u18d6\u18ce\3\2\2\2\u18d6\u18d2\3\2"+
		"\2\2\u18d7\u18ed\3\2\2\2\u18d8\u18d9\f\6\2\2\u18d9\u18da\5\u0268\u0135"+
		"\2\u18da\u18db\5\u0260\u0131\7\u18db\u18ec\3\2\2\2\u18dc\u18dd\f\5\2\2"+
		"\u18dd\u18de\5\u026a\u0136\2\u18de\u18df\5\u0260\u0131\6\u18df\u18ec\3"+
		"\2\2\2\u18e0\u18e1\f\4\2\2\u18e1\u18e2\5\u026c\u0137\2\u18e2\u18e3\5\u0260"+
		"\u0131\5\u18e3\u18ec\3\2\2\2\u18e4\u18e5\f\3\2\2\u18e5\u18e6\5\u026e\u0138"+
		"\2\u18e6\u18e7\5\u0260\u0131\4\u18e7\u18ec\3\2\2\2\u18e8\u18e9\f\17\2"+
		"\2\u18e9\u18ea\7\33\2\2\u18ea\u18ec\5\u0200\u0101\2\u18eb\u18d8\3\2\2"+
		"\2\u18eb\u18dc\3\2\2\2\u18eb\u18e0\3\2\2\2\u18eb\u18e4\3\2\2\2\u18eb\u18e8"+
		"\3\2\2\2\u18ec\u18ef\3\2\2\2\u18ed\u18eb\3\2\2\2\u18ed\u18ee\3\2\2\2\u18ee"+
		"\u0261\3\2\2\2\u18ef\u18ed\3\2\2\2\u18f0\u18f1\tx\2\2\u18f1\u0263\3\2"+
		"\2\2\u18f2\u1901\7\u0400\2\2\u18f3\u1901\7\u0401\2\2\u18f4\u1901\7\u0402"+
		"\2\2\u18f5\u18f6\7\u0402\2\2\u18f6\u1901\7\u0400\2\2\u18f7\u18f8\7\u0401"+
		"\2\2\u18f8\u1901\7\u0400\2\2\u18f9\u18fa\7\u0402\2\2\u18fa\u1901\7\u0401"+
		"\2\2\u18fb\u18fc\7\u0403\2\2\u18fc\u1901\7\u0400\2\2\u18fd\u18fe\7\u0402"+
		"\2\2\u18fe\u18ff\7\u0400\2\2\u18ff\u1901\7\u0401\2\2\u1900\u18f2\3\2\2"+
		"\2\u1900\u18f3\3\2\2\2\u1900\u18f4\3\2\2\2\u1900\u18f5\3\2\2\2\u1900\u18f7"+
		"\3\2\2\2\u1900\u18f9\3\2\2\2\u1900\u18fb\3\2\2\2\u1900\u18fd\3\2\2\2\u1901"+
		"\u0265\3\2\2\2\u1902\u190a\7\r\2\2\u1903\u1904\7\u0406\2\2\u1904\u190a"+
		"\7\u0406\2\2\u1905\u190a\7\u00b3\2\2\u1906\u190a\7q\2\2\u1907\u1908\7"+
		"\u0405\2\2\u1908\u190a\7\u0405\2\2\u1909\u1902\3\2\2\2\u1909\u1903\3\2"+
		"\2\2\u1909\u1905\3\2\2\2\u1909\u1906\3\2\2\2\u1909\u1907\3\2\2\2\u190a"+
		"\u0267\3\2\2\2\u190b\u190c\7\u0402\2\2\u190c\u1913\7\u0402\2\2\u190d\u190e"+
		"\7\u0401\2\2\u190e\u1913\7\u0401\2\2\u190f\u1913\7\u0406\2\2\u1910\u1913"+
		"\7\u0407\2\2\u1911\u1913\7\u0405\2\2\u1912\u190b\3\2\2\2\u1912\u190d\3"+
		"\2\2\2\u1912\u190f\3\2\2\2\u1912\u1910\3\2\2\2\u1912\u1911\3\2\2\2\u1913"+
		"\u0269\3\2\2\2\u1914\u1915\ty\2\2\u1915\u026b\3\2\2\2\u1916\u1917\7\u03fc"+
		"\2\2\u1917\u191c\7\u0401\2\2\u1918\u1919\7\u03fc\2\2\u1919\u191a\7\u0401"+
		"\2\2\u191a\u191c\7\u0401\2\2\u191b\u1916\3\2\2\2\u191b\u1918\3\2\2\2\u191c"+
		"\u026d\3\2\2\2\u191d\u191e\7\u03ff\2\2\u191e\u026f\3\2\2\2\u191f\u1920"+
		"\tz\2\2\u1920\u0271\3\2\2\2\u1921\u1922\t{\2\2\u1922\u0273\3\2\2\2\u1923"+
		"\u1924\t|\2\2\u1924\u0275\3\2\2\2\u1925\u1926\t}\2\2\u1926\u0277\3\2\2"+
		"\2\u1927\u1928\t~\2\2\u1928\u0279\3\2\2\2\u1929\u192a\t\177\2\2\u192a"+
		"\u027b\3\2\2\2\u192b\u192c\t\u0080\2\2\u192c\u027d\3\2\2\2\u03a8\u027f"+
		"\u0282\u0288\u028b\u028e\u0290\u0295\u0298\u029b\u02a4\u02cb\u02d7\u02e2"+
		"\u02f3\u02f8\u0304\u031f\u0328\u032d\u0333\u0338\u033c\u0345\u0348\u034b"+
		"\u034f\u0356\u0359\u035e\u0366\u036b\u0370\u0373\u0375\u0381\u0384\u0388"+
		"\u038b\u038f\u0392\u0396\u0399\u039c\u03a0\u03a3\u03a7\u03ad\u03b3\u03b9"+
		"\u03c0\u03c7\u03cd\u03d3\u03dc\u03e1\u03f1\u03f8\u03fc\u0406\u040a\u040e"+
		"\u0412\u0416\u041b\u041e\u0421\u0424\u0427\u042d\u0431\u0437\u043c\u043f"+
		"\u0442\u0444\u044f\u0453\u0456\u0464\u0467\u046b\u046e\u0472\u0475\u0479"+
		"\u047c\u0480\u0483\u0486\u048a\u048d\u0491\u0497\u04a4\u04ab\u04b0\u04b3"+
		"\u04b8\u04c0\u04c6\u04ca\u04cd\u04d2\u04d5\u04d9\u04dc\u04e0\u04e3\u04eb"+
		"\u04ed\u04f4\u04fa\u0502\u0505\u050c\u050f\u0511\u0517\u051d\u052e\u0535"+
		"\u053c\u0547\u054a\u0557\u0564\u0569\u0579\u0581\u058b\u0591\u059b\u059e"+
		"\u05a3\u05b0\u05b7\u05be\u05c0\u05c7\u05cb\u05cd\u05d2\u05d5\u05db\u05e0"+
		"\u05e2\u05e6\u05e9\u05ec\u05f2\u05f7\u05f9\u05fe\u0605\u0607\u060e\u0613"+
		"\u0617\u061a\u0622\u062a\u062c\u0634\u0638\u063b\u0641\u0646\u0649\u064f"+
		"\u0652\u0656\u065b\u0660\u0664\u0669\u066c\u0670\u0674\u0678\u067c\u0681"+
		"\u0686\u068b\u0691\u0696\u069b\u06a1\u06a6\u06ab\u06b0\u06b5\u06ba\u06bf"+
		"\u06c4\u06c9\u06ce\u06d3\u06d9\u06de\u06e4\u06ee\u06f5\u06f7\u06ff\u0704"+
		"\u0707\u070f\u0715\u0725\u0731\u0733\u0736\u073e\u0744\u074a\u0757\u075e"+
		"\u0766\u0769\u0774\u077c\u077f\u078b\u0792\u079a\u079d\u07a9\u07b0\u07b8"+
		"\u07bb\u07c2\u07ca\u07cd\u07cf\u07d4\u07dc\u07e5\u07e9\u07ed\u07f2\u07f8"+
		"\u07fe\u0803\u0808\u080d\u0812\u0815\u081a\u081f\u0829\u082d\u0834\u0839"+
		"\u083c\u0841\u0844\u0848\u084c\u0854\u0867\u086a\u086d\u0871\u087b\u0888"+
		"\u088f\u0892\u089b\u089e\u08a1\u08ac\u08af\u08b3\u08bb\u08be\u08c3\u08cb"+
		"\u08d1\u08d5\u08d9\u08de\u08e3\u08ea\u08ee\u08f9\u0901\u0904\u090a\u0910"+
		"\u0912\u0917\u091a\u0920\u0926\u0928\u092c\u092f\u0932\u0938\u093e\u0941"+
		"\u0947\u094d\u094f\u0954\u095c\u095e\u0967\u096c\u0974\u0978\u0980\u098a"+
		"\u098f\u0996\u099a\u099e\u09bb\u09bf\u09cb\u09ce\u09d7\u09e8\u09f4\u09fb"+
		"\u0a02\u0a11\u0a1e\u0a24\u0a2a\u0a30\u0a36\u0a3c\u0a42\u0a47\u0a4e\u0a55"+
		"\u0a5c\u0a61\u0a64\u0a66\u0a74\u0a7b\u0a82\u0a88\u0a8c\u0a90\u0a97\u0a9a"+
		"\u0a9f\u0aa6\u0aad\u0ab1\u0aba\u0ac3\u0acc\u0acf\u0ad3\u0adc\u0ae0\u0ae3"+
		"\u0ae6\u0aec\u0aef\u0af5\u0afe\u0b01\u0b0c\u0b0f\u0b14\u0b17\u0b1c\u0b26"+
		"\u0b2b\u0b31\u0b33\u0b39\u0b3b\u0b41\u0b49\u0b4e\u0b56\u0b59\u0b5e\u0b61"+
		"\u0b66\u0b6e\u0b76\u0b7c\u0b84\u0b89\u0b91\u0b94\u0b98\u0b9b\u0ba3\u0ba9"+
		"\u0bb2\u0bb5\u0bb9\u0bbd\u0bc3\u0bc7\u0bcb\u0bcd\u0bd0\u0bd3\u0bd6\u0bdc"+
		"\u0be0\u0be3\u0be6\u0be9\u0bec\u0bee\u0bf2\u0bf8\u0bfe\u0c03\u0c06\u0c0c"+
		"\u0c10\u0c18\u0c1c\u0c1f\u0c22\u0c2b\u0c2f\u0c32\u0c36\u0c3a\u0c3d\u0c40"+
		"\u0c45\u0c4b\u0c4f\u0c59\u0c5f\u0c63\u0c69\u0c6d\u0c73\u0c76\u0c82\u0c86"+
		"\u0c8a\u0c92\u0c96\u0c9e\u0ca1\u0ca5\u0ca8\u0cb0\u0cb5\u0cb8\u0cbb\u0cbf"+
		"\u0cc2\u0ccb\u0cd0\u0cd9\u0cde\u0ce5\u0cec\u0cf4\u0cf9\u0d01\u0d04\u0d07"+
		"\u0d0e\u0d11\u0d18\u0d1b\u0d23\u0d29\u0d34\u0d37\u0d42\u0d48\u0d4c\u0d57"+
		"\u0d5c\u0d5e\u0d62\u0d6c\u0d76\u0d7c\u0d81\u0d84\u0d87\u0d8a\u0d90\u0d95"+
		"\u0d98\u0d9b\u0d9e\u0da0\u0da6\u0dab\u0dae\u0db1\u0db5\u0dbb\u0dbf\u0dc9"+
		"\u0dcd\u0dd3\u0ddc\u0ddf\u0de3\u0de6\u0dea\u0dee\u0df1\u0df3\u0dfb\u0e07"+
		"\u0e0d\u0e0f\u0e15\u0e17\u0e19\u0e1f\u0e27\u0e2f\u0e35\u0e3e\u0e43\u0e45"+
		"\u0e49\u0e4d\u0e53\u0e5a\u0e5e\u0e67\u0e6a\u0e6e\u0e72\u0e76\u0e79\u0e7c"+
		"\u0e7f\u0e83\u0e87\u0e8a\u0e8d\u0e90\u0e97\u0e9b\u0eaa\u0eb7\u0ebf\u0ec9"+
		"\u0ecd\u0ed0\u0ed6\u0ed9\u0edc\u0ee5\u0eee\u0ef8\u0efc\u0f06\u0f10\u0f18"+
		"\u0f1b\u0f24\u0f27\u0f2b\u0f30\u0f34\u0f3d\u0f40\u0f5f\u0f62\u0f65\u0f9d"+
		"\u0fa2\u0fbe\u0fcc\u0fd3\u0fd7\u0fdd\u0fe5\u0fe7\u0ff2\u0ffc\u1003\u1009"+
		"\u1011\u1016\u101e\u1026\u102e\u1036\u103c\u1041\u1046\u104b\u1051\u1053"+
		"\u105e\u1063\u106a\u106c\u107a\u1080\u1085\u108a\u1090\u1097\u109f\u10a7"+
		"\u10ac\u10b2\u10b5\u10bd\u10c4\u10cd\u10d0\u10e1\u10e9\u10f1\u10f5\u10fc"+
		"\u1102\u110a\u1113\u1119\u1120\u1127\u112c\u112f\u1131\u1137\u1139\u113d"+
		"\u113f\u1142\u114b\u1151\u1158\u115f\u1164\u1167\u1169\u116f\u1171\u1175"+
		"\u1177\u117a\u117f\u1186\u118f\u1194\u119d\u11a4\u11a9\u11ac\u11ae\u11b4"+
		"\u11b6\u11b9\u11c5\u11cb\u11d4\u11dd\u11e2\u11eb\u11f1\u11fc\u11ff\u120b"+
		"\u1212\u1217\u1226\u1231\u1234\u123e\u1248\u1252\u125c\u1260\u1264\u126e"+
		"\u1273\u12a5\u12b7\u12bf\u12ca\u12d1\u12d5\u12dc\u12e1\u12e4\u12e7\u12f0"+
		"\u12f4\u1312\u1319\u131d\u1324\u1327\u1337\u133a\u1344\u1348\u134e\u1351"+
		"\u1356\u135a\u1361\u1364\u136a\u1382\u138f\u1392\u139c\u13a4\u13a8\u13af"+
		"\u13b2\u13bb\u13c1\u13c7\u13d1\u13d3\u13d9\u13dc\u13df\u13eb\u13ee\u13f4"+
		"\u13f7\u13ff\u1407\u140d\u1411\u141f\u142b\u1432\u1435\u143c\u1443\u1448"+
		"\u144d\u1458\u1463\u1469\u146e\u147b\u147d\u1482\u1487\u1489\u1490\u1497"+
		"\u149a\u149d\u14a3\u14a7\u14ad\u14b3\u14c0\u14c5\u14cd\u14d0\u14d5\u14da"+
		"\u14e2\u14e5\u14eb\u14ef\u14fc\u1502\u150e\u1511\u151a\u151f\u1525\u152c"+
		"\u152e\u1533\u1535\u1539\u153f\u1542\u154c\u1550\u1564\u156b\u156d\u1574"+
		"\u1576\u157a\u157f\u158a\u158f\u1595\u1598\u159c\u15a1\u15a4\u15a8\u15ac"+
		"\u15ae\u15b3\u15b8\u15c5\u15c8\u15cc\u15cf\u15d4\u15d7\u15db\u15e0\u15e3"+
		"\u15e8\u15eb\u15f1\u15f4\u15f8\u15fb\u15fe\u1602\u1605\u1608\u160c\u160f"+
		"\u1612\u1615\u1619\u161c\u161f\u1624\u1629\u162e\u1631\u1636\u1639\u163e"+
		"\u1641\u1645\u1649\u1651\u1658\u165c\u1661\u1664\u1669\u166d\u166f\u167f"+
		"\u1688\u1690\u1699\u16a3\u16ab\u16b3\u16bb\u16c3\u16c8\u16cc\u16d1\u16d6"+
		"\u16d9\u16de\u16e1\u16e5\u16f3\u16fa\u1700\u1722\u1726\u172e\u1732\u173b"+
		"\u1743\u1748\u1750\u1755\u175a\u175c\u1765\u176a\u1772\u1777\u177f\u1787"+
		"\u178a\u1794\u179f\u17ac\u17b4\u17b8\u17bd\u17c6\u17c9\u17d5\u17dd\u17e7"+
		"\u17ea\u17ee\u17f2\u1800\u1803\u180c\u180f\u182a\u1835\u183c\u1840\u1847"+
		"\u184f\u1854\u185c\u1862\u186c\u1879\u187f\u1885\u1895\u189b\u18a4\u18a6"+
		"\u18b9\u18c5\u18d6\u18eb\u18ed\u1900\u1909\u1912\u191b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}