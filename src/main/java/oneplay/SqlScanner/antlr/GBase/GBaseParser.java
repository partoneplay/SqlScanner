// Generated from D:/IdeaProject/SqlScanner/src/main/java/oneplay/SqlScanner/antlr/GBase\GBaseParser.g4 by ANTLR 4.8
package oneplay.SqlScanner.antlr.GBase;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GBaseParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, AS=11, ASC=12, BEFORE=13, 
		BETWEEN=14, BOTH=15, BY=16, CALL=17, CASCADE=18, CASE=19, CAST=20, CHANGE=21, 
		CHARACTER=22, CHECK=23, COLLATE=24, COLUMN=25, CONDITION=26, CONSTRAINT=27, 
		CONTINUE=28, CONVERT=29, CREATE=30, CROSS=31, CURRENT=32, CURRENT_USER=33, 
		CURSOR=34, DATABASE=35, DATABASES=36, DECLARE=37, DEFAULT=38, DELAYED=39, 
		DELETE=40, DESC=41, DESCRIBE=42, DETERMINISTIC=43, DIAGNOSTICS=44, DISTINCT=45, 
		DISTINCTROW=46, DROP=47, EACH=48, ELSE=49, ELSEIF=50, ENCLOSED=51, ESCAPED=52, 
		EXISTS=53, EXIT=54, EXPLAIN=55, FALSE=56, FETCH=57, FOR=58, FORCE=59, 
		FOREIGN=60, FROM=61, FULLTEXT=62, GENERATED=63, GET=64, GRANT=65, GROUP=66, 
		HAVING=67, HIGH_PRIORITY=68, IF=69, IGNORE=70, IN=71, INDEX=72, INFILE=73, 
		INNER=74, INOUT=75, INSERT=76, INTERVAL=77, INTO=78, IS=79, ITERATE=80, 
		JOIN=81, KEY=82, KEYS=83, KILL=84, LEADING=85, LEAVE=86, LEFT=87, LIKE=88, 
		LIMIT=89, LINEAR=90, LINES=91, LOAD=92, LOCK=93, LOOP=94, LOW_PRIORITY=95, 
		MASTER_BIND=96, MASTER_SSL_VERIFY_SERVER_CERT=97, MATCH=98, MAXVALUE=99, 
		MODIFIES=100, NATURAL=101, NOT=102, NO_WRITE_TO_BINLOG=103, NULL_LITERAL=104, 
		NUMBER=105, ON=106, OPTIMIZE=107, OPTION=108, OPTIONALLY=109, OR=110, 
		ORDER=111, OUT=112, OUTER=113, OUTFILE=114, PARTITION=115, PRIMARY=116, 
		PROCEDURE=117, PURGE=118, RANGE=119, READ=120, READS=121, REFERENCES=122, 
		REGEXP=123, RELEASE=124, RENAME=125, REPEAT=126, REPLACE=127, REQUIRE=128, 
		RESIGNAL=129, RESTRICT=130, RETURN=131, REVOKE=132, RIGHT=133, RLIKE=134, 
		SCHEMA=135, SCHEMAS=136, SELECT=137, SET=138, SEPARATOR=139, SHOW=140, 
		SIGNAL=141, SPATIAL=142, SQL=143, SQLEXCEPTION=144, SQLSTATE=145, SQLWARNING=146, 
		SQL_BIG_RESULT=147, SQL_CALC_FOUND_ROWS=148, SQL_SMALL_RESULT=149, SSL=150, 
		STACKED=151, STARTING=152, STRAIGHT_JOIN=153, TABLE=154, TERMINATED=155, 
		THEN=156, TO=157, TRAILING=158, TRIGGER=159, TRUE=160, UNDO=161, UNION=162, 
		UNIQUE=163, UNLOCK=164, UNSIGNED=165, UPDATE=166, USAGE=167, USE=168, 
		USING=169, VALUES=170, WHEN=171, WHERE=172, WHILE=173, WITH=174, WRITE=175, 
		XOR=176, ZEROFILL=177, TINYINT=178, SMALLINT=179, MEDIUMINT=180, INT=181, 
		INTEGER=182, BIGINT=183, REAL=184, DOUBLE=185, PRECISION=186, FLOAT=187, 
		DECIMAL=188, DEC=189, NUMERIC=190, DATE=191, TIME=192, TIMESTAMP=193, 
		DATETIME=194, YEAR=195, CHAR=196, VARCHAR=197, NVARCHAR=198, NATIONAL=199, 
		BINARY=200, VARBINARY=201, TINYBLOB=202, BLOB=203, MEDIUMBLOB=204, LONGBLOB=205, 
		TINYTEXT=206, TEXT=207, MEDIUMTEXT=208, LONGTEXT=209, ENUM=210, VARYING=211, 
		SERIAL=212, YEAR_MONTH=213, DAY_HOUR=214, DAY_MINUTE=215, DAY_SECOND=216, 
		HOUR_MINUTE=217, HOUR_SECOND=218, MINUTE_SECOND=219, SECOND_MICROSECOND=220, 
		MINUTE_MICROSECOND=221, HOUR_MICROSECOND=222, DAY_MICROSECOND=223, AVG=224, 
		BIT_AND=225, BIT_OR=226, BIT_XOR=227, COUNT=228, GROUP_CONCAT=229, MAX=230, 
		MIN=231, STD=232, STDDEV=233, STDDEV_POP=234, STDDEV_SAMP=235, SUM=236, 
		VAR_POP=237, VAR_SAMP=238, VARIANCE=239, OVER=240, RANK=241, DENSE_RANK=242, 
		ROW_NUMBER=243, LEAD=244, LAG=245, PERCENT_RANK=246, CURRENT_DATE=247, 
		CURRENT_TIME=248, CURRENT_TIMESTAMP=249, LOCALTIME=250, CURDATE=251, CURTIME=252, 
		DATE_ADD=253, DATE_SUB=254, EXTRACT=255, LOCALTIMESTAMP=256, NOW=257, 
		POSITION=258, SUBSTR=259, SUBSTRING=260, SYSDATE=261, TRIM=262, UTC_DATE=263, 
		UTC_TIME=264, UTC_TIMESTAMP=265, ACCOUNT=266, ACTION=267, AFTER=268, AGGREGATE=269, 
		ALGORITHM=270, ANY=271, AT=272, AUTHORS=273, AUTOCOMMIT=274, AUTOEXTEND_SIZE=275, 
		AUTO_INCREMENT=276, AVG_ROW_LENGTH=277, BEGIN=278, BINLOG=279, BIT=280, 
		BLOCK=281, BOOL=282, BOOLEAN=283, BTREE=284, CACHE=285, CASCADED=286, 
		CHAIN=287, CHANGED=288, CHANNEL=289, CHECKSUM=290, PAGE_CHECKSUM=291, 
		CIPHER=292, CLASS_ORIGIN=293, CLIENT=294, CLOSE=295, COALESCE=296, CODE=297, 
		COLUMNS=298, COLUMN_FORMAT=299, COLUMN_NAME=300, COMMENT=301, COMMIT=302, 
		COMPACT=303, COMPLETION=304, COMPRESSED=305, COMPRESSION=306, CONCURRENT=307, 
		CONNECTION=308, CONSISTENT=309, CONSTRAINT_CATALOG=310, CONSTRAINT_SCHEMA=311, 
		CONSTRAINT_NAME=312, CONTAINS=313, CONTEXT=314, CONTRIBUTORS=315, COPY=316, 
		CPU=317, CURSOR_NAME=318, DATA=319, DATAFILE=320, DEALLOCATE=321, DEFAULT_AUTH=322, 
		DEFINER=323, DELAY_KEY_WRITE=324, DES_KEY_FILE=325, DIRECTORY=326, DISABLE=327, 
		DISCARD=328, DISK=329, DO=330, DUMPFILE=331, DUPLICATE=332, DYNAMIC=333, 
		ENABLE=334, ENCRYPTION=335, END=336, ENDS=337, ENGINE=338, ENGINES=339, 
		ERROR=340, ERRORS=341, ESCAPE=342, EVEN=343, EVENT=344, EVENTS=345, EVERY=346, 
		EXCHANGE=347, EXCLUSIVE=348, EXPIRE=349, EXPORT=350, EXTENDED=351, EXTENT_SIZE=352, 
		FAST=353, FAULTS=354, FIELDS=355, FILE_BLOCK_SIZE=356, FILTER=357, FIRST=358, 
		FIXED=359, FLUSH=360, FOLLOWS=361, FOUND=362, FULL=363, FUNCTION=364, 
		GENERAL=365, GLOBAL=366, GRANTS=367, GROUP_REPLICATION=368, HANDLER=369, 
		HASH=370, HELP=371, HOST=372, HOSTS=373, IDENTIFIED=374, IGNORE_SERVER_IDS=375, 
		IMPORT=376, INDEXES=377, INITIAL_SIZE=378, INPLACE=379, INSERT_METHOD=380, 
		INSTALL=381, INSTANCE=382, INVISIBLE=383, INVOKER=384, IO=385, IO_THREAD=386, 
		IPC=387, ISOLATION=388, ISSUER=389, JSON=390, KEY_BLOCK_SIZE=391, LANGUAGE=392, 
		LAST=393, LEAVES=394, LESS=395, LEVEL=396, LIST=397, LOCAL=398, LOGFILE=399, 
		LOGS=400, MASTER=401, MASTER_AUTO_POSITION=402, MASTER_CONNECT_RETRY=403, 
		MASTER_DELAY=404, MASTER_HEARTBEAT_PERIOD=405, MASTER_HOST=406, MASTER_LOG_FILE=407, 
		MASTER_LOG_POS=408, MASTER_PASSWORD=409, MASTER_PORT=410, MASTER_RETRY_COUNT=411, 
		MASTER_SSL=412, MASTER_SSL_CA=413, MASTER_SSL_CAPATH=414, MASTER_SSL_CERT=415, 
		MASTER_SSL_CIPHER=416, MASTER_SSL_CRL=417, MASTER_SSL_CRLPATH=418, MASTER_SSL_KEY=419, 
		MASTER_TLS_VERSION=420, MASTER_USER=421, MAX_CONNECTIONS_PER_HOUR=422, 
		MAX_QUERIES_PER_HOUR=423, MAX_ROWS=424, MAX_SIZE=425, MAX_UPDATES_PER_HOUR=426, 
		MAX_USER_CONNECTIONS=427, MEDIUM=428, MERGE=429, MESSAGE_TEXT=430, MID=431, 
		MIGRATE=432, MIN_ROWS=433, MODE=434, MODIFY=435, MUTEX=436, MYSQL=437, 
		MYSQL_ERRNO=438, NAME=439, NAMES=440, NCHAR=441, NEVER=442, NEXT=443, 
		NO=444, NODEGROUP=445, NONE=446, OFFLINE=447, OFFSET=448, OJ=449, OLD_PASSWORD=450, 
		ONE=451, ONLINE=452, ONLY=453, OPEN=454, OPTIMIZER_COSTS=455, OPTIONS=456, 
		OWNER=457, PACK_KEYS=458, PAGE=459, PARSER=460, PARTIAL=461, PARTITIONING=462, 
		PARTITIONS=463, PASSWORD=464, PHASE=465, PLUGIN=466, PLUGIN_DIR=467, PLUGINS=468, 
		PORT=469, PRECEDES=470, PREPARE=471, PRESERVE=472, PREV=473, PROCESSLIST=474, 
		PROFILE=475, PROFILES=476, PROXY=477, QUERY=478, QUICK=479, REBUILD=480, 
		RECOVER=481, REDO_BUFFER_SIZE=482, REDUNDANT=483, RELAY=484, RELAY_LOG_FILE=485, 
		RELAY_LOG_POS=486, RELAYLOG=487, REMOVE=488, REORGANIZE=489, REPAIR=490, 
		REPLICATE_DO_DB=491, REPLICATE_DO_TABLE=492, REPLICATE_IGNORE_DB=493, 
		REPLICATE_IGNORE_TABLE=494, REPLICATE_REWRITE_DB=495, REPLICATE_WILD_DO_TABLE=496, 
		REPLICATE_WILD_IGNORE_TABLE=497, REPLICATION=498, RESET=499, RESUME=500, 
		RETURNED_SQLSTATE=501, RETURNS=502, ROLLBACK=503, ROLLUP=504, ROTATE=505, 
		ROW=506, ROWS=507, ROW_FORMAT=508, SAVEPOINT=509, SCHEDULE=510, SECURITY=511, 
		SERVER=512, SESSION=513, SHARE=514, SHARED=515, SIGNED=516, SIMPLE=517, 
		SLAVE=518, SLOW=519, SNAPSHOT=520, SOCKET=521, SOME=522, SONAME=523, SOUNDS=524, 
		SOURCE=525, SQL_AFTER_GTIDS=526, SQL_AFTER_MTS_GAPS=527, SQL_BEFORE_GTIDS=528, 
		SQL_BUFFER_RESULT=529, SQL_CACHE=530, SQL_NO_CACHE=531, SQL_THREAD=532, 
		START=533, STARTS=534, STATS_AUTO_RECALC=535, STATS_PERSISTENT=536, STATS_SAMPLE_PAGES=537, 
		STATUS=538, STOP=539, STORAGE=540, STORED=541, STRING=542, SUBCLASS_ORIGIN=543, 
		SUBJECT=544, SUBPARTITION=545, SUBPARTITIONS=546, SUSPEND=547, SWAPS=548, 
		SWITCHES=549, TABLE_NAME=550, TABLESPACE=551, TEMPORARY=552, TEMPTABLE=553, 
		THAN=554, TRADITIONAL=555, TRANSACTION=556, TRIGGERS=557, TRUNCATE=558, 
		UNDEFINED=559, UNDOFILE=560, UNDO_BUFFER_SIZE=561, UNINSTALL=562, UNKNOWN=563, 
		UNTIL=564, UPGRADE=565, USER=566, USE_FRM=567, USER_RESOURCES=568, VALIDATION=569, 
		VALUE=570, VARIABLES=571, VIEW=572, VIRTUAL=573, VISIBLE=574, WAIT=575, 
		WARNINGS=576, WITHOUT=577, WORK=578, WRAPPER=579, X509=580, XA=581, XML=582, 
		EUR=583, USA=584, JIS=585, ISO=586, INTERNAL=587, QUARTER=588, MONTH=589, 
		DAY=590, HOUR=591, MINUTE=592, WEEK=593, SECOND=594, MICROSECOND=595, 
		TABLES=596, ROUTINE=597, EXECUTE=598, FILE=599, PROCESS=600, RELOAD=601, 
		SHUTDOWN=602, SUPER=603, PRIVILEGES=604, SESSION_VARIABLES_ADMIN=605, 
		ARMSCII8=606, ASCII=607, BIG5=608, CP1250=609, CP1251=610, CP1256=611, 
		CP1257=612, CP850=613, CP852=614, CP866=615, CP932=616, DEC8=617, EUCJPMS=618, 
		EUCKR=619, GB2312=620, GBK=621, GEOSTD8=622, GREEK=623, HEBREW=624, HP8=625, 
		KEYBCS2=626, KOI8R=627, KOI8U=628, LATIN1=629, LATIN2=630, LATIN5=631, 
		LATIN7=632, MACCE=633, MACROMAN=634, SJIS=635, SWE7=636, TIS620=637, UCS2=638, 
		UJIS=639, UTF16=640, UTF16LE=641, UTF32=642, UTF8=643, UTF8MB3=644, UTF8MB4=645, 
		ARCHIVE=646, BLACKHOLE=647, CSV=648, FEDERATED=649, INNODB=650, MEMORY=651, 
		MRG_MYISAM=652, MYISAM=653, NDB=654, NDBCLUSTER=655, PERFORMANCE_SCHEMA=656, 
		TOKUDB=657, REPEATABLE=658, COMMITTED=659, UNCOMMITTED=660, SERIALIZABLE=661, 
		GEOMETRYCOLLECTION=662, GEOMCOLLECTION=663, GEOMETRY=664, LINESTRING=665, 
		MULTILINESTRING=666, MULTIPOINT=667, MULTIPOLYGON=668, POINT=669, POLYGON=670, 
		ABS=671, ACOS=672, ADDDATE=673, ADDTIME=674, AES_DECRYPT=675, AES_ENCRYPT=676, 
		AREA=677, ASBINARY=678, ASIN=679, ASTEXT=680, ASWKB=681, ASWKT=682, ASYMMETRIC_DECRYPT=683, 
		ASYMMETRIC_DERIVE=684, ASYMMETRIC_ENCRYPT=685, ASYMMETRIC_SIGN=686, ASYMMETRIC_VERIFY=687, 
		ATAN=688, ATAN2=689, BENCHMARK=690, BIN=691, BIT_COUNT=692, BIT_LENGTH=693, 
		BUFFER=694, CATALOG_NAME=695, CEIL=696, CEILING=697, CENTROID=698, CHARACTER_LENGTH=699, 
		CHARSET=700, CHAR_LENGTH=701, COERCIBILITY=702, COLLATION=703, COMPRESS=704, 
		CONCAT=705, CONCAT_WS=706, CONNECTION_ID=707, CONV=708, CONVERT_TZ=709, 
		COS=710, COT=711, CRC32=712, CREATE_ASYMMETRIC_PRIV_KEY=713, CREATE_ASYMMETRIC_PUB_KEY=714, 
		CREATE_DH_PARAMETERS=715, CREATE_DIGEST=716, CROSSES=717, DATEDIFF=718, 
		DATE_FORMAT=719, DAYNAME=720, DAYOFMONTH=721, DAYOFWEEK=722, DAYOFYEAR=723, 
		DECODE=724, DEGREES=725, DES_DECRYPT=726, DES_ENCRYPT=727, DIMENSION=728, 
		DISJOINT=729, ELT=730, ENCODE=731, ENCRYPT=732, ENDPOINT=733, ENVELOPE=734, 
		EQUALS=735, EXP=736, EXPORT_SET=737, EXTERIORRING=738, EXTRACTVALUE=739, 
		FIELD=740, FIND_IN_SET=741, FLOOR=742, FORMAT=743, FOUND_ROWS=744, FROM_BASE64=745, 
		FROM_DAYS=746, FROM_UNIXTIME=747, GEOMCOLLFROMTEXT=748, GEOMCOLLFROMWKB=749, 
		GEOMETRYCOLLECTIONFROMTEXT=750, GEOMETRYCOLLECTIONFROMWKB=751, GEOMETRYFROMTEXT=752, 
		GEOMETRYFROMWKB=753, GEOMETRYN=754, GEOMETRYTYPE=755, GEOMFROMTEXT=756, 
		GEOMFROMWKB=757, GET_FORMAT=758, GET_LOCK=759, GLENGTH=760, GREATEST=761, 
		GTID_SUBSET=762, GTID_SUBTRACT=763, HEX=764, IFNULL=765, INET6_ATON=766, 
		INET6_NTOA=767, INET_ATON=768, INET_NTOA=769, INSTR=770, INTERIORRINGN=771, 
		INTERSECTS=772, ISCLOSED=773, ISEMPTY=774, ISNULL=775, ISSIMPLE=776, IS_FREE_LOCK=777, 
		IS_IPV4=778, IS_IPV4_COMPAT=779, IS_IPV4_MAPPED=780, IS_IPV6=781, IS_USED_LOCK=782, 
		LAST_INSERT_ID=783, LCASE=784, LEAST=785, LENGTH=786, LINEFROMTEXT=787, 
		LINEFROMWKB=788, LINESTRINGFROMTEXT=789, LINESTRINGFROMWKB=790, LN=791, 
		LOAD_FILE=792, LOCATE=793, LOG=794, LOG10=795, LOG2=796, LOWER=797, LPAD=798, 
		LTRIM=799, MAKEDATE=800, MAKETIME=801, MAKE_SET=802, MASTER_POS_WAIT=803, 
		MBRCONTAINS=804, MBRDISJOINT=805, MBREQUAL=806, MBRINTERSECTS=807, MBROVERLAPS=808, 
		MBRTOUCHES=809, MBRWITHIN=810, MD5=811, MLINEFROMTEXT=812, MLINEFROMWKB=813, 
		MONTHNAME=814, MPOINTFROMTEXT=815, MPOINTFROMWKB=816, MPOLYFROMTEXT=817, 
		MPOLYFROMWKB=818, MULTILINESTRINGFROMTEXT=819, MULTILINESTRINGFROMWKB=820, 
		MULTIPOINTFROMTEXT=821, MULTIPOINTFROMWKB=822, MULTIPOLYGONFROMTEXT=823, 
		MULTIPOLYGONFROMWKB=824, NAME_CONST=825, NULLIF=826, NUMGEOMETRIES=827, 
		NUMINTERIORRINGS=828, NUMPOINTS=829, OCT=830, OCTET_LENGTH=831, ORD=832, 
		OVERLAPS=833, PERIOD_ADD=834, PERIOD_DIFF=835, PI=836, POINTFROMTEXT=837, 
		POINTFROMWKB=838, POINTN=839, POLYFROMTEXT=840, POLYFROMWKB=841, POLYGONFROMTEXT=842, 
		POLYGONFROMWKB=843, POW=844, POWER=845, QUOTE=846, RADIANS=847, RAND=848, 
		RANDOM_BYTES=849, RELEASE_LOCK=850, REVERSE=851, ROUND=852, ROW_COUNT=853, 
		RPAD=854, RTRIM=855, SEC_TO_TIME=856, SESSION_USER=857, SHA=858, SHA1=859, 
		SHA2=860, SCHEMA_NAME=861, SIGN=862, SIN=863, SLEEP=864, SOUNDEX=865, 
		SQL_THREAD_WAIT_AFTER_GTIDS=866, SQRT=867, SRID=868, STARTPOINT=869, STRCMP=870, 
		STR_TO_DATE=871, ST_AREA=872, ST_ASBINARY=873, ST_ASTEXT=874, ST_ASWKB=875, 
		ST_ASWKT=876, ST_BUFFER=877, ST_CENTROID=878, ST_CONTAINS=879, ST_CROSSES=880, 
		ST_DIFFERENCE=881, ST_DIMENSION=882, ST_DISJOINT=883, ST_DISTANCE=884, 
		ST_ENDPOINT=885, ST_ENVELOPE=886, ST_EQUALS=887, ST_EXTERIORRING=888, 
		ST_GEOMCOLLFROMTEXT=889, ST_GEOMCOLLFROMTXT=890, ST_GEOMCOLLFROMWKB=891, 
		ST_GEOMETRYCOLLECTIONFROMTEXT=892, ST_GEOMETRYCOLLECTIONFROMWKB=893, ST_GEOMETRYFROMTEXT=894, 
		ST_GEOMETRYFROMWKB=895, ST_GEOMETRYN=896, ST_GEOMETRYTYPE=897, ST_GEOMFROMTEXT=898, 
		ST_GEOMFROMWKB=899, ST_INTERIORRINGN=900, ST_INTERSECTION=901, ST_INTERSECTS=902, 
		ST_ISCLOSED=903, ST_ISEMPTY=904, ST_ISSIMPLE=905, ST_LINEFROMTEXT=906, 
		ST_LINEFROMWKB=907, ST_LINESTRINGFROMTEXT=908, ST_LINESTRINGFROMWKB=909, 
		ST_NUMGEOMETRIES=910, ST_NUMINTERIORRING=911, ST_NUMINTERIORRINGS=912, 
		ST_NUMPOINTS=913, ST_OVERLAPS=914, ST_POINTFROMTEXT=915, ST_POINTFROMWKB=916, 
		ST_POINTN=917, ST_POLYFROMTEXT=918, ST_POLYFROMWKB=919, ST_POLYGONFROMTEXT=920, 
		ST_POLYGONFROMWKB=921, ST_SRID=922, ST_STARTPOINT=923, ST_SYMDIFFERENCE=924, 
		ST_TOUCHES=925, ST_UNION=926, ST_WITHIN=927, ST_X=928, ST_Y=929, SUBDATE=930, 
		SUBSTRING_INDEX=931, SUBTIME=932, SYSTEM_USER=933, TAN=934, TIMEDIFF=935, 
		TIMESTAMPADD=936, TIMESTAMPDIFF=937, TIME_FORMAT=938, TIME_TO_SEC=939, 
		TOUCHES=940, TO_BASE64=941, TO_DAYS=942, TO_SECONDS=943, UCASE=944, UNCOMPRESS=945, 
		UNCOMPRESSED_LENGTH=946, UNHEX=947, UNIX_TIMESTAMP=948, UPDATEXML=949, 
		UPPER=950, UUID=951, UUID_SHORT=952, VALIDATE_PASSWORD_STRENGTH=953, VERSION=954, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=955, WEEKDAY=956, WEEKOFYEAR=957, WEIGHT_STRING=958, 
		WITHIN=959, YEARWEEK=960, Y_FUNCTION=961, X_FUNCTION=962, VAR_ASSIGN=963, 
		PLUS_ASSIGN=964, MINUS_ASSIGN=965, MULT_ASSIGN=966, DIV_ASSIGN=967, MOD_ASSIGN=968, 
		AND_ASSIGN=969, XOR_ASSIGN=970, OR_ASSIGN=971, STAR=972, DIVIDE=973, MODULE=974, 
		PLUS=975, MINUSMINUS=976, MINUS=977, DIV=978, MOD=979, CONCAT_OP=980, 
		EQUAL_SYMBOL=981, GREATER_SYMBOL=982, LESS_SYMBOL=983, EXCLAMATION_SYMBOL=984, 
		BIT_NOT_OP=985, BIT_OR_OP=986, BIT_AND_OP=987, BIT_XOR_OP=988, DOT=989, 
		LR_BRACKET=990, RR_BRACKET=991, COMMA=992, SEMI=993, AT_SIGN=994, ZERO_DECIMAL=995, 
		ONE_DECIMAL=996, TWO_DECIMAL=997, SINGLE_QUOTE_SYMB=998, DOUBLE_QUOTE_SYMB=999, 
		REVERSE_QUOTE_SYMB=1000, COLON_SYMB=1001, CHARSET_REVERSE_QOUTE_STRING=1002, 
		FILESIZE_LITERAL=1003, START_NATIONAL_STRING_LITERAL=1004, STRING_LITERAL=1005, 
		DECIMAL_LITERAL=1006, HEXADECIMAL_LITERAL=1007, REAL_LITERAL=1008, NULL_SPEC_LITERAL=1009, 
		BIT_STRING=1010, STRING_CHARSET_NAME=1011, DOT_ID=1012, ID=1013, REVERSE_QUOTE_ID=1014, 
		STRING_USER_NAME=1015, LOCAL_ID=1016, GLOBAL_ID=1017, ERROR_RECONGNIGION=1018;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
		RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
		RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53, 
		RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56, 
		RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59, 
		RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62, 
		RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65, 
		RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68, 
		RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, 
		RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
		RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79, 
		RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82, 
		RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85, 
		RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88, 
		RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91, 
		RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94, 
		RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
		RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100, 
		RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102, 
		RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105, 
		RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108, 
		RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111, 
		RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
		RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
		RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
		RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123, 
		RULE_groupByItem = 124, RULE_limitClause = 125, RULE_limitClauseAtom = 126, 
		RULE_startTransaction = 127, RULE_beginWork = 128, RULE_commitWork = 129, 
		RULE_rollbackWork = 130, RULE_savepointStatement = 131, RULE_rollbackStatement = 132, 
		RULE_releaseStatement = 133, RULE_lockTables = 134, RULE_unlockTables = 135, 
		RULE_setAutocommitStatement = 136, RULE_setTransactionStatement = 137, 
		RULE_transactionMode = 138, RULE_lockTableElement = 139, RULE_lockAction = 140, 
		RULE_transactionOption = 141, RULE_transactionLevel = 142, RULE_changeMaster = 143, 
		RULE_changeReplicationFilter = 144, RULE_purgeBinaryLogs = 145, RULE_resetMaster = 146, 
		RULE_resetSlave = 147, RULE_startSlave = 148, RULE_stopSlave = 149, RULE_startGroupReplication = 150, 
		RULE_stopGroupReplication = 151, RULE_masterOption = 152, RULE_stringMasterOption = 153, 
		RULE_decimalMasterOption = 154, RULE_boolMasterOption = 155, RULE_channelOption = 156, 
		RULE_replicationFilter = 157, RULE_tablePair = 158, RULE_threadType = 159, 
		RULE_untilOption = 160, RULE_connectionOption = 161, RULE_gtuidSet = 162, 
		RULE_xaStartTransaction = 163, RULE_xaEndTransaction = 164, RULE_xaPrepareStatement = 165, 
		RULE_xaCommitWork = 166, RULE_xaRollbackWork = 167, RULE_xaRecoverWork = 168, 
		RULE_prepareStatement = 169, RULE_executeStatement = 170, RULE_deallocatePrepare = 171, 
		RULE_routineBody = 172, RULE_blockStatement = 173, RULE_caseStatement = 174, 
		RULE_ifStatement = 175, RULE_iterateStatement = 176, RULE_leaveStatement = 177, 
		RULE_loopStatement = 178, RULE_repeatStatement = 179, RULE_returnStatement = 180, 
		RULE_whileStatement = 181, RULE_cursorStatement = 182, RULE_declareVariable = 183, 
		RULE_declareCondition = 184, RULE_declareCursor = 185, RULE_declareHandler = 186, 
		RULE_handlerConditionValue = 187, RULE_procedureSqlStatement = 188, RULE_caseAlternative = 189, 
		RULE_elifAlternative = 190, RULE_alterUser = 191, RULE_createUser = 192, 
		RULE_dropUser = 193, RULE_grantStatement = 194, RULE_grantProxy = 195, 
		RULE_renameUser = 196, RULE_revokeStatement = 197, RULE_revokeProxy = 198, 
		RULE_setPasswordStatement = 199, RULE_userSpecification = 200, RULE_userAuthOption = 201, 
		RULE_tlsOption = 202, RULE_userResourceOption = 203, RULE_userPasswordOption = 204, 
		RULE_userLockOption = 205, RULE_privelegeClause = 206, RULE_privilege = 207, 
		RULE_privilegeLevel = 208, RULE_renameUserClause = 209, RULE_analyzeTable = 210, 
		RULE_checkTable = 211, RULE_checksumTable = 212, RULE_optimizeTable = 213, 
		RULE_repairTable = 214, RULE_checkTableOption = 215, RULE_createUdfunction = 216, 
		RULE_installPlugin = 217, RULE_uninstallPlugin = 218, RULE_setStatement = 219, 
		RULE_showStatement = 220, RULE_variableClause = 221, RULE_showCommonEntity = 222, 
		RULE_showFilter = 223, RULE_showGlobalInfoClause = 224, RULE_showSchemaEntity = 225, 
		RULE_showProfileType = 226, RULE_binlogStatement = 227, RULE_cacheIndexStatement = 228, 
		RULE_flushStatement = 229, RULE_killStatement = 230, RULE_loadIndexIntoCache = 231, 
		RULE_resetStatement = 232, RULE_shutdownStatement = 233, RULE_tableIndexes = 234, 
		RULE_flushOption = 235, RULE_flushTableOption = 236, RULE_loadedTableIndexes = 237, 
		RULE_simpleDescribeStatement = 238, RULE_fullDescribeStatement = 239, 
		RULE_helpStatement = 240, RULE_useStatement = 241, RULE_signalStatement = 242, 
		RULE_resignalStatement = 243, RULE_signalConditionInformation = 244, RULE_diagnosticsStatement = 245, 
		RULE_diagnosticsConditionInformationName = 246, RULE_describeObjectClause = 247, 
		RULE_fullId = 248, RULE_tableName = 249, RULE_fullColumnName = 250, RULE_indexColumnName = 251, 
		RULE_userName = 252, RULE_mysqlVariable = 253, RULE_charsetName = 254, 
		RULE_collationName = 255, RULE_engineName = 256, RULE_uuidSet = 257, RULE_xid = 258, 
		RULE_xuidStringId = 259, RULE_authPlugin = 260, RULE_uid = 261, RULE_simpleId = 262, 
		RULE_dottedId = 263, RULE_decimalLiteral = 264, RULE_fileSizeLiteral = 265, 
		RULE_stringLiteral = 266, RULE_booleanLiteral = 267, RULE_hexadecimalLiteral = 268, 
		RULE_nullNotnull = 269, RULE_constant = 270, RULE_dataType = 271, RULE_collectionOptions = 272, 
		RULE_convertedDataType = 273, RULE_lengthOneDimension = 274, RULE_lengthTwoDimension = 275, 
		RULE_lengthTwoOptionalDimension = 276, RULE_uidList = 277, RULE_tables = 278, 
		RULE_indexColumnNames = 279, RULE_expressions = 280, RULE_expressionsWithDefaults = 281, 
		RULE_constants = 282, RULE_simpleStrings = 283, RULE_userVariables = 284, 
		RULE_defaultValue = 285, RULE_currentTimestamp = 286, RULE_expressionOrDefault = 287, 
		RULE_ifExists = 288, RULE_ifNotExists = 289, RULE_functionCall = 290, 
		RULE_specificFunction = 291, RULE_caseFuncAlternative = 292, RULE_levelsInWeightString = 293, 
		RULE_levelInWeightListElement = 294, RULE_aggregateWindowedFunction = 295, 
		RULE_olapFunction = 296, RULE_scalarFunctionName = 297, RULE_passwordFunctionClause = 298, 
		RULE_functionArgs = 299, RULE_functionArg = 300, RULE_expression = 301, 
		RULE_predicate = 302, RULE_expressionAtom = 303, RULE_unaryOperator = 304, 
		RULE_comparisonOperator = 305, RULE_logicalOperator = 306, RULE_bitOperator = 307, 
		RULE_mathOperator = 308, RULE_stringOperator = 309, RULE_charsetNameBase = 310, 
		RULE_transactionLevelBase = 311, RULE_privilegesBase = 312, RULE_intervalTypeBase = 313, 
		RULE_dataTypeBase = 314, RULE_keywordsCanBeId = 315, RULE_functionNameBase = 316;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
			"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
			"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
			"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
			"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
			"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
			"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
			"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
			"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
			"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
			"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
			"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
			"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
			"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
			"orderByClause", "orderByExpression", "tableSources", "tableSource", 
			"tableSourceItem", "indexHint", "indexHintType", "joinPart", "queryExpression", 
			"queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
			"unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByItem", "limitClause", "limitClauseAtom", "startTransaction", 
			"beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
			"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
			"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
			"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
			"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
			"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
			"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
			"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
			"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
			"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
			"deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
			"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
			"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
			"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
			"handlerConditionValue", "procedureSqlStatement", "caseAlternative", 
			"elifAlternative", "alterUser", "createUser", "dropUser", "grantStatement", 
			"grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
			"userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
			"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
			"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
			"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
			"installPlugin", "uninstallPlugin", "setStatement", "showStatement", 
			"variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
			"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
			"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
			"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
			"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
			"helpStatement", "useStatement", "signalStatement", "resignalStatement", 
			"signalConditionInformation", "diagnosticsStatement", "diagnosticsConditionInformationName", 
			"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
			"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
			"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
			"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
			"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", 
			"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
			"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
			"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "olapFunction", "scalarFunctionName", "passwordFunctionClause", 
			"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
			"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
			"mathOperator", "stringOperator", "charsetNameBase", "transactionLevelBase", 
			"privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
			"functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
			"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
			"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
			"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
			"'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
			"'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'", 
			"'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'", 
			"'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", 
			"'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", 
			"'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
			"'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
			"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MODIFIES'", 
			"'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'", 
			"'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
			"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", 
			"'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", 
			"'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
			"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
			"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", 
			"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
			"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
			"'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
			"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
			"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", 
			"'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
			"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'INT'", "'INTEGER'", 
			"'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'DECIMAL'", 
			"'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", 
			"'YEAR'", "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", 
			"'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", 
			"'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", 
			"'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", 
			"'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
			"'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'AVG'", 
			"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", 
			"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", 
			"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'OVER'", "'RANK'", "'DENSE_RANK'", 
			"'ROW_NUMBER'", "'LEAD'", "'LAG'", "'PERCENT_RANK'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", 
			"'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
			"'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
			"'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", 
			"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", 
			"'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
			"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
			"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
			"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
			"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
			"'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", "'FIELDS'", 
			"'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWS'", 
			"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
			"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", 
			"'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", 
			"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
			"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
			"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
			"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
			"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
			"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
			"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
			"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
			"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
			"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
			"'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", 
			"'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", 
			"'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", 
			"'OFFSET'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", 
			"'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", 
			"'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
			"'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", 
			"'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
			"'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", 
			"'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", 
			"'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
			"'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
			"'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
			"'REPLICATION'", "'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNS'", 
			"'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
			"'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", "'SESSION'", "'SHARE'", 
			"'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", 
			"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
			"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
			"'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", 
			"'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
			"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", 
			"'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
			"'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", 
			"'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
			"'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", 
			"'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'", 
			"'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'", 
			"'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", null, "'ARMSCII8'", "'ASCII'", 
			"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
			"'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", 
			"'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
			"'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", 
			"'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
			"'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
			"'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
			"'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", 
			"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
			"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
			"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
			"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
			"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
			"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
			"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
			"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
			"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
			"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
			"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
			"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
			"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
			"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
			"'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
			"'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", 
			"'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", 
			"'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", 
			"'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
			"'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
			"'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
			"'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
			"'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'--'", "'-'", "'DIV'", "'MOD'", "'||'", "'='", "'>'", 
			"'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", 
			"';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
			"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
			"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
			"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
			"EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", 
			"GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF", 
			"IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
			"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
			"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", 
			"MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
			"MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", 
			"ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
			"OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
			"READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
			"REQUIRE", "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
			"SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", 
			"SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", 
			"SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
			"STRAIGHT_JOIN", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
			"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
			"USE", "USING", "VALUES", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
			"XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", 
			"BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "DECIMAL", "DEC", "NUMERIC", 
			"DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", 
			"NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", 
			"LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
			"SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
			"HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
			"HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
			"COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", 
			"STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", "OVER", "RANK", 
			"DENSE_RANK", "ROW_NUMBER", "LEAD", "LAG", "PERCENT_RANK", "CURRENT_DATE", 
			"CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", "CURTIME", 
			"DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", 
			"SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", 
			"ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
			"AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
			"BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", 
			"CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", 
			"CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
			"COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
			"COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", 
			"CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", 
			"CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "CURSOR_NAME", "DATA", "DATAFILE", 
			"DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", 
			"DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
			"DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", 
			"ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
			"EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", 
			"FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", 
			"FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
			"IMPORT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", 
			"INSTANCE", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
			"ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
			"LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
			"MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
			"MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
			"MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
			"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
			"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
			"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
			"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", 
			"MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", 
			"NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", 
			"OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
			"PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
			"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", 
			"REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESUME", "RETURNED_SQLSTATE", "RETURNS", "ROLLBACK", "ROLLUP", 
			"ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", "SECURITY", 
			"SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", 
			"SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
			"SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
			"SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
			"STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
			"STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
			"SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", 
			"UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", 
			"UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
			"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
			"WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", 
			"ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", 
			"SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", 
			"RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "SESSION_VARIABLES_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", 
			"GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", 
			"LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", 
			"SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", 
			"UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
			"MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
			"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
			"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
			"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
			"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
			"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
			"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
			"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
			"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
			"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
			"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
			"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
			"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
			"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
			"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
			"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
			"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
			"MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
			"NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", "OCT", "OCTET_LENGTH", 
			"ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", "PI", "POINTFROMTEXT", 
			"POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
			"POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", "RAND", "RANDOM_BYTES", 
			"RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
			"SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", 
			"SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", 
			"STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
			"ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
			"ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
			"ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
			"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
			"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
			"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
			"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
			"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
			"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
			"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
			"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
			"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
			"ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
			"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUSMINUS", "MINUS", "DIV", "MOD", "CONCAT_OP", "EQUAL_SYMBOL", 
			"GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
			"BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", 
			"COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
			"SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
			"CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "GBaseParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public GBaseParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(GBaseParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public TerminalNode MINUSMINUS() { return getToken(GBaseParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GET - 64)) | (1L << (GRANT - 64)) | (1L << (INSERT - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (OPTIMIZE - 64)) | (1L << (PURGE - 64)) | (1L << (RELEASE - 64)) | (1L << (RENAME - 64)) | (1L << (REPLACE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (RESIGNAL - 129)) | (1L << (REVOKE - 129)) | (1L << (SELECT - 129)) | (1L << (SET - 129)) | (1L << (SHOW - 129)) | (1L << (SIGNAL - 129)) | (1L << (UNLOCK - 129)) | (1L << (UPDATE - 129)) | (1L << (USE - 129)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (BEGIN - 278)) | (1L << (BINLOG - 278)) | (1L << (CACHE - 278)) | (1L << (CHECKSUM - 278)) | (1L << (COMMIT - 278)) | (1L << (DEALLOCATE - 278)) | (1L << (DO - 278)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (FLUSH - 360)) | (1L << (HANDLER - 360)) | (1L << (HELP - 360)) | (1L << (INSTALL - 360)))) != 0) || ((((_la - 471)) & ~0x3f) == 0 && ((1L << (_la - 471)) & ((1L << (PREPARE - 471)) | (1L << (REPAIR - 471)) | (1L << (RESET - 471)) | (1L << (ROLLBACK - 471)) | (1L << (SAVEPOINT - 471)) | (1L << (START - 471)))) != 0) || ((((_la - 539)) & ~0x3f) == 0 && ((1L << (_la - 539)) & ((1L << (STOP - 539)) | (1L << (TRUNCATE - 539)) | (1L << (UNINSTALL - 539)) | (1L << (XA - 539)) | (1L << (EXECUTE - 539)) | (1L << (SHUTDOWN - 539)))) != 0) || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(634);
				sqlStatements();
				}
			}

			setState(638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(637);
				match(MINUSMINUS);
				}
			}

			setState(640);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(GBaseParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(GBaseParser.SEMI, i);
		}
		public List<TerminalNode> MINUSMINUS() { return getTokens(GBaseParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(GBaseParser.MINUSMINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(652);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(650);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(642);
						sqlStatement();
						setState(644);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUSMINUS) {
							{
							setState(643);
							match(MINUSMINUS);
							}
						}

						setState(647);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(646);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(649);
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(654);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(655);
				sqlStatement();
				setState(660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(657);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUSMINUS) {
						{
						setState(656);
						match(MINUSMINUS);
						}
					}

					setState(659);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(662);
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(665);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(666);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(667);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(668);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(669);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(670);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(671);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(GBaseParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitEmptyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitEmptyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(674);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(676);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(677);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(678);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(679);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(680);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(681);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(682);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(683);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(684);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(685);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(686);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(687);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(688);
				alterDatabase();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(689);
				alterEvent();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(690);
				alterFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(691);
				alterInstance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(692);
				alterLogfileGroup();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(693);
				alterProcedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(694);
				alterServer();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(695);
				alterTable();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(696);
				alterTablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(697);
				alterView();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(698);
				dropDatabase();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(699);
				dropEvent();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(700);
				dropIndex();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(701);
				dropLogfileGroup();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(702);
				dropProcedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(703);
				dropFunction();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(704);
				dropServer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(705);
				dropTable();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(706);
				dropTablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(707);
				dropTrigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(708);
				dropView();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(709);
				renameTable();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(710);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(713);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(714);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(715);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(716);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(717);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(718);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(719);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(720);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(721);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(722);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(725);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(726);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(727);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(728);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(729);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(730);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(731);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(732);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(733);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(736);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(737);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(738);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(739);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(740);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(741);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(742);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(743);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(744);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(745);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(746);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(747);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(748);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(749);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(750);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(753);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(754);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(755);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(758);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(759);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(760);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(761);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(762);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(763);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(764);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(765);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(766);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(767);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(770);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(771);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(772);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(773);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(774);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(775);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(776);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(777);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(778);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(779);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(780);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(781);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(782);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(783);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(784);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(785);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(786);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(787);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(788);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(789);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(790);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(791);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(792);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(793);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(794);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(797);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(798);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(799);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(800);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(801);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(802);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(803);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(806);
			match(CREATE);
			setState(807);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(808);
				ifNotExists();
				}
			}

			setState(811);
			uid();
			setState(815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				setState(812);
				createDatabaseOption();
				}
				}
				setState(817);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(GBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(GBaseParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(GBaseParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(GBaseParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(GBaseParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(818);
			match(CREATE);
			setState(820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(819);
				ownerStatement();
				}
			}

			setState(822);
			match(EVENT);
			setState(824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(823);
				ifNotExists();
				}
			}

			setState(826);
			fullId();
			setState(827);
			match(ON);
			setState(828);
			match(SCHEDULE);
			setState(829);
			scheduleExpression();
			setState(836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(830);
				match(ON);
				setState(831);
				match(COMPLETION);
				setState(833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(832);
					match(NOT);
					}
				}

				setState(835);
				match(PRESERVE);
				}
			}

			setState(839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(838);
				enableType();
				}
			}

			setState(843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(841);
				match(COMMENT);
				setState(842);
				match(STRING_LITERAL);
				}
			}

			setState(845);
			match(DO);
			setState(846);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(GBaseParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(GBaseParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(GBaseParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(GBaseParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(GBaseParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(GBaseParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(GBaseParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(GBaseParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(GBaseParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(GBaseParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(GBaseParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(GBaseParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(GBaseParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(GBaseParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(GBaseParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(GBaseParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(848);
			match(CREATE);
			setState(850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(849);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(852);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(855);
			match(INDEX);
			setState(856);
			uid();
			setState(858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(857);
				indexType();
				}
			}

			setState(860);
			match(ON);
			setState(861);
			tableName();
			setState(862);
			indexColumnNames();
			setState(866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
				{
				{
				setState(863);
				indexOption();
				}
				}
				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(881);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(879);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(869);
						match(ALGORITHM);
						setState(871);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(870);
							match(EQUAL_SYMBOL);
							}
						}

						setState(873);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(874);
						match(LOCK);
						setState(876);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(875);
							match(EQUAL_SYMBOL);
							}
						}

						setState(878);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(883);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(GBaseParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(GBaseParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(GBaseParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(884);
			match(CREATE);
			setState(885);
			match(LOGFILE);
			setState(886);
			match(GROUP);
			setState(887);
			uid();
			setState(888);
			match(ADD);
			setState(889);
			match(UNDOFILE);
			setState(890);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(891);
				match(INITIAL_SIZE);
				setState(893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(892);
					match(EQUAL_SYMBOL);
					}
				}

				setState(895);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(898);
				match(UNDO_BUFFER_SIZE);
				setState(900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(899);
					match(EQUAL_SYMBOL);
					}
				}

				setState(902);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(905);
				match(REDO_BUFFER_SIZE);
				setState(907);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(906);
					match(EQUAL_SYMBOL);
					}
				}

				setState(909);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(912);
				match(NODEGROUP);
				setState(914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(913);
					match(EQUAL_SYMBOL);
					}
				}

				setState(916);
				uid();
				}
			}

			setState(920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(919);
				match(WAIT);
				}
			}

			setState(927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(922);
				match(COMMENT);
				setState(924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(923);
					match(EQUAL_SYMBOL);
					}
				}

				setState(926);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(929);
			match(ENGINE);
			setState(931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(930);
				match(EQUAL_SYMBOL);
				}
			}

			setState(933);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(935);
			match(CREATE);
			setState(937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(936);
				ownerStatement();
				}
			}

			setState(939);
			match(PROCEDURE);
			setState(940);
			fullId();
			setState(941);
			match(LR_BRACKET);
			setState(943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (IN - 32)) | (1L << (INOUT - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (OUT - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(942);
				procedureParameter();
				}
			}

			setState(949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(945);
				match(COMMA);
				setState(946);
				procedureParameter();
				}
				}
				setState(951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(952);
			match(RR_BRACKET);
			setState(956);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(953);
					routineOption();
					}
					} 
				}
				setState(958);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(959);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(GBaseParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(961);
			match(CREATE);
			setState(963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(962);
				ownerStatement();
				}
			}

			setState(965);
			match(FUNCTION);
			setState(966);
			fullId();
			setState(967);
			match(LR_BRACKET);
			setState(969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(968);
				functionParameter();
				}
			}

			setState(975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(971);
				match(COMMA);
				setState(972);
				functionParameter();
				}
				}
				setState(977);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(978);
			match(RR_BRACKET);
			setState(979);
			match(RETURNS);
			setState(980);
			dataType();
			setState(984);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(981);
					routineOption();
					}
					} 
				}
				setState(986);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			}
			setState(989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case CURRENT:
			case DATABASE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(987);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(988);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(GBaseParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(GBaseParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(GBaseParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(991);
			match(CREATE);
			setState(992);
			match(SERVER);
			setState(993);
			uid();
			setState(994);
			match(FOREIGN);
			setState(995);
			match(DATA);
			setState(996);
			match(WRAPPER);
			setState(997);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(998);
			match(OPTIONS);
			setState(999);
			match(LR_BRACKET);
			setState(1000);
			serverOption();
			setState(1005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1001);
				match(COMMA);
				setState(1002);
				serverOption();
				}
				}
				setState(1007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1008);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1010);
				match(CREATE);
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1011);
					match(TEMPORARY);
					}
				}

				setState(1014);
				match(TABLE);
				setState(1016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1015);
					ifNotExists();
					}
				}

				setState(1018);
				tableName();
				setState(1026);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1019);
					match(LIKE);
					setState(1020);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1021);
					match(LR_BRACKET);
					setState(1022);
					match(LIKE);
					setState(1023);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1024);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1028);
				match(CREATE);
				setState(1030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1029);
					match(TEMPORARY);
					}
				}

				setState(1032);
				match(TABLE);
				setState(1034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1033);
					ifNotExists();
					}
				}

				setState(1036);
				tableName();
				setState(1038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1037);
					createDefinitions();
					}
					break;
				}
				setState(1050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (AUTO_INCREMENT - 276)) | (1L << (AVG_ROW_LENGTH - 276)) | (1L << (CHECKSUM - 276)) | (1L << (PAGE_CHECKSUM - 276)) | (1L << (COMMENT - 276)) | (1L << (COMPRESSION - 276)) | (1L << (CONNECTION - 276)) | (1L << (DATA - 276)) | (1L << (DELAY_KEY_WRITE - 276)) | (1L << (ENCRYPTION - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MIN_ROWS - 380)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (PACK_KEYS - 458)) | (1L << (PASSWORD - 458)) | (1L << (ROW_FORMAT - 458)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (STATS_AUTO_RECALC - 535)) | (1L << (STATS_PERSISTENT - 535)) | (1L << (STATS_SAMPLE_PAGES - 535)) | (1L << (STORAGE - 535)) | (1L << (TABLESPACE - 535)))) != 0) || _la==CHARSET) {
					{
					setState(1040);
					tableOption();
					setState(1047);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (AUTO_INCREMENT - 276)) | (1L << (AVG_ROW_LENGTH - 276)) | (1L << (CHECKSUM - 276)) | (1L << (PAGE_CHECKSUM - 276)) | (1L << (COMMENT - 276)) | (1L << (COMPRESSION - 276)) | (1L << (CONNECTION - 276)) | (1L << (DATA - 276)) | (1L << (DELAY_KEY_WRITE - 276)) | (1L << (ENCRYPTION - 276)) | (1L << (ENGINE - 276)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (INSERT_METHOD - 380)) | (1L << (KEY_BLOCK_SIZE - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MIN_ROWS - 380)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (PACK_KEYS - 458)) | (1L << (PASSWORD - 458)) | (1L << (ROW_FORMAT - 458)))) != 0) || ((((_la - 535)) & ~0x3f) == 0 && ((1L << (_la - 535)) & ((1L << (STATS_AUTO_RECALC - 535)) | (1L << (STATS_PERSISTENT - 535)) | (1L << (STATS_SAMPLE_PAGES - 535)) | (1L << (STORAGE - 535)) | (1L << (TABLESPACE - 535)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1042);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1041);
							match(COMMA);
							}
						}

						setState(1044);
						tableOption();
						}
						}
						setState(1049);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1052);
					partitionDefinitions();
					}
				}

				setState(1056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1055);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1058);
					match(AS);
					}
				}

				setState(1061);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1063);
				match(CREATE);
				setState(1065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1064);
					match(TEMPORARY);
					}
				}

				setState(1067);
				match(TABLE);
				setState(1069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1068);
					ifNotExists();
					}
				}

				setState(1071);
				tableName();
				setState(1072);
				createDefinitions();
				setState(1083);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1073);
					tableOption();
					setState(1080);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1075);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1074);
								match(COMMA);
								}
							}

							setState(1077);
							tableOption();
							}
							} 
						}
						setState(1082);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
					}
					}
					break;
				}
				setState(1086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1085);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(GBaseParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1090);
			match(CREATE);
			setState(1091);
			match(TABLESPACE);
			setState(1092);
			uid();
			setState(1093);
			match(ADD);
			setState(1094);
			match(DATAFILE);
			setState(1095);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1096);
				match(FILE_BLOCK_SIZE);
				setState(1097);
				match(EQUAL_SYMBOL);
				setState(1098);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1101);
				match(ENGINE);
				setState(1103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1102);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1105);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(GBaseParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(GBaseParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(GBaseParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(GBaseParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1108);
			match(CREATE);
			setState(1109);
			match(TABLESPACE);
			setState(1110);
			uid();
			setState(1111);
			match(ADD);
			setState(1112);
			match(DATAFILE);
			setState(1113);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1114);
			match(USE);
			setState(1115);
			match(LOGFILE);
			setState(1116);
			match(GROUP);
			setState(1117);
			uid();
			setState(1123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1118);
				match(EXTENT_SIZE);
				setState(1120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1119);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1122);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1125);
				match(INITIAL_SIZE);
				setState(1127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1126);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1129);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1132);
				match(AUTOEXTEND_SIZE);
				setState(1134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1133);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1136);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1139);
				match(MAX_SIZE);
				setState(1141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1140);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1143);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1146);
				match(NODEGROUP);
				setState(1148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1147);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1150);
				uid();
				}
			}

			setState(1154);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1153);
				match(WAIT);
				}
			}

			setState(1161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1156);
				match(COMMENT);
				setState(1158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1157);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1160);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1163);
			match(ENGINE);
			setState(1165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1164);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1167);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(GBaseParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(GBaseParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(GBaseParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(GBaseParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(GBaseParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1169);
			match(CREATE);
			setState(1171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1170);
				ownerStatement();
				}
			}

			setState(1173);
			match(TRIGGER);
			setState(1174);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1175);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1176);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1177);
			match(ON);
			setState(1178);
			tableName();
			setState(1179);
			match(FOR);
			setState(1180);
			match(EACH);
			setState(1181);
			match(ROW);
			setState(1184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1182);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1183);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1186);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(GBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(GBaseParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(GBaseParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(GBaseParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(GBaseParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1188);
			match(CREATE);
			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1189);
				match(OR);
				setState(1190);
				match(REPLACE);
				}
			}

			setState(1196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1193);
				match(ALGORITHM);
				setState(1194);
				match(EQUAL_SYMBOL);
				setState(1195);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1198);
				ownerStatement();
				}
			}

			setState(1204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1201);
				match(SQL);
				setState(1202);
				match(SECURITY);
				setState(1203);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1206);
			match(VIEW);
			setState(1207);
			fullId();
			setState(1212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1208);
				match(LR_BRACKET);
				setState(1209);
				uidList();
				setState(1210);
				match(RR_BRACKET);
				}
			}

			setState(1214);
			match(AS);
			setState(1215);
			selectStatement();
			setState(1222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1216);
				match(WITH);
				setState(1218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1217);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1220);
				match(CHECK);
				setState(1221);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1224);
					match(DEFAULT);
					}
				}

				setState(1230);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1227);
					match(CHARACTER);
					setState(1228);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1229);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1232);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1237);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1235);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1236);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1239);
					match(DEFAULT);
					}
				}

				setState(1242);
				match(COLLATE);
				setState(1244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1243);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1246);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(GBaseParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1249);
			match(DEFINER);
			setState(1250);
			match(EQUAL_SYMBOL);
			setState(1257);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				setState(1251);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1252);
				match(CURRENT_USER);
				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1253);
					match(LR_BRACKET);
					setState(1254);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(GBaseParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(GBaseParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(GBaseParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(GBaseParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			setState(1293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1259);
				match(AT);
				setState(1260);
				timestampValue();
				setState(1264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1261);
					intervalExpr();
					}
					}
					setState(1266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1267);
				match(EVERY);
				setState(1270);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1268);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1269);
					expression(0);
					}
					break;
				}
				setState(1272);
				intervalType();
				setState(1281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1273);
					match(STARTS);
					setState(1274);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1278);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1275);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1280);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1283);
					match(ENDS);
					setState(1284);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1288);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1285);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1290);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestampValue);
		try {
			setState(1299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1295);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1296);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1297);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1298);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(GBaseParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(GBaseParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1301);
			match(PLUS);
			setState(1302);
			match(INTERVAL);
			setState(1305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1303);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1304);
				expression(0);
				}
				break;
			}
			setState(1307);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(GBaseParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(GBaseParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(GBaseParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(GBaseParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(GBaseParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(GBaseParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(GBaseParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(GBaseParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(GBaseParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(GBaseParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(GBaseParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalType);
		try {
			setState(1322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1309);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1310);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1311);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1312);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1313);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1314);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1315);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1316);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1317);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1318);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1319);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1320);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1321);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(GBaseParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(GBaseParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_enableType);
		try {
			setState(1329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1324);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1325);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1326);
				match(DISABLE);
				setState(1327);
				match(ON);
				setState(1328);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(GBaseParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1331);
			match(USING);
			setState(1332);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(GBaseParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(GBaseParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode INVISIBLE() { return getToken(GBaseParser.INVISIBLE, 0); }
		public TerminalNode VISIBLE() { return getToken(GBaseParser.VISIBLE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			setState(1347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1334);
				match(KEY_BLOCK_SIZE);
				setState(1336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1335);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1338);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1339);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1340);
				match(WITH);
				setState(1341);
				match(PARSER);
				setState(1342);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1343);
				match(COMMENT);
				setState(1344);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1345);
				match(INVISIBLE);
				}
				break;
			case VISIBLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1346);
				match(VISIBLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode OUT() { return getToken(GBaseParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(GBaseParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IN - 71)) | (1L << (INOUT - 71)) | (1L << (OUT - 71)))) != 0)) {
				{
				setState(1349);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IN - 71)) | (1L << (INOUT - 71)) | (1L << (OUT - 71)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1352);
			uid();
			setState(1353);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1355);
			uid();
			setState(1356);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(GBaseParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(GBaseParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(GBaseParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode READS() { return getToken(GBaseParser.READS, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(GBaseParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			setState(1381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1358);
				match(COMMENT);
				setState(1359);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1360);
				match(LANGUAGE);
				setState(1361);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1362);
					match(NOT);
					}
				}

				setState(1365);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1376);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1366);
					match(CONTAINS);
					setState(1367);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1368);
					match(NO);
					setState(1369);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1370);
					match(READS);
					setState(1371);
					match(SQL);
					setState(1372);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1373);
					match(MODIFIES);
					setState(1374);
					match(SQL);
					setState(1375);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1378);
				match(SQL);
				setState(1379);
				match(SECURITY);
				setState(1380);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(GBaseParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(GBaseParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(GBaseParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(GBaseParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_serverOption);
		try {
			setState(1397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1383);
				match(HOST);
				setState(1384);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1385);
				match(DATABASE);
				setState(1386);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1387);
				match(USER);
				setState(1388);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1389);
				match(PASSWORD);
				setState(1390);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1391);
				match(SOCKET);
				setState(1392);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1393);
				match(OWNER);
				setState(1394);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1395);
				match(PORT);
				setState(1396);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1399);
			match(LR_BRACKET);
			setState(1400);
			createDefinition();
			setState(1405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1401);
				match(COMMA);
				setState(1402);
				createDefinition();
				}
				}
				setState(1407);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1408);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinition);
		try {
			setState(1415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1410);
				uid();
				setState(1411);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1413);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1414);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1417);
			dataType();
			setState(1421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << COLLATE) | (1L << DEFAULT) | (1L << GENERATED))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KEY - 82)) | (1L << (NOT - 82)) | (1L << (NULL_LITERAL - 82)) | (1L << (ON - 82)) | (1L << (PRIMARY - 82)) | (1L << (REFERENCES - 82)))) != 0) || _la==UNIQUE || _la==SERIAL || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (AUTO_INCREMENT - 276)) | (1L << (COLUMN_FORMAT - 276)) | (1L << (COMMENT - 276)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(1418);
				columnConstraint();
				}
				}
				setState(1423);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(GBaseParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(GBaseParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(GBaseParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(GBaseParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(GBaseParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(GBaseParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(GBaseParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(GBaseParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(GBaseParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			setState(1464);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1424);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1425);
				match(DEFAULT);
				setState(1426);
				defaultValue();
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1431);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1427);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1428);
					match(ON);
					setState(1429);
					match(UPDATE);
					setState(1430);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1433);
					match(PRIMARY);
					}
				}

				setState(1436);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1437);
				match(UNIQUE);
				setState(1439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1438);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1441);
				match(COMMENT);
				setState(1442);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1443);
				match(COLUMN_FORMAT);
				setState(1444);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1445);
				match(STORAGE);
				setState(1446);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1447);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1448);
				match(COLLATE);
				setState(1449);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1450);
					match(GENERATED);
					setState(1451);
					match(ALWAYS);
					}
				}

				setState(1454);
				match(AS);
				setState(1455);
				match(LR_BRACKET);
				setState(1456);
				expression(0);
				setState(1457);
				match(RR_BRACKET);
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1458);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1461);
				match(SERIAL);
				setState(1462);
				match(DEFAULT);
				setState(1463);
				match(VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			setState(1535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1466);
					match(CONSTRAINT);
					setState(1468);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(1467);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1472);
				match(PRIMARY);
				setState(1473);
				match(KEY);
				setState(1475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(1474);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1477);
					indexType();
					}
				}

				setState(1480);
				indexColumnNames();
				setState(1484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1481);
					indexOption();
					}
					}
					setState(1486);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1487);
					match(CONSTRAINT);
					setState(1489);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(1488);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1493);
				match(UNIQUE);
				setState(1495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1494);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1498);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(1497);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1500);
					indexType();
					}
				}

				setState(1503);
				indexColumnNames();
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1504);
					indexOption();
					}
					}
					setState(1509);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1510);
					match(CONSTRAINT);
					setState(1512);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(1511);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1516);
				match(FOREIGN);
				setState(1517);
				match(KEY);
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(1518);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1521);
				indexColumnNames();
				setState(1522);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1524);
					match(CONSTRAINT);
					setState(1526);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(1525);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1530);
				match(CHECK);
				setState(1531);
				match(LR_BRACKET);
				setState(1532);
				expression(0);
				setState(1533);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(GBaseParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(GBaseParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(GBaseParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(GBaseParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1537);
			match(REFERENCES);
			setState(1538);
			tableName();
			setState(1540);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1539);
				indexColumnNames();
				}
				break;
			}
			setState(1544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1542);
				match(MATCH);
				setState(1543);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(1546);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(GBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(GBaseParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceAction);
		try {
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1549);
				match(ON);
				setState(1550);
				match(DELETE);
				setState(1551);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(1552);
					match(ON);
					setState(1553);
					match(UPDATE);
					setState(1554);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1557);
				match(ON);
				setState(1558);
				match(UPDATE);
				setState(1559);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1560);
					match(ON);
					setState(1561);
					match(DELETE);
					setState(1562);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(GBaseParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(GBaseParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceControlType);
		try {
			setState(1573);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1567);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1568);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1569);
				match(SET);
				setState(1570);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1571);
				match(NO);
				setState(1572);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(GBaseParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(GBaseParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1603);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1575);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(1576);
					uid();
					}
				}

				setState(1580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1579);
					indexType();
					}
				}

				setState(1582);
				indexColumnNames();
				setState(1586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1583);
					indexOption();
					}
					}
					setState(1588);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1589);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1590);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(1593);
					uid();
					}
				}

				setState(1596);
				indexColumnNames();
				setState(1600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(1597);
					indexOption();
					}
					}
					setState(1602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(GBaseParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(GBaseParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(GBaseParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(GBaseParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(GBaseParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(GBaseParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(GBaseParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(GBaseParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(GBaseParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(GBaseParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(GBaseParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(GBaseParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(GBaseParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(GBaseParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(GBaseParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(GBaseParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(GBaseParser.COMPACT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(GBaseParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(GBaseParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(GBaseParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(GBaseParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			setState(1749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1605);
				match(ENGINE);
				setState(1607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1606);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1609);
				engineName();
				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1610);
				match(AUTO_INCREMENT);
				setState(1612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1611);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1614);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1615);
				match(AVG_ROW_LENGTH);
				setState(1617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1616);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1619);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1620);
					match(DEFAULT);
					}
				}

				setState(1626);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1623);
					match(CHARACTER);
					setState(1624);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1625);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1628);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1633);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1631);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1632);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1635);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1636);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1639);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1640);
					match(DEFAULT);
					}
				}

				setState(1643);
				match(COLLATE);
				setState(1645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1644);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1647);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1648);
				match(COMMENT);
				setState(1650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1649);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1652);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1653);
				match(COMPRESSION);
				setState(1655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1654);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1657);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1658);
				match(CONNECTION);
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1659);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1662);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1663);
				match(DATA);
				setState(1664);
				match(DIRECTORY);
				setState(1666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1665);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1668);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1669);
				match(DELAY_KEY_WRITE);
				setState(1671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1670);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1673);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1674);
				match(ENCRYPTION);
				setState(1676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1675);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1678);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1679);
				match(INDEX);
				setState(1680);
				match(DIRECTORY);
				setState(1682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1681);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1684);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1685);
				match(INSERT_METHOD);
				setState(1687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1686);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1689);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1690);
				match(KEY_BLOCK_SIZE);
				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1691);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1694);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1695);
				match(MAX_ROWS);
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1696);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1699);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1700);
				match(MIN_ROWS);
				setState(1702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1701);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1704);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1705);
				match(PACK_KEYS);
				setState(1707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1706);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1709);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1710);
				match(PASSWORD);
				setState(1712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1711);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1714);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1715);
				match(ROW_FORMAT);
				setState(1717);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1716);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1719);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 303)) & ~0x3f) == 0 && ((1L << (_la - 303)) & ((1L << (COMPACT - 303)) | (1L << (COMPRESSED - 303)) | (1L << (DYNAMIC - 303)) | (1L << (FIXED - 303)))) != 0) || _la==REDUNDANT) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1720);
				match(STATS_AUTO_RECALC);
				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1721);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1724);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1725);
				match(STATS_PERSISTENT);
				setState(1727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1726);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1729);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1730);
				match(STATS_SAMPLE_PAGES);
				setState(1732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1731);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1734);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1735);
				match(TABLESPACE);
				setState(1736);
				uid();
				setState(1738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
				case 1:
					{
					setState(1737);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1740);
				tablespaceStorage();
				}
				break;
			case 26:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1741);
				match(UNION);
				setState(1743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1742);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1745);
				match(LR_BRACKET);
				setState(1746);
				tables();
				setState(1747);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(GBaseParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1751);
			match(STORAGE);
			setState(1752);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(GBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(GBaseParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(GBaseParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(GBaseParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(GBaseParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(PARTITION);
			setState(1755);
			match(BY);
			setState(1756);
			partitionFunctionDefinition();
			setState(1759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1757);
				match(PARTITIONS);
				setState(1758);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1761);
				match(SUBPARTITION);
				setState(1762);
				match(BY);
				setState(1763);
				subpartitionFunctionDefinition();
				setState(1766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1764);
					match(SUBPARTITIONS);
					setState(1765);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(1770);
				match(LR_BRACKET);
				setState(1771);
				partitionDefinition();
				setState(1776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1772);
					match(COMMA);
					setState(1773);
					partitionDefinition();
					}
					}
					setState(1778);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1779);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(GBaseParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(GBaseParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(GBaseParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1783);
					match(LINEAR);
					}
				}

				setState(1786);
				match(HASH);
				setState(1787);
				match(LR_BRACKET);
				setState(1788);
				expression(0);
				setState(1789);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1791);
					match(LINEAR);
					}
				}

				setState(1794);
				match(KEY);
				setState(1798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1795);
					match(ALGORITHM);
					setState(1796);
					match(EQUAL_SYMBOL);
					setState(1797);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1800);
				match(LR_BRACKET);
				setState(1801);
				uidList();
				setState(1802);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1804);
				match(RANGE);
				setState(1814);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1805);
					match(LR_BRACKET);
					setState(1806);
					expression(0);
					setState(1807);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1809);
					match(COLUMNS);
					setState(1810);
					match(LR_BRACKET);
					setState(1811);
					uidList();
					setState(1812);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1816);
				match(LIST);
				setState(1826);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1817);
					match(LR_BRACKET);
					setState(1818);
					expression(0);
					setState(1819);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1821);
					match(COLUMNS);
					setState(1822);
					match(LR_BRACKET);
					setState(1823);
					uidList();
					setState(1824);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(GBaseParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(GBaseParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1830);
					match(LINEAR);
					}
				}

				setState(1833);
				match(HASH);
				setState(1834);
				match(LR_BRACKET);
				setState(1835);
				expression(0);
				setState(1836);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1838);
					match(LINEAR);
					}
				}

				setState(1841);
				match(KEY);
				setState(1845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1842);
					match(ALGORITHM);
					setState(1843);
					match(EQUAL_SYMBOL);
					setState(1844);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1847);
				match(LR_BRACKET);
				setState(1848);
				uidList();
				setState(1849);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisionContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(GBaseParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(GBaseParser.THAN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionComparision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionComparision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionComparision(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			setState(1984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1853);
				match(PARTITION);
				setState(1854);
				uid();
				setState(1855);
				match(VALUES);
				setState(1856);
				match(LESS);
				setState(1857);
				match(THAN);
				setState(1858);
				match(LR_BRACKET);
				setState(1859);
				partitionDefinerAtom();
				setState(1864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1860);
					match(COMMA);
					setState(1861);
					partitionDefinerAtom();
					}
					}
					setState(1866);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1867);
				match(RR_BRACKET);
				setState(1871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (COMMENT - 301)) | (1L << (DATA - 301)) | (1L << (ENGINE - 301)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MAX_ROWS - 424)) | (1L << (MIN_ROWS - 424)) | (1L << (NODEGROUP - 424)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1868);
					partitionOption();
					}
					}
					setState(1873);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1874);
					subpartitionDefinition();
					setState(1879);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1875);
							match(COMMA);
							setState(1876);
							subpartitionDefinition();
							}
							} 
						}
						setState(1881);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1884);
				match(PARTITION);
				setState(1885);
				uid();
				setState(1886);
				match(VALUES);
				setState(1887);
				match(LESS);
				setState(1888);
				match(THAN);
				setState(1889);
				partitionDefinerAtom();
				setState(1893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (COMMENT - 301)) | (1L << (DATA - 301)) | (1L << (ENGINE - 301)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MAX_ROWS - 424)) | (1L << (MIN_ROWS - 424)) | (1L << (NODEGROUP - 424)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1890);
					partitionOption();
					}
					}
					setState(1895);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1896);
					subpartitionDefinition();
					setState(1901);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1897);
							match(COMMA);
							setState(1898);
							subpartitionDefinition();
							}
							} 
						}
						setState(1903);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1906);
				match(PARTITION);
				setState(1907);
				uid();
				setState(1908);
				match(VALUES);
				setState(1909);
				match(IN);
				setState(1910);
				match(LR_BRACKET);
				setState(1911);
				partitionDefinerAtom();
				setState(1916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1912);
					match(COMMA);
					setState(1913);
					partitionDefinerAtom();
					}
					}
					setState(1918);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1919);
				match(RR_BRACKET);
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (COMMENT - 301)) | (1L << (DATA - 301)) | (1L << (ENGINE - 301)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MAX_ROWS - 424)) | (1L << (MIN_ROWS - 424)) | (1L << (NODEGROUP - 424)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1920);
					partitionOption();
					}
					}
					setState(1925);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1926);
					subpartitionDefinition();
					setState(1931);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1927);
							match(COMMA);
							setState(1928);
							subpartitionDefinition();
							}
							} 
						}
						setState(1933);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1936);
				match(PARTITION);
				setState(1937);
				uid();
				setState(1938);
				match(VALUES);
				setState(1939);
				match(IN);
				setState(1940);
				match(LR_BRACKET);
				setState(1941);
				partitionDefinerVector();
				setState(1946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1942);
					match(COMMA);
					setState(1943);
					partitionDefinerVector();
					}
					}
					setState(1948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1949);
				match(RR_BRACKET);
				setState(1953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (COMMENT - 301)) | (1L << (DATA - 301)) | (1L << (ENGINE - 301)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MAX_ROWS - 424)) | (1L << (MIN_ROWS - 424)) | (1L << (NODEGROUP - 424)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1950);
					partitionOption();
					}
					}
					setState(1955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1956);
					subpartitionDefinition();
					setState(1961);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1957);
							match(COMMA);
							setState(1958);
							subpartitionDefinition();
							}
							} 
						}
						setState(1963);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
					}
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1966);
				match(PARTITION);
				setState(1967);
				uid();
				setState(1971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (COMMENT - 301)) | (1L << (DATA - 301)) | (1L << (ENGINE - 301)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MAX_ROWS - 424)) | (1L << (MIN_ROWS - 424)) | (1L << (NODEGROUP - 424)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1968);
					partitionOption();
					}
					}
					setState(1973);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1974);
					subpartitionDefinition();
					setState(1979);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1975);
							match(COMMA);
							setState(1976);
							subpartitionDefinition();
							}
							} 
						}
						setState(1981);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(GBaseParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionDefinerAtom);
		try {
			setState(1989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1986);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1987);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1988);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1991);
			match(LR_BRACKET);
			setState(1992);
			partitionDefinerAtom();
			setState(1995); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1993);
				match(COMMA);
				setState(1994);
				partitionDefinerAtom();
				}
				}
				setState(1997); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(1999);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(GBaseParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2001);
			match(SUBPARTITION);
			setState(2002);
			uid();
			setState(2006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 301)) & ~0x3f) == 0 && ((1L << (_la - 301)) & ((1L << (COMMENT - 301)) | (1L << (DATA - 301)) | (1L << (ENGINE - 301)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MAX_ROWS - 424)) | (1L << (MIN_ROWS - 424)) | (1L << (NODEGROUP - 424)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2003);
				partitionOption();
				}
				}
				setState(2008);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(GBaseParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(GBaseParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionOption);
		int _la;
		try {
			setState(2054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2009);
					match(STORAGE);
					}
				}

				setState(2012);
				match(ENGINE);
				setState(2014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2013);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2016);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2017);
				match(COMMENT);
				setState(2019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2018);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2021);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2022);
				match(DATA);
				setState(2023);
				match(DIRECTORY);
				setState(2025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2024);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2027);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2028);
				match(INDEX);
				setState(2029);
				match(DIRECTORY);
				setState(2031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2030);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2033);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2034);
				match(MAX_ROWS);
				setState(2036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2035);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2038);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2039);
				match(MIN_ROWS);
				setState(2041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2040);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2043);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2044);
				match(TABLESPACE);
				setState(2046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2045);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2048);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2049);
				match(NODEGROUP);
				setState(2051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2050);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2053);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(GBaseParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alterDatabase);
		int _la;
		try {
			setState(2074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2056);
				match(ALTER);
				setState(2057);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2059);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
				case 1:
					{
					setState(2058);
					uid();
					}
					break;
				}
				setState(2062); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2061);
					createDatabaseOption();
					}
					}
					setState(2064); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2066);
				match(ALTER);
				setState(2067);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2068);
				uid();
				setState(2069);
				match(UPGRADE);
				setState(2070);
				match(DATA);
				setState(2071);
				match(DIRECTORY);
				setState(2072);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(GBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(GBaseParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(GBaseParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(GBaseParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(GBaseParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			match(ALTER);
			setState(2078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2077);
				ownerStatement();
				}
			}

			setState(2080);
			match(EVENT);
			setState(2081);
			fullId();
			setState(2085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(2082);
				match(ON);
				setState(2083);
				match(SCHEDULE);
				setState(2084);
				scheduleExpression();
				}
				break;
			}
			setState(2093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2087);
				match(ON);
				setState(2088);
				match(COMPLETION);
				setState(2090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2089);
					match(NOT);
					}
				}

				setState(2092);
				match(PRESERVE);
				}
			}

			setState(2098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2095);
				match(RENAME);
				setState(2096);
				match(TO);
				setState(2097);
				fullId();
				}
				break;
			}
			setState(2101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2100);
				enableType();
				}
			}

			setState(2105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2103);
				match(COMMENT);
				setState(2104);
				match(STRING_LITERAL);
				}
			}

			setState(2109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(2107);
				match(DO);
				setState(2108);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2111);
			match(ALTER);
			setState(2112);
			match(FUNCTION);
			setState(2113);
			fullId();
			setState(2117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (MODIFIES - 100)) | (1L << (NOT - 100)) | (1L << (READS - 100)) | (1L << (SQL - 100)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2114);
				routineOption();
				}
				}
				setState(2119);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(GBaseParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(GBaseParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(GBaseParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2120);
			match(ALTER);
			setState(2121);
			match(INSTANCE);
			setState(2122);
			match(ROTATE);
			setState(2123);
			match(INNODB);
			setState(2124);
			match(MASTER);
			setState(2125);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(GBaseParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2127);
			match(ALTER);
			setState(2128);
			match(LOGFILE);
			setState(2129);
			match(GROUP);
			setState(2130);
			uid();
			setState(2131);
			match(ADD);
			setState(2132);
			match(UNDOFILE);
			setState(2133);
			match(STRING_LITERAL);
			setState(2139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2134);
				match(INITIAL_SIZE);
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2135);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2138);
				fileSizeLiteral();
				}
			}

			setState(2142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2141);
				match(WAIT);
				}
			}

			setState(2144);
			match(ENGINE);
			setState(2146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2145);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2148);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2150);
			match(ALTER);
			setState(2151);
			match(PROCEDURE);
			setState(2152);
			fullId();
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (MODIFIES - 100)) | (1L << (NOT - 100)) | (1L << (READS - 100)) | (1L << (SQL - 100)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2153);
				routineOption();
				}
				}
				setState(2158);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(GBaseParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			match(ALTER);
			setState(2160);
			match(SERVER);
			setState(2161);
			uid();
			setState(2162);
			match(OPTIONS);
			setState(2163);
			match(LR_BRACKET);
			setState(2164);
			serverOption();
			setState(2169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2165);
				match(COMMA);
				setState(2166);
				serverOption();
				}
				}
				setState(2171);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2172);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			match(ALTER);
			setState(2176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2175);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2178);
				match(IGNORE);
				}
			}

			setState(2181);
			match(TABLE);
			setState(2182);
			tableName();
			setState(2191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2183);
				alterSpecification();
				setState(2188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2184);
					match(COMMA);
					setState(2185);
					alterSpecification();
					}
					}
					setState(2190);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2193);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2196);
			match(ALTER);
			setState(2197);
			match(TABLESPACE);
			setState(2198);
			uid();
			setState(2199);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2200);
			match(DATAFILE);
			setState(2201);
			match(STRING_LITERAL);
			setState(2205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2202);
				match(INITIAL_SIZE);
				setState(2203);
				match(EQUAL_SYMBOL);
				setState(2204);
				fileSizeLiteral();
				}
			}

			setState(2208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2207);
				match(WAIT);
				}
			}

			setState(2210);
			match(ENGINE);
			setState(2212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2211);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2214);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(GBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(GBaseParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(GBaseParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(GBaseParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(GBaseParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			match(ALTER);
			setState(2220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2217);
				match(ALGORITHM);
				setState(2218);
				match(EQUAL_SYMBOL);
				setState(2219);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2222);
				ownerStatement();
				}
			}

			setState(2228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2225);
				match(SQL);
				setState(2226);
				match(SECURITY);
				setState(2227);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2230);
			match(VIEW);
			setState(2231);
			fullId();
			setState(2236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2232);
				match(LR_BRACKET);
				setState(2233);
				uidList();
				setState(2234);
				match(RR_BRACKET);
				}
			}

			setState(2238);
			match(AS);
			setState(2239);
			selectStatement();
			setState(2246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2240);
				match(WITH);
				setState(2242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2241);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2244);
				match(CHECK);
				setState(2245);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(GBaseParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(GBaseParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(GBaseParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(GBaseParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(GBaseParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(GBaseParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(GBaseParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(GBaseParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(GBaseParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(GBaseParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(GBaseParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(GBaseParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(GBaseParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(GBaseParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(GBaseParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(GBaseParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(GBaseParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(GBaseParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(GBaseParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(GBaseParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(GBaseParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(GBaseParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(GBaseParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(GBaseParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(GBaseParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(GBaseParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(GBaseParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(GBaseParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(GBaseParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(GBaseParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(GBaseParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(GBaseParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(GBaseParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(GBaseParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(GBaseParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(GBaseParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(GBaseParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(GBaseParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(GBaseParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(GBaseParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(GBaseParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2248);
				tableOption();
				setState(2255);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2250);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2249);
							match(COMMA);
							}
						}

						setState(2252);
						tableOption();
						}
						} 
					}
					setState(2257);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,278,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2258);
				match(ADD);
				setState(2260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2259);
					match(COLUMN);
					}
				}

				setState(2262);
				uid();
				setState(2263);
				columnDefinition();
				setState(2267);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2264);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2265);
					match(AFTER);
					setState(2266);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2269);
				match(ADD);
				setState(2271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2270);
					match(COLUMN);
					}
				}

				setState(2273);
				match(LR_BRACKET);
				setState(2274);
				uid();
				setState(2275);
				columnDefinition();
				setState(2282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2276);
					match(COMMA);
					setState(2277);
					uid();
					setState(2278);
					columnDefinition();
					}
					}
					setState(2284);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2285);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2287);
				match(ADD);
				setState(2288);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(2289);
					uid();
					}
				}

				setState(2293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2292);
					indexType();
					}
				}

				setState(2295);
				indexColumnNames();
				setState(2299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2296);
					indexOption();
					}
					}
					setState(2301);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2302);
				match(ADD);
				setState(2307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2303);
					match(CONSTRAINT);
					setState(2305);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(2304);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2309);
				match(PRIMARY);
				setState(2310);
				match(KEY);
				setState(2312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2311);
					indexType();
					}
				}

				setState(2314);
				indexColumnNames();
				setState(2318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2315);
					indexOption();
					}
					}
					setState(2320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2321);
				match(ADD);
				setState(2326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2322);
					match(CONSTRAINT);
					setState(2324);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(2323);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2328);
				match(UNIQUE);
				setState(2330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2329);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(2332);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2335);
					indexType();
					}
				}

				setState(2338);
				indexColumnNames();
				setState(2342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2339);
					indexOption();
					}
					}
					setState(2344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2345);
				match(ADD);
				setState(2346);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2347);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(2350);
					uid();
					}
				}

				setState(2353);
				indexColumnNames();
				setState(2357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE) {
					{
					{
					setState(2354);
					indexOption();
					}
					}
					setState(2359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2360);
				match(ADD);
				setState(2365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2361);
					match(CONSTRAINT);
					setState(2363);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(2362);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2367);
				match(FOREIGN);
				setState(2368);
				match(KEY);
				setState(2370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(2369);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2372);
				indexColumnNames();
				setState(2373);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2375);
				match(ADD);
				setState(2380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2376);
					match(CONSTRAINT);
					setState(2378);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
						{
						setState(2377);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2382);
				match(CHECK);
				setState(2383);
				match(LR_BRACKET);
				setState(2384);
				expression(0);
				setState(2385);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2387);
				match(ALGORITHM);
				setState(2389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2388);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2391);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2392);
				match(ALTER);
				setState(2394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2393);
					match(COLUMN);
					}
				}

				setState(2396);
				uid();
				setState(2402);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2397);
					match(SET);
					setState(2398);
					match(DEFAULT);
					setState(2399);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2400);
					match(DROP);
					setState(2401);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2404);
				match(CHANGE);
				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2405);
					match(COLUMN);
					}
				}

				setState(2408);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2409);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2410);
				columnDefinition();
				setState(2414);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2411);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2412);
					match(AFTER);
					setState(2413);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2416);
				match(RENAME);
				setState(2417);
				match(COLUMN);
				setState(2418);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2419);
				match(TO);
				setState(2420);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2422);
				match(LOCK);
				setState(2424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2423);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2426);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2427);
				match(MODIFY);
				setState(2429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2428);
					match(COLUMN);
					}
				}

				setState(2431);
				uid();
				setState(2432);
				columnDefinition();
				setState(2436);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2433);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2434);
					match(AFTER);
					setState(2435);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2438);
				match(DROP);
				setState(2440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2439);
					match(COLUMN);
					}
				}

				setState(2442);
				uid();
				setState(2444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2443);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2446);
				match(DROP);
				setState(2447);
				match(PRIMARY);
				setState(2448);
				match(KEY);
				}
				break;
			case 18:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2449);
				match(RENAME);
				setState(2450);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2451);
				uid();
				setState(2452);
				match(TO);
				setState(2453);
				uid();
				}
				break;
			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2455);
				match(DROP);
				setState(2456);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2457);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2458);
				match(DROP);
				setState(2459);
				match(FOREIGN);
				setState(2460);
				match(KEY);
				setState(2461);
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2462);
				match(DISABLE);
				setState(2463);
				match(KEYS);
				}
				break;
			case 22:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2464);
				match(ENABLE);
				setState(2465);
				match(KEYS);
				}
				break;
			case 23:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2466);
				match(RENAME);
				setState(2468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2467);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2470);
					uid();
					}
					break;
				case 2:
					{
					setState(2471);
					fullId();
					}
					break;
				}
				}
				break;
			case 24:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2474);
				match(ORDER);
				setState(2475);
				match(BY);
				setState(2476);
				uidList();
				}
				break;
			case 25:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2477);
				match(CONVERT);
				setState(2478);
				match(TO);
				setState(2479);
				match(CHARACTER);
				setState(2480);
				match(SET);
				setState(2481);
				charsetName();
				setState(2484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2482);
					match(COLLATE);
					setState(2483);
					collationName();
					}
				}

				}
				break;
			case 26:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2486);
					match(DEFAULT);
					}
				}

				setState(2489);
				match(CHARACTER);
				setState(2490);
				match(SET);
				setState(2491);
				match(EQUAL_SYMBOL);
				setState(2492);
				charsetName();
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2493);
					match(COLLATE);
					setState(2494);
					match(EQUAL_SYMBOL);
					setState(2495);
					collationName();
					}
				}

				}
				break;
			case 27:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2498);
				match(DISCARD);
				setState(2499);
				match(TABLESPACE);
				}
				break;
			case 28:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2500);
				match(IMPORT);
				setState(2501);
				match(TABLESPACE);
				}
				break;
			case 29:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2502);
				match(FORCE);
				}
				break;
			case 30:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2503);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2504);
				match(VALIDATION);
				}
				break;
			case 31:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2505);
				match(ADD);
				setState(2506);
				match(PARTITION);
				setState(2507);
				match(LR_BRACKET);
				setState(2508);
				partitionDefinition();
				setState(2513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2509);
					match(COMMA);
					setState(2510);
					partitionDefinition();
					}
					}
					setState(2515);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2516);
				match(RR_BRACKET);
				}
				break;
			case 32:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2518);
				match(DROP);
				setState(2519);
				match(PARTITION);
				setState(2520);
				uidList();
				}
				break;
			case 33:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2521);
				match(DISCARD);
				setState(2522);
				match(PARTITION);
				setState(2525);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2523);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2524);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2527);
				match(TABLESPACE);
				}
				break;
			case 34:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2528);
				match(IMPORT);
				setState(2529);
				match(PARTITION);
				setState(2532);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2530);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2531);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2534);
				match(TABLESPACE);
				}
				break;
			case 35:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2535);
				match(TRUNCATE);
				setState(2536);
				match(PARTITION);
				setState(2539);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2537);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2538);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 36:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2541);
				match(COALESCE);
				setState(2542);
				match(PARTITION);
				setState(2543);
				decimalLiteral();
				}
				break;
			case 37:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2544);
				match(REORGANIZE);
				setState(2545);
				match(PARTITION);
				setState(2546);
				uidList();
				setState(2547);
				match(INTO);
				setState(2548);
				match(LR_BRACKET);
				setState(2549);
				partitionDefinition();
				setState(2554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2550);
					match(COMMA);
					setState(2551);
					partitionDefinition();
					}
					}
					setState(2556);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2557);
				match(RR_BRACKET);
				}
				break;
			case 38:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2559);
				match(EXCHANGE);
				setState(2560);
				match(PARTITION);
				setState(2561);
				uid();
				setState(2562);
				match(WITH);
				setState(2563);
				match(TABLE);
				setState(2564);
				tableName();
				setState(2567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2565);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2566);
					match(VALIDATION);
					}
				}

				}
				break;
			case 39:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2569);
				match(ANALYZE);
				setState(2570);
				match(PARTITION);
				setState(2573);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2571);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2572);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 40:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2575);
				match(CHECK);
				setState(2576);
				match(PARTITION);
				setState(2579);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2577);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2578);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2581);
				match(OPTIMIZE);
				setState(2582);
				match(PARTITION);
				setState(2585);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2583);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2584);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2587);
				match(REBUILD);
				setState(2588);
				match(PARTITION);
				setState(2591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2589);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2590);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2593);
				match(REPAIR);
				setState(2594);
				match(PARTITION);
				setState(2597);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2595);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2596);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2599);
				match(REMOVE);
				setState(2600);
				match(PARTITIONING);
				}
				break;
			case 45:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2601);
				match(UPGRADE);
				setState(2602);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			match(DROP);
			setState(2606);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2607);
				ifExists();
				}
			}

			setState(2610);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(DROP);
			setState(2613);
			match(EVENT);
			setState(2615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2614);
				ifExists();
				}
			}

			setState(2617);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(GBaseParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(GBaseParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(GBaseParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(GBaseParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(GBaseParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(GBaseParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(GBaseParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(GBaseParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(GBaseParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(GBaseParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(GBaseParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(GBaseParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(GBaseParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(GBaseParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(GBaseParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(GBaseParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2619);
			match(DROP);
			setState(2620);
			match(INDEX);
			setState(2622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(2621);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2624);
			uid();
			setState(2625);
			match(ON);
			setState(2626);
			tableName();
			setState(2639);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2637);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2627);
						match(ALGORITHM);
						setState(2629);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2628);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2631);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2632);
						match(LOCK);
						setState(2634);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2633);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2636);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2641);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2642);
			match(DROP);
			setState(2643);
			match(LOGFILE);
			setState(2644);
			match(GROUP);
			setState(2645);
			uid();
			setState(2646);
			match(ENGINE);
			setState(2647);
			match(EQUAL_SYMBOL);
			setState(2648);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2650);
			match(DROP);
			setState(2651);
			match(PROCEDURE);
			setState(2653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2652);
				ifExists();
				}
			}

			setState(2655);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			match(DROP);
			setState(2658);
			match(FUNCTION);
			setState(2660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2659);
				ifExists();
				}
			}

			setState(2662);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2664);
			match(DROP);
			setState(2665);
			match(SERVER);
			setState(2667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2666);
				ifExists();
				}
			}

			setState(2669);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(GBaseParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			match(DROP);
			setState(2673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2672);
				match(TEMPORARY);
				}
			}

			setState(2675);
			match(TABLE);
			setState(2677);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2676);
				ifExists();
				}
			}

			setState(2679);
			tables();
			setState(2681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2680);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			match(DROP);
			setState(2684);
			match(TABLESPACE);
			setState(2685);
			uid();
			setState(2691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2686);
				match(ENGINE);
				setState(2688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2687);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2690);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693);
			match(DROP);
			setState(2694);
			match(TRIGGER);
			setState(2696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2695);
				ifExists();
				}
			}

			setState(2698);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(GBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(GBaseParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			match(DROP);
			setState(2701);
			match(VIEW);
			setState(2703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2702);
				ifExists();
				}
			}

			setState(2705);
			fullId();
			setState(2710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2706);
				match(COMMA);
				setState(2707);
				fullId();
				}
				}
				setState(2712);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2714);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2713);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2716);
			match(RENAME);
			setState(2717);
			match(TABLE);
			setState(2718);
			renameTableClause();
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2719);
				match(COMMA);
				setState(2720);
				renameTableClause();
				}
				}
				setState(2725);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2726);
			tableName();
			setState(2727);
			match(TO);
			setState(2728);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(GBaseParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2730);
			match(TRUNCATE);
			setState(2732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2731);
				match(TABLE);
				}
			}

			setState(2734);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(GBaseParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2736);
			match(CALL);
			setState(2737);
			fullId();
			setState(2744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(2738);
				match(LR_BRACKET);
				setState(2741);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(2739);
					constants();
					}
					break;
				case 2:
					{
					setState(2740);
					expressions();
					}
					break;
				}
				setState(2743);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_deleteStatement);
		try {
			setState(2748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2746);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2747);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2750);
			match(DO);
			setState(2751);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_handlerStatement);
		try {
			setState(2757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2753);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2754);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2755);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2756);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(GBaseParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(GBaseParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(GBaseParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2759);
			match(INSERT);
			setState(2761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)) {
				{
				setState(2760);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2763);
				match(IGNORE);
				}
			}

			setState(2767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2766);
				match(INTO);
				}
			}

			setState(2769);
			tableName();
			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2770);
				match(PARTITION);
				setState(2771);
				match(LR_BRACKET);
				setState(2773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(2772);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(2775);
				match(RR_BRACKET);
				}
			}

			setState(2794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
				case 1:
					{
					setState(2778);
					match(LR_BRACKET);
					setState(2779);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(2780);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2784);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2785);
				match(SET);
				setState(2786);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2787);
					match(COMMA);
					setState(2788);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2793);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2796);
				match(ON);
				setState(2797);
				match(DUPLICATE);
				setState(2798);
				match(KEY);
				setState(2799);
				match(UPDATE);
				setState(2800);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2801);
					match(COMMA);
					setState(2802);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2807);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(GBaseParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(GBaseParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(GBaseParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(GBaseParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(GBaseParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(GBaseParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(GBaseParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(GBaseParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2810);
			match(LOAD);
			setState(2811);
			match(DATA);
			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2812);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2815);
				match(LOCAL);
				}
			}

			setState(2818);
			match(INFILE);
			setState(2819);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2820);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2823);
			match(INTO);
			setState(2824);
			match(TABLE);
			setState(2825);
			tableName();
			setState(2831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2826);
				match(PARTITION);
				setState(2827);
				match(LR_BRACKET);
				setState(2828);
				uidList();
				setState(2829);
				match(RR_BRACKET);
				}
			}

			setState(2836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2833);
				match(CHARACTER);
				setState(2834);
				match(SET);
				setState(2835);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2838);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2840); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2839);
					selectFieldsInto();
					}
					}
					setState(2842); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2846);
				match(LINES);
				setState(2848); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2847);
					selectLinesInto();
					}
					}
					setState(2850); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2854);
				match(IGNORE);
				setState(2855);
				decimalLiteral();
				setState(2856);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(2860);
				match(LR_BRACKET);
				setState(2861);
				assignmentField();
				setState(2866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2862);
					match(COMMA);
					setState(2863);
					assignmentField();
					}
					}
					setState(2868);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2869);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(2873);
				match(SET);
				setState(2874);
				updatedElement();
				setState(2879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2875);
					match(COMMA);
					setState(2876);
					updatedElement();
					}
					}
					setState(2881);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(GBaseParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(GBaseParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(GBaseParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(GBaseParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(GBaseParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(GBaseParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(GBaseParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(GBaseParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(GBaseParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(GBaseParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(GBaseParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2884);
			match(LOAD);
			setState(2885);
			match(XML);
			setState(2887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2886);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2889);
				match(LOCAL);
				}
			}

			setState(2892);
			match(INFILE);
			setState(2893);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2894);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2897);
			match(INTO);
			setState(2898);
			match(TABLE);
			setState(2899);
			tableName();
			setState(2903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2900);
				match(CHARACTER);
				setState(2901);
				match(SET);
				setState(2902);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2905);
				match(ROWS);
				setState(2906);
				match(IDENTIFIED);
				setState(2907);
				match(BY);
				setState(2908);
				match(LESS_SYMBOL);
				setState(2909);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(2910);
				match(GREATER_SYMBOL);
				}
			}

			setState(2917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2913);
				match(IGNORE);
				setState(2914);
				decimalLiteral();
				setState(2915);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(2919);
				match(LR_BRACKET);
				setState(2920);
				assignmentField();
				setState(2925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2921);
					match(COMMA);
					setState(2922);
					assignmentField();
					}
					}
					setState(2927);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2928);
				match(RR_BRACKET);
				}
				break;
			}
			setState(2941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(2932);
				match(SET);
				setState(2933);
				updatedElement();
				setState(2938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2934);
					match(COMMA);
					setState(2935);
					updatedElement();
					}
					}
					setState(2940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(GBaseParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			match(REPLACE);
			setState(2945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2944);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2947);
				match(INTO);
				}
			}

			setState(2950);
			tableName();
			setState(2956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2951);
				match(PARTITION);
				setState(2952);
				match(LR_BRACKET);
				setState(2953);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(2954);
				match(RR_BRACKET);
				}
			}

			setState(2974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(2958);
					match(LR_BRACKET);
					setState(2959);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(2960);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2964);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2965);
				match(SET);
				setState(2966);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(2971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2967);
					match(COMMA);
					setState(2968);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(2973);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2976);
				querySpecification();
				setState(2978);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(2977);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2980);
				queryExpression();
				setState(2982);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(2981);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2984);
				querySpecificationNointo();
				setState(2986); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2985);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2988); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,398,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2990);
					match(UNION);
					setState(2992);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2991);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2996);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(2994);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(2995);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3000);
					orderByClause();
					}
				}

				setState(3004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3003);
					limitClause();
					}
				}

				setState(3007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					setState(3006);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3009);
				queryExpressionNointo();
				setState(3011); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3010);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3013); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,405,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3015);
					match(UNION);
					setState(3017);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3016);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3019);
					queryExpression();
					}
				}

				setState(3023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3022);
					orderByClause();
					}
				}

				setState(3026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3025);
					limitClause();
					}
				}

				setState(3029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(3028);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_updateStatement);
		try {
			setState(3035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3034);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_insertStatementValue);
		int _la;
		try {
			setState(3055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3037);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3038);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3039);
				match(LR_BRACKET);
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (RANK - 200)) | (1L << (DENSE_RANK - 200)) | (1L << (ROW_NUMBER - 200)) | (1L << (LEAD - 200)) | (1L << (LAG - 200)) | (1L << (PERCENT_RANK - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (UTC_TIME - 264)) | (1L << (UTC_TIMESTAMP - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)))) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (INTERNAL - 587)) | (1L << (QUARTER - 587)) | (1L << (MONTH - 587)) | (1L << (DAY - 587)) | (1L << (HOUR - 587)) | (1L << (MINUTE - 587)) | (1L << (WEEK - 587)) | (1L << (SECOND - 587)) | (1L << (MICROSECOND - 587)) | (1L << (TABLES - 587)) | (1L << (ROUTINE - 587)) | (1L << (EXECUTE - 587)) | (1L << (FILE - 587)) | (1L << (PROCESS - 587)) | (1L << (RELOAD - 587)) | (1L << (SHUTDOWN - 587)) | (1L << (SUPER - 587)) | (1L << (PRIVILEGES - 587)) | (1L << (SESSION_VARIABLES_ADMIN - 587)) | (1L << (ARMSCII8 - 587)) | (1L << (ASCII - 587)) | (1L << (BIG5 - 587)) | (1L << (CP1250 - 587)) | (1L << (CP1251 - 587)) | (1L << (CP1256 - 587)) | (1L << (CP1257 - 587)) | (1L << (CP850 - 587)) | (1L << (CP852 - 587)) | (1L << (CP866 - 587)) | (1L << (CP932 - 587)) | (1L << (DEC8 - 587)) | (1L << (EUCJPMS - 587)) | (1L << (EUCKR - 587)) | (1L << (GB2312 - 587)) | (1L << (GBK - 587)) | (1L << (GEOSTD8 - 587)) | (1L << (GREEK - 587)) | (1L << (HEBREW - 587)) | (1L << (HP8 - 587)) | (1L << (KEYBCS2 - 587)) | (1L << (KOI8R - 587)) | (1L << (KOI8U - 587)) | (1L << (LATIN1 - 587)) | (1L << (LATIN2 - 587)) | (1L << (LATIN5 - 587)) | (1L << (LATIN7 - 587)) | (1L << (MACCE - 587)) | (1L << (MACROMAN - 587)) | (1L << (SJIS - 587)) | (1L << (SWE7 - 587)) | (1L << (TIS620 - 587)) | (1L << (UCS2 - 587)) | (1L << (UJIS - 587)) | (1L << (UTF16 - 587)) | (1L << (UTF16LE - 587)) | (1L << (UTF32 - 587)) | (1L << (UTF8 - 587)) | (1L << (UTF8MB3 - 587)) | (1L << (UTF8MB4 - 587)) | (1L << (ARCHIVE - 587)) | (1L << (BLACKHOLE - 587)) | (1L << (CSV - 587)) | (1L << (FEDERATED - 587)) | (1L << (INNODB - 587)))) != 0) || ((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (MEMORY - 651)) | (1L << (MRG_MYISAM - 651)) | (1L << (MYISAM - 651)) | (1L << (NDB - 651)) | (1L << (NDBCLUSTER - 651)) | (1L << (PERFORMANCE_SCHEMA - 651)) | (1L << (TOKUDB - 651)) | (1L << (REPEATABLE - 651)) | (1L << (COMMITTED - 651)) | (1L << (UNCOMMITTED - 651)) | (1L << (SERIALIZABLE - 651)) | (1L << (GEOMETRYCOLLECTION - 651)) | (1L << (LINESTRING - 651)) | (1L << (MULTILINESTRING - 651)) | (1L << (MULTIPOINT - 651)) | (1L << (MULTIPOLYGON - 651)) | (1L << (POINT - 651)) | (1L << (POLYGON - 651)) | (1L << (ABS - 651)) | (1L << (ACOS - 651)) | (1L << (ADDDATE - 651)) | (1L << (ADDTIME - 651)) | (1L << (AES_DECRYPT - 651)) | (1L << (AES_ENCRYPT - 651)) | (1L << (AREA - 651)) | (1L << (ASBINARY - 651)) | (1L << (ASIN - 651)) | (1L << (ASTEXT - 651)) | (1L << (ASWKB - 651)) | (1L << (ASWKT - 651)) | (1L << (ASYMMETRIC_DECRYPT - 651)) | (1L << (ASYMMETRIC_DERIVE - 651)) | (1L << (ASYMMETRIC_ENCRYPT - 651)) | (1L << (ASYMMETRIC_SIGN - 651)) | (1L << (ASYMMETRIC_VERIFY - 651)) | (1L << (ATAN - 651)) | (1L << (ATAN2 - 651)) | (1L << (BENCHMARK - 651)) | (1L << (BIN - 651)) | (1L << (BIT_COUNT - 651)) | (1L << (BIT_LENGTH - 651)) | (1L << (BUFFER - 651)) | (1L << (CATALOG_NAME - 651)) | (1L << (CEIL - 651)) | (1L << (CEILING - 651)) | (1L << (CENTROID - 651)) | (1L << (CHARACTER_LENGTH - 651)) | (1L << (CHARSET - 651)) | (1L << (CHAR_LENGTH - 651)) | (1L << (COERCIBILITY - 651)) | (1L << (COLLATION - 651)) | (1L << (COMPRESS - 651)) | (1L << (CONCAT - 651)) | (1L << (CONCAT_WS - 651)) | (1L << (CONNECTION_ID - 651)) | (1L << (CONV - 651)) | (1L << (CONVERT_TZ - 651)) | (1L << (COS - 651)) | (1L << (COT - 651)) | (1L << (CRC32 - 651)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 651)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 651)))) != 0) || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (CREATE_DH_PARAMETERS - 715)) | (1L << (CREATE_DIGEST - 715)) | (1L << (CROSSES - 715)) | (1L << (DATEDIFF - 715)) | (1L << (DATE_FORMAT - 715)) | (1L << (DAYNAME - 715)) | (1L << (DAYOFMONTH - 715)) | (1L << (DAYOFWEEK - 715)) | (1L << (DAYOFYEAR - 715)) | (1L << (DECODE - 715)) | (1L << (DEGREES - 715)) | (1L << (DES_DECRYPT - 715)) | (1L << (DES_ENCRYPT - 715)) | (1L << (DIMENSION - 715)) | (1L << (DISJOINT - 715)) | (1L << (ELT - 715)) | (1L << (ENCODE - 715)) | (1L << (ENCRYPT - 715)) | (1L << (ENDPOINT - 715)) | (1L << (ENVELOPE - 715)) | (1L << (EQUALS - 715)) | (1L << (EXP - 715)) | (1L << (EXPORT_SET - 715)) | (1L << (EXTERIORRING - 715)) | (1L << (EXTRACTVALUE - 715)) | (1L << (FIELD - 715)) | (1L << (FIND_IN_SET - 715)) | (1L << (FLOOR - 715)) | (1L << (FORMAT - 715)) | (1L << (FOUND_ROWS - 715)) | (1L << (FROM_BASE64 - 715)) | (1L << (FROM_DAYS - 715)) | (1L << (FROM_UNIXTIME - 715)) | (1L << (GEOMCOLLFROMTEXT - 715)) | (1L << (GEOMCOLLFROMWKB - 715)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 715)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 715)) | (1L << (GEOMETRYFROMTEXT - 715)) | (1L << (GEOMETRYFROMWKB - 715)) | (1L << (GEOMETRYN - 715)) | (1L << (GEOMETRYTYPE - 715)) | (1L << (GEOMFROMTEXT - 715)) | (1L << (GEOMFROMWKB - 715)) | (1L << (GET_FORMAT - 715)) | (1L << (GET_LOCK - 715)) | (1L << (GLENGTH - 715)) | (1L << (GREATEST - 715)) | (1L << (GTID_SUBSET - 715)) | (1L << (GTID_SUBTRACT - 715)) | (1L << (HEX - 715)) | (1L << (IFNULL - 715)) | (1L << (INET6_ATON - 715)) | (1L << (INET6_NTOA - 715)) | (1L << (INET_ATON - 715)) | (1L << (INET_NTOA - 715)) | (1L << (INSTR - 715)) | (1L << (INTERIORRINGN - 715)) | (1L << (INTERSECTS - 715)) | (1L << (ISCLOSED - 715)) | (1L << (ISEMPTY - 715)) | (1L << (ISNULL - 715)) | (1L << (ISSIMPLE - 715)) | (1L << (IS_FREE_LOCK - 715)) | (1L << (IS_IPV4 - 715)))) != 0) || ((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (IS_IPV4_COMPAT - 779)) | (1L << (IS_IPV4_MAPPED - 779)) | (1L << (IS_IPV6 - 779)) | (1L << (IS_USED_LOCK - 779)) | (1L << (LAST_INSERT_ID - 779)) | (1L << (LCASE - 779)) | (1L << (LEAST - 779)) | (1L << (LENGTH - 779)) | (1L << (LINEFROMTEXT - 779)) | (1L << (LINEFROMWKB - 779)) | (1L << (LINESTRINGFROMTEXT - 779)) | (1L << (LINESTRINGFROMWKB - 779)) | (1L << (LN - 779)) | (1L << (LOAD_FILE - 779)) | (1L << (LOCATE - 779)) | (1L << (LOG - 779)) | (1L << (LOG10 - 779)) | (1L << (LOG2 - 779)) | (1L << (LOWER - 779)) | (1L << (LPAD - 779)) | (1L << (LTRIM - 779)) | (1L << (MAKEDATE - 779)) | (1L << (MAKETIME - 779)) | (1L << (MAKE_SET - 779)) | (1L << (MASTER_POS_WAIT - 779)) | (1L << (MBRCONTAINS - 779)) | (1L << (MBRDISJOINT - 779)) | (1L << (MBREQUAL - 779)) | (1L << (MBRINTERSECTS - 779)) | (1L << (MBROVERLAPS - 779)) | (1L << (MBRTOUCHES - 779)) | (1L << (MBRWITHIN - 779)) | (1L << (MD5 - 779)) | (1L << (MLINEFROMTEXT - 779)) | (1L << (MLINEFROMWKB - 779)) | (1L << (MONTHNAME - 779)) | (1L << (MPOINTFROMTEXT - 779)) | (1L << (MPOINTFROMWKB - 779)) | (1L << (MPOLYFROMTEXT - 779)) | (1L << (MPOLYFROMWKB - 779)) | (1L << (MULTILINESTRINGFROMTEXT - 779)) | (1L << (MULTILINESTRINGFROMWKB - 779)) | (1L << (MULTIPOINTFROMTEXT - 779)) | (1L << (MULTIPOINTFROMWKB - 779)) | (1L << (MULTIPOLYGONFROMTEXT - 779)) | (1L << (MULTIPOLYGONFROMWKB - 779)) | (1L << (NAME_CONST - 779)) | (1L << (NULLIF - 779)) | (1L << (NUMGEOMETRIES - 779)) | (1L << (NUMINTERIORRINGS - 779)) | (1L << (NUMPOINTS - 779)) | (1L << (OCT - 779)) | (1L << (OCTET_LENGTH - 779)) | (1L << (ORD - 779)) | (1L << (OVERLAPS - 779)) | (1L << (PERIOD_ADD - 779)) | (1L << (PERIOD_DIFF - 779)) | (1L << (PI - 779)) | (1L << (POINTFROMTEXT - 779)) | (1L << (POINTFROMWKB - 779)) | (1L << (POINTN - 779)) | (1L << (POLYFROMTEXT - 779)) | (1L << (POLYFROMWKB - 779)) | (1L << (POLYGONFROMTEXT - 779)))) != 0) || ((((_la - 843)) & ~0x3f) == 0 && ((1L << (_la - 843)) & ((1L << (POLYGONFROMWKB - 843)) | (1L << (POW - 843)) | (1L << (POWER - 843)) | (1L << (QUOTE - 843)) | (1L << (RADIANS - 843)) | (1L << (RAND - 843)) | (1L << (RANDOM_BYTES - 843)) | (1L << (RELEASE_LOCK - 843)) | (1L << (REVERSE - 843)) | (1L << (ROUND - 843)) | (1L << (ROW_COUNT - 843)) | (1L << (RPAD - 843)) | (1L << (RTRIM - 843)) | (1L << (SEC_TO_TIME - 843)) | (1L << (SESSION_USER - 843)) | (1L << (SHA - 843)) | (1L << (SHA1 - 843)) | (1L << (SHA2 - 843)) | (1L << (SCHEMA_NAME - 843)) | (1L << (SIGN - 843)) | (1L << (SIN - 843)) | (1L << (SLEEP - 843)) | (1L << (SOUNDEX - 843)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 843)) | (1L << (SQRT - 843)) | (1L << (SRID - 843)) | (1L << (STARTPOINT - 843)) | (1L << (STRCMP - 843)) | (1L << (STR_TO_DATE - 843)) | (1L << (ST_AREA - 843)) | (1L << (ST_ASBINARY - 843)) | (1L << (ST_ASTEXT - 843)) | (1L << (ST_ASWKB - 843)) | (1L << (ST_ASWKT - 843)) | (1L << (ST_BUFFER - 843)) | (1L << (ST_CENTROID - 843)) | (1L << (ST_CONTAINS - 843)) | (1L << (ST_CROSSES - 843)) | (1L << (ST_DIFFERENCE - 843)) | (1L << (ST_DIMENSION - 843)) | (1L << (ST_DISJOINT - 843)) | (1L << (ST_DISTANCE - 843)) | (1L << (ST_ENDPOINT - 843)) | (1L << (ST_ENVELOPE - 843)) | (1L << (ST_EQUALS - 843)) | (1L << (ST_EXTERIORRING - 843)) | (1L << (ST_GEOMCOLLFROMTEXT - 843)) | (1L << (ST_GEOMCOLLFROMTXT - 843)) | (1L << (ST_GEOMCOLLFROMWKB - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 843)) | (1L << (ST_GEOMETRYFROMTEXT - 843)) | (1L << (ST_GEOMETRYFROMWKB - 843)) | (1L << (ST_GEOMETRYN - 843)) | (1L << (ST_GEOMETRYTYPE - 843)) | (1L << (ST_GEOMFROMTEXT - 843)) | (1L << (ST_GEOMFROMWKB - 843)) | (1L << (ST_INTERIORRINGN - 843)) | (1L << (ST_INTERSECTION - 843)) | (1L << (ST_INTERSECTS - 843)) | (1L << (ST_ISCLOSED - 843)) | (1L << (ST_ISEMPTY - 843)) | (1L << (ST_ISSIMPLE - 843)) | (1L << (ST_LINEFROMTEXT - 843)))) != 0) || ((((_la - 907)) & ~0x3f) == 0 && ((1L << (_la - 907)) & ((1L << (ST_LINEFROMWKB - 907)) | (1L << (ST_LINESTRINGFROMTEXT - 907)) | (1L << (ST_LINESTRINGFROMWKB - 907)) | (1L << (ST_NUMGEOMETRIES - 907)) | (1L << (ST_NUMINTERIORRING - 907)) | (1L << (ST_NUMINTERIORRINGS - 907)) | (1L << (ST_NUMPOINTS - 907)) | (1L << (ST_OVERLAPS - 907)) | (1L << (ST_POINTFROMTEXT - 907)) | (1L << (ST_POINTFROMWKB - 907)) | (1L << (ST_POINTN - 907)) | (1L << (ST_POLYFROMTEXT - 907)) | (1L << (ST_POLYFROMWKB - 907)) | (1L << (ST_POLYGONFROMTEXT - 907)) | (1L << (ST_POLYGONFROMWKB - 907)) | (1L << (ST_SRID - 907)) | (1L << (ST_STARTPOINT - 907)) | (1L << (ST_SYMDIFFERENCE - 907)) | (1L << (ST_TOUCHES - 907)) | (1L << (ST_UNION - 907)) | (1L << (ST_WITHIN - 907)) | (1L << (ST_X - 907)) | (1L << (ST_Y - 907)) | (1L << (SUBDATE - 907)) | (1L << (SUBSTRING_INDEX - 907)) | (1L << (SUBTIME - 907)) | (1L << (SYSTEM_USER - 907)) | (1L << (TAN - 907)) | (1L << (TIMEDIFF - 907)) | (1L << (TIMESTAMPADD - 907)) | (1L << (TIMESTAMPDIFF - 907)) | (1L << (TIME_FORMAT - 907)) | (1L << (TIME_TO_SEC - 907)) | (1L << (TOUCHES - 907)) | (1L << (TO_BASE64 - 907)) | (1L << (TO_DAYS - 907)) | (1L << (TO_SECONDS - 907)) | (1L << (UCASE - 907)) | (1L << (UNCOMPRESS - 907)) | (1L << (UNCOMPRESSED_LENGTH - 907)) | (1L << (UNHEX - 907)) | (1L << (UNIX_TIMESTAMP - 907)) | (1L << (UPDATEXML - 907)) | (1L << (UPPER - 907)) | (1L << (UUID - 907)) | (1L << (UUID_SHORT - 907)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 907)) | (1L << (VERSION - 907)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 907)) | (1L << (WEEKDAY - 907)) | (1L << (WEEKOFYEAR - 907)) | (1L << (WEIGHT_STRING - 907)) | (1L << (WITHIN - 907)) | (1L << (YEARWEEK - 907)) | (1L << (Y_FUNCTION - 907)) | (1L << (X_FUNCTION - 907)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (PLUS - 975)) | (1L << (MINUS - 975)) | (1L << (EXCLAMATION_SYMBOL - 975)) | (1L << (BIT_NOT_OP - 975)) | (1L << (LR_BRACKET - 975)) | (1L << (ZERO_DECIMAL - 975)) | (1L << (ONE_DECIMAL - 975)) | (1L << (TWO_DECIMAL - 975)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 975)) | (1L << (START_NATIONAL_STRING_LITERAL - 975)) | (1L << (STRING_LITERAL - 975)) | (1L << (DECIMAL_LITERAL - 975)) | (1L << (HEXADECIMAL_LITERAL - 975)) | (1L << (REAL_LITERAL - 975)) | (1L << (NULL_SPEC_LITERAL - 975)) | (1L << (BIT_STRING - 975)) | (1L << (STRING_CHARSET_NAME - 975)) | (1L << (ID - 975)) | (1L << (REVERSE_QUOTE_ID - 975)) | (1L << (LOCAL_ID - 975)) | (1L << (GLOBAL_ID - 975)))) != 0)) {
					{
					setState(3040);
					expressionsWithDefaults();
					}
				}

				setState(3043);
				match(RR_BRACKET);
				setState(3052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3044);
					match(COMMA);
					setState(3045);
					match(LR_BRACKET);
					setState(3047);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (RANK - 200)) | (1L << (DENSE_RANK - 200)) | (1L << (ROW_NUMBER - 200)) | (1L << (LEAD - 200)) | (1L << (LAG - 200)) | (1L << (PERCENT_RANK - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (UTC_TIME - 264)) | (1L << (UTC_TIMESTAMP - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)))) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (INTERNAL - 587)) | (1L << (QUARTER - 587)) | (1L << (MONTH - 587)) | (1L << (DAY - 587)) | (1L << (HOUR - 587)) | (1L << (MINUTE - 587)) | (1L << (WEEK - 587)) | (1L << (SECOND - 587)) | (1L << (MICROSECOND - 587)) | (1L << (TABLES - 587)) | (1L << (ROUTINE - 587)) | (1L << (EXECUTE - 587)) | (1L << (FILE - 587)) | (1L << (PROCESS - 587)) | (1L << (RELOAD - 587)) | (1L << (SHUTDOWN - 587)) | (1L << (SUPER - 587)) | (1L << (PRIVILEGES - 587)) | (1L << (SESSION_VARIABLES_ADMIN - 587)) | (1L << (ARMSCII8 - 587)) | (1L << (ASCII - 587)) | (1L << (BIG5 - 587)) | (1L << (CP1250 - 587)) | (1L << (CP1251 - 587)) | (1L << (CP1256 - 587)) | (1L << (CP1257 - 587)) | (1L << (CP850 - 587)) | (1L << (CP852 - 587)) | (1L << (CP866 - 587)) | (1L << (CP932 - 587)) | (1L << (DEC8 - 587)) | (1L << (EUCJPMS - 587)) | (1L << (EUCKR - 587)) | (1L << (GB2312 - 587)) | (1L << (GBK - 587)) | (1L << (GEOSTD8 - 587)) | (1L << (GREEK - 587)) | (1L << (HEBREW - 587)) | (1L << (HP8 - 587)) | (1L << (KEYBCS2 - 587)) | (1L << (KOI8R - 587)) | (1L << (KOI8U - 587)) | (1L << (LATIN1 - 587)) | (1L << (LATIN2 - 587)) | (1L << (LATIN5 - 587)) | (1L << (LATIN7 - 587)) | (1L << (MACCE - 587)) | (1L << (MACROMAN - 587)) | (1L << (SJIS - 587)) | (1L << (SWE7 - 587)) | (1L << (TIS620 - 587)) | (1L << (UCS2 - 587)) | (1L << (UJIS - 587)) | (1L << (UTF16 - 587)) | (1L << (UTF16LE - 587)) | (1L << (UTF32 - 587)) | (1L << (UTF8 - 587)) | (1L << (UTF8MB3 - 587)) | (1L << (UTF8MB4 - 587)) | (1L << (ARCHIVE - 587)) | (1L << (BLACKHOLE - 587)) | (1L << (CSV - 587)) | (1L << (FEDERATED - 587)) | (1L << (INNODB - 587)))) != 0) || ((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (MEMORY - 651)) | (1L << (MRG_MYISAM - 651)) | (1L << (MYISAM - 651)) | (1L << (NDB - 651)) | (1L << (NDBCLUSTER - 651)) | (1L << (PERFORMANCE_SCHEMA - 651)) | (1L << (TOKUDB - 651)) | (1L << (REPEATABLE - 651)) | (1L << (COMMITTED - 651)) | (1L << (UNCOMMITTED - 651)) | (1L << (SERIALIZABLE - 651)) | (1L << (GEOMETRYCOLLECTION - 651)) | (1L << (LINESTRING - 651)) | (1L << (MULTILINESTRING - 651)) | (1L << (MULTIPOINT - 651)) | (1L << (MULTIPOLYGON - 651)) | (1L << (POINT - 651)) | (1L << (POLYGON - 651)) | (1L << (ABS - 651)) | (1L << (ACOS - 651)) | (1L << (ADDDATE - 651)) | (1L << (ADDTIME - 651)) | (1L << (AES_DECRYPT - 651)) | (1L << (AES_ENCRYPT - 651)) | (1L << (AREA - 651)) | (1L << (ASBINARY - 651)) | (1L << (ASIN - 651)) | (1L << (ASTEXT - 651)) | (1L << (ASWKB - 651)) | (1L << (ASWKT - 651)) | (1L << (ASYMMETRIC_DECRYPT - 651)) | (1L << (ASYMMETRIC_DERIVE - 651)) | (1L << (ASYMMETRIC_ENCRYPT - 651)) | (1L << (ASYMMETRIC_SIGN - 651)) | (1L << (ASYMMETRIC_VERIFY - 651)) | (1L << (ATAN - 651)) | (1L << (ATAN2 - 651)) | (1L << (BENCHMARK - 651)) | (1L << (BIN - 651)) | (1L << (BIT_COUNT - 651)) | (1L << (BIT_LENGTH - 651)) | (1L << (BUFFER - 651)) | (1L << (CATALOG_NAME - 651)) | (1L << (CEIL - 651)) | (1L << (CEILING - 651)) | (1L << (CENTROID - 651)) | (1L << (CHARACTER_LENGTH - 651)) | (1L << (CHARSET - 651)) | (1L << (CHAR_LENGTH - 651)) | (1L << (COERCIBILITY - 651)) | (1L << (COLLATION - 651)) | (1L << (COMPRESS - 651)) | (1L << (CONCAT - 651)) | (1L << (CONCAT_WS - 651)) | (1L << (CONNECTION_ID - 651)) | (1L << (CONV - 651)) | (1L << (CONVERT_TZ - 651)) | (1L << (COS - 651)) | (1L << (COT - 651)) | (1L << (CRC32 - 651)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 651)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 651)))) != 0) || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (CREATE_DH_PARAMETERS - 715)) | (1L << (CREATE_DIGEST - 715)) | (1L << (CROSSES - 715)) | (1L << (DATEDIFF - 715)) | (1L << (DATE_FORMAT - 715)) | (1L << (DAYNAME - 715)) | (1L << (DAYOFMONTH - 715)) | (1L << (DAYOFWEEK - 715)) | (1L << (DAYOFYEAR - 715)) | (1L << (DECODE - 715)) | (1L << (DEGREES - 715)) | (1L << (DES_DECRYPT - 715)) | (1L << (DES_ENCRYPT - 715)) | (1L << (DIMENSION - 715)) | (1L << (DISJOINT - 715)) | (1L << (ELT - 715)) | (1L << (ENCODE - 715)) | (1L << (ENCRYPT - 715)) | (1L << (ENDPOINT - 715)) | (1L << (ENVELOPE - 715)) | (1L << (EQUALS - 715)) | (1L << (EXP - 715)) | (1L << (EXPORT_SET - 715)) | (1L << (EXTERIORRING - 715)) | (1L << (EXTRACTVALUE - 715)) | (1L << (FIELD - 715)) | (1L << (FIND_IN_SET - 715)) | (1L << (FLOOR - 715)) | (1L << (FORMAT - 715)) | (1L << (FOUND_ROWS - 715)) | (1L << (FROM_BASE64 - 715)) | (1L << (FROM_DAYS - 715)) | (1L << (FROM_UNIXTIME - 715)) | (1L << (GEOMCOLLFROMTEXT - 715)) | (1L << (GEOMCOLLFROMWKB - 715)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 715)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 715)) | (1L << (GEOMETRYFROMTEXT - 715)) | (1L << (GEOMETRYFROMWKB - 715)) | (1L << (GEOMETRYN - 715)) | (1L << (GEOMETRYTYPE - 715)) | (1L << (GEOMFROMTEXT - 715)) | (1L << (GEOMFROMWKB - 715)) | (1L << (GET_FORMAT - 715)) | (1L << (GET_LOCK - 715)) | (1L << (GLENGTH - 715)) | (1L << (GREATEST - 715)) | (1L << (GTID_SUBSET - 715)) | (1L << (GTID_SUBTRACT - 715)) | (1L << (HEX - 715)) | (1L << (IFNULL - 715)) | (1L << (INET6_ATON - 715)) | (1L << (INET6_NTOA - 715)) | (1L << (INET_ATON - 715)) | (1L << (INET_NTOA - 715)) | (1L << (INSTR - 715)) | (1L << (INTERIORRINGN - 715)) | (1L << (INTERSECTS - 715)) | (1L << (ISCLOSED - 715)) | (1L << (ISEMPTY - 715)) | (1L << (ISNULL - 715)) | (1L << (ISSIMPLE - 715)) | (1L << (IS_FREE_LOCK - 715)) | (1L << (IS_IPV4 - 715)))) != 0) || ((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (IS_IPV4_COMPAT - 779)) | (1L << (IS_IPV4_MAPPED - 779)) | (1L << (IS_IPV6 - 779)) | (1L << (IS_USED_LOCK - 779)) | (1L << (LAST_INSERT_ID - 779)) | (1L << (LCASE - 779)) | (1L << (LEAST - 779)) | (1L << (LENGTH - 779)) | (1L << (LINEFROMTEXT - 779)) | (1L << (LINEFROMWKB - 779)) | (1L << (LINESTRINGFROMTEXT - 779)) | (1L << (LINESTRINGFROMWKB - 779)) | (1L << (LN - 779)) | (1L << (LOAD_FILE - 779)) | (1L << (LOCATE - 779)) | (1L << (LOG - 779)) | (1L << (LOG10 - 779)) | (1L << (LOG2 - 779)) | (1L << (LOWER - 779)) | (1L << (LPAD - 779)) | (1L << (LTRIM - 779)) | (1L << (MAKEDATE - 779)) | (1L << (MAKETIME - 779)) | (1L << (MAKE_SET - 779)) | (1L << (MASTER_POS_WAIT - 779)) | (1L << (MBRCONTAINS - 779)) | (1L << (MBRDISJOINT - 779)) | (1L << (MBREQUAL - 779)) | (1L << (MBRINTERSECTS - 779)) | (1L << (MBROVERLAPS - 779)) | (1L << (MBRTOUCHES - 779)) | (1L << (MBRWITHIN - 779)) | (1L << (MD5 - 779)) | (1L << (MLINEFROMTEXT - 779)) | (1L << (MLINEFROMWKB - 779)) | (1L << (MONTHNAME - 779)) | (1L << (MPOINTFROMTEXT - 779)) | (1L << (MPOINTFROMWKB - 779)) | (1L << (MPOLYFROMTEXT - 779)) | (1L << (MPOLYFROMWKB - 779)) | (1L << (MULTILINESTRINGFROMTEXT - 779)) | (1L << (MULTILINESTRINGFROMWKB - 779)) | (1L << (MULTIPOINTFROMTEXT - 779)) | (1L << (MULTIPOINTFROMWKB - 779)) | (1L << (MULTIPOLYGONFROMTEXT - 779)) | (1L << (MULTIPOLYGONFROMWKB - 779)) | (1L << (NAME_CONST - 779)) | (1L << (NULLIF - 779)) | (1L << (NUMGEOMETRIES - 779)) | (1L << (NUMINTERIORRINGS - 779)) | (1L << (NUMPOINTS - 779)) | (1L << (OCT - 779)) | (1L << (OCTET_LENGTH - 779)) | (1L << (ORD - 779)) | (1L << (OVERLAPS - 779)) | (1L << (PERIOD_ADD - 779)) | (1L << (PERIOD_DIFF - 779)) | (1L << (PI - 779)) | (1L << (POINTFROMTEXT - 779)) | (1L << (POINTFROMWKB - 779)) | (1L << (POINTN - 779)) | (1L << (POLYFROMTEXT - 779)) | (1L << (POLYFROMWKB - 779)) | (1L << (POLYGONFROMTEXT - 779)))) != 0) || ((((_la - 843)) & ~0x3f) == 0 && ((1L << (_la - 843)) & ((1L << (POLYGONFROMWKB - 843)) | (1L << (POW - 843)) | (1L << (POWER - 843)) | (1L << (QUOTE - 843)) | (1L << (RADIANS - 843)) | (1L << (RAND - 843)) | (1L << (RANDOM_BYTES - 843)) | (1L << (RELEASE_LOCK - 843)) | (1L << (REVERSE - 843)) | (1L << (ROUND - 843)) | (1L << (ROW_COUNT - 843)) | (1L << (RPAD - 843)) | (1L << (RTRIM - 843)) | (1L << (SEC_TO_TIME - 843)) | (1L << (SESSION_USER - 843)) | (1L << (SHA - 843)) | (1L << (SHA1 - 843)) | (1L << (SHA2 - 843)) | (1L << (SCHEMA_NAME - 843)) | (1L << (SIGN - 843)) | (1L << (SIN - 843)) | (1L << (SLEEP - 843)) | (1L << (SOUNDEX - 843)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 843)) | (1L << (SQRT - 843)) | (1L << (SRID - 843)) | (1L << (STARTPOINT - 843)) | (1L << (STRCMP - 843)) | (1L << (STR_TO_DATE - 843)) | (1L << (ST_AREA - 843)) | (1L << (ST_ASBINARY - 843)) | (1L << (ST_ASTEXT - 843)) | (1L << (ST_ASWKB - 843)) | (1L << (ST_ASWKT - 843)) | (1L << (ST_BUFFER - 843)) | (1L << (ST_CENTROID - 843)) | (1L << (ST_CONTAINS - 843)) | (1L << (ST_CROSSES - 843)) | (1L << (ST_DIFFERENCE - 843)) | (1L << (ST_DIMENSION - 843)) | (1L << (ST_DISJOINT - 843)) | (1L << (ST_DISTANCE - 843)) | (1L << (ST_ENDPOINT - 843)) | (1L << (ST_ENVELOPE - 843)) | (1L << (ST_EQUALS - 843)) | (1L << (ST_EXTERIORRING - 843)) | (1L << (ST_GEOMCOLLFROMTEXT - 843)) | (1L << (ST_GEOMCOLLFROMTXT - 843)) | (1L << (ST_GEOMCOLLFROMWKB - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 843)) | (1L << (ST_GEOMETRYFROMTEXT - 843)) | (1L << (ST_GEOMETRYFROMWKB - 843)) | (1L << (ST_GEOMETRYN - 843)) | (1L << (ST_GEOMETRYTYPE - 843)) | (1L << (ST_GEOMFROMTEXT - 843)) | (1L << (ST_GEOMFROMWKB - 843)) | (1L << (ST_INTERIORRINGN - 843)) | (1L << (ST_INTERSECTION - 843)) | (1L << (ST_INTERSECTS - 843)) | (1L << (ST_ISCLOSED - 843)) | (1L << (ST_ISEMPTY - 843)) | (1L << (ST_ISSIMPLE - 843)) | (1L << (ST_LINEFROMTEXT - 843)))) != 0) || ((((_la - 907)) & ~0x3f) == 0 && ((1L << (_la - 907)) & ((1L << (ST_LINEFROMWKB - 907)) | (1L << (ST_LINESTRINGFROMTEXT - 907)) | (1L << (ST_LINESTRINGFROMWKB - 907)) | (1L << (ST_NUMGEOMETRIES - 907)) | (1L << (ST_NUMINTERIORRING - 907)) | (1L << (ST_NUMINTERIORRINGS - 907)) | (1L << (ST_NUMPOINTS - 907)) | (1L << (ST_OVERLAPS - 907)) | (1L << (ST_POINTFROMTEXT - 907)) | (1L << (ST_POINTFROMWKB - 907)) | (1L << (ST_POINTN - 907)) | (1L << (ST_POLYFROMTEXT - 907)) | (1L << (ST_POLYFROMWKB - 907)) | (1L << (ST_POLYGONFROMTEXT - 907)) | (1L << (ST_POLYGONFROMWKB - 907)) | (1L << (ST_SRID - 907)) | (1L << (ST_STARTPOINT - 907)) | (1L << (ST_SYMDIFFERENCE - 907)) | (1L << (ST_TOUCHES - 907)) | (1L << (ST_UNION - 907)) | (1L << (ST_WITHIN - 907)) | (1L << (ST_X - 907)) | (1L << (ST_Y - 907)) | (1L << (SUBDATE - 907)) | (1L << (SUBSTRING_INDEX - 907)) | (1L << (SUBTIME - 907)) | (1L << (SYSTEM_USER - 907)) | (1L << (TAN - 907)) | (1L << (TIMEDIFF - 907)) | (1L << (TIMESTAMPADD - 907)) | (1L << (TIMESTAMPDIFF - 907)) | (1L << (TIME_FORMAT - 907)) | (1L << (TIME_TO_SEC - 907)) | (1L << (TOUCHES - 907)) | (1L << (TO_BASE64 - 907)) | (1L << (TO_DAYS - 907)) | (1L << (TO_SECONDS - 907)) | (1L << (UCASE - 907)) | (1L << (UNCOMPRESS - 907)) | (1L << (UNCOMPRESSED_LENGTH - 907)) | (1L << (UNHEX - 907)) | (1L << (UNIX_TIMESTAMP - 907)) | (1L << (UPDATEXML - 907)) | (1L << (UPPER - 907)) | (1L << (UUID - 907)) | (1L << (UUID_SHORT - 907)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 907)) | (1L << (VERSION - 907)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 907)) | (1L << (WEEKDAY - 907)) | (1L << (WEEKOFYEAR - 907)) | (1L << (WEIGHT_STRING - 907)) | (1L << (WITHIN - 907)) | (1L << (YEARWEEK - 907)) | (1L << (Y_FUNCTION - 907)) | (1L << (X_FUNCTION - 907)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (PLUS - 975)) | (1L << (MINUS - 975)) | (1L << (EXCLAMATION_SYMBOL - 975)) | (1L << (BIT_NOT_OP - 975)) | (1L << (LR_BRACKET - 975)) | (1L << (ZERO_DECIMAL - 975)) | (1L << (ONE_DECIMAL - 975)) | (1L << (TWO_DECIMAL - 975)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 975)) | (1L << (START_NATIONAL_STRING_LITERAL - 975)) | (1L << (STRING_LITERAL - 975)) | (1L << (DECIMAL_LITERAL - 975)) | (1L << (HEXADECIMAL_LITERAL - 975)) | (1L << (REAL_LITERAL - 975)) | (1L << (NULL_SPEC_LITERAL - 975)) | (1L << (BIT_STRING - 975)) | (1L << (STRING_CHARSET_NAME - 975)) | (1L << (ID - 975)) | (1L << (REVERSE_QUOTE_ID - 975)) | (1L << (LOCAL_ID - 975)) | (1L << (GLOBAL_ID - 975)))) != 0)) {
						{
						setState(3046);
						expressionsWithDefaults();
						}
					}

					setState(3049);
					match(RR_BRACKET);
					}
					}
					setState(3054);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057);
			fullColumnName();
			setState(3058);
			match(EQUAL_SYMBOL);
			setState(3061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case REPLACE:
			case RIGHT:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case RANK:
			case DENSE_RANK:
			case ROW_NUMBER:
			case LEAD:
			case LAG:
			case PERCENT_RANK:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3059);
				expression(0);
				}
				break;
			case DEFAULT:
				{
				setState(3060);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_assignmentField);
		try {
			setState(3065);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3063);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3064);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(GBaseParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(GBaseParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lockClause);
		try {
			setState(3073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3067);
				match(FOR);
				setState(3068);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3069);
				match(LOCK);
				setState(3070);
				match(IN);
				setState(3071);
				match(SHARE);
				setState(3072);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(DELETE);
			setState(3077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3076);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3079);
				match(QUICK);
				}
			}

			setState(3083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3082);
				match(IGNORE);
				}
			}

			setState(3085);
			match(FROM);
			setState(3086);
			tableName();
			setState(3092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3087);
				match(PARTITION);
				setState(3088);
				match(LR_BRACKET);
				setState(3089);
				uidList();
				setState(3090);
				match(RR_BRACKET);
				}
			}

			setState(3096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3094);
				match(WHERE);
				setState(3095);
				expression(0);
				}
			}

			setState(3099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3098);
				orderByClause();
				}
			}

			setState(3103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3101);
				match(LIMIT);
				setState(3102);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(GBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(GBaseParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(GBaseParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(GBaseParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3105);
			match(DELETE);
			setState(3107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3106);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3109);
				match(QUICK);
				}
				break;
			}
			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3112);
				match(IGNORE);
				}
			}

			setState(3154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3115);
				tableName();
				setState(3118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3116);
					match(DOT);
					setState(3117);
					match(STAR);
					}
				}

				setState(3128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3120);
					match(COMMA);
					setState(3121);
					tableName();
					setState(3124);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3122);
						match(DOT);
						setState(3123);
						match(STAR);
						}
					}

					}
					}
					setState(3130);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3131);
				match(FROM);
				setState(3132);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3134);
				match(FROM);
				setState(3135);
				tableName();
				setState(3138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3136);
					match(DOT);
					setState(3137);
					match(STAR);
					}
				}

				setState(3148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3140);
					match(COMMA);
					setState(3141);
					tableName();
					setState(3144);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3142);
						match(DOT);
						setState(3143);
						match(STAR);
						}
					}

					}
					}
					setState(3150);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3151);
				match(USING);
				setState(3152);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3156);
				match(WHERE);
				setState(3157);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3160);
			match(HANDLER);
			setState(3161);
			tableName();
			setState(3162);
			match(OPEN);
			setState(3167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3163);
					match(AS);
					}
				}

				setState(3166);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(GBaseParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(GBaseParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169);
			match(HANDLER);
			setState(3170);
			tableName();
			setState(3171);
			match(READ);
			setState(3172);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3179);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3173);
				comparisonOperator();
				setState(3174);
				match(LR_BRACKET);
				setState(3175);
				constants();
				setState(3176);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3178);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3181);
				match(WHERE);
				setState(3182);
				expression(0);
				}
			}

			setState(3187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3185);
				match(LIMIT);
				setState(3186);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3189);
			match(HANDLER);
			setState(3190);
			tableName();
			setState(3191);
			match(READ);
			setState(3192);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3193);
				match(WHERE);
				setState(3194);
				expression(0);
				}
			}

			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3197);
				match(LIMIT);
				setState(3198);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(GBaseParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3201);
			match(HANDLER);
			setState(3202);
			tableName();
			setState(3203);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			match(UPDATE);
			setState(3207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3206);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3209);
				match(IGNORE);
				}
			}

			setState(3212);
			tableName();
			setState(3217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (NUMBER - 87)) | (1L << (RIGHT - 87)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (STACKED - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (SERIAL - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (COUNT - 228)) | (1L << (POSITION - 228)) | (1L << (ACCOUNT - 228)) | (1L << (ACTION - 228)) | (1L << (AFTER - 228)) | (1L << (AGGREGATE - 228)) | (1L << (ALGORITHM - 228)) | (1L << (ANY - 228)) | (1L << (AT - 228)) | (1L << (AUTHORS - 228)) | (1L << (AUTOCOMMIT - 228)) | (1L << (AUTOEXTEND_SIZE - 228)) | (1L << (AUTO_INCREMENT - 228)) | (1L << (AVG_ROW_LENGTH - 228)) | (1L << (BEGIN - 228)) | (1L << (BINLOG - 228)) | (1L << (BIT - 228)) | (1L << (BLOCK - 228)) | (1L << (BOOL - 228)) | (1L << (BOOLEAN - 228)) | (1L << (BTREE - 228)) | (1L << (CACHE - 228)) | (1L << (CASCADED - 228)) | (1L << (CHAIN - 228)) | (1L << (CHANGED - 228)) | (1L << (CHANNEL - 228)) | (1L << (CHECKSUM - 228)) | (1L << (PAGE_CHECKSUM - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (CIPHER - 292)) | (1L << (CLASS_ORIGIN - 292)) | (1L << (CLIENT - 292)) | (1L << (CLOSE - 292)) | (1L << (COALESCE - 292)) | (1L << (CODE - 292)) | (1L << (COLUMNS - 292)) | (1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)) | (1L << (COMPLETION - 292)) | (1L << (COMPRESSED - 292)) | (1L << (COMPRESSION - 292)) | (1L << (CONCURRENT - 292)) | (1L << (CONNECTION - 292)) | (1L << (CONSISTENT - 292)) | (1L << (CONSTRAINT_CATALOG - 292)) | (1L << (CONSTRAINT_SCHEMA - 292)) | (1L << (CONSTRAINT_NAME - 292)) | (1L << (CONTAINS - 292)) | (1L << (CONTEXT - 292)) | (1L << (CONTRIBUTORS - 292)) | (1L << (COPY - 292)) | (1L << (CPU - 292)) | (1L << (CURSOR_NAME - 292)) | (1L << (DATA - 292)) | (1L << (DATAFILE - 292)) | (1L << (DEALLOCATE - 292)) | (1L << (DEFAULT_AUTH - 292)) | (1L << (DEFINER - 292)) | (1L << (DELAY_KEY_WRITE - 292)) | (1L << (DES_KEY_FILE - 292)) | (1L << (DIRECTORY - 292)) | (1L << (DISABLE - 292)) | (1L << (DISCARD - 292)) | (1L << (DISK - 292)) | (1L << (DO - 292)) | (1L << (DUMPFILE - 292)) | (1L << (DUPLICATE - 292)) | (1L << (DYNAMIC - 292)) | (1L << (ENABLE - 292)) | (1L << (ENCRYPTION - 292)) | (1L << (END - 292)) | (1L << (ENDS - 292)) | (1L << (ENGINE - 292)) | (1L << (ENGINES - 292)) | (1L << (ERROR - 292)) | (1L << (ERRORS - 292)) | (1L << (ESCAPE - 292)) | (1L << (EVEN - 292)) | (1L << (EVENT - 292)) | (1L << (EVENTS - 292)) | (1L << (EVERY - 292)) | (1L << (EXCHANGE - 292)) | (1L << (EXCLUSIVE - 292)) | (1L << (EXPIRE - 292)) | (1L << (EXPORT - 292)) | (1L << (EXTENDED - 292)) | (1L << (EXTENT_SIZE - 292)) | (1L << (FAST - 292)) | (1L << (FAULTS - 292)) | (1L << (FIELDS - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (FILE_BLOCK_SIZE - 356)) | (1L << (FILTER - 356)) | (1L << (FIRST - 356)) | (1L << (FIXED - 356)) | (1L << (FLUSH - 356)) | (1L << (FOLLOWS - 356)) | (1L << (FOUND - 356)) | (1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)) | (1L << (GLOBAL - 356)) | (1L << (GRANTS - 356)) | (1L << (GROUP_REPLICATION - 356)) | (1L << (HANDLER - 356)) | (1L << (HASH - 356)) | (1L << (HELP - 356)) | (1L << (HOST - 356)) | (1L << (HOSTS - 356)) | (1L << (IDENTIFIED - 356)) | (1L << (IGNORE_SERVER_IDS - 356)) | (1L << (IMPORT - 356)) | (1L << (INDEXES - 356)) | (1L << (INITIAL_SIZE - 356)) | (1L << (INPLACE - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (INSTALL - 356)) | (1L << (INSTANCE - 356)) | (1L << (INVISIBLE - 356)) | (1L << (INVOKER - 356)) | (1L << (IO - 356)) | (1L << (IO_THREAD - 356)) | (1L << (IPC - 356)) | (1L << (ISOLATION - 356)) | (1L << (ISSUER - 356)) | (1L << (JSON - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (LANGUAGE - 356)) | (1L << (LAST - 356)) | (1L << (LEAVES - 356)) | (1L << (LESS - 356)) | (1L << (LEVEL - 356)) | (1L << (LIST - 356)) | (1L << (LOCAL - 356)) | (1L << (LOGFILE - 356)) | (1L << (LOGS - 356)) | (1L << (MASTER - 356)) | (1L << (MASTER_AUTO_POSITION - 356)) | (1L << (MASTER_CONNECT_RETRY - 356)) | (1L << (MASTER_DELAY - 356)) | (1L << (MASTER_HEARTBEAT_PERIOD - 356)) | (1L << (MASTER_HOST - 356)) | (1L << (MASTER_LOG_FILE - 356)) | (1L << (MASTER_LOG_POS - 356)) | (1L << (MASTER_PASSWORD - 356)) | (1L << (MASTER_PORT - 356)) | (1L << (MASTER_RETRY_COUNT - 356)) | (1L << (MASTER_SSL - 356)) | (1L << (MASTER_SSL_CA - 356)) | (1L << (MASTER_SSL_CAPATH - 356)) | (1L << (MASTER_SSL_CERT - 356)) | (1L << (MASTER_SSL_CIPHER - 356)) | (1L << (MASTER_SSL_CRL - 356)) | (1L << (MASTER_SSL_CRLPATH - 356)) | (1L << (MASTER_SSL_KEY - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (MASTER_TLS_VERSION - 420)) | (1L << (MASTER_USER - 420)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 420)) | (1L << (MAX_QUERIES_PER_HOUR - 420)) | (1L << (MAX_ROWS - 420)) | (1L << (MAX_SIZE - 420)) | (1L << (MAX_UPDATES_PER_HOUR - 420)) | (1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MERGE - 420)) | (1L << (MESSAGE_TEXT - 420)) | (1L << (MID - 420)) | (1L << (MIGRATE - 420)) | (1L << (MIN_ROWS - 420)) | (1L << (MODE - 420)) | (1L << (MODIFY - 420)) | (1L << (MUTEX - 420)) | (1L << (MYSQL - 420)) | (1L << (MYSQL_ERRNO - 420)) | (1L << (NAME - 420)) | (1L << (NAMES - 420)) | (1L << (NCHAR - 420)) | (1L << (NEVER - 420)) | (1L << (NEXT - 420)) | (1L << (NO - 420)) | (1L << (NODEGROUP - 420)) | (1L << (NONE - 420)) | (1L << (OFFLINE - 420)) | (1L << (OFFSET - 420)) | (1L << (OJ - 420)) | (1L << (OLD_PASSWORD - 420)) | (1L << (ONE - 420)) | (1L << (ONLINE - 420)) | (1L << (ONLY - 420)) | (1L << (OPEN - 420)) | (1L << (OPTIMIZER_COSTS - 420)) | (1L << (OPTIONS - 420)) | (1L << (OWNER - 420)) | (1L << (PACK_KEYS - 420)) | (1L << (PAGE - 420)) | (1L << (PARSER - 420)) | (1L << (PARTIAL - 420)) | (1L << (PARTITIONING - 420)) | (1L << (PARTITIONS - 420)) | (1L << (PASSWORD - 420)) | (1L << (PHASE - 420)) | (1L << (PLUGIN - 420)) | (1L << (PLUGIN_DIR - 420)) | (1L << (PLUGINS - 420)) | (1L << (PORT - 420)) | (1L << (PRECEDES - 420)) | (1L << (PREPARE - 420)) | (1L << (PRESERVE - 420)) | (1L << (PREV - 420)) | (1L << (PROCESSLIST - 420)) | (1L << (PROFILE - 420)) | (1L << (PROFILES - 420)) | (1L << (PROXY - 420)) | (1L << (QUERY - 420)) | (1L << (QUICK - 420)) | (1L << (REBUILD - 420)) | (1L << (RECOVER - 420)) | (1L << (REDO_BUFFER_SIZE - 420)) | (1L << (REDUNDANT - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (RELAY - 484)) | (1L << (RELAY_LOG_FILE - 484)) | (1L << (RELAY_LOG_POS - 484)) | (1L << (RELAYLOG - 484)) | (1L << (REMOVE - 484)) | (1L << (REORGANIZE - 484)) | (1L << (REPAIR - 484)) | (1L << (REPLICATE_DO_DB - 484)) | (1L << (REPLICATE_DO_TABLE - 484)) | (1L << (REPLICATE_IGNORE_DB - 484)) | (1L << (REPLICATE_IGNORE_TABLE - 484)) | (1L << (REPLICATE_REWRITE_DB - 484)) | (1L << (REPLICATE_WILD_DO_TABLE - 484)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 484)) | (1L << (REPLICATION - 484)) | (1L << (RESET - 484)) | (1L << (RESUME - 484)) | (1L << (RETURNED_SQLSTATE - 484)) | (1L << (RETURNS - 484)) | (1L << (ROLLBACK - 484)) | (1L << (ROLLUP - 484)) | (1L << (ROTATE - 484)) | (1L << (ROW - 484)) | (1L << (ROWS - 484)) | (1L << (ROW_FORMAT - 484)) | (1L << (SAVEPOINT - 484)) | (1L << (SCHEDULE - 484)) | (1L << (SECURITY - 484)) | (1L << (SERVER - 484)) | (1L << (SESSION - 484)) | (1L << (SHARE - 484)) | (1L << (SHARED - 484)) | (1L << (SIGNED - 484)) | (1L << (SIMPLE - 484)) | (1L << (SLAVE - 484)) | (1L << (SLOW - 484)) | (1L << (SNAPSHOT - 484)) | (1L << (SOCKET - 484)) | (1L << (SOME - 484)) | (1L << (SONAME - 484)) | (1L << (SOUNDS - 484)) | (1L << (SOURCE - 484)) | (1L << (SQL_AFTER_GTIDS - 484)) | (1L << (SQL_AFTER_MTS_GAPS - 484)) | (1L << (SQL_BEFORE_GTIDS - 484)) | (1L << (SQL_BUFFER_RESULT - 484)) | (1L << (SQL_CACHE - 484)) | (1L << (SQL_NO_CACHE - 484)) | (1L << (SQL_THREAD - 484)) | (1L << (START - 484)) | (1L << (STARTS - 484)) | (1L << (STATS_AUTO_RECALC - 484)) | (1L << (STATS_PERSISTENT - 484)) | (1L << (STATS_SAMPLE_PAGES - 484)) | (1L << (STATUS - 484)) | (1L << (STOP - 484)) | (1L << (STORAGE - 484)) | (1L << (STRING - 484)) | (1L << (SUBCLASS_ORIGIN - 484)) | (1L << (SUBJECT - 484)) | (1L << (SUBPARTITION - 484)) | (1L << (SUBPARTITIONS - 484)) | (1L << (SUSPEND - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (SWAPS - 548)) | (1L << (SWITCHES - 548)) | (1L << (TABLE_NAME - 548)) | (1L << (TABLESPACE - 548)) | (1L << (TEMPORARY - 548)) | (1L << (TEMPTABLE - 548)) | (1L << (THAN - 548)) | (1L << (TRADITIONAL - 548)) | (1L << (TRANSACTION - 548)) | (1L << (TRIGGERS - 548)) | (1L << (TRUNCATE - 548)) | (1L << (UNDEFINED - 548)) | (1L << (UNDOFILE - 548)) | (1L << (UNDO_BUFFER_SIZE - 548)) | (1L << (UNINSTALL - 548)) | (1L << (UNKNOWN - 548)) | (1L << (UNTIL - 548)) | (1L << (UPGRADE - 548)) | (1L << (USER - 548)) | (1L << (USE_FRM - 548)) | (1L << (USER_RESOURCES - 548)) | (1L << (VALIDATION - 548)) | (1L << (VALUE - 548)) | (1L << (VARIABLES - 548)) | (1L << (VIEW - 548)) | (1L << (VISIBLE - 548)) | (1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (SESSION_VARIABLES_ADMIN - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (CP1257 - 612)) | (1L << (CP850 - 612)) | (1L << (CP852 - 612)) | (1L << (CP866 - 612)) | (1L << (CP932 - 612)) | (1L << (DEC8 - 612)) | (1L << (EUCJPMS - 612)) | (1L << (EUCKR - 612)) | (1L << (GB2312 - 612)) | (1L << (GBK - 612)) | (1L << (GEOSTD8 - 612)) | (1L << (GREEK - 612)) | (1L << (HEBREW - 612)) | (1L << (HP8 - 612)) | (1L << (KEYBCS2 - 612)) | (1L << (KOI8R - 612)) | (1L << (KOI8U - 612)) | (1L << (LATIN1 - 612)) | (1L << (LATIN2 - 612)) | (1L << (LATIN5 - 612)) | (1L << (LATIN7 - 612)) | (1L << (MACCE - 612)) | (1L << (MACROMAN - 612)) | (1L << (SJIS - 612)) | (1L << (SWE7 - 612)) | (1L << (TIS620 - 612)) | (1L << (UCS2 - 612)) | (1L << (UJIS - 612)) | (1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (AES_ENCRYPT - 676)) | (1L << (AREA - 676)) | (1L << (ASBINARY - 676)) | (1L << (ASIN - 676)) | (1L << (ASTEXT - 676)) | (1L << (ASWKB - 676)) | (1L << (ASWKT - 676)) | (1L << (ASYMMETRIC_DECRYPT - 676)) | (1L << (ASYMMETRIC_DERIVE - 676)) | (1L << (ASYMMETRIC_ENCRYPT - 676)) | (1L << (ASYMMETRIC_SIGN - 676)) | (1L << (ASYMMETRIC_VERIFY - 676)) | (1L << (ATAN - 676)) | (1L << (ATAN2 - 676)) | (1L << (BENCHMARK - 676)) | (1L << (BIN - 676)) | (1L << (BIT_COUNT - 676)) | (1L << (BIT_LENGTH - 676)) | (1L << (BUFFER - 676)) | (1L << (CATALOG_NAME - 676)) | (1L << (CEIL - 676)) | (1L << (CEILING - 676)) | (1L << (CENTROID - 676)) | (1L << (CHARACTER_LENGTH - 676)) | (1L << (CHARSET - 676)) | (1L << (CHAR_LENGTH - 676)) | (1L << (COERCIBILITY - 676)) | (1L << (COLLATION - 676)) | (1L << (COMPRESS - 676)) | (1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (FIELD - 740)) | (1L << (FIND_IN_SET - 740)) | (1L << (FLOOR - 740)) | (1L << (FORMAT - 740)) | (1L << (FOUND_ROWS - 740)) | (1L << (FROM_BASE64 - 740)) | (1L << (FROM_DAYS - 740)) | (1L << (FROM_UNIXTIME - 740)) | (1L << (GEOMCOLLFROMTEXT - 740)) | (1L << (GEOMCOLLFROMWKB - 740)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 740)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 740)) | (1L << (GEOMETRYFROMTEXT - 740)) | (1L << (GEOMETRYFROMWKB - 740)) | (1L << (GEOMETRYN - 740)) | (1L << (GEOMETRYTYPE - 740)) | (1L << (GEOMFROMTEXT - 740)) | (1L << (GEOMFROMWKB - 740)) | (1L << (GET_FORMAT - 740)) | (1L << (GET_LOCK - 740)) | (1L << (GLENGTH - 740)) | (1L << (GREATEST - 740)) | (1L << (GTID_SUBSET - 740)) | (1L << (GTID_SUBTRACT - 740)) | (1L << (HEX - 740)) | (1L << (IFNULL - 740)) | (1L << (INET6_ATON - 740)) | (1L << (INET6_NTOA - 740)) | (1L << (INET_ATON - 740)) | (1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (MBRCONTAINS - 804)) | (1L << (MBRDISJOINT - 804)) | (1L << (MBREQUAL - 804)) | (1L << (MBRINTERSECTS - 804)) | (1L << (MBROVERLAPS - 804)) | (1L << (MBRTOUCHES - 804)) | (1L << (MBRWITHIN - 804)) | (1L << (MD5 - 804)) | (1L << (MLINEFROMTEXT - 804)) | (1L << (MLINEFROMWKB - 804)) | (1L << (MONTHNAME - 804)) | (1L << (MPOINTFROMTEXT - 804)) | (1L << (MPOINTFROMWKB - 804)) | (1L << (MPOLYFROMTEXT - 804)) | (1L << (MPOLYFROMWKB - 804)) | (1L << (MULTILINESTRINGFROMTEXT - 804)) | (1L << (MULTILINESTRINGFROMWKB - 804)) | (1L << (MULTIPOINTFROMTEXT - 804)) | (1L << (MULTIPOINTFROMWKB - 804)) | (1L << (MULTIPOLYGONFROMTEXT - 804)) | (1L << (MULTIPOLYGONFROMWKB - 804)) | (1L << (NAME_CONST - 804)) | (1L << (NULLIF - 804)) | (1L << (NUMGEOMETRIES - 804)) | (1L << (NUMINTERIORRINGS - 804)) | (1L << (NUMPOINTS - 804)) | (1L << (OCT - 804)) | (1L << (OCTET_LENGTH - 804)) | (1L << (ORD - 804)) | (1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SCHEMA_NAME - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (SRID - 868)) | (1L << (STARTPOINT - 868)) | (1L << (STRCMP - 868)) | (1L << (STR_TO_DATE - 868)) | (1L << (ST_AREA - 868)) | (1L << (ST_ASBINARY - 868)) | (1L << (ST_ASTEXT - 868)) | (1L << (ST_ASWKB - 868)) | (1L << (ST_ASWKT - 868)) | (1L << (ST_BUFFER - 868)) | (1L << (ST_CENTROID - 868)) | (1L << (ST_CONTAINS - 868)) | (1L << (ST_CROSSES - 868)) | (1L << (ST_DIFFERENCE - 868)) | (1L << (ST_DIMENSION - 868)) | (1L << (ST_DISJOINT - 868)) | (1L << (ST_DISTANCE - 868)) | (1L << (ST_ENDPOINT - 868)) | (1L << (ST_ENVELOPE - 868)) | (1L << (ST_EQUALS - 868)) | (1L << (ST_EXTERIORRING - 868)) | (1L << (ST_GEOMCOLLFROMTEXT - 868)) | (1L << (ST_GEOMCOLLFROMTXT - 868)) | (1L << (ST_GEOMCOLLFROMWKB - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 868)) | (1L << (ST_GEOMETRYFROMTEXT - 868)) | (1L << (ST_GEOMETRYFROMWKB - 868)) | (1L << (ST_GEOMETRYN - 868)) | (1L << (ST_GEOMETRYTYPE - 868)) | (1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (SUBTIME - 932)) | (1L << (SYSTEM_USER - 932)) | (1L << (TAN - 932)) | (1L << (TIMEDIFF - 932)) | (1L << (TIMESTAMPADD - 932)) | (1L << (TIMESTAMPDIFF - 932)) | (1L << (TIME_FORMAT - 932)) | (1L << (TIME_TO_SEC - 932)) | (1L << (TOUCHES - 932)) | (1L << (TO_BASE64 - 932)) | (1L << (TO_DAYS - 932)) | (1L << (TO_SECONDS - 932)) | (1L << (UCASE - 932)) | (1L << (UNCOMPRESS - 932)) | (1L << (UNCOMPRESSED_LENGTH - 932)) | (1L << (UNHEX - 932)) | (1L << (UNIX_TIMESTAMP - 932)) | (1L << (UPDATEXML - 932)) | (1L << (UPPER - 932)) | (1L << (UUID - 932)) | (1L << (UUID_SHORT - 932)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 932)) | (1L << (VERSION - 932)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 932)) | (1L << (WEEKDAY - 932)) | (1L << (WEEKOFYEAR - 932)) | (1L << (WEIGHT_STRING - 932)) | (1L << (WITHIN - 932)) | (1L << (YEARWEEK - 932)) | (1L << (Y_FUNCTION - 932)) | (1L << (X_FUNCTION - 932)))) != 0) || ((((_la - 1002)) & ~0x3f) == 0 && ((1L << (_la - 1002)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1002)) | (1L << (STRING_LITERAL - 1002)) | (1L << (ID - 1002)) | (1L << (REVERSE_QUOTE_ID - 1002)))) != 0)) {
				{
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3213);
					match(AS);
					}
				}

				setState(3216);
				uid();
				}
			}

			setState(3219);
			match(SET);
			setState(3220);
			updatedElement();
			setState(3225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3221);
				match(COMMA);
				setState(3222);
				updatedElement();
				}
				}
				setState(3227);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3228);
				match(WHERE);
				setState(3229);
				expression(0);
				}
			}

			setState(3233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3232);
				orderByClause();
				}
			}

			setState(3236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3235);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			match(UPDATE);
			setState(3240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3239);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3242);
				match(IGNORE);
				}
			}

			setState(3245);
			tableSources();
			setState(3246);
			match(SET);
			setState(3247);
			updatedElement();
			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3248);
				match(COMMA);
				setState(3249);
				updatedElement();
				}
				}
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3255);
				match(WHERE);
				setState(3256);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			match(ORDER);
			setState(3260);
			match(BY);
			setState(3261);
			orderByExpression();
			setState(3266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3262);
				match(COMMA);
				setState(3263);
				orderByExpression();
				}
				}
				setState(3268);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3269);
			expression(0);
			setState(3271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(3270);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3273);
			tableSource();
			setState(3278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3274);
				match(COMMA);
				setState(3275);
				tableSource();
				}
				}
				setState(3280);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3281);
				tableSourceItem();
				setState(3285);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3282);
						joinPart();
						}
						} 
					}
					setState(3287);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3288);
				match(LR_BRACKET);
				setState(3289);
				tableSourceItem();
				setState(3293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & ((1L << (CROSS - 31)) | (1L << (INNER - 31)) | (1L << (JOIN - 31)) | (1L << (LEFT - 31)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NATURAL - 101)) | (1L << (RIGHT - 101)) | (1L << (STRAIGHT_JOIN - 101)))) != 0)) {
					{
					{
					setState(3290);
					joinPart();
					}
					}
					setState(3295);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3296);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3300);
				tableName();
				setState(3306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3301);
					match(PARTITION);
					setState(3302);
					match(LR_BRACKET);
					setState(3303);
					uidList();
					setState(3304);
					match(RR_BRACKET);
					}
				}

				setState(3312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(3309);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3308);
						match(AS);
						}
					}

					setState(3311);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(3314);
					indexHint();
					setState(3319);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3315);
							match(COMMA);
							setState(3316);
							indexHint();
							}
							} 
						}
						setState(3321);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3329);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(3324);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3325);
					match(LR_BRACKET);
					setState(3326);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3327);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3331);
					match(AS);
					}
				}

				setState(3334);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3336);
				match(LR_BRACKET);
				setState(3337);
				tableSources();
				setState(3338);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(GBaseParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(GBaseParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3343);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3344);
				match(FOR);
				setState(3345);
				indexHintType();
				}
			}

			setState(3348);
			match(LR_BRACKET);
			setState(3349);
			uidList();
			setState(3350);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indexHintType);
		try {
			setState(3357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3352);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3353);
				match(ORDER);
				setState(3354);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3355);
				match(GROUP);
				setState(3356);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(GBaseParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(GBaseParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(GBaseParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(GBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(GBaseParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(GBaseParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(GBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(GBaseParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(GBaseParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(GBaseParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_joinPart);
		int _la;
		try {
			setState(3403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3359);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3362);
				match(JOIN);
				setState(3363);
				tableSourceItem();
				setState(3371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(3364);
					match(ON);
					setState(3365);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3366);
					match(USING);
					setState(3367);
					match(LR_BRACKET);
					setState(3368);
					uidList();
					setState(3369);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3373);
				match(STRAIGHT_JOIN);
				setState(3374);
				tableSourceItem();
				setState(3377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(3375);
					match(ON);
					setState(3376);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3379);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3380);
					match(OUTER);
					}
				}

				setState(3383);
				match(JOIN);
				setState(3384);
				tableSourceItem();
				setState(3392);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3385);
					match(ON);
					setState(3386);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3387);
					match(USING);
					setState(3388);
					match(LR_BRACKET);
					setState(3389);
					uidList();
					setState(3390);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3394);
				match(NATURAL);
				setState(3399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3395);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3397);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3396);
						match(OUTER);
						}
					}

					}
				}

				setState(3401);
				match(JOIN);
				setState(3402);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_queryExpression);
		try {
			setState(3413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3405);
				match(LR_BRACKET);
				setState(3406);
				querySpecification();
				setState(3407);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3409);
				match(LR_BRACKET);
				setState(3410);
				queryExpression();
				setState(3411);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_queryExpressionNointo);
		try {
			setState(3423);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3415);
				match(LR_BRACKET);
				setState(3416);
				querySpecificationNointo();
				setState(3417);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3419);
				match(LR_BRACKET);
				setState(3420);
				queryExpressionNointo();
				setState(3421);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(GBaseParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3425);
				match(SELECT);
				setState(3429);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3426);
						selectSpec();
						}
						} 
					}
					setState(3431);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
				}
				setState(3432);
				selectElements();
				setState(3434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3433);
					selectIntoExpression();
					}
				}

				setState(3437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3436);
					fromClause();
					}
				}

				setState(3440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
				case 1:
					{
					setState(3439);
					orderByClause();
					}
					break;
				}
				setState(3443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(3442);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3445);
				match(SELECT);
				setState(3449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3446);
						selectSpec();
						}
						} 
					}
					setState(3451);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
				}
				setState(3452);
				selectElements();
				setState(3454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(3453);
					fromClause();
					}
				}

				setState(3457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(3456);
					orderByClause();
					}
					break;
				}
				setState(3460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(3459);
					limitClause();
					}
					break;
				}
				setState(3463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3462);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(GBaseParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3467);
			match(SELECT);
			setState(3471);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3468);
					selectSpec();
					}
					} 
				}
				setState(3473);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			}
			setState(3474);
			selectElements();
			setState(3476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3475);
				fromClause();
				}
			}

			setState(3479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(3478);
				orderByClause();
				}
				break;
			}
			setState(3482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(3481);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3484);
			match(UNION);
			setState(3486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3485);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3488);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(GBaseParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3490);
			match(UNION);
			setState(3492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3491);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3494);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3495);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(GBaseParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(GBaseParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(GBaseParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(GBaseParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(GBaseParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(GBaseParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(GBaseParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(GBaseParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(GBaseParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_selectSpec);
		int _la;
		try {
			setState(3506);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3498);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3499);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3500);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3501);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3502);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3503);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3504);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3505);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(3508);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case REPLACE:
			case RIGHT:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case RANK:
			case DENSE_RANK:
			case ROW_NUMBER:
			case LEAD:
			case LAG:
			case PERCENT_RANK:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3509);
				selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3512);
				match(COMMA);
				setState(3513);
				selectElement();
				}
				}
				setState(3518);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(GBaseParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectElement);
		int _la;
		try {
			setState(3548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3519);
				fullId();
				setState(3520);
				match(DOT);
				setState(3521);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3523);
				fullColumnName();
				setState(3528);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(3525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3524);
						match(AS);
						}
					}

					setState(3527);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3530);
				functionCall();
				setState(3535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					setState(3532);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3531);
						match(AS);
						}
					}

					setState(3534);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3539);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(3537);
					match(LOCAL_ID);
					setState(3538);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3541);
				expression(0);
				setState(3546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					setState(3543);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3542);
						match(AS);
						}
					}

					setState(3545);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(GBaseParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode LINES() { return getToken(GBaseParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(GBaseParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3550);
				match(INTO);
				setState(3551);
				assignmentField();
				setState(3556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3552);
					match(COMMA);
					setState(3553);
					assignmentField();
					}
					}
					setState(3558);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3559);
				match(INTO);
				setState(3560);
				match(DUMPFILE);
				setState(3561);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3562);
				match(INTO);
				setState(3563);
				match(OUTFILE);
				setState(3564);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3565);
					match(CHARACTER);
					setState(3566);
					match(SET);
					setState(3567);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(3570);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3572); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3571);
						selectFieldsInto();
						}
						}
						setState(3574); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3578);
					match(LINES);
					setState(3580); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3579);
						selectLinesInto();
						}
						}
						setState(3582); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(GBaseParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(GBaseParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(GBaseParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(GBaseParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3588);
				match(TERMINATED);
				setState(3589);
				match(BY);
				setState(3590);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3591);
					match(OPTIONALLY);
					}
				}

				setState(3594);
				match(ENCLOSED);
				setState(3595);
				match(BY);
				setState(3596);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3597);
				match(ESCAPED);
				setState(3598);
				match(BY);
				setState(3599);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(GBaseParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(GBaseParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_selectLinesInto);
		try {
			setState(3608);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3602);
				match(STARTING);
				setState(3603);
				match(BY);
				setState(3604);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3605);
				match(TERMINATED);
				setState(3606);
				match(BY);
				setState(3607);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext havingExpr;
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(GBaseParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(GBaseParser.HAVING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(GBaseParser.ROLLUP, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3610);
			match(FROM);
			setState(3611);
			tableSources();
			setState(3614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3612);
				match(WHERE);
				setState(3613);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			setState(3630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3616);
				match(GROUP);
				setState(3617);
				match(BY);
				setState(3618);
				groupByItem();
				setState(3623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3619);
					match(COMMA);
					setState(3620);
					groupByItem();
					}
					}
					setState(3625);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(3626);
					match(WITH);
					setState(3627);
					match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(3634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3632);
				match(HAVING);
				setState(3633);
				((FromClauseContext)_localctx).havingExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			expression(0);
			setState(3638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(3637);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(GBaseParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3640);
			match(LIMIT);
			setState(3651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(3644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(3641);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3642);
					match(COMMA);
					}
					break;
				}
				setState(3646);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3647);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3648);
				match(OFFSET);
				setState(3649);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_limitClauseAtom);
		try {
			setState(3655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3653);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3654);
				mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(GBaseParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3657);
			match(START);
			setState(3658);
			match(TRANSACTION);
			setState(3667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3659);
				transactionMode();
				setState(3664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3660);
					match(COMMA);
					setState(3661);
					transactionMode();
					}
					}
					setState(3666);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3669);
			match(BEGIN);
			setState(3671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3670);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(GBaseParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(GBaseParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(GBaseParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(GBaseParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(GBaseParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3673);
			match(COMMIT);
			setState(3675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3674);
				match(WORK);
				}
			}

			setState(3682);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3677);
				match(AND);
				setState(3679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3678);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3681);
				match(CHAIN);
				}
			}

			setState(3688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(3685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3684);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3687);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(GBaseParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(GBaseParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(GBaseParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(GBaseParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			match(ROLLBACK);
			setState(3692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3691);
				match(WORK);
				}
			}

			setState(3699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3694);
				match(AND);
				setState(3696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3695);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3698);
				match(CHAIN);
				}
			}

			setState(3705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				setState(3702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3701);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3704);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			match(SAVEPOINT);
			setState(3708);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3710);
			match(ROLLBACK);
			setState(3712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3711);
				match(WORK);
				}
			}

			setState(3714);
			match(TO);
			setState(3716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(3715);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3718);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(GBaseParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			match(RELEASE);
			setState(3721);
			match(SAVEPOINT);
			setState(3722);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3724);
			match(LOCK);
			setState(3725);
			match(TABLES);
			setState(3726);
			lockTableElement();
			setState(3731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3727);
				match(COMMA);
				setState(3728);
				lockTableElement();
				}
				}
				setState(3733);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(GBaseParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3734);
			match(UNLOCK);
			setState(3735);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(GBaseParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3737);
			match(SET);
			setState(3738);
			match(AUTOCOMMIT);
			setState(3739);
			match(EQUAL_SYMBOL);
			setState(3740);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(GBaseParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742);
			match(SET);
			setState(3744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3743);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3746);
			match(TRANSACTION);
			setState(3747);
			transactionOption();
			setState(3752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3748);
				match(COMMA);
				setState(3749);
				transactionOption();
				}
				}
				setState(3754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(GBaseParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(GBaseParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(GBaseParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(GBaseParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_transactionMode);
		try {
			setState(3762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3755);
				match(WITH);
				setState(3756);
				match(CONSISTENT);
				setState(3757);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3758);
				match(READ);
				setState(3759);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3760);
				match(READ);
				setState(3761);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3764);
			tableName();
			setState(3769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (NUMBER - 87)) | (1L << (RIGHT - 87)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (STACKED - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (SERIAL - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (COUNT - 228)) | (1L << (POSITION - 228)) | (1L << (ACCOUNT - 228)) | (1L << (ACTION - 228)) | (1L << (AFTER - 228)) | (1L << (AGGREGATE - 228)) | (1L << (ALGORITHM - 228)) | (1L << (ANY - 228)) | (1L << (AT - 228)) | (1L << (AUTHORS - 228)) | (1L << (AUTOCOMMIT - 228)) | (1L << (AUTOEXTEND_SIZE - 228)) | (1L << (AUTO_INCREMENT - 228)) | (1L << (AVG_ROW_LENGTH - 228)) | (1L << (BEGIN - 228)) | (1L << (BINLOG - 228)) | (1L << (BIT - 228)) | (1L << (BLOCK - 228)) | (1L << (BOOL - 228)) | (1L << (BOOLEAN - 228)) | (1L << (BTREE - 228)) | (1L << (CACHE - 228)) | (1L << (CASCADED - 228)) | (1L << (CHAIN - 228)) | (1L << (CHANGED - 228)) | (1L << (CHANNEL - 228)) | (1L << (CHECKSUM - 228)) | (1L << (PAGE_CHECKSUM - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (CIPHER - 292)) | (1L << (CLASS_ORIGIN - 292)) | (1L << (CLIENT - 292)) | (1L << (CLOSE - 292)) | (1L << (COALESCE - 292)) | (1L << (CODE - 292)) | (1L << (COLUMNS - 292)) | (1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)) | (1L << (COMPLETION - 292)) | (1L << (COMPRESSED - 292)) | (1L << (COMPRESSION - 292)) | (1L << (CONCURRENT - 292)) | (1L << (CONNECTION - 292)) | (1L << (CONSISTENT - 292)) | (1L << (CONSTRAINT_CATALOG - 292)) | (1L << (CONSTRAINT_SCHEMA - 292)) | (1L << (CONSTRAINT_NAME - 292)) | (1L << (CONTAINS - 292)) | (1L << (CONTEXT - 292)) | (1L << (CONTRIBUTORS - 292)) | (1L << (COPY - 292)) | (1L << (CPU - 292)) | (1L << (CURSOR_NAME - 292)) | (1L << (DATA - 292)) | (1L << (DATAFILE - 292)) | (1L << (DEALLOCATE - 292)) | (1L << (DEFAULT_AUTH - 292)) | (1L << (DEFINER - 292)) | (1L << (DELAY_KEY_WRITE - 292)) | (1L << (DES_KEY_FILE - 292)) | (1L << (DIRECTORY - 292)) | (1L << (DISABLE - 292)) | (1L << (DISCARD - 292)) | (1L << (DISK - 292)) | (1L << (DO - 292)) | (1L << (DUMPFILE - 292)) | (1L << (DUPLICATE - 292)) | (1L << (DYNAMIC - 292)) | (1L << (ENABLE - 292)) | (1L << (ENCRYPTION - 292)) | (1L << (END - 292)) | (1L << (ENDS - 292)) | (1L << (ENGINE - 292)) | (1L << (ENGINES - 292)) | (1L << (ERROR - 292)) | (1L << (ERRORS - 292)) | (1L << (ESCAPE - 292)) | (1L << (EVEN - 292)) | (1L << (EVENT - 292)) | (1L << (EVENTS - 292)) | (1L << (EVERY - 292)) | (1L << (EXCHANGE - 292)) | (1L << (EXCLUSIVE - 292)) | (1L << (EXPIRE - 292)) | (1L << (EXPORT - 292)) | (1L << (EXTENDED - 292)) | (1L << (EXTENT_SIZE - 292)) | (1L << (FAST - 292)) | (1L << (FAULTS - 292)) | (1L << (FIELDS - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (FILE_BLOCK_SIZE - 356)) | (1L << (FILTER - 356)) | (1L << (FIRST - 356)) | (1L << (FIXED - 356)) | (1L << (FLUSH - 356)) | (1L << (FOLLOWS - 356)) | (1L << (FOUND - 356)) | (1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)) | (1L << (GLOBAL - 356)) | (1L << (GRANTS - 356)) | (1L << (GROUP_REPLICATION - 356)) | (1L << (HANDLER - 356)) | (1L << (HASH - 356)) | (1L << (HELP - 356)) | (1L << (HOST - 356)) | (1L << (HOSTS - 356)) | (1L << (IDENTIFIED - 356)) | (1L << (IGNORE_SERVER_IDS - 356)) | (1L << (IMPORT - 356)) | (1L << (INDEXES - 356)) | (1L << (INITIAL_SIZE - 356)) | (1L << (INPLACE - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (INSTALL - 356)) | (1L << (INSTANCE - 356)) | (1L << (INVISIBLE - 356)) | (1L << (INVOKER - 356)) | (1L << (IO - 356)) | (1L << (IO_THREAD - 356)) | (1L << (IPC - 356)) | (1L << (ISOLATION - 356)) | (1L << (ISSUER - 356)) | (1L << (JSON - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (LANGUAGE - 356)) | (1L << (LAST - 356)) | (1L << (LEAVES - 356)) | (1L << (LESS - 356)) | (1L << (LEVEL - 356)) | (1L << (LIST - 356)) | (1L << (LOCAL - 356)) | (1L << (LOGFILE - 356)) | (1L << (LOGS - 356)) | (1L << (MASTER - 356)) | (1L << (MASTER_AUTO_POSITION - 356)) | (1L << (MASTER_CONNECT_RETRY - 356)) | (1L << (MASTER_DELAY - 356)) | (1L << (MASTER_HEARTBEAT_PERIOD - 356)) | (1L << (MASTER_HOST - 356)) | (1L << (MASTER_LOG_FILE - 356)) | (1L << (MASTER_LOG_POS - 356)) | (1L << (MASTER_PASSWORD - 356)) | (1L << (MASTER_PORT - 356)) | (1L << (MASTER_RETRY_COUNT - 356)) | (1L << (MASTER_SSL - 356)) | (1L << (MASTER_SSL_CA - 356)) | (1L << (MASTER_SSL_CAPATH - 356)) | (1L << (MASTER_SSL_CERT - 356)) | (1L << (MASTER_SSL_CIPHER - 356)) | (1L << (MASTER_SSL_CRL - 356)) | (1L << (MASTER_SSL_CRLPATH - 356)) | (1L << (MASTER_SSL_KEY - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (MASTER_TLS_VERSION - 420)) | (1L << (MASTER_USER - 420)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 420)) | (1L << (MAX_QUERIES_PER_HOUR - 420)) | (1L << (MAX_ROWS - 420)) | (1L << (MAX_SIZE - 420)) | (1L << (MAX_UPDATES_PER_HOUR - 420)) | (1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MERGE - 420)) | (1L << (MESSAGE_TEXT - 420)) | (1L << (MID - 420)) | (1L << (MIGRATE - 420)) | (1L << (MIN_ROWS - 420)) | (1L << (MODE - 420)) | (1L << (MODIFY - 420)) | (1L << (MUTEX - 420)) | (1L << (MYSQL - 420)) | (1L << (MYSQL_ERRNO - 420)) | (1L << (NAME - 420)) | (1L << (NAMES - 420)) | (1L << (NCHAR - 420)) | (1L << (NEVER - 420)) | (1L << (NEXT - 420)) | (1L << (NO - 420)) | (1L << (NODEGROUP - 420)) | (1L << (NONE - 420)) | (1L << (OFFLINE - 420)) | (1L << (OFFSET - 420)) | (1L << (OJ - 420)) | (1L << (OLD_PASSWORD - 420)) | (1L << (ONE - 420)) | (1L << (ONLINE - 420)) | (1L << (ONLY - 420)) | (1L << (OPEN - 420)) | (1L << (OPTIMIZER_COSTS - 420)) | (1L << (OPTIONS - 420)) | (1L << (OWNER - 420)) | (1L << (PACK_KEYS - 420)) | (1L << (PAGE - 420)) | (1L << (PARSER - 420)) | (1L << (PARTIAL - 420)) | (1L << (PARTITIONING - 420)) | (1L << (PARTITIONS - 420)) | (1L << (PASSWORD - 420)) | (1L << (PHASE - 420)) | (1L << (PLUGIN - 420)) | (1L << (PLUGIN_DIR - 420)) | (1L << (PLUGINS - 420)) | (1L << (PORT - 420)) | (1L << (PRECEDES - 420)) | (1L << (PREPARE - 420)) | (1L << (PRESERVE - 420)) | (1L << (PREV - 420)) | (1L << (PROCESSLIST - 420)) | (1L << (PROFILE - 420)) | (1L << (PROFILES - 420)) | (1L << (PROXY - 420)) | (1L << (QUERY - 420)) | (1L << (QUICK - 420)) | (1L << (REBUILD - 420)) | (1L << (RECOVER - 420)) | (1L << (REDO_BUFFER_SIZE - 420)) | (1L << (REDUNDANT - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (RELAY - 484)) | (1L << (RELAY_LOG_FILE - 484)) | (1L << (RELAY_LOG_POS - 484)) | (1L << (RELAYLOG - 484)) | (1L << (REMOVE - 484)) | (1L << (REORGANIZE - 484)) | (1L << (REPAIR - 484)) | (1L << (REPLICATE_DO_DB - 484)) | (1L << (REPLICATE_DO_TABLE - 484)) | (1L << (REPLICATE_IGNORE_DB - 484)) | (1L << (REPLICATE_IGNORE_TABLE - 484)) | (1L << (REPLICATE_REWRITE_DB - 484)) | (1L << (REPLICATE_WILD_DO_TABLE - 484)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 484)) | (1L << (REPLICATION - 484)) | (1L << (RESET - 484)) | (1L << (RESUME - 484)) | (1L << (RETURNED_SQLSTATE - 484)) | (1L << (RETURNS - 484)) | (1L << (ROLLBACK - 484)) | (1L << (ROLLUP - 484)) | (1L << (ROTATE - 484)) | (1L << (ROW - 484)) | (1L << (ROWS - 484)) | (1L << (ROW_FORMAT - 484)) | (1L << (SAVEPOINT - 484)) | (1L << (SCHEDULE - 484)) | (1L << (SECURITY - 484)) | (1L << (SERVER - 484)) | (1L << (SESSION - 484)) | (1L << (SHARE - 484)) | (1L << (SHARED - 484)) | (1L << (SIGNED - 484)) | (1L << (SIMPLE - 484)) | (1L << (SLAVE - 484)) | (1L << (SLOW - 484)) | (1L << (SNAPSHOT - 484)) | (1L << (SOCKET - 484)) | (1L << (SOME - 484)) | (1L << (SONAME - 484)) | (1L << (SOUNDS - 484)) | (1L << (SOURCE - 484)) | (1L << (SQL_AFTER_GTIDS - 484)) | (1L << (SQL_AFTER_MTS_GAPS - 484)) | (1L << (SQL_BEFORE_GTIDS - 484)) | (1L << (SQL_BUFFER_RESULT - 484)) | (1L << (SQL_CACHE - 484)) | (1L << (SQL_NO_CACHE - 484)) | (1L << (SQL_THREAD - 484)) | (1L << (START - 484)) | (1L << (STARTS - 484)) | (1L << (STATS_AUTO_RECALC - 484)) | (1L << (STATS_PERSISTENT - 484)) | (1L << (STATS_SAMPLE_PAGES - 484)) | (1L << (STATUS - 484)) | (1L << (STOP - 484)) | (1L << (STORAGE - 484)) | (1L << (STRING - 484)) | (1L << (SUBCLASS_ORIGIN - 484)) | (1L << (SUBJECT - 484)) | (1L << (SUBPARTITION - 484)) | (1L << (SUBPARTITIONS - 484)) | (1L << (SUSPEND - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (SWAPS - 548)) | (1L << (SWITCHES - 548)) | (1L << (TABLE_NAME - 548)) | (1L << (TABLESPACE - 548)) | (1L << (TEMPORARY - 548)) | (1L << (TEMPTABLE - 548)) | (1L << (THAN - 548)) | (1L << (TRADITIONAL - 548)) | (1L << (TRANSACTION - 548)) | (1L << (TRIGGERS - 548)) | (1L << (TRUNCATE - 548)) | (1L << (UNDEFINED - 548)) | (1L << (UNDOFILE - 548)) | (1L << (UNDO_BUFFER_SIZE - 548)) | (1L << (UNINSTALL - 548)) | (1L << (UNKNOWN - 548)) | (1L << (UNTIL - 548)) | (1L << (UPGRADE - 548)) | (1L << (USER - 548)) | (1L << (USE_FRM - 548)) | (1L << (USER_RESOURCES - 548)) | (1L << (VALIDATION - 548)) | (1L << (VALUE - 548)) | (1L << (VARIABLES - 548)) | (1L << (VIEW - 548)) | (1L << (VISIBLE - 548)) | (1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (SESSION_VARIABLES_ADMIN - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (CP1257 - 612)) | (1L << (CP850 - 612)) | (1L << (CP852 - 612)) | (1L << (CP866 - 612)) | (1L << (CP932 - 612)) | (1L << (DEC8 - 612)) | (1L << (EUCJPMS - 612)) | (1L << (EUCKR - 612)) | (1L << (GB2312 - 612)) | (1L << (GBK - 612)) | (1L << (GEOSTD8 - 612)) | (1L << (GREEK - 612)) | (1L << (HEBREW - 612)) | (1L << (HP8 - 612)) | (1L << (KEYBCS2 - 612)) | (1L << (KOI8R - 612)) | (1L << (KOI8U - 612)) | (1L << (LATIN1 - 612)) | (1L << (LATIN2 - 612)) | (1L << (LATIN5 - 612)) | (1L << (LATIN7 - 612)) | (1L << (MACCE - 612)) | (1L << (MACROMAN - 612)) | (1L << (SJIS - 612)) | (1L << (SWE7 - 612)) | (1L << (TIS620 - 612)) | (1L << (UCS2 - 612)) | (1L << (UJIS - 612)) | (1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (AES_ENCRYPT - 676)) | (1L << (AREA - 676)) | (1L << (ASBINARY - 676)) | (1L << (ASIN - 676)) | (1L << (ASTEXT - 676)) | (1L << (ASWKB - 676)) | (1L << (ASWKT - 676)) | (1L << (ASYMMETRIC_DECRYPT - 676)) | (1L << (ASYMMETRIC_DERIVE - 676)) | (1L << (ASYMMETRIC_ENCRYPT - 676)) | (1L << (ASYMMETRIC_SIGN - 676)) | (1L << (ASYMMETRIC_VERIFY - 676)) | (1L << (ATAN - 676)) | (1L << (ATAN2 - 676)) | (1L << (BENCHMARK - 676)) | (1L << (BIN - 676)) | (1L << (BIT_COUNT - 676)) | (1L << (BIT_LENGTH - 676)) | (1L << (BUFFER - 676)) | (1L << (CATALOG_NAME - 676)) | (1L << (CEIL - 676)) | (1L << (CEILING - 676)) | (1L << (CENTROID - 676)) | (1L << (CHARACTER_LENGTH - 676)) | (1L << (CHARSET - 676)) | (1L << (CHAR_LENGTH - 676)) | (1L << (COERCIBILITY - 676)) | (1L << (COLLATION - 676)) | (1L << (COMPRESS - 676)) | (1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (FIELD - 740)) | (1L << (FIND_IN_SET - 740)) | (1L << (FLOOR - 740)) | (1L << (FORMAT - 740)) | (1L << (FOUND_ROWS - 740)) | (1L << (FROM_BASE64 - 740)) | (1L << (FROM_DAYS - 740)) | (1L << (FROM_UNIXTIME - 740)) | (1L << (GEOMCOLLFROMTEXT - 740)) | (1L << (GEOMCOLLFROMWKB - 740)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 740)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 740)) | (1L << (GEOMETRYFROMTEXT - 740)) | (1L << (GEOMETRYFROMWKB - 740)) | (1L << (GEOMETRYN - 740)) | (1L << (GEOMETRYTYPE - 740)) | (1L << (GEOMFROMTEXT - 740)) | (1L << (GEOMFROMWKB - 740)) | (1L << (GET_FORMAT - 740)) | (1L << (GET_LOCK - 740)) | (1L << (GLENGTH - 740)) | (1L << (GREATEST - 740)) | (1L << (GTID_SUBSET - 740)) | (1L << (GTID_SUBTRACT - 740)) | (1L << (HEX - 740)) | (1L << (IFNULL - 740)) | (1L << (INET6_ATON - 740)) | (1L << (INET6_NTOA - 740)) | (1L << (INET_ATON - 740)) | (1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (MBRCONTAINS - 804)) | (1L << (MBRDISJOINT - 804)) | (1L << (MBREQUAL - 804)) | (1L << (MBRINTERSECTS - 804)) | (1L << (MBROVERLAPS - 804)) | (1L << (MBRTOUCHES - 804)) | (1L << (MBRWITHIN - 804)) | (1L << (MD5 - 804)) | (1L << (MLINEFROMTEXT - 804)) | (1L << (MLINEFROMWKB - 804)) | (1L << (MONTHNAME - 804)) | (1L << (MPOINTFROMTEXT - 804)) | (1L << (MPOINTFROMWKB - 804)) | (1L << (MPOLYFROMTEXT - 804)) | (1L << (MPOLYFROMWKB - 804)) | (1L << (MULTILINESTRINGFROMTEXT - 804)) | (1L << (MULTILINESTRINGFROMWKB - 804)) | (1L << (MULTIPOINTFROMTEXT - 804)) | (1L << (MULTIPOINTFROMWKB - 804)) | (1L << (MULTIPOLYGONFROMTEXT - 804)) | (1L << (MULTIPOLYGONFROMWKB - 804)) | (1L << (NAME_CONST - 804)) | (1L << (NULLIF - 804)) | (1L << (NUMGEOMETRIES - 804)) | (1L << (NUMINTERIORRINGS - 804)) | (1L << (NUMPOINTS - 804)) | (1L << (OCT - 804)) | (1L << (OCTET_LENGTH - 804)) | (1L << (ORD - 804)) | (1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SCHEMA_NAME - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (SRID - 868)) | (1L << (STARTPOINT - 868)) | (1L << (STRCMP - 868)) | (1L << (STR_TO_DATE - 868)) | (1L << (ST_AREA - 868)) | (1L << (ST_ASBINARY - 868)) | (1L << (ST_ASTEXT - 868)) | (1L << (ST_ASWKB - 868)) | (1L << (ST_ASWKT - 868)) | (1L << (ST_BUFFER - 868)) | (1L << (ST_CENTROID - 868)) | (1L << (ST_CONTAINS - 868)) | (1L << (ST_CROSSES - 868)) | (1L << (ST_DIFFERENCE - 868)) | (1L << (ST_DIMENSION - 868)) | (1L << (ST_DISJOINT - 868)) | (1L << (ST_DISTANCE - 868)) | (1L << (ST_ENDPOINT - 868)) | (1L << (ST_ENVELOPE - 868)) | (1L << (ST_EQUALS - 868)) | (1L << (ST_EXTERIORRING - 868)) | (1L << (ST_GEOMCOLLFROMTEXT - 868)) | (1L << (ST_GEOMCOLLFROMTXT - 868)) | (1L << (ST_GEOMCOLLFROMWKB - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 868)) | (1L << (ST_GEOMETRYFROMTEXT - 868)) | (1L << (ST_GEOMETRYFROMWKB - 868)) | (1L << (ST_GEOMETRYN - 868)) | (1L << (ST_GEOMETRYTYPE - 868)) | (1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (SUBTIME - 932)) | (1L << (SYSTEM_USER - 932)) | (1L << (TAN - 932)) | (1L << (TIMEDIFF - 932)) | (1L << (TIMESTAMPADD - 932)) | (1L << (TIMESTAMPDIFF - 932)) | (1L << (TIME_FORMAT - 932)) | (1L << (TIME_TO_SEC - 932)) | (1L << (TOUCHES - 932)) | (1L << (TO_BASE64 - 932)) | (1L << (TO_DAYS - 932)) | (1L << (TO_SECONDS - 932)) | (1L << (UCASE - 932)) | (1L << (UNCOMPRESS - 932)) | (1L << (UNCOMPRESSED_LENGTH - 932)) | (1L << (UNHEX - 932)) | (1L << (UNIX_TIMESTAMP - 932)) | (1L << (UPDATEXML - 932)) | (1L << (UPPER - 932)) | (1L << (UUID - 932)) | (1L << (UUID_SHORT - 932)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 932)) | (1L << (VERSION - 932)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 932)) | (1L << (WEEKDAY - 932)) | (1L << (WEEKOFYEAR - 932)) | (1L << (WEIGHT_STRING - 932)) | (1L << (WITHIN - 932)) | (1L << (YEARWEEK - 932)) | (1L << (Y_FUNCTION - 932)) | (1L << (X_FUNCTION - 932)))) != 0) || ((((_la - 1002)) & ~0x3f) == 0 && ((1L << (_la - 1002)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 1002)) | (1L << (STRING_LITERAL - 1002)) | (1L << (ID - 1002)) | (1L << (REVERSE_QUOTE_ID - 1002)))) != 0)) {
				{
				setState(3766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3765);
					match(AS);
					}
				}

				setState(3768);
				uid();
				}
			}

			setState(3771);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(GBaseParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(GBaseParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_lockAction);
		int _la;
		try {
			setState(3781);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3773);
				match(READ);
				setState(3775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3774);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3777);
					match(LOW_PRIORITY);
					}
				}

				setState(3780);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(GBaseParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(GBaseParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(GBaseParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_transactionOption);
		try {
			setState(3790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3783);
				match(ISOLATION);
				setState(3784);
				match(LEVEL);
				setState(3785);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3786);
				match(READ);
				setState(3787);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3788);
				match(READ);
				setState(3789);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(GBaseParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(GBaseParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(GBaseParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(GBaseParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_transactionLevel);
		try {
			setState(3799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3792);
				match(REPEATABLE);
				setState(3793);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3794);
				match(READ);
				setState(3795);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3796);
				match(READ);
				setState(3797);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3798);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(GBaseParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3801);
			match(CHANGE);
			setState(3802);
			match(MASTER);
			setState(3803);
			match(TO);
			setState(3804);
			masterOption();
			setState(3809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3805);
				match(COMMA);
				setState(3806);
				masterOption();
				}
				}
				setState(3811);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3812);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(GBaseParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(GBaseParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(GBaseParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3815);
			match(CHANGE);
			setState(3816);
			match(REPLICATION);
			setState(3817);
			match(FILTER);
			setState(3818);
			replicationFilter();
			setState(3823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3819);
				match(COMMA);
				setState(3820);
				replicationFilter();
				}
				}
				setState(3825);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(GBaseParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(GBaseParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3826);
			match(PURGE);
			setState(3827);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3828);
			match(LOGS);
			setState(3833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3829);
				match(TO);
				setState(3830);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3831);
				match(BEFORE);
				setState(3832);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3835);
			match(RESET);
			setState(3836);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3838);
			match(RESET);
			setState(3839);
			match(SLAVE);
			setState(3841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3840);
				match(ALL);
				}
			}

			setState(3844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3843);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(GBaseParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3846);
			match(START);
			setState(3847);
			match(SLAVE);
			setState(3856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3848);
				threadType();
				setState(3853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3849);
					match(COMMA);
					setState(3850);
					threadType();
					}
					}
					setState(3855);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3858);
				match(UNTIL);
				setState(3859);
				untilOption();
				}
			}

			setState(3865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3862);
				connectionOption();
				}
				}
				setState(3867);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3868);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(GBaseParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			match(STOP);
			setState(3872);
			match(SLAVE);
			setState(3881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3873);
				threadType();
				setState(3878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3874);
					match(COMMA);
					setState(3875);
					threadType();
					}
					}
					setState(3880);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(GBaseParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3883);
			match(START);
			setState(3884);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(GBaseParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(GBaseParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3886);
			match(STOP);
			setState(3887);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(GBaseParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(GBaseParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(GBaseParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_masterOption);
		int _la;
		try {
			setState(3918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3889);
				stringMasterOption();
				setState(3890);
				match(EQUAL_SYMBOL);
				setState(3891);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3893);
				decimalMasterOption();
				setState(3894);
				match(EQUAL_SYMBOL);
				setState(3895);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3897);
				boolMasterOption();
				setState(3898);
				match(EQUAL_SYMBOL);
				setState(3899);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3901);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3902);
				match(EQUAL_SYMBOL);
				setState(3903);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3904);
				match(IGNORE_SERVER_IDS);
				setState(3905);
				match(EQUAL_SYMBOL);
				setState(3906);
				match(LR_BRACKET);
				setState(3915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
					{
					setState(3907);
					uid();
					setState(3912);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3908);
						match(COMMA);
						setState(3909);
						uid();
						}
						}
						setState(3914);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3917);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(GBaseParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(GBaseParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(GBaseParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(GBaseParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(GBaseParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(GBaseParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(GBaseParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(GBaseParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(GBaseParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(GBaseParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(GBaseParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(GBaseParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(GBaseParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(GBaseParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3920);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 406)) & ~0x3f) == 0 && ((1L << (_la - 406)) & ((1L << (MASTER_HOST - 406)) | (1L << (MASTER_LOG_FILE - 406)) | (1L << (MASTER_PASSWORD - 406)) | (1L << (MASTER_SSL_CA - 406)) | (1L << (MASTER_SSL_CAPATH - 406)) | (1L << (MASTER_SSL_CERT - 406)) | (1L << (MASTER_SSL_CIPHER - 406)) | (1L << (MASTER_SSL_CRL - 406)) | (1L << (MASTER_SSL_CRLPATH - 406)) | (1L << (MASTER_SSL_KEY - 406)) | (1L << (MASTER_TLS_VERSION - 406)) | (1L << (MASTER_USER - 406)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(GBaseParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(GBaseParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(GBaseParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(GBaseParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(GBaseParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(GBaseParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			_la = _input.LA(1);
			if ( !(((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MASTER_CONNECT_RETRY - 403)) | (1L << (MASTER_DELAY - 403)) | (1L << (MASTER_LOG_POS - 403)) | (1L << (MASTER_PORT - 403)) | (1L << (MASTER_RETRY_COUNT - 403)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(GBaseParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(GBaseParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(GBaseParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3924);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(GBaseParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3926);
			match(FOR);
			setState(3927);
			match(CHANNEL);
			setState(3928);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(GBaseParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(GBaseParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(GBaseParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(GBaseParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_replicationFilter);
		int _la;
		try {
			setState(3979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3930);
				match(REPLICATE_DO_DB);
				setState(3931);
				match(EQUAL_SYMBOL);
				setState(3932);
				match(LR_BRACKET);
				setState(3933);
				uidList();
				setState(3934);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3936);
				match(REPLICATE_IGNORE_DB);
				setState(3937);
				match(EQUAL_SYMBOL);
				setState(3938);
				match(LR_BRACKET);
				setState(3939);
				uidList();
				setState(3940);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3942);
				match(REPLICATE_DO_TABLE);
				setState(3943);
				match(EQUAL_SYMBOL);
				setState(3944);
				match(LR_BRACKET);
				setState(3945);
				tables();
				setState(3946);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3948);
				match(REPLICATE_IGNORE_TABLE);
				setState(3949);
				match(EQUAL_SYMBOL);
				setState(3950);
				match(LR_BRACKET);
				setState(3951);
				tables();
				setState(3952);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3954);
				match(REPLICATE_WILD_DO_TABLE);
				setState(3955);
				match(EQUAL_SYMBOL);
				setState(3956);
				match(LR_BRACKET);
				setState(3957);
				simpleStrings();
				setState(3958);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3960);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3961);
				match(EQUAL_SYMBOL);
				setState(3962);
				match(LR_BRACKET);
				setState(3963);
				simpleStrings();
				setState(3964);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3966);
				match(REPLICATE_REWRITE_DB);
				setState(3967);
				match(EQUAL_SYMBOL);
				setState(3968);
				match(LR_BRACKET);
				setState(3969);
				tablePair();
				setState(3974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3970);
					match(COMMA);
					setState(3971);
					tablePair();
					}
					}
					setState(3976);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3977);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3981);
			match(LR_BRACKET);
			setState(3982);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(3983);
			match(COMMA);
			setState(3984);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(3985);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(GBaseParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(GBaseParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3987);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(GBaseParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(GBaseParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(GBaseParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(GBaseParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(GBaseParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(GBaseParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(GBaseParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_untilOption);
		int _la;
		try {
			setState(4007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3989);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3990);
				match(EQUAL_SYMBOL);
				setState(3991);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3992);
				match(MASTER_LOG_FILE);
				setState(3993);
				match(EQUAL_SYMBOL);
				setState(3994);
				match(STRING_LITERAL);
				setState(3995);
				match(COMMA);
				setState(3996);
				match(MASTER_LOG_POS);
				setState(3997);
				match(EQUAL_SYMBOL);
				setState(3998);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3999);
				match(RELAY_LOG_FILE);
				setState(4000);
				match(EQUAL_SYMBOL);
				setState(4001);
				match(STRING_LITERAL);
				setState(4002);
				match(COMMA);
				setState(4003);
				match(RELAY_LOG_POS);
				setState(4004);
				match(EQUAL_SYMBOL);
				setState(4005);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4006);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(GBaseParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(GBaseParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_connectionOption);
		try {
			setState(4021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4009);
				match(USER);
				setState(4010);
				match(EQUAL_SYMBOL);
				setState(4011);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4012);
				match(PASSWORD);
				setState(4013);
				match(EQUAL_SYMBOL);
				setState(4014);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4015);
				match(DEFAULT_AUTH);
				setState(4016);
				match(EQUAL_SYMBOL);
				setState(4017);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4018);
				match(PLUGIN_DIR);
				setState(4019);
				match(EQUAL_SYMBOL);
				setState(4020);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_gtuidSet);
		int _la;
		try {
			setState(4032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4023);
				uuidSet();
				setState(4028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4024);
					match(COMMA);
					setState(4025);
					uuidSet();
					}
					}
					setState(4030);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4031);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(GBaseParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(GBaseParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4034);
			match(XA);
			setState(4035);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4036);
			xid();
			setState(4038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4037);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(GBaseParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(GBaseParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			match(XA);
			setState(4041);
			match(END);
			setState(4042);
			xid();
			setState(4048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4043);
				match(SUSPEND);
				setState(4046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4044);
					match(FOR);
					setState(4045);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			match(XA);
			setState(4051);
			match(PREPARE);
			setState(4052);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(GBaseParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(GBaseParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(GBaseParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4054);
			match(XA);
			setState(4055);
			match(COMMIT);
			setState(4056);
			xid();
			setState(4059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4057);
				match(ONE);
				setState(4058);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061);
			match(XA);
			setState(4062);
			match(ROLLBACK);
			setState(4063);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(GBaseParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(GBaseParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			match(XA);
			setState(4066);
			match(RECOVER);
			setState(4069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4067);
				match(CONVERT);
				setState(4068);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			match(PREPARE);
			setState(4072);
			uid();
			setState(4073);
			match(FROM);
			setState(4076);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4074);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4075);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(GBaseParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			match(EXECUTE);
			setState(4079);
			uid();
			setState(4082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4080);
				match(USING);
				setState(4081);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(GBaseParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4085);
			match(PREPARE);
			setState(4086);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_routineBody);
		try {
			setState(4090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4088);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4089);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(GBaseParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(GBaseParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				{
				setState(4092);
				uid();
				setState(4093);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4097);
			match(BEGIN);
			setState(4136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				{
				setState(4103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,588,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4098);
						declareVariable();
						setState(4099);
						match(SEMI);
						}
						} 
					}
					setState(4105);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,588,_ctx);
				}
				setState(4111);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4106);
						declareCondition();
						setState(4107);
						match(SEMI);
						}
						} 
					}
					setState(4113);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,589,_ctx);
				}
				setState(4119);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4114);
						declareCursor();
						setState(4115);
						match(SEMI);
						}
						} 
					}
					setState(4121);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
				}
				setState(4127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4122);
					declareHandler();
					setState(4123);
					match(SEMI);
					}
					}
					setState(4129);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4133);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4130);
						procedureSqlStatement();
						}
						} 
					}
					setState(4135);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				}
				}
				break;
			}
			setState(4138);
			match(END);
			setState(4140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4139);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(GBaseParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(GBaseParser.CASE, i);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(GBaseParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			match(CASE);
			setState(4145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4143);
				uid();
				}
				break;
			case 2:
				{
				setState(4144);
				expression(0);
				}
				break;
			}
			setState(4148); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4147);
				caseAlternative();
				}
				}
				setState(4150); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4152);
				match(ELSE);
				setState(4154); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4153);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4156); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,597,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4160);
			match(END);
			setState(4161);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(GBaseParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(GBaseParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(GBaseParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			match(IF);
			setState(4164);
			expression(0);
			setState(4165);
			match(THEN);
			setState(4167); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4166);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4169); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,599,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4171);
				elifAlternative();
				}
				}
				setState(4176);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4177);
				match(ELSE);
				setState(4179); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4178);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4181); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4185);
			match(END);
			setState(4186);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(GBaseParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4188);
			match(ITERATE);
			setState(4189);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(GBaseParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4191);
			match(LEAVE);
			setState(4192);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(GBaseParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(GBaseParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(4194);
				uid();
				setState(4195);
				match(COLON_SYMB);
				}
			}

			setState(4199);
			match(LOOP);
			setState(4201); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4200);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4203); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4205);
			match(END);
			setState(4206);
			match(LOOP);
			setState(4208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(4207);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(GBaseParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(GBaseParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(GBaseParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(4210);
				uid();
				setState(4211);
				match(COLON_SYMB);
				}
			}

			setState(4215);
			match(REPEAT);
			setState(4217); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4216);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4219); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,607,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4221);
			match(UNTIL);
			setState(4222);
			expression(0);
			setState(4223);
			match(END);
			setState(4224);
			match(REPEAT);
			setState(4226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(4225);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(GBaseParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			match(RETURN);
			setState(4229);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(GBaseParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(GBaseParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(GBaseParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(4231);
				uid();
				setState(4232);
				match(COLON_SYMB);
				}
			}

			setState(4236);
			match(WHILE);
			setState(4237);
			expression(0);
			setState(4238);
			match(DO);
			setState(4240); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4239);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4242); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,610,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4244);
			match(END);
			setState(4245);
			match(WHILE);
			setState(4247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (POSITION - 258)) | (1L << (ACCOUNT - 258)) | (1L << (ACTION - 258)) | (1L << (AFTER - 258)) | (1L << (AGGREGATE - 258)) | (1L << (ALGORITHM - 258)) | (1L << (ANY - 258)) | (1L << (AT - 258)) | (1L << (AUTHORS - 258)) | (1L << (AUTOCOMMIT - 258)) | (1L << (AUTOEXTEND_SIZE - 258)) | (1L << (AUTO_INCREMENT - 258)) | (1L << (AVG_ROW_LENGTH - 258)) | (1L << (BEGIN - 258)) | (1L << (BINLOG - 258)) | (1L << (BIT - 258)) | (1L << (BLOCK - 258)) | (1L << (BOOL - 258)) | (1L << (BOOLEAN - 258)) | (1L << (BTREE - 258)) | (1L << (CACHE - 258)) | (1L << (CASCADED - 258)) | (1L << (CHAIN - 258)) | (1L << (CHANGED - 258)) | (1L << (CHANNEL - 258)) | (1L << (CHECKSUM - 258)) | (1L << (PAGE_CHECKSUM - 258)) | (1L << (CIPHER - 258)) | (1L << (CLASS_ORIGIN - 258)) | (1L << (CLIENT - 258)) | (1L << (CLOSE - 258)) | (1L << (COALESCE - 258)) | (1L << (CODE - 258)) | (1L << (COLUMNS - 258)) | (1L << (COLUMN_FORMAT - 258)) | (1L << (COLUMN_NAME - 258)) | (1L << (COMMENT - 258)) | (1L << (COMMIT - 258)) | (1L << (COMPACT - 258)) | (1L << (COMPLETION - 258)) | (1L << (COMPRESSED - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCURRENT - 258)) | (1L << (CONNECTION - 258)) | (1L << (CONSISTENT - 258)) | (1L << (CONSTRAINT_CATALOG - 258)) | (1L << (CONSTRAINT_SCHEMA - 258)) | (1L << (CONSTRAINT_NAME - 258)) | (1L << (CONTAINS - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTRIBUTORS - 258)) | (1L << (COPY - 258)) | (1L << (CPU - 258)) | (1L << (CURSOR_NAME - 258)) | (1L << (DATA - 258)) | (1L << (DATAFILE - 258)) | (1L << (DEALLOCATE - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DEFAULT_AUTH - 322)) | (1L << (DEFINER - 322)) | (1L << (DELAY_KEY_WRITE - 322)) | (1L << (DES_KEY_FILE - 322)) | (1L << (DIRECTORY - 322)) | (1L << (DISABLE - 322)) | (1L << (DISCARD - 322)) | (1L << (DISK - 322)) | (1L << (DO - 322)) | (1L << (DUMPFILE - 322)) | (1L << (DUPLICATE - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ENABLE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (END - 322)) | (1L << (ENDS - 322)) | (1L << (ENGINE - 322)) | (1L << (ENGINES - 322)) | (1L << (ERROR - 322)) | (1L << (ERRORS - 322)) | (1L << (ESCAPE - 322)) | (1L << (EVEN - 322)) | (1L << (EVENT - 322)) | (1L << (EVENTS - 322)) | (1L << (EVERY - 322)) | (1L << (EXCHANGE - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXPIRE - 322)) | (1L << (EXPORT - 322)) | (1L << (EXTENDED - 322)) | (1L << (EXTENT_SIZE - 322)) | (1L << (FAST - 322)) | (1L << (FAULTS - 322)) | (1L << (FIELDS - 322)) | (1L << (FILE_BLOCK_SIZE - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FIXED - 322)) | (1L << (FLUSH - 322)) | (1L << (FOLLOWS - 322)) | (1L << (FOUND - 322)) | (1L << (FULL - 322)) | (1L << (FUNCTION - 322)) | (1L << (GENERAL - 322)) | (1L << (GLOBAL - 322)) | (1L << (GRANTS - 322)) | (1L << (GROUP_REPLICATION - 322)) | (1L << (HANDLER - 322)) | (1L << (HASH - 322)) | (1L << (HELP - 322)) | (1L << (HOST - 322)) | (1L << (HOSTS - 322)) | (1L << (IDENTIFIED - 322)) | (1L << (IGNORE_SERVER_IDS - 322)) | (1L << (IMPORT - 322)) | (1L << (INDEXES - 322)) | (1L << (INITIAL_SIZE - 322)) | (1L << (INPLACE - 322)) | (1L << (INSERT_METHOD - 322)) | (1L << (INSTALL - 322)) | (1L << (INSTANCE - 322)) | (1L << (INVISIBLE - 322)) | (1L << (INVOKER - 322)) | (1L << (IO - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (IO_THREAD - 386)) | (1L << (IPC - 386)) | (1L << (ISOLATION - 386)) | (1L << (ISSUER - 386)) | (1L << (JSON - 386)) | (1L << (KEY_BLOCK_SIZE - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEAVES - 386)) | (1L << (LESS - 386)) | (1L << (LEVEL - 386)) | (1L << (LIST - 386)) | (1L << (LOCAL - 386)) | (1L << (LOGFILE - 386)) | (1L << (LOGS - 386)) | (1L << (MASTER - 386)) | (1L << (MASTER_AUTO_POSITION - 386)) | (1L << (MASTER_CONNECT_RETRY - 386)) | (1L << (MASTER_DELAY - 386)) | (1L << (MASTER_HEARTBEAT_PERIOD - 386)) | (1L << (MASTER_HOST - 386)) | (1L << (MASTER_LOG_FILE - 386)) | (1L << (MASTER_LOG_POS - 386)) | (1L << (MASTER_PASSWORD - 386)) | (1L << (MASTER_PORT - 386)) | (1L << (MASTER_RETRY_COUNT - 386)) | (1L << (MASTER_SSL - 386)) | (1L << (MASTER_SSL_CA - 386)) | (1L << (MASTER_SSL_CAPATH - 386)) | (1L << (MASTER_SSL_CERT - 386)) | (1L << (MASTER_SSL_CIPHER - 386)) | (1L << (MASTER_SSL_CRL - 386)) | (1L << (MASTER_SSL_CRLPATH - 386)) | (1L << (MASTER_SSL_KEY - 386)) | (1L << (MASTER_TLS_VERSION - 386)) | (1L << (MASTER_USER - 386)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 386)) | (1L << (MAX_QUERIES_PER_HOUR - 386)) | (1L << (MAX_ROWS - 386)) | (1L << (MAX_SIZE - 386)) | (1L << (MAX_UPDATES_PER_HOUR - 386)) | (1L << (MAX_USER_CONNECTIONS - 386)) | (1L << (MEDIUM - 386)) | (1L << (MERGE - 386)) | (1L << (MESSAGE_TEXT - 386)) | (1L << (MID - 386)) | (1L << (MIGRATE - 386)) | (1L << (MIN_ROWS - 386)) | (1L << (MODE - 386)) | (1L << (MODIFY - 386)) | (1L << (MUTEX - 386)) | (1L << (MYSQL - 386)) | (1L << (MYSQL_ERRNO - 386)) | (1L << (NAME - 386)) | (1L << (NAMES - 386)) | (1L << (NCHAR - 386)) | (1L << (NEVER - 386)) | (1L << (NEXT - 386)) | (1L << (NO - 386)) | (1L << (NODEGROUP - 386)) | (1L << (NONE - 386)) | (1L << (OFFLINE - 386)) | (1L << (OFFSET - 386)) | (1L << (OJ - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (OLD_PASSWORD - 450)) | (1L << (ONE - 450)) | (1L << (ONLINE - 450)) | (1L << (ONLY - 450)) | (1L << (OPEN - 450)) | (1L << (OPTIMIZER_COSTS - 450)) | (1L << (OPTIONS - 450)) | (1L << (OWNER - 450)) | (1L << (PACK_KEYS - 450)) | (1L << (PAGE - 450)) | (1L << (PARSER - 450)) | (1L << (PARTIAL - 450)) | (1L << (PARTITIONING - 450)) | (1L << (PARTITIONS - 450)) | (1L << (PASSWORD - 450)) | (1L << (PHASE - 450)) | (1L << (PLUGIN - 450)) | (1L << (PLUGIN_DIR - 450)) | (1L << (PLUGINS - 450)) | (1L << (PORT - 450)) | (1L << (PRECEDES - 450)) | (1L << (PREPARE - 450)) | (1L << (PRESERVE - 450)) | (1L << (PREV - 450)) | (1L << (PROCESSLIST - 450)) | (1L << (PROFILE - 450)) | (1L << (PROFILES - 450)) | (1L << (PROXY - 450)) | (1L << (QUERY - 450)) | (1L << (QUICK - 450)) | (1L << (REBUILD - 450)) | (1L << (RECOVER - 450)) | (1L << (REDO_BUFFER_SIZE - 450)) | (1L << (REDUNDANT - 450)) | (1L << (RELAY - 450)) | (1L << (RELAY_LOG_FILE - 450)) | (1L << (RELAY_LOG_POS - 450)) | (1L << (RELAYLOG - 450)) | (1L << (REMOVE - 450)) | (1L << (REORGANIZE - 450)) | (1L << (REPAIR - 450)) | (1L << (REPLICATE_DO_DB - 450)) | (1L << (REPLICATE_DO_TABLE - 450)) | (1L << (REPLICATE_IGNORE_DB - 450)) | (1L << (REPLICATE_IGNORE_TABLE - 450)) | (1L << (REPLICATE_REWRITE_DB - 450)) | (1L << (REPLICATE_WILD_DO_TABLE - 450)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 450)) | (1L << (REPLICATION - 450)) | (1L << (RESET - 450)) | (1L << (RESUME - 450)) | (1L << (RETURNED_SQLSTATE - 450)) | (1L << (RETURNS - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROTATE - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (ROW_FORMAT - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SCHEDULE - 450)) | (1L << (SECURITY - 450)) | (1L << (SERVER - 450)) | (1L << (SESSION - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (SHARE - 514)) | (1L << (SHARED - 514)) | (1L << (SIGNED - 514)) | (1L << (SIMPLE - 514)) | (1L << (SLAVE - 514)) | (1L << (SLOW - 514)) | (1L << (SNAPSHOT - 514)) | (1L << (SOCKET - 514)) | (1L << (SOME - 514)) | (1L << (SONAME - 514)) | (1L << (SOUNDS - 514)) | (1L << (SOURCE - 514)) | (1L << (SQL_AFTER_GTIDS - 514)) | (1L << (SQL_AFTER_MTS_GAPS - 514)) | (1L << (SQL_BEFORE_GTIDS - 514)) | (1L << (SQL_BUFFER_RESULT - 514)) | (1L << (SQL_CACHE - 514)) | (1L << (SQL_NO_CACHE - 514)) | (1L << (SQL_THREAD - 514)) | (1L << (START - 514)) | (1L << (STARTS - 514)) | (1L << (STATS_AUTO_RECALC - 514)) | (1L << (STATS_PERSISTENT - 514)) | (1L << (STATS_SAMPLE_PAGES - 514)) | (1L << (STATUS - 514)) | (1L << (STOP - 514)) | (1L << (STORAGE - 514)) | (1L << (STRING - 514)) | (1L << (SUBCLASS_ORIGIN - 514)) | (1L << (SUBJECT - 514)) | (1L << (SUBPARTITION - 514)) | (1L << (SUBPARTITIONS - 514)) | (1L << (SUSPEND - 514)) | (1L << (SWAPS - 514)) | (1L << (SWITCHES - 514)) | (1L << (TABLE_NAME - 514)) | (1L << (TABLESPACE - 514)) | (1L << (TEMPORARY - 514)) | (1L << (TEMPTABLE - 514)) | (1L << (THAN - 514)) | (1L << (TRADITIONAL - 514)) | (1L << (TRANSACTION - 514)) | (1L << (TRIGGERS - 514)) | (1L << (TRUNCATE - 514)) | (1L << (UNDEFINED - 514)) | (1L << (UNDOFILE - 514)) | (1L << (UNDO_BUFFER_SIZE - 514)) | (1L << (UNINSTALL - 514)) | (1L << (UNKNOWN - 514)) | (1L << (UNTIL - 514)) | (1L << (UPGRADE - 514)) | (1L << (USER - 514)) | (1L << (USE_FRM - 514)) | (1L << (USER_RESOURCES - 514)) | (1L << (VALIDATION - 514)) | (1L << (VALUE - 514)) | (1L << (VARIABLES - 514)) | (1L << (VIEW - 514)) | (1L << (VISIBLE - 514)) | (1L << (WAIT - 514)) | (1L << (WARNINGS - 514)) | (1L << (WITHOUT - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (WORK - 578)) | (1L << (WRAPPER - 578)) | (1L << (X509 - 578)) | (1L << (XA - 578)) | (1L << (XML - 578)) | (1L << (INTERNAL - 578)) | (1L << (QUARTER - 578)) | (1L << (MONTH - 578)) | (1L << (DAY - 578)) | (1L << (HOUR - 578)) | (1L << (MINUTE - 578)) | (1L << (WEEK - 578)) | (1L << (SECOND - 578)) | (1L << (MICROSECOND - 578)) | (1L << (TABLES - 578)) | (1L << (ROUTINE - 578)) | (1L << (EXECUTE - 578)) | (1L << (FILE - 578)) | (1L << (PROCESS - 578)) | (1L << (RELOAD - 578)) | (1L << (SHUTDOWN - 578)) | (1L << (SUPER - 578)) | (1L << (PRIVILEGES - 578)) | (1L << (SESSION_VARIABLES_ADMIN - 578)) | (1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (UTF32 - 642)) | (1L << (UTF8 - 642)) | (1L << (UTF8MB3 - 642)) | (1L << (UTF8MB4 - 642)) | (1L << (ARCHIVE - 642)) | (1L << (BLACKHOLE - 642)) | (1L << (CSV - 642)) | (1L << (FEDERATED - 642)) | (1L << (INNODB - 642)) | (1L << (MEMORY - 642)) | (1L << (MRG_MYISAM - 642)) | (1L << (MYISAM - 642)) | (1L << (NDB - 642)) | (1L << (NDBCLUSTER - 642)) | (1L << (PERFORMANCE_SCHEMA - 642)) | (1L << (TOKUDB - 642)) | (1L << (REPEATABLE - 642)) | (1L << (COMMITTED - 642)) | (1L << (UNCOMMITTED - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (GEOMETRYCOLLECTION - 642)) | (1L << (LINESTRING - 642)) | (1L << (MULTILINESTRING - 642)) | (1L << (MULTIPOINT - 642)) | (1L << (MULTIPOLYGON - 642)) | (1L << (POINT - 642)) | (1L << (POLYGON - 642)) | (1L << (ABS - 642)) | (1L << (ACOS - 642)) | (1L << (ADDDATE - 642)) | (1L << (ADDTIME - 642)) | (1L << (AES_DECRYPT - 642)) | (1L << (AES_ENCRYPT - 642)) | (1L << (AREA - 642)) | (1L << (ASBINARY - 642)) | (1L << (ASIN - 642)) | (1L << (ASTEXT - 642)) | (1L << (ASWKB - 642)) | (1L << (ASWKT - 642)) | (1L << (ASYMMETRIC_DECRYPT - 642)) | (1L << (ASYMMETRIC_DERIVE - 642)) | (1L << (ASYMMETRIC_ENCRYPT - 642)) | (1L << (ASYMMETRIC_SIGN - 642)) | (1L << (ASYMMETRIC_VERIFY - 642)) | (1L << (ATAN - 642)) | (1L << (ATAN2 - 642)) | (1L << (BENCHMARK - 642)) | (1L << (BIN - 642)) | (1L << (BIT_COUNT - 642)) | (1L << (BIT_LENGTH - 642)) | (1L << (BUFFER - 642)) | (1L << (CATALOG_NAME - 642)) | (1L << (CEIL - 642)) | (1L << (CEILING - 642)) | (1L << (CENTROID - 642)) | (1L << (CHARACTER_LENGTH - 642)) | (1L << (CHARSET - 642)) | (1L << (CHAR_LENGTH - 642)) | (1L << (COERCIBILITY - 642)) | (1L << (COLLATION - 642)) | (1L << (COMPRESS - 642)) | (1L << (CONCAT - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (CONCAT_WS - 706)) | (1L << (CONNECTION_ID - 706)) | (1L << (CONV - 706)) | (1L << (CONVERT_TZ - 706)) | (1L << (COS - 706)) | (1L << (COT - 706)) | (1L << (CRC32 - 706)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 706)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 706)) | (1L << (CREATE_DH_PARAMETERS - 706)) | (1L << (CREATE_DIGEST - 706)) | (1L << (CROSSES - 706)) | (1L << (DATEDIFF - 706)) | (1L << (DATE_FORMAT - 706)) | (1L << (DAYNAME - 706)) | (1L << (DAYOFMONTH - 706)) | (1L << (DAYOFWEEK - 706)) | (1L << (DAYOFYEAR - 706)) | (1L << (DECODE - 706)) | (1L << (DEGREES - 706)) | (1L << (DES_DECRYPT - 706)) | (1L << (DES_ENCRYPT - 706)) | (1L << (DIMENSION - 706)) | (1L << (DISJOINT - 706)) | (1L << (ELT - 706)) | (1L << (ENCODE - 706)) | (1L << (ENCRYPT - 706)) | (1L << (ENDPOINT - 706)) | (1L << (ENVELOPE - 706)) | (1L << (EQUALS - 706)) | (1L << (EXP - 706)) | (1L << (EXPORT_SET - 706)) | (1L << (EXTERIORRING - 706)) | (1L << (EXTRACTVALUE - 706)) | (1L << (FIELD - 706)) | (1L << (FIND_IN_SET - 706)) | (1L << (FLOOR - 706)) | (1L << (FORMAT - 706)) | (1L << (FOUND_ROWS - 706)) | (1L << (FROM_BASE64 - 706)) | (1L << (FROM_DAYS - 706)) | (1L << (FROM_UNIXTIME - 706)) | (1L << (GEOMCOLLFROMTEXT - 706)) | (1L << (GEOMCOLLFROMWKB - 706)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 706)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 706)) | (1L << (GEOMETRYFROMTEXT - 706)) | (1L << (GEOMETRYFROMWKB - 706)) | (1L << (GEOMETRYN - 706)) | (1L << (GEOMETRYTYPE - 706)) | (1L << (GEOMFROMTEXT - 706)) | (1L << (GEOMFROMWKB - 706)) | (1L << (GET_FORMAT - 706)) | (1L << (GET_LOCK - 706)) | (1L << (GLENGTH - 706)) | (1L << (GREATEST - 706)) | (1L << (GTID_SUBSET - 706)) | (1L << (GTID_SUBTRACT - 706)) | (1L << (HEX - 706)) | (1L << (IFNULL - 706)) | (1L << (INET6_ATON - 706)) | (1L << (INET6_NTOA - 706)) | (1L << (INET_ATON - 706)) | (1L << (INET_NTOA - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (INSTR - 770)) | (1L << (INTERIORRINGN - 770)) | (1L << (INTERSECTS - 770)) | (1L << (ISCLOSED - 770)) | (1L << (ISEMPTY - 770)) | (1L << (ISNULL - 770)) | (1L << (ISSIMPLE - 770)) | (1L << (IS_FREE_LOCK - 770)) | (1L << (IS_IPV4 - 770)) | (1L << (IS_IPV4_COMPAT - 770)) | (1L << (IS_IPV4_MAPPED - 770)) | (1L << (IS_IPV6 - 770)) | (1L << (IS_USED_LOCK - 770)) | (1L << (LAST_INSERT_ID - 770)) | (1L << (LCASE - 770)) | (1L << (LEAST - 770)) | (1L << (LENGTH - 770)) | (1L << (LINEFROMTEXT - 770)) | (1L << (LINEFROMWKB - 770)) | (1L << (LINESTRINGFROMTEXT - 770)) | (1L << (LINESTRINGFROMWKB - 770)) | (1L << (LN - 770)) | (1L << (LOAD_FILE - 770)) | (1L << (LOCATE - 770)) | (1L << (LOG - 770)) | (1L << (LOG10 - 770)) | (1L << (LOG2 - 770)) | (1L << (LOWER - 770)) | (1L << (LPAD - 770)) | (1L << (LTRIM - 770)) | (1L << (MAKEDATE - 770)) | (1L << (MAKETIME - 770)) | (1L << (MAKE_SET - 770)) | (1L << (MASTER_POS_WAIT - 770)) | (1L << (MBRCONTAINS - 770)) | (1L << (MBRDISJOINT - 770)) | (1L << (MBREQUAL - 770)) | (1L << (MBRINTERSECTS - 770)) | (1L << (MBROVERLAPS - 770)) | (1L << (MBRTOUCHES - 770)) | (1L << (MBRWITHIN - 770)) | (1L << (MD5 - 770)) | (1L << (MLINEFROMTEXT - 770)) | (1L << (MLINEFROMWKB - 770)) | (1L << (MONTHNAME - 770)) | (1L << (MPOINTFROMTEXT - 770)) | (1L << (MPOINTFROMWKB - 770)) | (1L << (MPOLYFROMTEXT - 770)) | (1L << (MPOLYFROMWKB - 770)) | (1L << (MULTILINESTRINGFROMTEXT - 770)) | (1L << (MULTILINESTRINGFROMWKB - 770)) | (1L << (MULTIPOINTFROMTEXT - 770)) | (1L << (MULTIPOINTFROMWKB - 770)) | (1L << (MULTIPOLYGONFROMTEXT - 770)) | (1L << (MULTIPOLYGONFROMWKB - 770)) | (1L << (NAME_CONST - 770)) | (1L << (NULLIF - 770)) | (1L << (NUMGEOMETRIES - 770)) | (1L << (NUMINTERIORRINGS - 770)) | (1L << (NUMPOINTS - 770)) | (1L << (OCT - 770)) | (1L << (OCTET_LENGTH - 770)) | (1L << (ORD - 770)) | (1L << (OVERLAPS - 770)))) != 0) || ((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (PERIOD_ADD - 834)) | (1L << (PERIOD_DIFF - 834)) | (1L << (PI - 834)) | (1L << (POINTFROMTEXT - 834)) | (1L << (POINTFROMWKB - 834)) | (1L << (POINTN - 834)) | (1L << (POLYFROMTEXT - 834)) | (1L << (POLYFROMWKB - 834)) | (1L << (POLYGONFROMTEXT - 834)) | (1L << (POLYGONFROMWKB - 834)) | (1L << (POW - 834)) | (1L << (POWER - 834)) | (1L << (QUOTE - 834)) | (1L << (RADIANS - 834)) | (1L << (RAND - 834)) | (1L << (RANDOM_BYTES - 834)) | (1L << (RELEASE_LOCK - 834)) | (1L << (REVERSE - 834)) | (1L << (ROUND - 834)) | (1L << (ROW_COUNT - 834)) | (1L << (RPAD - 834)) | (1L << (RTRIM - 834)) | (1L << (SEC_TO_TIME - 834)) | (1L << (SESSION_USER - 834)) | (1L << (SHA - 834)) | (1L << (SHA1 - 834)) | (1L << (SHA2 - 834)) | (1L << (SCHEMA_NAME - 834)) | (1L << (SIGN - 834)) | (1L << (SIN - 834)) | (1L << (SLEEP - 834)) | (1L << (SOUNDEX - 834)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 834)) | (1L << (SQRT - 834)) | (1L << (SRID - 834)) | (1L << (STARTPOINT - 834)) | (1L << (STRCMP - 834)) | (1L << (STR_TO_DATE - 834)) | (1L << (ST_AREA - 834)) | (1L << (ST_ASBINARY - 834)) | (1L << (ST_ASTEXT - 834)) | (1L << (ST_ASWKB - 834)) | (1L << (ST_ASWKT - 834)) | (1L << (ST_BUFFER - 834)) | (1L << (ST_CENTROID - 834)) | (1L << (ST_CONTAINS - 834)) | (1L << (ST_CROSSES - 834)) | (1L << (ST_DIFFERENCE - 834)) | (1L << (ST_DIMENSION - 834)) | (1L << (ST_DISJOINT - 834)) | (1L << (ST_DISTANCE - 834)) | (1L << (ST_ENDPOINT - 834)) | (1L << (ST_ENVELOPE - 834)) | (1L << (ST_EQUALS - 834)) | (1L << (ST_EXTERIORRING - 834)) | (1L << (ST_GEOMCOLLFROMTEXT - 834)) | (1L << (ST_GEOMCOLLFROMTXT - 834)) | (1L << (ST_GEOMCOLLFROMWKB - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 834)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 834)) | (1L << (ST_GEOMETRYFROMTEXT - 834)) | (1L << (ST_GEOMETRYFROMWKB - 834)) | (1L << (ST_GEOMETRYN - 834)) | (1L << (ST_GEOMETRYTYPE - 834)))) != 0) || ((((_la - 898)) & ~0x3f) == 0 && ((1L << (_la - 898)) & ((1L << (ST_GEOMFROMTEXT - 898)) | (1L << (ST_GEOMFROMWKB - 898)) | (1L << (ST_INTERIORRINGN - 898)) | (1L << (ST_INTERSECTION - 898)) | (1L << (ST_INTERSECTS - 898)) | (1L << (ST_ISCLOSED - 898)) | (1L << (ST_ISEMPTY - 898)) | (1L << (ST_ISSIMPLE - 898)) | (1L << (ST_LINEFROMTEXT - 898)) | (1L << (ST_LINEFROMWKB - 898)) | (1L << (ST_LINESTRINGFROMTEXT - 898)) | (1L << (ST_LINESTRINGFROMWKB - 898)) | (1L << (ST_NUMGEOMETRIES - 898)) | (1L << (ST_NUMINTERIORRING - 898)) | (1L << (ST_NUMINTERIORRINGS - 898)) | (1L << (ST_NUMPOINTS - 898)) | (1L << (ST_OVERLAPS - 898)) | (1L << (ST_POINTFROMTEXT - 898)) | (1L << (ST_POINTFROMWKB - 898)) | (1L << (ST_POINTN - 898)) | (1L << (ST_POLYFROMTEXT - 898)) | (1L << (ST_POLYFROMWKB - 898)) | (1L << (ST_POLYGONFROMTEXT - 898)) | (1L << (ST_POLYGONFROMWKB - 898)) | (1L << (ST_SRID - 898)) | (1L << (ST_STARTPOINT - 898)) | (1L << (ST_SYMDIFFERENCE - 898)) | (1L << (ST_TOUCHES - 898)) | (1L << (ST_UNION - 898)) | (1L << (ST_WITHIN - 898)) | (1L << (ST_X - 898)) | (1L << (ST_Y - 898)) | (1L << (SUBDATE - 898)) | (1L << (SUBSTRING_INDEX - 898)) | (1L << (SUBTIME - 898)) | (1L << (SYSTEM_USER - 898)) | (1L << (TAN - 898)) | (1L << (TIMEDIFF - 898)) | (1L << (TIMESTAMPADD - 898)) | (1L << (TIMESTAMPDIFF - 898)) | (1L << (TIME_FORMAT - 898)) | (1L << (TIME_TO_SEC - 898)) | (1L << (TOUCHES - 898)) | (1L << (TO_BASE64 - 898)) | (1L << (TO_DAYS - 898)) | (1L << (TO_SECONDS - 898)) | (1L << (UCASE - 898)) | (1L << (UNCOMPRESS - 898)) | (1L << (UNCOMPRESSED_LENGTH - 898)) | (1L << (UNHEX - 898)) | (1L << (UNIX_TIMESTAMP - 898)) | (1L << (UPDATEXML - 898)) | (1L << (UPPER - 898)) | (1L << (UUID - 898)) | (1L << (UUID_SHORT - 898)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 898)) | (1L << (VERSION - 898)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 898)) | (1L << (WEEKDAY - 898)) | (1L << (WEEKOFYEAR - 898)) | (1L << (WEIGHT_STRING - 898)) | (1L << (WITHIN - 898)) | (1L << (YEARWEEK - 898)) | (1L << (Y_FUNCTION - 898)))) != 0) || ((((_la - 962)) & ~0x3f) == 0 && ((1L << (_la - 962)) & ((1L << (X_FUNCTION - 962)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 962)) | (1L << (STRING_LITERAL - 962)) | (1L << (ID - 962)) | (1L << (REVERSE_QUOTE_ID - 962)))) != 0)) {
				{
				setState(4246);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(GBaseParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(GBaseParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_cursorStatement);
		int _la;
		try {
			setState(4264);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4249);
				match(CLOSE);
				setState(4250);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4251);
				match(FETCH);
				setState(4256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4253);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4252);
						match(NEXT);
						}
					}

					setState(4255);
					match(FROM);
					}
					break;
				}
				setState(4258);
				uid();
				setState(4259);
				match(INTO);
				setState(4260);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4262);
				match(OPEN);
				setState(4263);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4266);
			match(DECLARE);
			setState(4267);
			uidList();
			setState(4268);
			dataType();
			setState(4271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4269);
				match(DEFAULT);
				setState(4270);
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(GBaseParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4273);
			match(DECLARE);
			setState(4274);
			uid();
			setState(4275);
			match(CONDITION);
			setState(4276);
			match(FOR);
			setState(4283);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				setState(4277);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4278);
				match(SQLSTATE);
				setState(4280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4279);
					match(VALUE);
					}
				}

				setState(4282);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(GBaseParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(DECLARE);
			setState(4286);
			uid();
			setState(4287);
			match(CURSOR);
			setState(4288);
			match(FOR);
			setState(4289);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(GBaseParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(GBaseParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(GBaseParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(GBaseParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4291);
			match(DECLARE);
			setState(4292);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4293);
			match(HANDLER);
			setState(4294);
			match(FOR);
			setState(4295);
			handlerConditionValue();
			setState(4300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4296);
				match(COMMA);
				setState(4297);
				handlerConditionValue();
				}
				}
				setState(4302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4303);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(GBaseParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(GBaseParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(GBaseParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4305);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4306);
				match(SQLSTATE);
				setState(4308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4307);
					match(VALUE);
					}
				}

				setState(4310);
				match(STRING_LITERAL);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4311);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4312);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4313);
				match(NOT);
				setState(4314);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4315);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(GBaseParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4318);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4319);
				sqlStatement();
				}
				break;
			}
			setState(4322);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(GBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4324);
			match(WHEN);
			setState(4327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				{
				setState(4325);
				constant();
				}
				break;
			case 2:
				{
				setState(4326);
				expression(0);
				}
				break;
			}
			setState(4329);
			match(THEN);
			setState(4331); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4330);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4333); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,623,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(GBaseParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4335);
			match(ELSEIF);
			setState(4336);
			expression(0);
			setState(4337);
			match(THEN);
			setState(4339); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4338);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4341); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,624,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(GBaseParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(GBaseParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(GBaseParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAlterUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alterUser);
		int _la;
		try {
			setState(4397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4343);
				match(ALTER);
				setState(4344);
				match(USER);
				setState(4345);
				userSpecification();
				setState(4350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4346);
					match(COMMA);
					setState(4347);
					userSpecification();
					}
					}
					setState(4352);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4353);
				match(ALTER);
				setState(4354);
				match(USER);
				setState(4356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4355);
					ifExists();
					}
				}

				setState(4358);
				userAuthOption();
				setState(4363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4359);
					match(COMMA);
					setState(4360);
					userAuthOption();
					}
					}
					setState(4365);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4366);
					match(REQUIRE);
					setState(4378);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4367);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4368);
						tlsOption();
						setState(4375);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4370);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4369);
								match(AND);
								}
							}

							setState(4372);
							tlsOption();
							}
							}
							setState(4377);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4382);
					match(WITH);
					setState(4384); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4383);
						userResourceOption();
						}
						}
						setState(4386); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 422)) | (1L << (MAX_QUERIES_PER_HOUR - 422)) | (1L << (MAX_UPDATES_PER_HOUR - 422)) | (1L << (MAX_USER_CONNECTIONS - 422)))) != 0) );
					}
				}

				setState(4394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4392);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4390);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4391);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4396);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(GBaseParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(GBaseParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(GBaseParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_createUser);
		int _la;
		try {
			setState(4453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4399);
				match(CREATE);
				setState(4400);
				match(USER);
				setState(4401);
				userAuthOption();
				setState(4406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4402);
					match(COMMA);
					setState(4403);
					userAuthOption();
					}
					}
					setState(4408);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4409);
				match(CREATE);
				setState(4410);
				match(USER);
				setState(4412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4411);
					ifNotExists();
					}
				}

				setState(4414);
				userAuthOption();
				setState(4419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4415);
					match(COMMA);
					setState(4416);
					userAuthOption();
					}
					}
					setState(4421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4422);
					match(REQUIRE);
					setState(4434);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4423);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4424);
						tlsOption();
						setState(4431);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4426);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4425);
								match(AND);
								}
							}

							setState(4428);
							tlsOption();
							}
							}
							setState(4433);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4438);
					match(WITH);
					setState(4440); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4439);
						userResourceOption();
						}
						}
						setState(4442); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 422)) & ~0x3f) == 0 && ((1L << (_la - 422)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 422)) | (1L << (MAX_QUERIES_PER_HOUR - 422)) | (1L << (MAX_UPDATES_PER_HOUR - 422)) | (1L << (MAX_USER_CONNECTIONS - 422)))) != 0) );
					}
				}

				setState(4450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4448);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4446);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4447);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4452);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4455);
			match(DROP);
			setState(4456);
			match(USER);
			setState(4458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4457);
				ifExists();
				}
			}

			setState(4460);
			userName();
			setState(4465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4461);
				match(COMMA);
				setState(4462);
				userName();
				}
				}
				setState(4467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(GBaseParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(GBaseParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(GBaseParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(GBaseParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(GBaseParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(GBaseParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(GBaseParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4468);
			match(GRANT);
			setState(4469);
			privelegeClause();
			setState(4474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4470);
				match(COMMA);
				setState(4471);
				privelegeClause();
				}
				}
				setState(4476);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4477);
			match(ON);
			setState(4479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(4478);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4481);
			privilegeLevel();
			setState(4482);
			match(TO);
			setState(4483);
			userAuthOption();
			setState(4488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4484);
				match(COMMA);
				setState(4485);
				userAuthOption();
				}
				}
				setState(4490);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4491);
				match(REQUIRE);
				setState(4503);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4492);
					((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4493);
					tlsOption();
					setState(4500);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						setState(4495);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4494);
							match(AND);
							}
						}

						setState(4497);
						tlsOption();
						}
						}
						setState(4502);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4507);
				match(WITH);
				setState(4513);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4511);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GRANT:
							{
							setState(4508);
							match(GRANT);
							setState(4509);
							match(OPTION);
							}
							break;
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
							{
							setState(4510);
							userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4515);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(GBaseParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(GBaseParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4518);
			match(GRANT);
			setState(4519);
			match(PROXY);
			setState(4520);
			match(ON);
			setState(4521);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4522);
			match(TO);
			setState(4523);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4524);
				match(COMMA);
				setState(4525);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4530);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4531);
				match(WITH);
				setState(4532);
				match(GRANT);
				setState(4533);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(GBaseParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4536);
			match(RENAME);
			setState(4537);
			match(USER);
			setState(4538);
			renameUserClause();
			setState(4543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4539);
				match(COMMA);
				setState(4540);
				renameUserClause();
				}
				}
				setState(4545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(GBaseParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(GBaseParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(GBaseParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revokeStatement);
		int _la;
		try {
			setState(4586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4546);
				match(REVOKE);
				setState(4547);
				privelegeClause();
				setState(4552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4548);
					match(COMMA);
					setState(4549);
					privelegeClause();
					}
					}
					setState(4554);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4555);
				match(ON);
				setState(4557);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(4556);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4559);
				privilegeLevel();
				setState(4560);
				match(FROM);
				setState(4561);
				userName();
				setState(4566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4562);
					match(COMMA);
					setState(4563);
					userName();
					}
					}
					setState(4568);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4569);
				match(REVOKE);
				setState(4570);
				match(ALL);
				setState(4572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4571);
					match(PRIVILEGES);
					}
				}

				setState(4574);
				match(COMMA);
				setState(4575);
				match(GRANT);
				setState(4576);
				match(OPTION);
				setState(4577);
				match(FROM);
				setState(4578);
				userName();
				setState(4583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4579);
					match(COMMA);
					setState(4580);
					userName();
					}
					}
					setState(4585);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(GBaseParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4588);
			match(REVOKE);
			setState(4589);
			match(PROXY);
			setState(4590);
			match(ON);
			setState(4591);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(4592);
			match(FROM);
			setState(4593);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4594);
				match(COMMA);
				setState(4595);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4600);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4601);
			match(SET);
			setState(4602);
			match(PASSWORD);
			setState(4605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4603);
				match(FOR);
				setState(4604);
				userName();
				}
			}

			setState(4607);
			match(EQUAL_SYMBOL);
			setState(4610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4608);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4609);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4612);
			userName();
			setState(4613);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_userAuthOption);
		int _la;
		try {
			setState(4639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4615);
				userName();
				setState(4616);
				match(IDENTIFIED);
				setState(4617);
				match(BY);
				setState(4618);
				match(PASSWORD);
				setState(4619);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4621);
				userName();
				setState(4622);
				match(IDENTIFIED);
				setState(4625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4623);
					match(WITH);
					setState(4624);
					authPlugin();
					}
				}

				setState(4627);
				match(BY);
				setState(4628);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4630);
				userName();
				setState(4631);
				match(IDENTIFIED);
				setState(4632);
				match(WITH);
				setState(4633);
				authPlugin();
				setState(4636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4634);
					match(AS);
					setState(4635);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4638);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(GBaseParser.SSL, 0); }
		public TerminalNode X509() { return getToken(GBaseParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(GBaseParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(GBaseParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(GBaseParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_tlsOption);
		try {
			setState(4649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4641);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4642);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4643);
				match(CIPHER);
				setState(4644);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4645);
				match(ISSUER);
				setState(4646);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4647);
				match(SUBJECT);
				setState(4648);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(GBaseParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(GBaseParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(GBaseParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(GBaseParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_userResourceOption);
		try {
			setState(4659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4651);
				match(MAX_QUERIES_PER_HOUR);
				setState(4652);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4653);
				match(MAX_UPDATES_PER_HOUR);
				setState(4654);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4655);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4656);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4657);
				match(MAX_USER_CONNECTIONS);
				setState(4658);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(GBaseParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(GBaseParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(GBaseParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(GBaseParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661);
			match(PASSWORD);
			setState(4662);
			match(EXPIRE);
			setState(4669);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4663);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4664);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4665);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4666);
				decimalLiteral();
				setState(4667);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(GBaseParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(GBaseParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4671);
			match(ACCOUNT);
			setState(4672);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4674);
			privilege();
			setState(4679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4675);
				match(LR_BRACKET);
				setState(4676);
				uidList();
				setState(4677);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(GBaseParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(GBaseParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public TerminalNode DELETE() { return getToken(GBaseParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(GBaseParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(GBaseParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(GBaseParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(GBaseParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(GBaseParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(GBaseParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(GBaseParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(GBaseParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(GBaseParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(GBaseParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(GBaseParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(GBaseParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(GBaseParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(GBaseParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(GBaseParser.USAGE, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(GBaseParser.SESSION_VARIABLES_ADMIN, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_privilege);
		int _la;
		try {
			setState(4724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4681);
				match(ALL);
				setState(4683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4682);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4685);
				match(ALTER);
				setState(4687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4686);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4689);
				match(CREATE);
				setState(4696);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4690);
					match(TEMPORARY);
					setState(4691);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4692);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4693);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4694);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4695);
					match(TABLESPACE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4698);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4699);
				match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4700);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4701);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4702);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4703);
				match(GRANT);
				setState(4704);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4705);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4706);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4707);
				match(LOCK);
				setState(4708);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4709);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4710);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4711);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4712);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4713);
				match(REPLICATION);
				setState(4714);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4715);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4716);
				match(SHOW);
				setState(4717);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4718);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4719);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4720);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4721);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4722);
				match(USAGE);
				}
				break;
			case SESSION_VARIABLES_ADMIN:
				enterOuterAlt(_localctx, 25);
				{
				setState(4723);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(GBaseParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(GBaseParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_privilegeLevel);
		try {
			setState(4742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4726);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4727);
				match(STAR);
				setState(4728);
				match(DOT);
				setState(4729);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4730);
				uid();
				setState(4731);
				match(DOT);
				setState(4732);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4734);
				uid();
				setState(4735);
				match(DOT);
				setState(4736);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4738);
				uid();
				setState(4739);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4741);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(GBaseParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4744);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(4745);
			match(TO);
			setState(4746);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(GBaseParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4748);
			match(ANALYZE);
			setState(4750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4749);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4752);
			match(TABLE);
			setState(4753);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(GBaseParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755);
			match(CHECK);
			setState(4756);
			match(TABLE);
			setState(4757);
			tables();
			setState(4761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(4758);
				checkTableOption();
				}
				}
				setState(4763);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(GBaseParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4764);
			match(CHECKSUM);
			setState(4765);
			match(TABLE);
			setState(4766);
			tables();
			setState(4768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(4767);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(GBaseParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4770);
			match(OPTIMIZE);
			setState(4772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4771);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4774);
			match(TABLE);
			setState(4775);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(GBaseParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(GBaseParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4777);
			match(REPAIR);
			setState(4779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4778);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4781);
			match(TABLE);
			setState(4782);
			tables();
			setState(4784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(4783);
				match(QUICK);
				}
			}

			setState(4787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4786);
				match(EXTENDED);
				}
			}

			setState(4790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4789);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(GBaseParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(GBaseParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(GBaseParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_checkTableOption);
		try {
			setState(4799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4792);
				match(FOR);
				setState(4793);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4794);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4795);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4796);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4797);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4798);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(GBaseParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(GBaseParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(GBaseParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(GBaseParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(GBaseParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(GBaseParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(GBaseParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4801);
			match(CREATE);
			setState(4803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4802);
				match(AGGREGATE);
				}
			}

			setState(4805);
			match(FUNCTION);
			setState(4806);
			uid();
			setState(4807);
			match(RETURNS);
			setState(4808);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (INTEGER - 182)) | (1L << (REAL - 182)) | (1L << (DECIMAL - 182)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4809);
			match(SONAME);
			setState(4810);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(GBaseParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(GBaseParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(GBaseParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4812);
			match(INSTALL);
			setState(4813);
			match(PLUGIN);
			setState(4814);
			uid();
			setState(4815);
			match(SONAME);
			setState(4816);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(GBaseParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(GBaseParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4818);
			match(UNINSTALL);
			setState(4819);
			match(PLUGIN);
			setState(4820);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(GBaseParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(GBaseParser.VAR_ASSIGN, 0); }
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(GBaseParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(GBaseParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setStatement);
		int _la;
		try {
			setState(4864);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4822);
				match(SET);
				setState(4823);
				variableClause();
				setState(4824);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4825);
				expression(0);
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4826);
					match(COMMA);
					setState(4827);
					variableClause();
					setState(4828);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4829);
					expression(0);
					}
					}
					setState(4835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4836);
				match(SET);
				setState(4840);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4837);
					match(CHARACTER);
					setState(4838);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(4839);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4844);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4842);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(4843);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4846);
				match(SET);
				setState(4847);
				match(NAMES);
				setState(4854);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4848);
					charsetName();
					setState(4851);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(4849);
						match(COLLATE);
						setState(4850);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(4853);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4856);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4857);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4858);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4859);
				match(SET);
				setState(4860);
				fullId();
				setState(4861);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4862);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(GBaseParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(GBaseParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(GBaseParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(GBaseParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(GBaseParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(GBaseParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(GBaseParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(GBaseParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(GBaseParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(GBaseParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(GBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(GBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(GBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(GBaseParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(GBaseParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(GBaseParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(GBaseParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(GBaseParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(GBaseParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(GBaseParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(GBaseParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(GBaseParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(GBaseParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(GBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(GBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(GBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(GBaseParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_showStatement);
		int _la;
		try {
			setState(5017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4866);
				match(SHOW);
				setState(4867);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4868);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4869);
				match(SHOW);
				setState(4870);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4871);
				match(EVENTS);
				setState(4874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4872);
					match(IN);
					setState(4873);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(4878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4876);
					match(FROM);
					setState(4877);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(4887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4880);
					match(LIMIT);
					setState(4884);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
					case 1:
						{
						setState(4881);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(4882);
						match(COMMA);
						}
						break;
					}
					setState(4886);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4889);
				match(SHOW);
				setState(4890);
				showCommonEntity();
				setState(4892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4891);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4894);
				match(SHOW);
				setState(4896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4895);
					match(FULL);
					}
				}

				setState(4898);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4899);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4900);
				tableName();
				setState(4903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4901);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4902);
					uid();
					}
				}

				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4905);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4908);
				match(SHOW);
				setState(4909);
				match(CREATE);
				setState(4910);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4911);
					ifNotExists();
					}
				}

				setState(4914);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4915);
				match(SHOW);
				setState(4916);
				match(CREATE);
				setState(4917);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (PROCEDURE - 117)) | (1L << (TABLE - 117)) | (1L << (TRIGGER - 117)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4918);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4919);
				match(SHOW);
				setState(4920);
				match(CREATE);
				setState(4921);
				match(USER);
				setState(4922);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4923);
				match(SHOW);
				setState(4924);
				match(ENGINE);
				setState(4925);
				engineName();
				setState(4926);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4928);
				match(SHOW);
				setState(4929);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4930);
				match(SHOW);
				setState(4931);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(4932);
				match(LIMIT);
				setState(4936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(4933);
					((ShowErrorsContext)_localctx).offset = decimalLiteral();
					setState(4934);
					match(COMMA);
					}
					break;
				}
				setState(4938);
				((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4939);
				match(SHOW);
				setState(4940);
				match(COUNT);
				setState(4941);
				match(LR_BRACKET);
				setState(4942);
				match(STAR);
				setState(4943);
				match(RR_BRACKET);
				setState(4944);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4945);
				match(SHOW);
				setState(4946);
				showSchemaEntity();
				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4947);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4948);
					uid();
					}
				}

				setState(4952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4951);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4954);
				match(SHOW);
				setState(4955);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4956);
				match(CODE);
				setState(4957);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4958);
				match(SHOW);
				setState(4959);
				match(GRANTS);
				setState(4962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4960);
					match(FOR);
					setState(4961);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4964);
				match(SHOW);
				setState(4965);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4966);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4967);
				tableName();
				setState(4970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4968);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4969);
					uid();
					}
				}

				setState(4974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4972);
					match(WHERE);
					setState(4973);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4976);
				match(SHOW);
				setState(4977);
				match(OPEN);
				setState(4978);
				match(TABLES);
				setState(4981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4979);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4980);
					uid();
					}
				}

				setState(4984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4983);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4986);
				match(SHOW);
				setState(4987);
				match(PROFILE);
				setState(4988);
				showProfileType();
				setState(4993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4989);
					match(COMMA);
					setState(4990);
					showProfileType();
					}
					}
					setState(4995);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4996);
					match(FOR);
					setState(4997);
					match(QUERY);
					setState(4998);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5001);
				match(LIMIT);
				setState(5005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(5002);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5003);
					match(COMMA);
					}
					break;
				}
				setState(5007);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5009);
				match(SHOW);
				setState(5010);
				match(SLAVE);
				setState(5011);
				match(STATUS);
				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5012);
					match(FOR);
					setState(5013);
					match(CHANNEL);
					setState(5014);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(GBaseParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(GBaseParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(GBaseParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_variableClause);
		int _la;
		try {
			setState(5029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5019);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5020);
				match(GLOBAL_ID);
				}
				break;
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5023);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5021);
						match(AT_SIGN);
						setState(5022);
						match(AT_SIGN);
						}
					}

					setState(5025);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5028);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(GBaseParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(GBaseParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(GBaseParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(GBaseParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(GBaseParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_showCommonEntity);
		int _la;
		try {
			setState(5044);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5031);
				match(CHARACTER);
				setState(5032);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5033);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5034);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5035);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5036);
				match(FUNCTION);
				setState(5037);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5038);
				match(PROCEDURE);
				setState(5039);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5040);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5043);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(GBaseParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_showFilter);
		try {
			setState(5050);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5046);
				match(LIKE);
				setState(5047);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5048);
				match(WHERE);
				setState(5049);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(GBaseParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(GBaseParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(GBaseParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(GBaseParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(GBaseParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(GBaseParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(GBaseParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5052);
					match(STORAGE);
					}
				}

				setState(5055);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5056);
				match(MASTER);
				setState(5057);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5058);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5059);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5060);
					match(FULL);
					}
				}

				setState(5063);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5064);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5065);
				match(SLAVE);
				setState(5066);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5067);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5068);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(GBaseParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(GBaseParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(GBaseParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5079);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5071);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5072);
				match(TABLE);
				setState(5073);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5074);
					match(FULL);
					}
				}

				setState(5077);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5078);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(GBaseParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(GBaseParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(GBaseParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(GBaseParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(GBaseParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(GBaseParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(GBaseParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(GBaseParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(GBaseParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(GBaseParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_showProfileType);
		try {
			setState(5093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5081);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5082);
				match(BLOCK);
				setState(5083);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5084);
				match(CONTEXT);
				setState(5085);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5086);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5087);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5088);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5089);
				match(PAGE);
				setState(5090);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5091);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5092);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(GBaseParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5095);
			match(BINLOG);
			setState(5096);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(CACHE);
			setState(5099);
			match(INDEX);
			setState(5100);
			tableIndexes();
			setState(5105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5101);
				match(COMMA);
				setState(5102);
				tableIndexes();
				}
				}
				setState(5107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5108);
				match(PARTITION);
				setState(5109);
				match(LR_BRACKET);
				setState(5112);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5110);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5111);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5114);
				match(RR_BRACKET);
				}
			}

			setState(5117);
			match(IN);
			setState(5118);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(GBaseParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(GBaseParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5120);
			match(FLUSH);
			setState(5122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5121);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5124);
			flushOption();
			setState(5129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5125);
				match(COMMA);
				setState(5126);
				flushOption();
				}
				}
				setState(5131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(GBaseParser.KILL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5132);
			match(KILL);
			setState(5134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5133);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5137); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5136);
				decimalLiteral();
				}
				}
				setState(5139); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 995)) & ~0x3f) == 0 && ((1L << (_la - 995)) & ((1L << (ZERO_DECIMAL - 995)) | (1L << (ONE_DECIMAL - 995)) | (1L << (TWO_DECIMAL - 995)) | (1L << (DECIMAL_LITERAL - 995)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(GBaseParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(GBaseParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			match(LOAD);
			setState(5142);
			match(INDEX);
			setState(5143);
			match(INTO);
			setState(5144);
			match(CACHE);
			setState(5145);
			loadedTableIndexes();
			setState(5150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5146);
				match(COMMA);
				setState(5147);
				loadedTableIndexes();
				}
				}
				setState(5152);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5153);
			match(RESET);
			setState(5154);
			match(QUERY);
			setState(5155);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(GBaseParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5157);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5159);
			tableName();
			setState(5167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5160);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5163);
				match(LR_BRACKET);
				setState(5164);
				uidList();
				setState(5165);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(GBaseParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(GBaseParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(GBaseParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(GBaseParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(GBaseParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(GBaseParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(GBaseParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(GBaseParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(GBaseParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_flushOption);
		int _la;
		try {
			setState(5199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5187);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5169);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5170);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5172);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (ENGINE - 338)) | (1L << (ERROR - 338)) | (1L << (GENERAL - 338)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5171);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & ((1L << (ENGINE - 338)) | (1L << (ERROR - 338)) | (1L << (GENERAL - 338)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5174);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5175);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5176);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5177);
					match(QUERY);
					setState(5178);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5179);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5180);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5181);
					match(TABLES);
					setState(5185);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5182);
						match(WITH);
						setState(5183);
						match(READ);
						setState(5184);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5189);
				match(RELAY);
				setState(5190);
				match(LOGS);
				setState(5192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5191);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5194);
				match(TABLES);
				setState(5195);
				tables();
				setState(5197);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5196);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(GBaseParser.WITH, 0); }
		public TerminalNode READ() { return getToken(GBaseParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(GBaseParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(GBaseParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_flushTableOption);
		try {
			setState(5206);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5201);
				match(WITH);
				setState(5202);
				match(READ);
				setState(5203);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5204);
				match(FOR);
				setState(5205);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(GBaseParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(GBaseParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(GBaseParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(GBaseParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5208);
			tableName();
			setState(5216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5209);
				match(PARTITION);
				setState(5210);
				match(LR_BRACKET);
				setState(5213);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5211);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5212);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5215);
				match(RR_BRACKET);
				}
			}

			setState(5225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				setState(5219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5218);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5221);
				match(LR_BRACKET);
				setState(5222);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5223);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5227);
				match(IGNORE);
				setState(5228);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(GBaseParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(GBaseParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5231);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5232);
			tableName();
			setState(5235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				{
				setState(5233);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5234);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(GBaseParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(GBaseParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(GBaseParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(GBaseParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(GBaseParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5238);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5239);
				match(EQUAL_SYMBOL);
				setState(5240);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5243);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(GBaseParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5245);
			match(HELP);
			setState(5246);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(GBaseParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5248);
			match(USE);
			setState(5249);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(GBaseParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5251);
			match(SIGNAL);
			setState(5259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5252);
				match(SQLSTATE);
				setState(5254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5253);
					match(VALUE);
					}
				}

				setState(5256);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5257);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5258);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
			case 1:
				{
				setState(5261);
				match(SET);
				setState(5262);
				signalConditionInformation();
				setState(5267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5263);
					match(COMMA);
					setState(5264);
					signalConditionInformation();
					}
					}
					setState(5269);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(GBaseParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(GBaseParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			match(RESIGNAL);
			setState(5280);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(5273);
				match(SQLSTATE);
				setState(5275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5274);
					match(VALUE);
					}
				}

				setState(5277);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(5278);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(5279);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(5291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				{
				setState(5282);
				match(SET);
				setState(5283);
				signalConditionInformation();
				setState(5288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5284);
					match(COMMA);
					setState(5285);
					signalConditionInformation();
					}
					}
					setState(5290);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(GBaseParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(GBaseParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(GBaseParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(GBaseParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(GBaseParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(GBaseParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(GBaseParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(GBaseParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(GBaseParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(GBaseParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(GBaseParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(GBaseParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(GBaseParser.DECIMAL_LITERAL, 0); }
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5293);
			_la = _input.LA(1);
			if ( !(((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (CLASS_ORIGIN - 293)) | (1L << (COLUMN_NAME - 293)) | (1L << (CONSTRAINT_CATALOG - 293)) | (1L << (CONSTRAINT_SCHEMA - 293)) | (1L << (CONSTRAINT_NAME - 293)) | (1L << (CURSOR_NAME - 293)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5294);
			match(EQUAL_SYMBOL);
			setState(5297);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case STRING_CHARSET_NAME:
				{
				setState(5295);
				stringLiteral();
				}
				break;
			case DECIMAL_LITERAL:
				{
				setState(5296);
				match(DECIMAL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(GBaseParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(GBaseParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(GBaseParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(GBaseParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(GBaseParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(GBaseParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(GBaseParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(GBaseParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(GBaseParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(GBaseParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(GBaseParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5299);
			match(GET);
			setState(5301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(5300);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5303);
			match(DIAGNOSTICS);
			setState(5335);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case DATABASE:
			case DIAGNOSTICS:
			case LEFT:
			case NUMBER:
			case RIGHT:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				{
				setState(5304);
				variableClause();
				setState(5305);
				match(EQUAL_SYMBOL);
				setState(5306);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5307);
					match(COMMA);
					setState(5308);
					variableClause();
					setState(5309);
					match(EQUAL_SYMBOL);
					setState(5310);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(5316);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(5317);
				match(CONDITION);
				setState(5320);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
					{
					setState(5318);
					decimalLiteral();
					}
					break;
				case CURRENT:
				case DATABASE:
				case DIAGNOSTICS:
				case LEFT:
				case NUMBER:
				case RIGHT:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5319);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5322);
				variableClause();
				setState(5323);
				match(EQUAL_SYMBOL);
				setState(5324);
				diagnosticsConditionInformationName();
				setState(5332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5325);
					match(COMMA);
					setState(5326);
					variableClause();
					setState(5327);
					match(EQUAL_SYMBOL);
					setState(5328);
					diagnosticsConditionInformationName();
					}
					}
					setState(5334);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(GBaseParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(GBaseParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(GBaseParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(GBaseParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(GBaseParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(GBaseParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(GBaseParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(GBaseParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(GBaseParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(GBaseParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(GBaseParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(GBaseParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(GBaseParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5337);
			_la = _input.LA(1);
			if ( !(((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (CLASS_ORIGIN - 293)) | (1L << (COLUMN_NAME - 293)) | (1L << (CONSTRAINT_CATALOG - 293)) | (1L << (CONSTRAINT_SCHEMA - 293)) | (1L << (CONSTRAINT_NAME - 293)) | (1L << (CURSOR_NAME - 293)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 501)) & ~0x3f) == 0 && ((1L << (_la - 501)) & ((1L << (RETURNED_SQLSTATE - 501)) | (1L << (SUBCLASS_ORIGIN - 501)) | (1L << (TABLE_NAME - 501)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_describeObjectClause);
		try {
			setState(5349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5344);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5339);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5340);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5341);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5342);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5343);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5346);
				match(FOR);
				setState(5347);
				match(CONNECTION);
				setState(5348);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(GBaseParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			uid();
			setState(5355);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				setState(5352);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5353);
				match(DOT);
				setState(5354);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5357);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_fullColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5359);
			uid();
			setState(5364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				setState(5360);
				dottedId();
				setState(5362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(5361);
					dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(5366);
				uid();
				}
				break;
			case 2:
				{
				setState(5367);
				match(STRING_LITERAL);
				}
				break;
			}
			setState(5374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5370);
				match(LR_BRACKET);
				setState(5371);
				decimalLiteral();
				setState(5372);
				match(RR_BRACKET);
				}
			}

			setState(5377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5376);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(GBaseParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5379);
			_la = _input.LA(1);
			if ( !(((((_la - 1005)) & ~0x3f) == 0 && ((1L << (_la - 1005)) & ((1L << (STRING_LITERAL - 1005)) | (1L << (ID - 1005)) | (1L << (STRING_USER_NAME - 1005)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(GBaseParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(GBaseParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_charsetName);
		try {
			setState(5387);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5383);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5384);
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5385);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5386);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_collationName);
		try {
			setState(5391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5389);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5390);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(GBaseParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(GBaseParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(GBaseParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(GBaseParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(GBaseParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(GBaseParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(GBaseParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(GBaseParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(GBaseParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(GBaseParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(GBaseParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5393);
			_la = _input.LA(1);
			if ( !(((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (ARCHIVE - 646)) | (1L << (BLACKHOLE - 646)) | (1L << (CSV - 646)) | (1L << (FEDERATED - 646)) | (1L << (INNODB - 646)) | (1L << (MEMORY - 646)) | (1L << (MRG_MYISAM - 646)) | (1L << (MYISAM - 646)) | (1L << (NDB - 646)) | (1L << (NDBCLUSTER - 646)) | (1L << (PERFORMANCE_SCHEMA - 646)) | (1L << (TOKUDB - 646)))) != 0) || ((((_la - 1005)) & ~0x3f) == 0 && ((1L << (_la - 1005)) & ((1L << (STRING_LITERAL - 1005)) | (1L << (ID - 1005)) | (1L << (REVERSE_QUOTE_ID - 1005)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(GBaseParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(GBaseParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(GBaseParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(GBaseParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5395);
			decimalLiteral();
			setState(5396);
			match(MINUS);
			setState(5397);
			decimalLiteral();
			setState(5398);
			match(MINUS);
			setState(5399);
			decimalLiteral();
			setState(5400);
			match(MINUS);
			setState(5401);
			decimalLiteral();
			setState(5402);
			match(MINUS);
			setState(5403);
			decimalLiteral();
			setState(5409); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5404);
				match(COLON_SYMB);
				setState(5405);
				decimalLiteral();
				setState(5406);
				match(MINUS);
				setState(5407);
				decimalLiteral();
				}
				}
				setState(5411); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5413);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5414);
				match(COMMA);
				setState(5415);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5416);
					match(COMMA);
					setState(5417);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(GBaseParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(GBaseParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(GBaseParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_xuidStringId);
		int _la;
		try {
			setState(5429);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5422);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5423);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5425); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5424);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5427); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_authPlugin);
		try {
			setState(5433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5431);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5432);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(GBaseParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(GBaseParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_uid);
		try {
			setState(5438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5435);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5436);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5437);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(GBaseParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_simpleId);
		try {
			setState(5449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5440);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5441);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5442);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5443);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5444);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5445);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5446);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5447);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5448);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(GBaseParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(GBaseParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_dottedId);
		try {
			setState(5454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5451);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5452);
				match(DOT);
				setState(5453);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(GBaseParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(GBaseParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(GBaseParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(GBaseParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5456);
			_la = _input.LA(1);
			if ( !(((((_la - 995)) & ~0x3f) == 0 && ((1L << (_la - 995)) & ((1L << (ZERO_DECIMAL - 995)) | (1L << (ONE_DECIMAL - 995)) | (1L << (TWO_DECIMAL - 995)) | (1L << (DECIMAL_LITERAL - 995)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(GBaseParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_fileSizeLiteral);
		try {
			setState(5460);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5458);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5459);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(GBaseParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(GBaseParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5467);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5463);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5462);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5465);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5466);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5470); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5469);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5472); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,795,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5479);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5475);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5474);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5477);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5478);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(5481);
					match(COLLATE);
					setState(5482);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(GBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(GBaseParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5487);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(GBaseParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(GBaseParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5489);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5492);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(GBaseParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5494);
				match(NOT);
				}
			}

			setState(5497);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(GBaseParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(GBaseParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(GBaseParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_constant);
		int _la;
		try {
			setState(5511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5499);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5500);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5501);
				match(MINUS);
				setState(5502);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5503);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5504);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5505);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5506);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5507);
					match(NOT);
					}
				}

				setState(5510);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(GBaseParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(GBaseParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(GBaseParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(GBaseParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(GBaseParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(GBaseParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(GBaseParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(GBaseParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(GBaseParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(GBaseParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(GBaseParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(GBaseParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(GBaseParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(GBaseParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(GBaseParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(GBaseParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(GBaseParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(GBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(GBaseParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(GBaseParser.BIGINT, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(GBaseParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(GBaseParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(GBaseParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(GBaseParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(GBaseParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(GBaseParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(GBaseParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(GBaseParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(GBaseParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(GBaseParser.FLOAT, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(GBaseParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GBaseParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(GBaseParser.VARBINARY, 0); }
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(GBaseParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(GBaseParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(GBaseParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(GBaseParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(GBaseParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(GBaseParser.NVARCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(GBaseParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(GBaseParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(GBaseParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(GBaseParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(GBaseParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(GBaseParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(GBaseParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GBaseParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(GBaseParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_dataType);
		int _la;
		try {
			setState(5619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5513);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (CHAR - 196)) | (1L << (VARCHAR - 196)) | (1L << (NVARCHAR - 196)) | (1L << (TINYTEXT - 196)) | (1L << (TEXT - 196)) | (1L << (MEDIUMTEXT - 196)) | (1L << (LONGTEXT - 196)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(5514);
					lengthOneDimension();
					}
					break;
				}
				setState(5518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5517);
					match(BINARY);
					}
				}

				setState(5526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(5523);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5520);
						match(CHARACTER);
						setState(5521);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5522);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5525);
					charsetName();
					}
					break;
				}
				setState(5530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(5528);
					match(COLLATE);
					setState(5529);
					collationName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5532);
				match(NATIONAL);
				setState(5533);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(5534);
					lengthOneDimension();
					}
					break;
				}
				setState(5538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5537);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5540);
				match(NCHAR);
				setState(5541);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(5543);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(5542);
					lengthOneDimension();
					}
					break;
				}
				setState(5546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5545);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5548);
				match(NATIONAL);
				setState(5549);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5550);
				match(VARYING);
				setState(5552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(5551);
					lengthOneDimension();
					}
					break;
				}
				setState(5555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5554);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5557);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (TINYINT - 178)) | (1L << (SMALLINT - 178)) | (1L << (MEDIUMINT - 178)) | (1L << (INT - 178)) | (1L << (INTEGER - 178)) | (1L << (BIGINT - 178)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(5558);
					lengthOneDimension();
					}
					break;
				}
				setState(5562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(5561);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5564);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5567);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(5569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
				case 1:
					{
					setState(5568);
					lengthTwoDimension();
					}
					break;
				}
				setState(5572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(5571);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5574);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5577);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(5579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5578);
					match(PRECISION);
					}
				}

				setState(5582);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
				case 1:
					{
					setState(5581);
					lengthTwoDimension();
					}
					break;
				}
				setState(5585);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
				case 1:
					{
					setState(5584);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5587);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5590);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (FLOAT - 187)) | (1L << (DECIMAL - 187)) | (1L << (DEC - 187)) | (1L << (NUMERIC - 187)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
				case 1:
					{
					setState(5591);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5595);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(5594);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5597);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5600);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TINYBLOB - 191)) | (1L << (BLOB - 191)) | (1L << (MEDIUMBLOB - 191)) | (1L << (LONGBLOB - 191)) | (1L << (SERIAL - 191)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5601);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (DATETIME - 192)) | (1L << (YEAR - 192)) | (1L << (BINARY - 192)) | (1L << (VARBINARY - 192)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5603);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
				case 1:
					{
					setState(5602);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5605);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5606);
				collectionOptions();
				setState(5608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5607);
					match(BINARY);
					}
				}

				setState(5616);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(5613);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5610);
						match(CHARACTER);
						setState(5611);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5612);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5615);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5618);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (GEOMETRYCOLLECTION - 662)) | (1L << (GEOMCOLLECTION - 662)) | (1L << (GEOMETRY - 662)) | (1L << (LINESTRING - 662)) | (1L << (MULTILINESTRING - 662)) | (1L << (MULTIPOINT - 662)) | (1L << (MULTIPOLYGON - 662)) | (1L << (POINT - 662)) | (1L << (POLYGON - 662)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5621);
			match(LR_BRACKET);
			setState(5622);
			match(STRING_LITERAL);
			setState(5627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5623);
				match(COMMA);
				setState(5624);
				match(STRING_LITERAL);
				}
				}
				setState(5629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5630);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(GBaseParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(GBaseParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public TerminalNode DECIMAL() { return getToken(GBaseParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(GBaseParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(GBaseParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(GBaseParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_convertedDataType);
		int _la;
		try {
			setState(5657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5632);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5633);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5636);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5637);
					lengthOneDimension();
					}
				}

				setState(5646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(5643);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5640);
						match(CHARACTER);
						setState(5641);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5642);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5645);
					charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				enterOuterAlt(_localctx, 3);
				{
				setState(5648);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5649);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5650);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5653);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5654);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5659);
			match(LR_BRACKET);
			setState(5660);
			decimalLiteral();
			setState(5661);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5663);
			match(LR_BRACKET);
			setState(5664);
			decimalLiteral();
			setState(5665);
			match(COMMA);
			setState(5666);
			decimalLiteral();
			setState(5667);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5669);
			match(LR_BRACKET);
			setState(5670);
			decimalLiteral();
			setState(5673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5671);
				match(COMMA);
				setState(5672);
				decimalLiteral();
				}
			}

			setState(5675);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5677);
			uid();
			setState(5682);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5678);
					match(COMMA);
					setState(5679);
					uid();
					}
					} 
				}
				setState(5684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,842,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5685);
			tableName();
			setState(5690);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5686);
					match(COMMA);
					setState(5687);
					tableName();
					}
					} 
				}
				setState(5692);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5693);
			match(LR_BRACKET);
			setState(5694);
			indexColumnName();
			setState(5699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5695);
				match(COMMA);
				setState(5696);
				indexColumnName();
				}
				}
				setState(5701);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5702);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5704);
			expression(0);
			setState(5709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5705);
				match(COMMA);
				setState(5706);
				expression(0);
				}
				}
				setState(5711);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5712);
			expressionOrDefault();
			setState(5717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5713);
				match(COMMA);
				setState(5714);
				expressionOrDefault();
				}
				}
				setState(5719);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5720);
			constant();
			setState(5725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5721);
				match(COMMA);
				setState(5722);
				constant();
				}
				}
				setState(5727);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(GBaseParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(GBaseParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5728);
			match(STRING_LITERAL);
			setState(5733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5729);
				match(COMMA);
				setState(5730);
				match(STRING_LITERAL);
				}
				}
				setState(5735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(GBaseParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(GBaseParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5736);
			match(LOCAL_ID);
			setState(5741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5737);
				match(COMMA);
				setState(5738);
				match(LOCAL_ID);
				}
				}
				setState(5743);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(GBaseParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(GBaseParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(GBaseParser.UPDATE, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_defaultValue);
		try {
			setState(5755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5744);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
				case 1:
					{
					setState(5745);
					unaryOperator();
					}
					break;
				}
				setState(5748);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5749);
				currentTimestamp();
				setState(5753);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5750);
					match(ON);
					setState(5751);
					match(UPDATE);
					setState(5752);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(GBaseParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(GBaseParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(GBaseParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5771);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(5757);
				_la = _input.LA(1);
				if ( !(((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (CURRENT_TIMESTAMP - 249)) | (1L << (LOCALTIME - 249)) | (1L << (LOCALTIMESTAMP - 249)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
				case 1:
					{
					setState(5758);
					match(LR_BRACKET);
					setState(5760);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 995)) & ~0x3f) == 0 && ((1L << (_la - 995)) & ((1L << (ZERO_DECIMAL - 995)) | (1L << (ONE_DECIMAL - 995)) | (1L << (TWO_DECIMAL - 995)) | (1L << (DECIMAL_LITERAL - 995)))) != 0)) {
						{
						setState(5759);
						decimalLiteral();
						}
					}

					setState(5762);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(5765);
				match(NOW);
				setState(5766);
				match(LR_BRACKET);
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 995)) & ~0x3f) == 0 && ((1L << (_la - 995)) & ((1L << (ZERO_DECIMAL - 995)) | (1L << (ONE_DECIMAL - 995)) | (1L << (TWO_DECIMAL - 995)) | (1L << (DECIMAL_LITERAL - 995)))) != 0)) {
					{
					setState(5767);
					decimalLiteral();
					}
				}

				setState(5770);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(GBaseParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_expressionOrDefault);
		try {
			setState(5775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DIAGNOSTICS:
			case EXISTS:
			case FALSE:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case NUMBER:
			case REPLACE:
			case RIGHT:
			case STACKED:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case RANK:
			case DENSE_RANK:
			case ROW_NUMBER:
			case LEAD:
			case LAG:
			case PERCENT_RANK:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case SESSION_VARIABLES_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5773);
				expression(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5774);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(GBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GBaseParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5777);
			match(IF);
			setState(5778);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(GBaseParser.IF, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GBaseParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5780);
			match(IF);
			setState(5781);
			match(NOT);
			setState(5782);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OlapFunctionCallContext extends FunctionCallContext {
		public OlapFunctionContext olapFunction() {
			return getRuleContext(OlapFunctionContext.class,0);
		}
		public OlapFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOlapFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOlapFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOlapFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_functionCall);
		int _la;
		try {
			setState(5802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5784);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5785);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5786);
				scalarFunctionName();
				setState(5787);
				match(LR_BRACKET);
				setState(5789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (RANK - 200)) | (1L << (DENSE_RANK - 200)) | (1L << (ROW_NUMBER - 200)) | (1L << (LEAD - 200)) | (1L << (LAG - 200)) | (1L << (PERCENT_RANK - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (UTC_TIME - 264)) | (1L << (UTC_TIMESTAMP - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)))) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (INTERNAL - 587)) | (1L << (QUARTER - 587)) | (1L << (MONTH - 587)) | (1L << (DAY - 587)) | (1L << (HOUR - 587)) | (1L << (MINUTE - 587)) | (1L << (WEEK - 587)) | (1L << (SECOND - 587)) | (1L << (MICROSECOND - 587)) | (1L << (TABLES - 587)) | (1L << (ROUTINE - 587)) | (1L << (EXECUTE - 587)) | (1L << (FILE - 587)) | (1L << (PROCESS - 587)) | (1L << (RELOAD - 587)) | (1L << (SHUTDOWN - 587)) | (1L << (SUPER - 587)) | (1L << (PRIVILEGES - 587)) | (1L << (SESSION_VARIABLES_ADMIN - 587)) | (1L << (ARMSCII8 - 587)) | (1L << (ASCII - 587)) | (1L << (BIG5 - 587)) | (1L << (CP1250 - 587)) | (1L << (CP1251 - 587)) | (1L << (CP1256 - 587)) | (1L << (CP1257 - 587)) | (1L << (CP850 - 587)) | (1L << (CP852 - 587)) | (1L << (CP866 - 587)) | (1L << (CP932 - 587)) | (1L << (DEC8 - 587)) | (1L << (EUCJPMS - 587)) | (1L << (EUCKR - 587)) | (1L << (GB2312 - 587)) | (1L << (GBK - 587)) | (1L << (GEOSTD8 - 587)) | (1L << (GREEK - 587)) | (1L << (HEBREW - 587)) | (1L << (HP8 - 587)) | (1L << (KEYBCS2 - 587)) | (1L << (KOI8R - 587)) | (1L << (KOI8U - 587)) | (1L << (LATIN1 - 587)) | (1L << (LATIN2 - 587)) | (1L << (LATIN5 - 587)) | (1L << (LATIN7 - 587)) | (1L << (MACCE - 587)) | (1L << (MACROMAN - 587)) | (1L << (SJIS - 587)) | (1L << (SWE7 - 587)) | (1L << (TIS620 - 587)) | (1L << (UCS2 - 587)) | (1L << (UJIS - 587)) | (1L << (UTF16 - 587)) | (1L << (UTF16LE - 587)) | (1L << (UTF32 - 587)) | (1L << (UTF8 - 587)) | (1L << (UTF8MB3 - 587)) | (1L << (UTF8MB4 - 587)) | (1L << (ARCHIVE - 587)) | (1L << (BLACKHOLE - 587)) | (1L << (CSV - 587)) | (1L << (FEDERATED - 587)) | (1L << (INNODB - 587)))) != 0) || ((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (MEMORY - 651)) | (1L << (MRG_MYISAM - 651)) | (1L << (MYISAM - 651)) | (1L << (NDB - 651)) | (1L << (NDBCLUSTER - 651)) | (1L << (PERFORMANCE_SCHEMA - 651)) | (1L << (TOKUDB - 651)) | (1L << (REPEATABLE - 651)) | (1L << (COMMITTED - 651)) | (1L << (UNCOMMITTED - 651)) | (1L << (SERIALIZABLE - 651)) | (1L << (GEOMETRYCOLLECTION - 651)) | (1L << (LINESTRING - 651)) | (1L << (MULTILINESTRING - 651)) | (1L << (MULTIPOINT - 651)) | (1L << (MULTIPOLYGON - 651)) | (1L << (POINT - 651)) | (1L << (POLYGON - 651)) | (1L << (ABS - 651)) | (1L << (ACOS - 651)) | (1L << (ADDDATE - 651)) | (1L << (ADDTIME - 651)) | (1L << (AES_DECRYPT - 651)) | (1L << (AES_ENCRYPT - 651)) | (1L << (AREA - 651)) | (1L << (ASBINARY - 651)) | (1L << (ASIN - 651)) | (1L << (ASTEXT - 651)) | (1L << (ASWKB - 651)) | (1L << (ASWKT - 651)) | (1L << (ASYMMETRIC_DECRYPT - 651)) | (1L << (ASYMMETRIC_DERIVE - 651)) | (1L << (ASYMMETRIC_ENCRYPT - 651)) | (1L << (ASYMMETRIC_SIGN - 651)) | (1L << (ASYMMETRIC_VERIFY - 651)) | (1L << (ATAN - 651)) | (1L << (ATAN2 - 651)) | (1L << (BENCHMARK - 651)) | (1L << (BIN - 651)) | (1L << (BIT_COUNT - 651)) | (1L << (BIT_LENGTH - 651)) | (1L << (BUFFER - 651)) | (1L << (CATALOG_NAME - 651)) | (1L << (CEIL - 651)) | (1L << (CEILING - 651)) | (1L << (CENTROID - 651)) | (1L << (CHARACTER_LENGTH - 651)) | (1L << (CHARSET - 651)) | (1L << (CHAR_LENGTH - 651)) | (1L << (COERCIBILITY - 651)) | (1L << (COLLATION - 651)) | (1L << (COMPRESS - 651)) | (1L << (CONCAT - 651)) | (1L << (CONCAT_WS - 651)) | (1L << (CONNECTION_ID - 651)) | (1L << (CONV - 651)) | (1L << (CONVERT_TZ - 651)) | (1L << (COS - 651)) | (1L << (COT - 651)) | (1L << (CRC32 - 651)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 651)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 651)))) != 0) || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (CREATE_DH_PARAMETERS - 715)) | (1L << (CREATE_DIGEST - 715)) | (1L << (CROSSES - 715)) | (1L << (DATEDIFF - 715)) | (1L << (DATE_FORMAT - 715)) | (1L << (DAYNAME - 715)) | (1L << (DAYOFMONTH - 715)) | (1L << (DAYOFWEEK - 715)) | (1L << (DAYOFYEAR - 715)) | (1L << (DECODE - 715)) | (1L << (DEGREES - 715)) | (1L << (DES_DECRYPT - 715)) | (1L << (DES_ENCRYPT - 715)) | (1L << (DIMENSION - 715)) | (1L << (DISJOINT - 715)) | (1L << (ELT - 715)) | (1L << (ENCODE - 715)) | (1L << (ENCRYPT - 715)) | (1L << (ENDPOINT - 715)) | (1L << (ENVELOPE - 715)) | (1L << (EQUALS - 715)) | (1L << (EXP - 715)) | (1L << (EXPORT_SET - 715)) | (1L << (EXTERIORRING - 715)) | (1L << (EXTRACTVALUE - 715)) | (1L << (FIELD - 715)) | (1L << (FIND_IN_SET - 715)) | (1L << (FLOOR - 715)) | (1L << (FORMAT - 715)) | (1L << (FOUND_ROWS - 715)) | (1L << (FROM_BASE64 - 715)) | (1L << (FROM_DAYS - 715)) | (1L << (FROM_UNIXTIME - 715)) | (1L << (GEOMCOLLFROMTEXT - 715)) | (1L << (GEOMCOLLFROMWKB - 715)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 715)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 715)) | (1L << (GEOMETRYFROMTEXT - 715)) | (1L << (GEOMETRYFROMWKB - 715)) | (1L << (GEOMETRYN - 715)) | (1L << (GEOMETRYTYPE - 715)) | (1L << (GEOMFROMTEXT - 715)) | (1L << (GEOMFROMWKB - 715)) | (1L << (GET_FORMAT - 715)) | (1L << (GET_LOCK - 715)) | (1L << (GLENGTH - 715)) | (1L << (GREATEST - 715)) | (1L << (GTID_SUBSET - 715)) | (1L << (GTID_SUBTRACT - 715)) | (1L << (HEX - 715)) | (1L << (IFNULL - 715)) | (1L << (INET6_ATON - 715)) | (1L << (INET6_NTOA - 715)) | (1L << (INET_ATON - 715)) | (1L << (INET_NTOA - 715)) | (1L << (INSTR - 715)) | (1L << (INTERIORRINGN - 715)) | (1L << (INTERSECTS - 715)) | (1L << (ISCLOSED - 715)) | (1L << (ISEMPTY - 715)) | (1L << (ISNULL - 715)) | (1L << (ISSIMPLE - 715)) | (1L << (IS_FREE_LOCK - 715)) | (1L << (IS_IPV4 - 715)))) != 0) || ((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (IS_IPV4_COMPAT - 779)) | (1L << (IS_IPV4_MAPPED - 779)) | (1L << (IS_IPV6 - 779)) | (1L << (IS_USED_LOCK - 779)) | (1L << (LAST_INSERT_ID - 779)) | (1L << (LCASE - 779)) | (1L << (LEAST - 779)) | (1L << (LENGTH - 779)) | (1L << (LINEFROMTEXT - 779)) | (1L << (LINEFROMWKB - 779)) | (1L << (LINESTRINGFROMTEXT - 779)) | (1L << (LINESTRINGFROMWKB - 779)) | (1L << (LN - 779)) | (1L << (LOAD_FILE - 779)) | (1L << (LOCATE - 779)) | (1L << (LOG - 779)) | (1L << (LOG10 - 779)) | (1L << (LOG2 - 779)) | (1L << (LOWER - 779)) | (1L << (LPAD - 779)) | (1L << (LTRIM - 779)) | (1L << (MAKEDATE - 779)) | (1L << (MAKETIME - 779)) | (1L << (MAKE_SET - 779)) | (1L << (MASTER_POS_WAIT - 779)) | (1L << (MBRCONTAINS - 779)) | (1L << (MBRDISJOINT - 779)) | (1L << (MBREQUAL - 779)) | (1L << (MBRINTERSECTS - 779)) | (1L << (MBROVERLAPS - 779)) | (1L << (MBRTOUCHES - 779)) | (1L << (MBRWITHIN - 779)) | (1L << (MD5 - 779)) | (1L << (MLINEFROMTEXT - 779)) | (1L << (MLINEFROMWKB - 779)) | (1L << (MONTHNAME - 779)) | (1L << (MPOINTFROMTEXT - 779)) | (1L << (MPOINTFROMWKB - 779)) | (1L << (MPOLYFROMTEXT - 779)) | (1L << (MPOLYFROMWKB - 779)) | (1L << (MULTILINESTRINGFROMTEXT - 779)) | (1L << (MULTILINESTRINGFROMWKB - 779)) | (1L << (MULTIPOINTFROMTEXT - 779)) | (1L << (MULTIPOINTFROMWKB - 779)) | (1L << (MULTIPOLYGONFROMTEXT - 779)) | (1L << (MULTIPOLYGONFROMWKB - 779)) | (1L << (NAME_CONST - 779)) | (1L << (NULLIF - 779)) | (1L << (NUMGEOMETRIES - 779)) | (1L << (NUMINTERIORRINGS - 779)) | (1L << (NUMPOINTS - 779)) | (1L << (OCT - 779)) | (1L << (OCTET_LENGTH - 779)) | (1L << (ORD - 779)) | (1L << (OVERLAPS - 779)) | (1L << (PERIOD_ADD - 779)) | (1L << (PERIOD_DIFF - 779)) | (1L << (PI - 779)) | (1L << (POINTFROMTEXT - 779)) | (1L << (POINTFROMWKB - 779)) | (1L << (POINTN - 779)) | (1L << (POLYFROMTEXT - 779)) | (1L << (POLYFROMWKB - 779)) | (1L << (POLYGONFROMTEXT - 779)))) != 0) || ((((_la - 843)) & ~0x3f) == 0 && ((1L << (_la - 843)) & ((1L << (POLYGONFROMWKB - 843)) | (1L << (POW - 843)) | (1L << (POWER - 843)) | (1L << (QUOTE - 843)) | (1L << (RADIANS - 843)) | (1L << (RAND - 843)) | (1L << (RANDOM_BYTES - 843)) | (1L << (RELEASE_LOCK - 843)) | (1L << (REVERSE - 843)) | (1L << (ROUND - 843)) | (1L << (ROW_COUNT - 843)) | (1L << (RPAD - 843)) | (1L << (RTRIM - 843)) | (1L << (SEC_TO_TIME - 843)) | (1L << (SESSION_USER - 843)) | (1L << (SHA - 843)) | (1L << (SHA1 - 843)) | (1L << (SHA2 - 843)) | (1L << (SCHEMA_NAME - 843)) | (1L << (SIGN - 843)) | (1L << (SIN - 843)) | (1L << (SLEEP - 843)) | (1L << (SOUNDEX - 843)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 843)) | (1L << (SQRT - 843)) | (1L << (SRID - 843)) | (1L << (STARTPOINT - 843)) | (1L << (STRCMP - 843)) | (1L << (STR_TO_DATE - 843)) | (1L << (ST_AREA - 843)) | (1L << (ST_ASBINARY - 843)) | (1L << (ST_ASTEXT - 843)) | (1L << (ST_ASWKB - 843)) | (1L << (ST_ASWKT - 843)) | (1L << (ST_BUFFER - 843)) | (1L << (ST_CENTROID - 843)) | (1L << (ST_CONTAINS - 843)) | (1L << (ST_CROSSES - 843)) | (1L << (ST_DIFFERENCE - 843)) | (1L << (ST_DIMENSION - 843)) | (1L << (ST_DISJOINT - 843)) | (1L << (ST_DISTANCE - 843)) | (1L << (ST_ENDPOINT - 843)) | (1L << (ST_ENVELOPE - 843)) | (1L << (ST_EQUALS - 843)) | (1L << (ST_EXTERIORRING - 843)) | (1L << (ST_GEOMCOLLFROMTEXT - 843)) | (1L << (ST_GEOMCOLLFROMTXT - 843)) | (1L << (ST_GEOMCOLLFROMWKB - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 843)) | (1L << (ST_GEOMETRYFROMTEXT - 843)) | (1L << (ST_GEOMETRYFROMWKB - 843)) | (1L << (ST_GEOMETRYN - 843)) | (1L << (ST_GEOMETRYTYPE - 843)) | (1L << (ST_GEOMFROMTEXT - 843)) | (1L << (ST_GEOMFROMWKB - 843)) | (1L << (ST_INTERIORRINGN - 843)) | (1L << (ST_INTERSECTION - 843)) | (1L << (ST_INTERSECTS - 843)) | (1L << (ST_ISCLOSED - 843)) | (1L << (ST_ISEMPTY - 843)) | (1L << (ST_ISSIMPLE - 843)) | (1L << (ST_LINEFROMTEXT - 843)))) != 0) || ((((_la - 907)) & ~0x3f) == 0 && ((1L << (_la - 907)) & ((1L << (ST_LINEFROMWKB - 907)) | (1L << (ST_LINESTRINGFROMTEXT - 907)) | (1L << (ST_LINESTRINGFROMWKB - 907)) | (1L << (ST_NUMGEOMETRIES - 907)) | (1L << (ST_NUMINTERIORRING - 907)) | (1L << (ST_NUMINTERIORRINGS - 907)) | (1L << (ST_NUMPOINTS - 907)) | (1L << (ST_OVERLAPS - 907)) | (1L << (ST_POINTFROMTEXT - 907)) | (1L << (ST_POINTFROMWKB - 907)) | (1L << (ST_POINTN - 907)) | (1L << (ST_POLYFROMTEXT - 907)) | (1L << (ST_POLYFROMWKB - 907)) | (1L << (ST_POLYGONFROMTEXT - 907)) | (1L << (ST_POLYGONFROMWKB - 907)) | (1L << (ST_SRID - 907)) | (1L << (ST_STARTPOINT - 907)) | (1L << (ST_SYMDIFFERENCE - 907)) | (1L << (ST_TOUCHES - 907)) | (1L << (ST_UNION - 907)) | (1L << (ST_WITHIN - 907)) | (1L << (ST_X - 907)) | (1L << (ST_Y - 907)) | (1L << (SUBDATE - 907)) | (1L << (SUBSTRING_INDEX - 907)) | (1L << (SUBTIME - 907)) | (1L << (SYSTEM_USER - 907)) | (1L << (TAN - 907)) | (1L << (TIMEDIFF - 907)) | (1L << (TIMESTAMPADD - 907)) | (1L << (TIMESTAMPDIFF - 907)) | (1L << (TIME_FORMAT - 907)) | (1L << (TIME_TO_SEC - 907)) | (1L << (TOUCHES - 907)) | (1L << (TO_BASE64 - 907)) | (1L << (TO_DAYS - 907)) | (1L << (TO_SECONDS - 907)) | (1L << (UCASE - 907)) | (1L << (UNCOMPRESS - 907)) | (1L << (UNCOMPRESSED_LENGTH - 907)) | (1L << (UNHEX - 907)) | (1L << (UNIX_TIMESTAMP - 907)) | (1L << (UPDATEXML - 907)) | (1L << (UPPER - 907)) | (1L << (UUID - 907)) | (1L << (UUID_SHORT - 907)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 907)) | (1L << (VERSION - 907)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 907)) | (1L << (WEEKDAY - 907)) | (1L << (WEEKOFYEAR - 907)) | (1L << (WEIGHT_STRING - 907)) | (1L << (WITHIN - 907)) | (1L << (YEARWEEK - 907)) | (1L << (Y_FUNCTION - 907)) | (1L << (X_FUNCTION - 907)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (PLUS - 975)) | (1L << (MINUS - 975)) | (1L << (EXCLAMATION_SYMBOL - 975)) | (1L << (BIT_NOT_OP - 975)) | (1L << (LR_BRACKET - 975)) | (1L << (ZERO_DECIMAL - 975)) | (1L << (ONE_DECIMAL - 975)) | (1L << (TWO_DECIMAL - 975)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 975)) | (1L << (START_NATIONAL_STRING_LITERAL - 975)) | (1L << (STRING_LITERAL - 975)) | (1L << (DECIMAL_LITERAL - 975)) | (1L << (HEXADECIMAL_LITERAL - 975)) | (1L << (REAL_LITERAL - 975)) | (1L << (NULL_SPEC_LITERAL - 975)) | (1L << (BIT_STRING - 975)) | (1L << (STRING_CHARSET_NAME - 975)) | (1L << (ID - 975)) | (1L << (REVERSE_QUOTE_ID - 975)) | (1L << (LOCAL_ID - 975)) | (1L << (GLOBAL_ID - 975)))) != 0)) {
					{
					setState(5788);
					functionArgs();
					}
				}

				setState(5791);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5793);
				fullId();
				setState(5794);
				match(LR_BRACKET);
				setState(5796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (RANK - 200)) | (1L << (DENSE_RANK - 200)) | (1L << (ROW_NUMBER - 200)) | (1L << (LEAD - 200)) | (1L << (LAG - 200)) | (1L << (PERCENT_RANK - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (UTC_TIME - 264)) | (1L << (UTC_TIMESTAMP - 264)) | (1L << (ACCOUNT - 264)) | (1L << (ACTION - 264)) | (1L << (AFTER - 264)) | (1L << (AGGREGATE - 264)) | (1L << (ALGORITHM - 264)) | (1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (DISCARD - 328)) | (1L << (DISK - 328)) | (1L << (DO - 328)) | (1L << (DUMPFILE - 328)) | (1L << (DUPLICATE - 328)) | (1L << (DYNAMIC - 328)) | (1L << (ENABLE - 328)) | (1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LANGUAGE - 392)) | (1L << (LAST - 392)) | (1L << (LEAVES - 392)) | (1L << (LESS - 392)) | (1L << (LEVEL - 392)) | (1L << (LIST - 392)) | (1L << (LOCAL - 392)) | (1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (OPTIONS - 456)) | (1L << (OWNER - 456)) | (1L << (PACK_KEYS - 456)) | (1L << (PAGE - 456)) | (1L << (PARSER - 456)) | (1L << (PARTIAL - 456)) | (1L << (PARTITIONING - 456)) | (1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SNAPSHOT - 520)) | (1L << (SOCKET - 520)) | (1L << (SOME - 520)) | (1L << (SONAME - 520)) | (1L << (SOUNDS - 520)) | (1L << (SOURCE - 520)) | (1L << (SQL_AFTER_GTIDS - 520)) | (1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)))) != 0) || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (INTERNAL - 587)) | (1L << (QUARTER - 587)) | (1L << (MONTH - 587)) | (1L << (DAY - 587)) | (1L << (HOUR - 587)) | (1L << (MINUTE - 587)) | (1L << (WEEK - 587)) | (1L << (SECOND - 587)) | (1L << (MICROSECOND - 587)) | (1L << (TABLES - 587)) | (1L << (ROUTINE - 587)) | (1L << (EXECUTE - 587)) | (1L << (FILE - 587)) | (1L << (PROCESS - 587)) | (1L << (RELOAD - 587)) | (1L << (SHUTDOWN - 587)) | (1L << (SUPER - 587)) | (1L << (PRIVILEGES - 587)) | (1L << (SESSION_VARIABLES_ADMIN - 587)) | (1L << (ARMSCII8 - 587)) | (1L << (ASCII - 587)) | (1L << (BIG5 - 587)) | (1L << (CP1250 - 587)) | (1L << (CP1251 - 587)) | (1L << (CP1256 - 587)) | (1L << (CP1257 - 587)) | (1L << (CP850 - 587)) | (1L << (CP852 - 587)) | (1L << (CP866 - 587)) | (1L << (CP932 - 587)) | (1L << (DEC8 - 587)) | (1L << (EUCJPMS - 587)) | (1L << (EUCKR - 587)) | (1L << (GB2312 - 587)) | (1L << (GBK - 587)) | (1L << (GEOSTD8 - 587)) | (1L << (GREEK - 587)) | (1L << (HEBREW - 587)) | (1L << (HP8 - 587)) | (1L << (KEYBCS2 - 587)) | (1L << (KOI8R - 587)) | (1L << (KOI8U - 587)) | (1L << (LATIN1 - 587)) | (1L << (LATIN2 - 587)) | (1L << (LATIN5 - 587)) | (1L << (LATIN7 - 587)) | (1L << (MACCE - 587)) | (1L << (MACROMAN - 587)) | (1L << (SJIS - 587)) | (1L << (SWE7 - 587)) | (1L << (TIS620 - 587)) | (1L << (UCS2 - 587)) | (1L << (UJIS - 587)) | (1L << (UTF16 - 587)) | (1L << (UTF16LE - 587)) | (1L << (UTF32 - 587)) | (1L << (UTF8 - 587)) | (1L << (UTF8MB3 - 587)) | (1L << (UTF8MB4 - 587)) | (1L << (ARCHIVE - 587)) | (1L << (BLACKHOLE - 587)) | (1L << (CSV - 587)) | (1L << (FEDERATED - 587)) | (1L << (INNODB - 587)))) != 0) || ((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (MEMORY - 651)) | (1L << (MRG_MYISAM - 651)) | (1L << (MYISAM - 651)) | (1L << (NDB - 651)) | (1L << (NDBCLUSTER - 651)) | (1L << (PERFORMANCE_SCHEMA - 651)) | (1L << (TOKUDB - 651)) | (1L << (REPEATABLE - 651)) | (1L << (COMMITTED - 651)) | (1L << (UNCOMMITTED - 651)) | (1L << (SERIALIZABLE - 651)) | (1L << (GEOMETRYCOLLECTION - 651)) | (1L << (LINESTRING - 651)) | (1L << (MULTILINESTRING - 651)) | (1L << (MULTIPOINT - 651)) | (1L << (MULTIPOLYGON - 651)) | (1L << (POINT - 651)) | (1L << (POLYGON - 651)) | (1L << (ABS - 651)) | (1L << (ACOS - 651)) | (1L << (ADDDATE - 651)) | (1L << (ADDTIME - 651)) | (1L << (AES_DECRYPT - 651)) | (1L << (AES_ENCRYPT - 651)) | (1L << (AREA - 651)) | (1L << (ASBINARY - 651)) | (1L << (ASIN - 651)) | (1L << (ASTEXT - 651)) | (1L << (ASWKB - 651)) | (1L << (ASWKT - 651)) | (1L << (ASYMMETRIC_DECRYPT - 651)) | (1L << (ASYMMETRIC_DERIVE - 651)) | (1L << (ASYMMETRIC_ENCRYPT - 651)) | (1L << (ASYMMETRIC_SIGN - 651)) | (1L << (ASYMMETRIC_VERIFY - 651)) | (1L << (ATAN - 651)) | (1L << (ATAN2 - 651)) | (1L << (BENCHMARK - 651)) | (1L << (BIN - 651)) | (1L << (BIT_COUNT - 651)) | (1L << (BIT_LENGTH - 651)) | (1L << (BUFFER - 651)) | (1L << (CATALOG_NAME - 651)) | (1L << (CEIL - 651)) | (1L << (CEILING - 651)) | (1L << (CENTROID - 651)) | (1L << (CHARACTER_LENGTH - 651)) | (1L << (CHARSET - 651)) | (1L << (CHAR_LENGTH - 651)) | (1L << (COERCIBILITY - 651)) | (1L << (COLLATION - 651)) | (1L << (COMPRESS - 651)) | (1L << (CONCAT - 651)) | (1L << (CONCAT_WS - 651)) | (1L << (CONNECTION_ID - 651)) | (1L << (CONV - 651)) | (1L << (CONVERT_TZ - 651)) | (1L << (COS - 651)) | (1L << (COT - 651)) | (1L << (CRC32 - 651)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 651)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 651)))) != 0) || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (CREATE_DH_PARAMETERS - 715)) | (1L << (CREATE_DIGEST - 715)) | (1L << (CROSSES - 715)) | (1L << (DATEDIFF - 715)) | (1L << (DATE_FORMAT - 715)) | (1L << (DAYNAME - 715)) | (1L << (DAYOFMONTH - 715)) | (1L << (DAYOFWEEK - 715)) | (1L << (DAYOFYEAR - 715)) | (1L << (DECODE - 715)) | (1L << (DEGREES - 715)) | (1L << (DES_DECRYPT - 715)) | (1L << (DES_ENCRYPT - 715)) | (1L << (DIMENSION - 715)) | (1L << (DISJOINT - 715)) | (1L << (ELT - 715)) | (1L << (ENCODE - 715)) | (1L << (ENCRYPT - 715)) | (1L << (ENDPOINT - 715)) | (1L << (ENVELOPE - 715)) | (1L << (EQUALS - 715)) | (1L << (EXP - 715)) | (1L << (EXPORT_SET - 715)) | (1L << (EXTERIORRING - 715)) | (1L << (EXTRACTVALUE - 715)) | (1L << (FIELD - 715)) | (1L << (FIND_IN_SET - 715)) | (1L << (FLOOR - 715)) | (1L << (FORMAT - 715)) | (1L << (FOUND_ROWS - 715)) | (1L << (FROM_BASE64 - 715)) | (1L << (FROM_DAYS - 715)) | (1L << (FROM_UNIXTIME - 715)) | (1L << (GEOMCOLLFROMTEXT - 715)) | (1L << (GEOMCOLLFROMWKB - 715)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 715)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 715)) | (1L << (GEOMETRYFROMTEXT - 715)) | (1L << (GEOMETRYFROMWKB - 715)) | (1L << (GEOMETRYN - 715)) | (1L << (GEOMETRYTYPE - 715)) | (1L << (GEOMFROMTEXT - 715)) | (1L << (GEOMFROMWKB - 715)) | (1L << (GET_FORMAT - 715)) | (1L << (GET_LOCK - 715)) | (1L << (GLENGTH - 715)) | (1L << (GREATEST - 715)) | (1L << (GTID_SUBSET - 715)) | (1L << (GTID_SUBTRACT - 715)) | (1L << (HEX - 715)) | (1L << (IFNULL - 715)) | (1L << (INET6_ATON - 715)) | (1L << (INET6_NTOA - 715)) | (1L << (INET_ATON - 715)) | (1L << (INET_NTOA - 715)) | (1L << (INSTR - 715)) | (1L << (INTERIORRINGN - 715)) | (1L << (INTERSECTS - 715)) | (1L << (ISCLOSED - 715)) | (1L << (ISEMPTY - 715)) | (1L << (ISNULL - 715)) | (1L << (ISSIMPLE - 715)) | (1L << (IS_FREE_LOCK - 715)) | (1L << (IS_IPV4 - 715)))) != 0) || ((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (IS_IPV4_COMPAT - 779)) | (1L << (IS_IPV4_MAPPED - 779)) | (1L << (IS_IPV6 - 779)) | (1L << (IS_USED_LOCK - 779)) | (1L << (LAST_INSERT_ID - 779)) | (1L << (LCASE - 779)) | (1L << (LEAST - 779)) | (1L << (LENGTH - 779)) | (1L << (LINEFROMTEXT - 779)) | (1L << (LINEFROMWKB - 779)) | (1L << (LINESTRINGFROMTEXT - 779)) | (1L << (LINESTRINGFROMWKB - 779)) | (1L << (LN - 779)) | (1L << (LOAD_FILE - 779)) | (1L << (LOCATE - 779)) | (1L << (LOG - 779)) | (1L << (LOG10 - 779)) | (1L << (LOG2 - 779)) | (1L << (LOWER - 779)) | (1L << (LPAD - 779)) | (1L << (LTRIM - 779)) | (1L << (MAKEDATE - 779)) | (1L << (MAKETIME - 779)) | (1L << (MAKE_SET - 779)) | (1L << (MASTER_POS_WAIT - 779)) | (1L << (MBRCONTAINS - 779)) | (1L << (MBRDISJOINT - 779)) | (1L << (MBREQUAL - 779)) | (1L << (MBRINTERSECTS - 779)) | (1L << (MBROVERLAPS - 779)) | (1L << (MBRTOUCHES - 779)) | (1L << (MBRWITHIN - 779)) | (1L << (MD5 - 779)) | (1L << (MLINEFROMTEXT - 779)) | (1L << (MLINEFROMWKB - 779)) | (1L << (MONTHNAME - 779)) | (1L << (MPOINTFROMTEXT - 779)) | (1L << (MPOINTFROMWKB - 779)) | (1L << (MPOLYFROMTEXT - 779)) | (1L << (MPOLYFROMWKB - 779)) | (1L << (MULTILINESTRINGFROMTEXT - 779)) | (1L << (MULTILINESTRINGFROMWKB - 779)) | (1L << (MULTIPOINTFROMTEXT - 779)) | (1L << (MULTIPOINTFROMWKB - 779)) | (1L << (MULTIPOLYGONFROMTEXT - 779)) | (1L << (MULTIPOLYGONFROMWKB - 779)) | (1L << (NAME_CONST - 779)) | (1L << (NULLIF - 779)) | (1L << (NUMGEOMETRIES - 779)) | (1L << (NUMINTERIORRINGS - 779)) | (1L << (NUMPOINTS - 779)) | (1L << (OCT - 779)) | (1L << (OCTET_LENGTH - 779)) | (1L << (ORD - 779)) | (1L << (OVERLAPS - 779)) | (1L << (PERIOD_ADD - 779)) | (1L << (PERIOD_DIFF - 779)) | (1L << (PI - 779)) | (1L << (POINTFROMTEXT - 779)) | (1L << (POINTFROMWKB - 779)) | (1L << (POINTN - 779)) | (1L << (POLYFROMTEXT - 779)) | (1L << (POLYFROMWKB - 779)) | (1L << (POLYGONFROMTEXT - 779)))) != 0) || ((((_la - 843)) & ~0x3f) == 0 && ((1L << (_la - 843)) & ((1L << (POLYGONFROMWKB - 843)) | (1L << (POW - 843)) | (1L << (POWER - 843)) | (1L << (QUOTE - 843)) | (1L << (RADIANS - 843)) | (1L << (RAND - 843)) | (1L << (RANDOM_BYTES - 843)) | (1L << (RELEASE_LOCK - 843)) | (1L << (REVERSE - 843)) | (1L << (ROUND - 843)) | (1L << (ROW_COUNT - 843)) | (1L << (RPAD - 843)) | (1L << (RTRIM - 843)) | (1L << (SEC_TO_TIME - 843)) | (1L << (SESSION_USER - 843)) | (1L << (SHA - 843)) | (1L << (SHA1 - 843)) | (1L << (SHA2 - 843)) | (1L << (SCHEMA_NAME - 843)) | (1L << (SIGN - 843)) | (1L << (SIN - 843)) | (1L << (SLEEP - 843)) | (1L << (SOUNDEX - 843)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 843)) | (1L << (SQRT - 843)) | (1L << (SRID - 843)) | (1L << (STARTPOINT - 843)) | (1L << (STRCMP - 843)) | (1L << (STR_TO_DATE - 843)) | (1L << (ST_AREA - 843)) | (1L << (ST_ASBINARY - 843)) | (1L << (ST_ASTEXT - 843)) | (1L << (ST_ASWKB - 843)) | (1L << (ST_ASWKT - 843)) | (1L << (ST_BUFFER - 843)) | (1L << (ST_CENTROID - 843)) | (1L << (ST_CONTAINS - 843)) | (1L << (ST_CROSSES - 843)) | (1L << (ST_DIFFERENCE - 843)) | (1L << (ST_DIMENSION - 843)) | (1L << (ST_DISJOINT - 843)) | (1L << (ST_DISTANCE - 843)) | (1L << (ST_ENDPOINT - 843)) | (1L << (ST_ENVELOPE - 843)) | (1L << (ST_EQUALS - 843)) | (1L << (ST_EXTERIORRING - 843)) | (1L << (ST_GEOMCOLLFROMTEXT - 843)) | (1L << (ST_GEOMCOLLFROMTXT - 843)) | (1L << (ST_GEOMCOLLFROMWKB - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 843)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 843)) | (1L << (ST_GEOMETRYFROMTEXT - 843)) | (1L << (ST_GEOMETRYFROMWKB - 843)) | (1L << (ST_GEOMETRYN - 843)) | (1L << (ST_GEOMETRYTYPE - 843)) | (1L << (ST_GEOMFROMTEXT - 843)) | (1L << (ST_GEOMFROMWKB - 843)) | (1L << (ST_INTERIORRINGN - 843)) | (1L << (ST_INTERSECTION - 843)) | (1L << (ST_INTERSECTS - 843)) | (1L << (ST_ISCLOSED - 843)) | (1L << (ST_ISEMPTY - 843)) | (1L << (ST_ISSIMPLE - 843)) | (1L << (ST_LINEFROMTEXT - 843)))) != 0) || ((((_la - 907)) & ~0x3f) == 0 && ((1L << (_la - 907)) & ((1L << (ST_LINEFROMWKB - 907)) | (1L << (ST_LINESTRINGFROMTEXT - 907)) | (1L << (ST_LINESTRINGFROMWKB - 907)) | (1L << (ST_NUMGEOMETRIES - 907)) | (1L << (ST_NUMINTERIORRING - 907)) | (1L << (ST_NUMINTERIORRINGS - 907)) | (1L << (ST_NUMPOINTS - 907)) | (1L << (ST_OVERLAPS - 907)) | (1L << (ST_POINTFROMTEXT - 907)) | (1L << (ST_POINTFROMWKB - 907)) | (1L << (ST_POINTN - 907)) | (1L << (ST_POLYFROMTEXT - 907)) | (1L << (ST_POLYFROMWKB - 907)) | (1L << (ST_POLYGONFROMTEXT - 907)) | (1L << (ST_POLYGONFROMWKB - 907)) | (1L << (ST_SRID - 907)) | (1L << (ST_STARTPOINT - 907)) | (1L << (ST_SYMDIFFERENCE - 907)) | (1L << (ST_TOUCHES - 907)) | (1L << (ST_UNION - 907)) | (1L << (ST_WITHIN - 907)) | (1L << (ST_X - 907)) | (1L << (ST_Y - 907)) | (1L << (SUBDATE - 907)) | (1L << (SUBSTRING_INDEX - 907)) | (1L << (SUBTIME - 907)) | (1L << (SYSTEM_USER - 907)) | (1L << (TAN - 907)) | (1L << (TIMEDIFF - 907)) | (1L << (TIMESTAMPADD - 907)) | (1L << (TIMESTAMPDIFF - 907)) | (1L << (TIME_FORMAT - 907)) | (1L << (TIME_TO_SEC - 907)) | (1L << (TOUCHES - 907)) | (1L << (TO_BASE64 - 907)) | (1L << (TO_DAYS - 907)) | (1L << (TO_SECONDS - 907)) | (1L << (UCASE - 907)) | (1L << (UNCOMPRESS - 907)) | (1L << (UNCOMPRESSED_LENGTH - 907)) | (1L << (UNHEX - 907)) | (1L << (UNIX_TIMESTAMP - 907)) | (1L << (UPDATEXML - 907)) | (1L << (UPPER - 907)) | (1L << (UUID - 907)) | (1L << (UUID_SHORT - 907)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 907)) | (1L << (VERSION - 907)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 907)) | (1L << (WEEKDAY - 907)) | (1L << (WEEKOFYEAR - 907)) | (1L << (WEIGHT_STRING - 907)) | (1L << (WITHIN - 907)) | (1L << (YEARWEEK - 907)) | (1L << (Y_FUNCTION - 907)) | (1L << (X_FUNCTION - 907)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (PLUS - 975)) | (1L << (MINUS - 975)) | (1L << (EXCLAMATION_SYMBOL - 975)) | (1L << (BIT_NOT_OP - 975)) | (1L << (LR_BRACKET - 975)) | (1L << (ZERO_DECIMAL - 975)) | (1L << (ONE_DECIMAL - 975)) | (1L << (TWO_DECIMAL - 975)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 975)) | (1L << (START_NATIONAL_STRING_LITERAL - 975)) | (1L << (STRING_LITERAL - 975)) | (1L << (DECIMAL_LITERAL - 975)) | (1L << (HEXADECIMAL_LITERAL - 975)) | (1L << (REAL_LITERAL - 975)) | (1L << (NULL_SPEC_LITERAL - 975)) | (1L << (BIT_STRING - 975)) | (1L << (STRING_CHARSET_NAME - 975)) | (1L << (ID - 975)) | (1L << (REVERSE_QUOTE_ID - 975)) | (1L << (LOCAL_ID - 975)) | (1L << (GLOBAL_ID - 975)))) != 0)) {
					{
					setState(5795);
					functionArgs();
					}
				}

				setState(5798);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5800);
				passwordFunctionClause();
				}
				break;
			case 6:
				_localctx = new OlapFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5801);
				olapFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(GBaseParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(GBaseParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(GBaseParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(GBaseParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(GBaseParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(GBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(GBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(GBaseParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(GBaseParser.LOCALTIME, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(GBaseParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(GBaseParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(GBaseParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(GBaseParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(GBaseParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(GBaseParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(GBaseParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(GBaseParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(GBaseParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(GBaseParser.CAST, 0); }
		public TerminalNode AS() { return getToken(GBaseParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(GBaseParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(GBaseParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(GBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(GBaseParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(GBaseParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_specificFunction);
		int _la;
		try {
			setState(5961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5804);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (CURRENT_DATE - 247)) | (1L << (CURRENT_TIME - 247)) | (1L << (CURRENT_TIMESTAMP - 247)) | (1L << (LOCALTIME - 247)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5805);
				match(CONVERT);
				setState(5806);
				match(LR_BRACKET);
				setState(5807);
				expression(0);
				setState(5808);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(5809);
				convertedDataType();
				setState(5810);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5812);
				match(CONVERT);
				setState(5813);
				match(LR_BRACKET);
				setState(5814);
				expression(0);
				setState(5815);
				match(USING);
				setState(5816);
				charsetName();
				setState(5817);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5819);
				match(CAST);
				setState(5820);
				match(LR_BRACKET);
				setState(5821);
				expression(0);
				setState(5822);
				match(AS);
				setState(5823);
				convertedDataType();
				setState(5824);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5826);
				match(VALUES);
				setState(5827);
				match(LR_BRACKET);
				setState(5828);
				fullColumnName();
				setState(5829);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5831);
				match(CASE);
				setState(5832);
				expression(0);
				setState(5834); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5833);
					caseFuncAlternative();
					}
					}
					setState(5836); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5838);
					match(ELSE);
					setState(5839);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5842);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5844);
				match(CASE);
				setState(5846); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5845);
					caseFuncAlternative();
					}
					}
					setState(5848); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5850);
					match(ELSE);
					setState(5851);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5854);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5856);
				match(CHAR);
				setState(5857);
				match(LR_BRACKET);
				setState(5858);
				functionArgs();
				setState(5861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5859);
					match(USING);
					setState(5860);
					charsetName();
					}
				}

				setState(5863);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5865);
				match(POSITION);
				setState(5866);
				match(LR_BRACKET);
				setState(5869);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(5867);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5868);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(5871);
				match(IN);
				setState(5874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(5872);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5873);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(5876);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5878);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5879);
				match(LR_BRACKET);
				setState(5882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
				case 1:
					{
					setState(5880);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5881);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5884);
				match(FROM);
				setState(5887);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(5885);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(5886);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5889);
					match(FOR);
					setState(5892);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
					case 1:
						{
						setState(5890);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(5891);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(5896);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5898);
				match(TRIM);
				setState(5899);
				match(LR_BRACKET);
				setState(5900);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
				case 1:
					{
					setState(5901);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5902);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5905);
				match(FROM);
				setState(5908);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(5906);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5907);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5910);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5912);
				match(TRIM);
				setState(5913);
				match(LR_BRACKET);
				setState(5916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(5914);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5915);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5918);
				match(FROM);
				setState(5921);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					setState(5919);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5920);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5923);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5925);
				match(WEIGHT_STRING);
				setState(5926);
				match(LR_BRACKET);
				setState(5929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
				case 1:
					{
					setState(5927);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(5928);
					expression(0);
					}
					break;
				}
				setState(5937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5931);
					match(AS);
					setState(5932);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5933);
					match(LR_BRACKET);
					setState(5934);
					decimalLiteral();
					setState(5935);
					match(RR_BRACKET);
					}
				}

				setState(5940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(5939);
					levelsInWeightString();
					}
				}

				setState(5942);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5944);
				match(EXTRACT);
				setState(5945);
				match(LR_BRACKET);
				setState(5946);
				intervalType();
				setState(5947);
				match(FROM);
				setState(5950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
				case 1:
					{
					setState(5948);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5949);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5952);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5954);
				match(GET_FORMAT);
				setState(5955);
				match(LR_BRACKET);
				setState(5956);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5957);
				match(COMMA);
				setState(5958);
				stringLiteral();
				setState(5959);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(GBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(GBaseParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5963);
			match(WHEN);
			setState(5964);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(5965);
			match(THEN);
			setState(5966);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_levelsInWeightString);
		int _la;
		try {
			setState(5982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5968);
				match(LEVEL);
				setState(5969);
				levelInWeightListElement();
				setState(5974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5970);
					match(COMMA);
					setState(5971);
					levelInWeightListElement();
					}
					}
					setState(5976);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5977);
				match(LEVEL);
				setState(5978);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(5979);
				match(MINUS);
				setState(5980);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(GBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(GBaseParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(GBaseParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5984);
			decimalLiteral();
			setState(5986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(5985);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(GBaseParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(GBaseParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(GBaseParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(GBaseParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(GBaseParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(GBaseParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(GBaseParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(GBaseParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(GBaseParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(GBaseParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(GBaseParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(GBaseParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(GBaseParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(GBaseParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(GBaseParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(GBaseParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GBaseParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(GBaseParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5988);
				_la = _input.LA(1);
				if ( !(((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (AVG - 224)) | (1L << (MAX - 224)) | (1L << (MIN - 224)) | (1L << (SUM - 224)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5989);
				match(LR_BRACKET);
				setState(5991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(5990);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5993);
				functionArg();
				setState(5994);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5996);
				match(COUNT);
				setState(5997);
				match(LR_BRACKET);
				setState(6003);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(5998);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DIAGNOSTICS:
				case EXISTS:
				case FALSE:
				case IF:
				case INSERT:
				case INTERVAL:
				case LEFT:
				case NOT:
				case NULL_LITERAL:
				case NUMBER:
				case REPLACE:
				case RIGHT:
				case STACKED:
				case TRUE:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case RANK:
				case DENSE_RANK:
				case ROW_NUMBER:
				case LEAD:
				case LAG:
				case PERCENT_RANK:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case SESSION_VARIABLES_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case CHARSET_REVERSE_QOUTE_STRING:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(6000);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(5999);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
					}

					setState(6002);
					functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6005);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6006);
				match(COUNT);
				setState(6007);
				match(LR_BRACKET);
				setState(6008);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(6009);
				functionArgs();
				setState(6010);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6012);
				_la = _input.LA(1);
				if ( !(((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (BIT_AND - 225)) | (1L << (BIT_OR - 225)) | (1L << (BIT_XOR - 225)) | (1L << (STD - 225)) | (1L << (STDDEV - 225)) | (1L << (STDDEV_POP - 225)) | (1L << (STDDEV_SAMP - 225)) | (1L << (VAR_POP - 225)) | (1L << (VAR_SAMP - 225)) | (1L << (VARIANCE - 225)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6013);
				match(LR_BRACKET);
				setState(6015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(6014);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
				}

				setState(6017);
				functionArg();
				setState(6018);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6020);
				match(GROUP_CONCAT);
				setState(6021);
				match(LR_BRACKET);
				setState(6023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(6022);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(6025);
				functionArgs();
				setState(6036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6026);
					match(ORDER);
					setState(6027);
					match(BY);
					setState(6028);
					orderByExpression();
					setState(6033);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6029);
						match(COMMA);
						setState(6030);
						orderByExpression();
						}
						}
						setState(6035);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6038);
					match(SEPARATOR);
					setState(6039);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6042);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapFunctionContext extends ParserRuleContext {
		public List<TerminalNode> LR_BRACKET() { return getTokens(GBaseParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(GBaseParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(GBaseParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(GBaseParser.RR_BRACKET, i);
		}
		public TerminalNode OVER() { return getToken(GBaseParser.OVER, 0); }
		public TerminalNode RANK() { return getToken(GBaseParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(GBaseParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(GBaseParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(GBaseParser.SUM, 0); }
		public TerminalNode AVG() { return getToken(GBaseParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode LEAD() { return getToken(GBaseParser.LEAD, 0); }
		public TerminalNode LAG() { return getToken(GBaseParser.LAG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(GBaseParser.PERCENT_RANK, 0); }
		public TerminalNode PARTITION() { return getToken(GBaseParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(GBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(GBaseParser.BY, i);
		}
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(GBaseParser.ORDER, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public OlapFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterOlapFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitOlapFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitOlapFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapFunctionContext olapFunction() throws RecognitionException {
		OlapFunctionContext _localctx = new OlapFunctionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_olapFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6046);
			_la = _input.LA(1);
			if ( !(((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (AVG - 224)) | (1L << (COUNT - 224)) | (1L << (SUM - 224)) | (1L << (RANK - 224)) | (1L << (DENSE_RANK - 224)) | (1L << (ROW_NUMBER - 224)) | (1L << (LEAD - 224)) | (1L << (LAG - 224)) | (1L << (PERCENT_RANK - 224)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6047);
			match(LR_BRACKET);
			setState(6048);
			match(RR_BRACKET);
			setState(6049);
			match(OVER);
			setState(6050);
			match(LR_BRACKET);
			setState(6061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6051);
				match(PARTITION);
				setState(6052);
				match(BY);
				setState(6053);
				groupByItem();
				setState(6058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6054);
					match(COMMA);
					setState(6055);
					groupByItem();
					}
					}
					setState(6060);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6063);
				match(ORDER);
				setState(6064);
				match(BY);
				setState(6065);
				orderByExpression();
				setState(6070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6066);
					match(COMMA);
					setState(6067);
					orderByExpression();
					}
					}
					setState(6072);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6075);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(GBaseParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(GBaseParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(GBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(GBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(GBaseParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(GBaseParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(GBaseParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(GBaseParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(GBaseParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(GBaseParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(GBaseParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(GBaseParser.MID, 0); }
		public TerminalNode NOW() { return getToken(GBaseParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(GBaseParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(GBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(GBaseParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(GBaseParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(GBaseParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(GBaseParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(GBaseParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(GBaseParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_scalarFunctionName);
		try {
			setState(6100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case COUNT:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6077);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(6078);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6079);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6080);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6081);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(6082);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(6083);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(6084);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(6085);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(6086);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(6087);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(6088);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(6089);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(6090);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(6091);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(6092);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(6093);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(6094);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(6095);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(6096);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(6097);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(6098);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(6099);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(GBaseParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6102);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6103);
			match(LR_BRACKET);
			setState(6104);
			functionArg();
			setState(6105);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				setState(6107);
				constant();
				}
				break;
			case 2:
				{
				setState(6108);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(6109);
				functionCall();
				}
				break;
			case 4:
				{
				setState(6110);
				expression(0);
				}
				break;
			}
			setState(6122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6113);
				match(COMMA);
				setState(6118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6114);
					constant();
					}
					break;
				case 2:
					{
					setState(6115);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(6116);
					functionCall();
					}
					break;
				case 4:
					{
					setState(6117);
					expression(0);
					}
					break;
				}
				}
				}
				setState(6124);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_functionArg);
		try {
			setState(6129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6125);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6126);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6127);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6128);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(GBaseParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(GBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(GBaseParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(GBaseParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(GBaseParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 602;
		enterRecursionRule(_localctx, 602, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6132);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6133);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6134);
				predicate(0);
				setState(6135);
				match(IS);
				setState(6137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6136);
					match(NOT);
					}
				}

				setState(6139);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6141);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6150);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,904,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(6144);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(6145);
					logicalOperator();
					setState(6146);
					expression(4);
					}
					} 
				}
				setState(6152);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,904,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(GBaseParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(GBaseParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(GBaseParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(GBaseParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparasionPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(GBaseParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(GBaseParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(GBaseParser.SOME, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubqueryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubqueryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubqueryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(GBaseParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparasionPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBinaryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBinaryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBinaryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(GBaseParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(GBaseParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(GBaseParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(GBaseParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(GBaseParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(GBaseParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 604;
		enterRecursionRule(_localctx, 604, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(6156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				{
				setState(6154);
				match(LOCAL_ID);
				setState(6155);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(6158);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6217);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,913,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6215);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6160);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6161);
						comparisonOperator();
						setState(6162);
						((BinaryComparasionPredicateContext)_localctx).right = predicate(8);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6164);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6166);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6165);
							match(NOT);
							}
						}

						setState(6168);
						match(BETWEEN);
						setState(6169);
						predicate(0);
						setState(6170);
						match(AND);
						setState(6171);
						predicate(6);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6173);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6174);
						match(SOUNDS);
						setState(6175);
						match(LIKE);
						setState(6176);
						predicate(5);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6177);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6179);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6178);
							match(NOT);
							}
						}

						setState(6181);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6182);
						predicate(3);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6183);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6185);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6184);
							match(NOT);
							}
						}

						setState(6187);
						match(IN);
						setState(6188);
						match(LR_BRACKET);
						setState(6191);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
						case 1:
							{
							setState(6189);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6190);
							expressions();
							}
							break;
						}
						setState(6193);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6195);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6196);
						match(IS);
						setState(6197);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6198);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6199);
						comparisonOperator();
						setState(6200);
						((SubqueryComparasionPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6201);
						match(LR_BRACKET);
						setState(6202);
						selectStatement();
						setState(6203);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6205);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6207);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6206);
							match(NOT);
							}
						}

						setState(6209);
						match(LIKE);
						setState(6210);
						predicate(0);
						setState(6213);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
						case 1:
							{
							setState(6211);
							match(ESCAPE);
							setState(6212);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(6219);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,913,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(GBaseParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public SubqueryExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterSubqueryExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitSubqueryExpessionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitSubqueryExpessionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(GBaseParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GBaseParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(GBaseParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(GBaseParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(GBaseParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(GBaseParser.RR_BRACKET, 0); }
		public ExistsExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterExistsExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitExistsExpessionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitExistsExpessionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(GBaseParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public StringOperatorContext stringOperator() {
			return getRuleContext(StringOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public StringExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 606;
		enterRecursionRule(_localctx, 606, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6265);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6221);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6222);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6223);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6224);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6225);
				unaryOperator();
				setState(6226);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6228);
				match(BINARY);
				setState(6229);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6230);
				match(LR_BRACKET);
				setState(6231);
				expression(0);
				setState(6236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6232);
					match(COMMA);
					setState(6233);
					expression(0);
					}
					}
					setState(6238);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6239);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6241);
				match(ROW);
				setState(6242);
				match(LR_BRACKET);
				setState(6243);
				expression(0);
				setState(6246); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6244);
					match(COMMA);
					setState(6245);
					expression(0);
					}
					}
					setState(6248); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6250);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6252);
				match(EXISTS);
				setState(6253);
				match(LR_BRACKET);
				setState(6254);
				selectStatement();
				setState(6255);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6257);
				match(LR_BRACKET);
				setState(6258);
				selectStatement();
				setState(6259);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6261);
				match(INTERVAL);
				setState(6262);
				expression(0);
				setState(6263);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6284);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,918,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6282);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6267);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6268);
						bitOperator();
						setState(6269);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6271);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6272);
						mathOperator();
						setState(6273);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new StringExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((StringExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6275);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6276);
						stringOperator();
						setState(6277);
						((StringExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6279);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6280);
						match(COLLATE);
						setState(6281);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6286);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,918,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(GBaseParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(GBaseParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(GBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(GBaseParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6287);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (PLUS - 975)) | (1L << (MINUS - 975)) | (1L << (EXCLAMATION_SYMBOL - 975)) | (1L << (BIT_NOT_OP - 975)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(GBaseParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(GBaseParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(GBaseParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(GBaseParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_comparisonOperator);
		try {
			setState(6303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6289);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6290);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6291);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6292);
				match(LESS_SYMBOL);
				setState(6293);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6294);
				match(GREATER_SYMBOL);
				setState(6295);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6296);
				match(LESS_SYMBOL);
				setState(6297);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6298);
				match(EXCLAMATION_SYMBOL);
				setState(6299);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6300);
				match(LESS_SYMBOL);
				setState(6301);
				match(EQUAL_SYMBOL);
				setState(6302);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(GBaseParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(GBaseParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(GBaseParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(GBaseParser.XOR, 0); }
		public TerminalNode OR() { return getToken(GBaseParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(GBaseParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(GBaseParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_logicalOperator);
		try {
			setState(6312);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6305);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6306);
				match(BIT_AND_OP);
				setState(6307);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6308);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6309);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6310);
				match(BIT_OR_OP);
				setState(6311);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(GBaseParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(GBaseParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(GBaseParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(GBaseParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(GBaseParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(GBaseParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(GBaseParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_bitOperator);
		try {
			setState(6321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6314);
				match(LESS_SYMBOL);
				setState(6315);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6316);
				match(GREATER_SYMBOL);
				setState(6317);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6318);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6319);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6320);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(GBaseParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(GBaseParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(GBaseParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(GBaseParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(GBaseParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(GBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(GBaseParser.MINUS, 0); }
		public TerminalNode MINUSMINUS() { return getToken(GBaseParser.MINUSMINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6323);
			_la = _input.LA(1);
			if ( !(((((_la - 972)) & ~0x3f) == 0 && ((1L << (_la - 972)) & ((1L << (STAR - 972)) | (1L << (DIVIDE - 972)) | (1L << (MODULE - 972)) | (1L << (PLUS - 972)) | (1L << (MINUSMINUS - 972)) | (1L << (MINUS - 972)) | (1L << (DIV - 972)) | (1L << (MOD - 972)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringOperatorContext extends ParserRuleContext {
		public TerminalNode CONCAT_OP() { return getToken(GBaseParser.CONCAT_OP, 0); }
		public StringOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterStringOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitStringOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitStringOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringOperatorContext stringOperator() throws RecognitionException {
		StringOperatorContext _localctx = new StringOperatorContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_stringOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6325);
			match(CONCAT_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(GBaseParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(GBaseParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(GBaseParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(GBaseParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(GBaseParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(GBaseParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(GBaseParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(GBaseParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(GBaseParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(GBaseParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(GBaseParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(GBaseParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(GBaseParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(GBaseParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(GBaseParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(GBaseParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(GBaseParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(GBaseParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(GBaseParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(GBaseParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(GBaseParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(GBaseParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(GBaseParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(GBaseParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(GBaseParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(GBaseParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(GBaseParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(GBaseParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(GBaseParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(GBaseParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(GBaseParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(GBaseParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(GBaseParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(GBaseParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(GBaseParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(GBaseParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(GBaseParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(GBaseParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(GBaseParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(GBaseParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6327);
			_la = _input.LA(1);
			if ( !(((((_la - 606)) & ~0x3f) == 0 && ((1L << (_la - 606)) & ((1L << (ARMSCII8 - 606)) | (1L << (ASCII - 606)) | (1L << (BIG5 - 606)) | (1L << (CP1250 - 606)) | (1L << (CP1251 - 606)) | (1L << (CP1256 - 606)) | (1L << (CP1257 - 606)) | (1L << (CP850 - 606)) | (1L << (CP852 - 606)) | (1L << (CP866 - 606)) | (1L << (CP932 - 606)) | (1L << (DEC8 - 606)) | (1L << (EUCJPMS - 606)) | (1L << (EUCKR - 606)) | (1L << (GB2312 - 606)) | (1L << (GBK - 606)) | (1L << (GEOSTD8 - 606)) | (1L << (GREEK - 606)) | (1L << (HEBREW - 606)) | (1L << (HP8 - 606)) | (1L << (KEYBCS2 - 606)) | (1L << (KOI8R - 606)) | (1L << (KOI8U - 606)) | (1L << (LATIN1 - 606)) | (1L << (LATIN2 - 606)) | (1L << (LATIN5 - 606)) | (1L << (LATIN7 - 606)) | (1L << (MACCE - 606)) | (1L << (MACROMAN - 606)) | (1L << (SJIS - 606)) | (1L << (SWE7 - 606)) | (1L << (TIS620 - 606)) | (1L << (UCS2 - 606)) | (1L << (UJIS - 606)) | (1L << (UTF16 - 606)) | (1L << (UTF16LE - 606)) | (1L << (UTF32 - 606)) | (1L << (UTF8 - 606)) | (1L << (UTF8MB3 - 606)) | (1L << (UTF8MB4 - 606)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(GBaseParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(GBaseParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(GBaseParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(GBaseParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329);
			_la = _input.LA(1);
			if ( !(((((_la - 658)) & ~0x3f) == 0 && ((1L << (_la - 658)) & ((1L << (REPEATABLE - 658)) | (1L << (COMMITTED - 658)) | (1L << (UNCOMMITTED - 658)) | (1L << (SERIALIZABLE - 658)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(GBaseParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(GBaseParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(GBaseParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(GBaseParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(GBaseParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(GBaseParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(GBaseParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(GBaseParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(GBaseParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6331);
			_la = _input.LA(1);
			if ( !(((((_la - 596)) & ~0x3f) == 0 && ((1L << (_la - 596)) & ((1L << (TABLES - 596)) | (1L << (ROUTINE - 596)) | (1L << (EXECUTE - 596)) | (1L << (FILE - 596)) | (1L << (PROCESS - 596)) | (1L << (RELOAD - 596)) | (1L << (SHUTDOWN - 596)) | (1L << (SUPER - 596)) | (1L << (PRIVILEGES - 596)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(GBaseParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(GBaseParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(GBaseParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(GBaseParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(GBaseParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(GBaseParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(GBaseParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(GBaseParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6333);
			_la = _input.LA(1);
			if ( !(((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (QUARTER - 588)) | (1L << (MONTH - 588)) | (1L << (DAY - 588)) | (1L << (HOUR - 588)) | (1L << (MINUTE - 588)) | (1L << (WEEK - 588)) | (1L << (SECOND - 588)) | (1L << (MICROSECOND - 588)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GBaseParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(GBaseParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(GBaseParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(GBaseParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6335);
			_la = _input.LA(1);
			if ( !(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(GBaseParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(GBaseParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(GBaseParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(GBaseParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(GBaseParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(GBaseParser.ANY, 0); }
		public TerminalNode AT() { return getToken(GBaseParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(GBaseParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(GBaseParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(GBaseParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(GBaseParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(GBaseParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(GBaseParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(GBaseParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(GBaseParser.BIT, 0); }
		public TerminalNode BLOCK() { return getToken(GBaseParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(GBaseParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GBaseParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(GBaseParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(GBaseParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(GBaseParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(GBaseParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(GBaseParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(GBaseParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(GBaseParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(GBaseParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(GBaseParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(GBaseParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(GBaseParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(GBaseParser.CLIENT, 0); }
		public TerminalNode CLOSE() { return getToken(GBaseParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(GBaseParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(GBaseParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(GBaseParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(GBaseParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(GBaseParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(GBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(GBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(GBaseParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(GBaseParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(GBaseParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(GBaseParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(GBaseParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(GBaseParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(GBaseParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(GBaseParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(GBaseParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(GBaseParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(GBaseParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(GBaseParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(GBaseParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(GBaseParser.COPY, 0); }
		public TerminalNode CPU() { return getToken(GBaseParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(GBaseParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(GBaseParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(GBaseParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(GBaseParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(GBaseParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(GBaseParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(GBaseParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(GBaseParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(GBaseParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(GBaseParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(GBaseParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(GBaseParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(GBaseParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(GBaseParser.DISK, 0); }
		public TerminalNode DO() { return getToken(GBaseParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(GBaseParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(GBaseParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(GBaseParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(GBaseParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(GBaseParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(GBaseParser.END, 0); }
		public TerminalNode ENDS() { return getToken(GBaseParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(GBaseParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(GBaseParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(GBaseParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(GBaseParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(GBaseParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(GBaseParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(GBaseParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(GBaseParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(GBaseParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(GBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(GBaseParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(GBaseParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(GBaseParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(GBaseParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(GBaseParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(GBaseParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(GBaseParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(GBaseParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(GBaseParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(GBaseParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(GBaseParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(GBaseParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(GBaseParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(GBaseParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(GBaseParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(GBaseParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(GBaseParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(GBaseParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(GBaseParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(GBaseParser.GRANTS, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(GBaseParser.GROUP_REPLICATION, 0); }
		public TerminalNode HANDLER() { return getToken(GBaseParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(GBaseParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(GBaseParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(GBaseParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(GBaseParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(GBaseParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(GBaseParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(GBaseParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(GBaseParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(GBaseParser.INITIAL_SIZE, 0); }
		public TerminalNode INPLACE() { return getToken(GBaseParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(GBaseParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(GBaseParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(GBaseParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(GBaseParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(GBaseParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(GBaseParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(GBaseParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(GBaseParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(GBaseParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(GBaseParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(GBaseParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(GBaseParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(GBaseParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(GBaseParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(GBaseParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(GBaseParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(GBaseParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(GBaseParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(GBaseParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(GBaseParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(GBaseParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(GBaseParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(GBaseParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(GBaseParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(GBaseParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(GBaseParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(GBaseParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(GBaseParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(GBaseParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(GBaseParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(GBaseParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(GBaseParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(GBaseParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(GBaseParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(GBaseParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(GBaseParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(GBaseParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(GBaseParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(GBaseParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(GBaseParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(GBaseParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(GBaseParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(GBaseParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(GBaseParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(GBaseParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(GBaseParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(GBaseParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(GBaseParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(GBaseParser.MEDIUM, 0); }
		public TerminalNode MEMORY() { return getToken(GBaseParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(GBaseParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(GBaseParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(GBaseParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(GBaseParser.MIGRATE, 0); }
		public TerminalNode MIN_ROWS() { return getToken(GBaseParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(GBaseParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(GBaseParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(GBaseParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(GBaseParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(GBaseParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(GBaseParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(GBaseParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(GBaseParser.NCHAR, 0); }
		public TerminalNode NEVER() { return getToken(GBaseParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(GBaseParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(GBaseParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(GBaseParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(GBaseParser.NONE, 0); }
		public TerminalNode NUMBER() { return getToken(GBaseParser.NUMBER, 0); }
		public TerminalNode OFFLINE() { return getToken(GBaseParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(GBaseParser.OFFSET, 0); }
		public TerminalNode OJ() { return getToken(GBaseParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(GBaseParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(GBaseParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(GBaseParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(GBaseParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(GBaseParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(GBaseParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(GBaseParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(GBaseParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(GBaseParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(GBaseParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(GBaseParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(GBaseParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(GBaseParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(GBaseParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(GBaseParser.PASSWORD, 0); }
		public TerminalNode PHASE() { return getToken(GBaseParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(GBaseParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(GBaseParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(GBaseParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(GBaseParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(GBaseParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(GBaseParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(GBaseParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(GBaseParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(GBaseParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(GBaseParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(GBaseParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(GBaseParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(GBaseParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(GBaseParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(GBaseParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(GBaseParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(GBaseParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(GBaseParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(GBaseParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(GBaseParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(GBaseParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(GBaseParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(GBaseParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(GBaseParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(GBaseParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(GBaseParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(GBaseParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(GBaseParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(GBaseParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(GBaseParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(GBaseParser.REPLICATION, 0); }
		public TerminalNode RESET() { return getToken(GBaseParser.RESET, 0); }
		public TerminalNode RESUME() { return getToken(GBaseParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(GBaseParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(GBaseParser.RETURNS, 0); }
		public TerminalNode ROLLBACK() { return getToken(GBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(GBaseParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(GBaseParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(GBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(GBaseParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(GBaseParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(GBaseParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(GBaseParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(GBaseParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(GBaseParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(GBaseParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(GBaseParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(GBaseParser.SESSION, 0); }
		public TerminalNode SHARE() { return getToken(GBaseParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(GBaseParser.SHARED, 0); }
		public TerminalNode SIGNED() { return getToken(GBaseParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(GBaseParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(GBaseParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(GBaseParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(GBaseParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(GBaseParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(GBaseParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(GBaseParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(GBaseParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(GBaseParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(GBaseParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(GBaseParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(GBaseParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(GBaseParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(GBaseParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(GBaseParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(GBaseParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(GBaseParser.STACKED, 0); }
		public TerminalNode START() { return getToken(GBaseParser.START, 0); }
		public TerminalNode STARTS() { return getToken(GBaseParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(GBaseParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(GBaseParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(GBaseParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(GBaseParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(GBaseParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(GBaseParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(GBaseParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(GBaseParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(GBaseParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(GBaseParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(GBaseParser.SUBPARTITIONS, 0); }
		public TerminalNode SUSPEND() { return getToken(GBaseParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(GBaseParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(GBaseParser.SWITCHES, 0); }
		public TerminalNode TABLE_NAME() { return getToken(GBaseParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(GBaseParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(GBaseParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(GBaseParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(GBaseParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(GBaseParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(GBaseParser.TRANSACTION, 0); }
		public TerminalNode TRIGGERS() { return getToken(GBaseParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(GBaseParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(GBaseParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(GBaseParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(GBaseParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(GBaseParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(GBaseParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(GBaseParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(GBaseParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(GBaseParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(GBaseParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(GBaseParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(GBaseParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(GBaseParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(GBaseParser.VARIABLES, 0); }
		public TerminalNode VIEW() { return getToken(GBaseParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(GBaseParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(GBaseParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(GBaseParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(GBaseParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(GBaseParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(GBaseParser.X509, 0); }
		public TerminalNode XA() { return getToken(GBaseParser.XA, 0); }
		public TerminalNode XML() { return getToken(GBaseParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6337);
			_la = _input.LA(1);
			if ( !(_la==CURRENT || _la==DIAGNOSTICS || _la==NUMBER || _la==STACKED || ((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (SERIAL - 212)) | (1L << (ACCOUNT - 212)) | (1L << (ACTION - 212)) | (1L << (AFTER - 212)) | (1L << (AGGREGATE - 212)) | (1L << (ALGORITHM - 212)) | (1L << (ANY - 212)) | (1L << (AT - 212)) | (1L << (AUTHORS - 212)) | (1L << (AUTOCOMMIT - 212)) | (1L << (AUTOEXTEND_SIZE - 212)))) != 0) || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (AUTO_INCREMENT - 276)) | (1L << (AVG_ROW_LENGTH - 276)) | (1L << (BEGIN - 276)) | (1L << (BINLOG - 276)) | (1L << (BIT - 276)) | (1L << (BLOCK - 276)) | (1L << (BOOL - 276)) | (1L << (BOOLEAN - 276)) | (1L << (BTREE - 276)) | (1L << (CACHE - 276)) | (1L << (CASCADED - 276)) | (1L << (CHAIN - 276)) | (1L << (CHANGED - 276)) | (1L << (CHANNEL - 276)) | (1L << (CHECKSUM - 276)) | (1L << (PAGE_CHECKSUM - 276)) | (1L << (CIPHER - 276)) | (1L << (CLASS_ORIGIN - 276)) | (1L << (CLIENT - 276)) | (1L << (CLOSE - 276)) | (1L << (COALESCE - 276)) | (1L << (CODE - 276)) | (1L << (COLUMNS - 276)) | (1L << (COLUMN_FORMAT - 276)) | (1L << (COLUMN_NAME - 276)) | (1L << (COMMENT - 276)) | (1L << (COMMIT - 276)) | (1L << (COMPACT - 276)) | (1L << (COMPLETION - 276)) | (1L << (COMPRESSED - 276)) | (1L << (COMPRESSION - 276)) | (1L << (CONCURRENT - 276)) | (1L << (CONNECTION - 276)) | (1L << (CONSISTENT - 276)) | (1L << (CONSTRAINT_CATALOG - 276)) | (1L << (CONSTRAINT_SCHEMA - 276)) | (1L << (CONSTRAINT_NAME - 276)) | (1L << (CONTAINS - 276)) | (1L << (CONTEXT - 276)) | (1L << (CONTRIBUTORS - 276)) | (1L << (COPY - 276)) | (1L << (CPU - 276)) | (1L << (CURSOR_NAME - 276)) | (1L << (DATA - 276)) | (1L << (DATAFILE - 276)) | (1L << (DEALLOCATE - 276)) | (1L << (DEFAULT_AUTH - 276)) | (1L << (DEFINER - 276)) | (1L << (DELAY_KEY_WRITE - 276)) | (1L << (DES_KEY_FILE - 276)) | (1L << (DIRECTORY - 276)) | (1L << (DISABLE - 276)) | (1L << (DISCARD - 276)) | (1L << (DISK - 276)) | (1L << (DO - 276)) | (1L << (DUMPFILE - 276)) | (1L << (DUPLICATE - 276)) | (1L << (DYNAMIC - 276)) | (1L << (ENABLE - 276)) | (1L << (ENCRYPTION - 276)) | (1L << (END - 276)) | (1L << (ENDS - 276)) | (1L << (ENGINE - 276)) | (1L << (ENGINES - 276)))) != 0) || ((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (ERROR - 340)) | (1L << (ERRORS - 340)) | (1L << (ESCAPE - 340)) | (1L << (EVEN - 340)) | (1L << (EVENT - 340)) | (1L << (EVENTS - 340)) | (1L << (EVERY - 340)) | (1L << (EXCHANGE - 340)) | (1L << (EXCLUSIVE - 340)) | (1L << (EXPIRE - 340)) | (1L << (EXPORT - 340)) | (1L << (EXTENDED - 340)) | (1L << (EXTENT_SIZE - 340)) | (1L << (FAST - 340)) | (1L << (FAULTS - 340)) | (1L << (FIELDS - 340)) | (1L << (FILE_BLOCK_SIZE - 340)) | (1L << (FILTER - 340)) | (1L << (FIRST - 340)) | (1L << (FIXED - 340)) | (1L << (FLUSH - 340)) | (1L << (FOLLOWS - 340)) | (1L << (FOUND - 340)) | (1L << (FULL - 340)) | (1L << (FUNCTION - 340)) | (1L << (GENERAL - 340)) | (1L << (GLOBAL - 340)) | (1L << (GRANTS - 340)) | (1L << (GROUP_REPLICATION - 340)) | (1L << (HANDLER - 340)) | (1L << (HASH - 340)) | (1L << (HELP - 340)) | (1L << (HOST - 340)) | (1L << (HOSTS - 340)) | (1L << (IDENTIFIED - 340)) | (1L << (IGNORE_SERVER_IDS - 340)) | (1L << (IMPORT - 340)) | (1L << (INDEXES - 340)) | (1L << (INITIAL_SIZE - 340)) | (1L << (INPLACE - 340)) | (1L << (INSERT_METHOD - 340)) | (1L << (INSTALL - 340)) | (1L << (INSTANCE - 340)) | (1L << (INVOKER - 340)) | (1L << (IO - 340)) | (1L << (IO_THREAD - 340)) | (1L << (IPC - 340)) | (1L << (ISOLATION - 340)) | (1L << (ISSUER - 340)) | (1L << (JSON - 340)) | (1L << (KEY_BLOCK_SIZE - 340)) | (1L << (LANGUAGE - 340)) | (1L << (LAST - 340)) | (1L << (LEAVES - 340)) | (1L << (LESS - 340)) | (1L << (LEVEL - 340)) | (1L << (LIST - 340)) | (1L << (LOCAL - 340)) | (1L << (LOGFILE - 340)) | (1L << (LOGS - 340)) | (1L << (MASTER - 340)) | (1L << (MASTER_AUTO_POSITION - 340)) | (1L << (MASTER_CONNECT_RETRY - 340)))) != 0) || ((((_la - 404)) & ~0x3f) == 0 && ((1L << (_la - 404)) & ((1L << (MASTER_DELAY - 404)) | (1L << (MASTER_HEARTBEAT_PERIOD - 404)) | (1L << (MASTER_HOST - 404)) | (1L << (MASTER_LOG_FILE - 404)) | (1L << (MASTER_LOG_POS - 404)) | (1L << (MASTER_PASSWORD - 404)) | (1L << (MASTER_PORT - 404)) | (1L << (MASTER_RETRY_COUNT - 404)) | (1L << (MASTER_SSL - 404)) | (1L << (MASTER_SSL_CA - 404)) | (1L << (MASTER_SSL_CAPATH - 404)) | (1L << (MASTER_SSL_CERT - 404)) | (1L << (MASTER_SSL_CIPHER - 404)) | (1L << (MASTER_SSL_CRL - 404)) | (1L << (MASTER_SSL_CRLPATH - 404)) | (1L << (MASTER_SSL_KEY - 404)) | (1L << (MASTER_TLS_VERSION - 404)) | (1L << (MASTER_USER - 404)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 404)) | (1L << (MAX_QUERIES_PER_HOUR - 404)) | (1L << (MAX_ROWS - 404)) | (1L << (MAX_SIZE - 404)) | (1L << (MAX_UPDATES_PER_HOUR - 404)) | (1L << (MAX_USER_CONNECTIONS - 404)) | (1L << (MEDIUM - 404)) | (1L << (MERGE - 404)) | (1L << (MESSAGE_TEXT - 404)) | (1L << (MID - 404)) | (1L << (MIGRATE - 404)) | (1L << (MIN_ROWS - 404)) | (1L << (MODE - 404)) | (1L << (MODIFY - 404)) | (1L << (MUTEX - 404)) | (1L << (MYSQL - 404)) | (1L << (MYSQL_ERRNO - 404)) | (1L << (NAME - 404)) | (1L << (NAMES - 404)) | (1L << (NCHAR - 404)) | (1L << (NEVER - 404)) | (1L << (NEXT - 404)) | (1L << (NO - 404)) | (1L << (NODEGROUP - 404)) | (1L << (NONE - 404)) | (1L << (OFFLINE - 404)) | (1L << (OFFSET - 404)) | (1L << (OJ - 404)) | (1L << (OLD_PASSWORD - 404)) | (1L << (ONE - 404)) | (1L << (ONLINE - 404)) | (1L << (ONLY - 404)) | (1L << (OPEN - 404)) | (1L << (OPTIMIZER_COSTS - 404)) | (1L << (OPTIONS - 404)) | (1L << (OWNER - 404)) | (1L << (PACK_KEYS - 404)) | (1L << (PAGE - 404)) | (1L << (PARSER - 404)) | (1L << (PARTIAL - 404)) | (1L << (PARTITIONING - 404)) | (1L << (PARTITIONS - 404)) | (1L << (PASSWORD - 404)) | (1L << (PHASE - 404)) | (1L << (PLUGIN - 404)) | (1L << (PLUGIN_DIR - 404)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (PLUGINS - 468)) | (1L << (PORT - 468)) | (1L << (PRECEDES - 468)) | (1L << (PREPARE - 468)) | (1L << (PRESERVE - 468)) | (1L << (PREV - 468)) | (1L << (PROCESSLIST - 468)) | (1L << (PROFILE - 468)) | (1L << (PROFILES - 468)) | (1L << (PROXY - 468)) | (1L << (QUERY - 468)) | (1L << (QUICK - 468)) | (1L << (REBUILD - 468)) | (1L << (RECOVER - 468)) | (1L << (REDO_BUFFER_SIZE - 468)) | (1L << (REDUNDANT - 468)) | (1L << (RELAY - 468)) | (1L << (RELAY_LOG_FILE - 468)) | (1L << (RELAY_LOG_POS - 468)) | (1L << (RELAYLOG - 468)) | (1L << (REMOVE - 468)) | (1L << (REORGANIZE - 468)) | (1L << (REPAIR - 468)) | (1L << (REPLICATE_DO_DB - 468)) | (1L << (REPLICATE_DO_TABLE - 468)) | (1L << (REPLICATE_IGNORE_DB - 468)) | (1L << (REPLICATE_IGNORE_TABLE - 468)) | (1L << (REPLICATE_REWRITE_DB - 468)) | (1L << (REPLICATE_WILD_DO_TABLE - 468)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 468)) | (1L << (REPLICATION - 468)) | (1L << (RESET - 468)) | (1L << (RESUME - 468)) | (1L << (RETURNED_SQLSTATE - 468)) | (1L << (RETURNS - 468)) | (1L << (ROLLBACK - 468)) | (1L << (ROLLUP - 468)) | (1L << (ROTATE - 468)) | (1L << (ROW - 468)) | (1L << (ROWS - 468)) | (1L << (ROW_FORMAT - 468)) | (1L << (SAVEPOINT - 468)) | (1L << (SCHEDULE - 468)) | (1L << (SECURITY - 468)) | (1L << (SERVER - 468)) | (1L << (SESSION - 468)) | (1L << (SHARE - 468)) | (1L << (SHARED - 468)) | (1L << (SIGNED - 468)) | (1L << (SIMPLE - 468)) | (1L << (SLAVE - 468)) | (1L << (SLOW - 468)) | (1L << (SNAPSHOT - 468)) | (1L << (SOCKET - 468)) | (1L << (SOME - 468)) | (1L << (SONAME - 468)) | (1L << (SOUNDS - 468)) | (1L << (SOURCE - 468)) | (1L << (SQL_AFTER_GTIDS - 468)) | (1L << (SQL_AFTER_MTS_GAPS - 468)) | (1L << (SQL_BEFORE_GTIDS - 468)) | (1L << (SQL_BUFFER_RESULT - 468)) | (1L << (SQL_CACHE - 468)) | (1L << (SQL_NO_CACHE - 468)))) != 0) || ((((_la - 532)) & ~0x3f) == 0 && ((1L << (_la - 532)) & ((1L << (SQL_THREAD - 532)) | (1L << (START - 532)) | (1L << (STARTS - 532)) | (1L << (STATS_AUTO_RECALC - 532)) | (1L << (STATS_PERSISTENT - 532)) | (1L << (STATS_SAMPLE_PAGES - 532)) | (1L << (STATUS - 532)) | (1L << (STOP - 532)) | (1L << (STORAGE - 532)) | (1L << (STRING - 532)) | (1L << (SUBCLASS_ORIGIN - 532)) | (1L << (SUBJECT - 532)) | (1L << (SUBPARTITION - 532)) | (1L << (SUBPARTITIONS - 532)) | (1L << (SUSPEND - 532)) | (1L << (SWAPS - 532)) | (1L << (SWITCHES - 532)) | (1L << (TABLE_NAME - 532)) | (1L << (TABLESPACE - 532)) | (1L << (TEMPORARY - 532)) | (1L << (TEMPTABLE - 532)) | (1L << (THAN - 532)) | (1L << (TRADITIONAL - 532)) | (1L << (TRANSACTION - 532)) | (1L << (TRIGGERS - 532)) | (1L << (TRUNCATE - 532)) | (1L << (UNDEFINED - 532)) | (1L << (UNDOFILE - 532)) | (1L << (UNDO_BUFFER_SIZE - 532)) | (1L << (UNINSTALL - 532)) | (1L << (UNKNOWN - 532)) | (1L << (UNTIL - 532)) | (1L << (UPGRADE - 532)) | (1L << (USER - 532)) | (1L << (USE_FRM - 532)) | (1L << (USER_RESOURCES - 532)) | (1L << (VALIDATION - 532)) | (1L << (VALUE - 532)) | (1L << (VARIABLES - 532)) | (1L << (VIEW - 532)) | (1L << (WAIT - 532)) | (1L << (WARNINGS - 532)) | (1L << (WITHOUT - 532)) | (1L << (WORK - 532)) | (1L << (WRAPPER - 532)) | (1L << (X509 - 532)) | (1L << (XA - 532)) | (1L << (XML - 532)) | (1L << (INTERNAL - 532)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(GBaseParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(GBaseParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(GBaseParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(GBaseParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(GBaseParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(GBaseParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(GBaseParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(GBaseParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(GBaseParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(GBaseParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(GBaseParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(GBaseParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(GBaseParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(GBaseParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(GBaseParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(GBaseParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(GBaseParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(GBaseParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(GBaseParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(GBaseParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(GBaseParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(GBaseParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(GBaseParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(GBaseParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(GBaseParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(GBaseParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(GBaseParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(GBaseParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(GBaseParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(GBaseParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(GBaseParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(GBaseParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(GBaseParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(GBaseParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(GBaseParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(GBaseParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(GBaseParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(GBaseParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(GBaseParser.COS, 0); }
		public TerminalNode COT() { return getToken(GBaseParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(GBaseParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(GBaseParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(GBaseParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(GBaseParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(GBaseParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(GBaseParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(GBaseParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(GBaseParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(GBaseParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(GBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(GBaseParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(GBaseParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(GBaseParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(GBaseParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(GBaseParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(GBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(GBaseParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(GBaseParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(GBaseParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(GBaseParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(GBaseParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(GBaseParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(GBaseParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(GBaseParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(GBaseParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(GBaseParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(GBaseParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(GBaseParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(GBaseParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(GBaseParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(GBaseParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(GBaseParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(GBaseParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(GBaseParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(GBaseParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(GBaseParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(GBaseParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(GBaseParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(GBaseParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(GBaseParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(GBaseParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(GBaseParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(GBaseParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(GBaseParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(GBaseParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(GBaseParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(GBaseParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(GBaseParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(GBaseParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(GBaseParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(GBaseParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(GBaseParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(GBaseParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(GBaseParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(GBaseParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(GBaseParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(GBaseParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(GBaseParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(GBaseParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(GBaseParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(GBaseParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(GBaseParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(GBaseParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(GBaseParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(GBaseParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(GBaseParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(GBaseParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(GBaseParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(GBaseParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(GBaseParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(GBaseParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(GBaseParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(GBaseParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(GBaseParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(GBaseParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(GBaseParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(GBaseParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(GBaseParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(GBaseParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(GBaseParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(GBaseParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(GBaseParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(GBaseParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(GBaseParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(GBaseParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(GBaseParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(GBaseParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(GBaseParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(GBaseParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(GBaseParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(GBaseParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(GBaseParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(GBaseParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(GBaseParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(GBaseParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(GBaseParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(GBaseParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(GBaseParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(GBaseParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(GBaseParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(GBaseParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(GBaseParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(GBaseParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(GBaseParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(GBaseParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(GBaseParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(GBaseParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(GBaseParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(GBaseParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(GBaseParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(GBaseParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(GBaseParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(GBaseParser.MLINEFROMWKB, 0); }
		public TerminalNode MONTH() { return getToken(GBaseParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(GBaseParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(GBaseParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(GBaseParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(GBaseParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(GBaseParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(GBaseParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(GBaseParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(GBaseParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(GBaseParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(GBaseParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(GBaseParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(GBaseParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(GBaseParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(GBaseParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(GBaseParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(GBaseParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(GBaseParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(GBaseParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(GBaseParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(GBaseParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(GBaseParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(GBaseParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(GBaseParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(GBaseParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(GBaseParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(GBaseParser.PI, 0); }
		public TerminalNode POINT() { return getToken(GBaseParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(GBaseParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(GBaseParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(GBaseParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(GBaseParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(GBaseParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(GBaseParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(GBaseParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(GBaseParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(GBaseParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(GBaseParser.POW, 0); }
		public TerminalNode POWER() { return getToken(GBaseParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(GBaseParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(GBaseParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(GBaseParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(GBaseParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(GBaseParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(GBaseParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(GBaseParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(GBaseParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(GBaseParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(GBaseParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(GBaseParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(GBaseParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(GBaseParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(GBaseParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(GBaseParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(GBaseParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(GBaseParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(GBaseParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(GBaseParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(GBaseParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(GBaseParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(GBaseParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(GBaseParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(GBaseParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(GBaseParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(GBaseParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(GBaseParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(GBaseParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(GBaseParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(GBaseParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(GBaseParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(GBaseParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(GBaseParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(GBaseParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(GBaseParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(GBaseParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(GBaseParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(GBaseParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(GBaseParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(GBaseParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(GBaseParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(GBaseParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(GBaseParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(GBaseParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(GBaseParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(GBaseParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(GBaseParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(GBaseParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(GBaseParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(GBaseParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(GBaseParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(GBaseParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(GBaseParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(GBaseParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(GBaseParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(GBaseParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(GBaseParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(GBaseParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(GBaseParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(GBaseParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(GBaseParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(GBaseParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(GBaseParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(GBaseParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(GBaseParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(GBaseParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(GBaseParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(GBaseParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(GBaseParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(GBaseParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(GBaseParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(GBaseParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(GBaseParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(GBaseParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(GBaseParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(GBaseParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(GBaseParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(GBaseParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(GBaseParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(GBaseParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(GBaseParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(GBaseParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(GBaseParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(GBaseParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(GBaseParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(GBaseParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(GBaseParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(GBaseParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(GBaseParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(GBaseParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(GBaseParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(GBaseParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(GBaseParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(GBaseParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(GBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(GBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(GBaseParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(GBaseParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(GBaseParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(GBaseParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(GBaseParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(GBaseParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(GBaseParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(GBaseParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(GBaseParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(GBaseParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(GBaseParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(GBaseParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(GBaseParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(GBaseParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(GBaseParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(GBaseParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(GBaseParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(GBaseParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(GBaseParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(GBaseParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(GBaseParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(GBaseParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(GBaseParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(GBaseParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(GBaseParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(GBaseParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(GBaseParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(GBaseParser.X_FUNCTION, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GBaseParserListener ) ((GBaseParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof GBaseParserVisitor ) return ((GBaseParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6339);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==LEFT || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (YEAR - 133)))) != 0) || _la==COUNT || _la==POSITION || _la==INVISIBLE || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (VISIBLE - 574)) | (1L << (QUARTER - 574)) | (1L << (MONTH - 574)) | (1L << (DAY - 574)) | (1L << (HOUR - 574)) | (1L << (MINUTE - 574)) | (1L << (WEEK - 574)) | (1L << (SECOND - 574)) | (1L << (MICROSECOND - 574)) | (1L << (SESSION_VARIABLES_ADMIN - 574)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (GEOMETRYCOLLECTION - 662)) | (1L << (LINESTRING - 662)) | (1L << (MULTILINESTRING - 662)) | (1L << (MULTIPOINT - 662)) | (1L << (MULTIPOLYGON - 662)) | (1L << (POINT - 662)) | (1L << (POLYGON - 662)) | (1L << (ABS - 662)) | (1L << (ACOS - 662)) | (1L << (ADDDATE - 662)) | (1L << (ADDTIME - 662)) | (1L << (AES_DECRYPT - 662)) | (1L << (AES_ENCRYPT - 662)) | (1L << (AREA - 662)) | (1L << (ASBINARY - 662)) | (1L << (ASIN - 662)) | (1L << (ASTEXT - 662)) | (1L << (ASWKB - 662)) | (1L << (ASWKT - 662)) | (1L << (ASYMMETRIC_DECRYPT - 662)) | (1L << (ASYMMETRIC_DERIVE - 662)) | (1L << (ASYMMETRIC_ENCRYPT - 662)) | (1L << (ASYMMETRIC_SIGN - 662)) | (1L << (ASYMMETRIC_VERIFY - 662)) | (1L << (ATAN - 662)) | (1L << (ATAN2 - 662)) | (1L << (BENCHMARK - 662)) | (1L << (BIN - 662)) | (1L << (BIT_COUNT - 662)) | (1L << (BIT_LENGTH - 662)) | (1L << (BUFFER - 662)) | (1L << (CEIL - 662)) | (1L << (CEILING - 662)) | (1L << (CENTROID - 662)) | (1L << (CHARACTER_LENGTH - 662)) | (1L << (CHARSET - 662)) | (1L << (CHAR_LENGTH - 662)) | (1L << (COERCIBILITY - 662)) | (1L << (COLLATION - 662)) | (1L << (COMPRESS - 662)) | (1L << (CONCAT - 662)) | (1L << (CONCAT_WS - 662)) | (1L << (CONNECTION_ID - 662)) | (1L << (CONV - 662)) | (1L << (CONVERT_TZ - 662)) | (1L << (COS - 662)) | (1L << (COT - 662)) | (1L << (CRC32 - 662)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 662)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 662)) | (1L << (CREATE_DH_PARAMETERS - 662)) | (1L << (CREATE_DIGEST - 662)) | (1L << (CROSSES - 662)) | (1L << (DATEDIFF - 662)) | (1L << (DATE_FORMAT - 662)) | (1L << (DAYNAME - 662)) | (1L << (DAYOFMONTH - 662)) | (1L << (DAYOFWEEK - 662)) | (1L << (DAYOFYEAR - 662)) | (1L << (DECODE - 662)) | (1L << (DEGREES - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (DES_DECRYPT - 726)) | (1L << (DES_ENCRYPT - 726)) | (1L << (DIMENSION - 726)) | (1L << (DISJOINT - 726)) | (1L << (ELT - 726)) | (1L << (ENCODE - 726)) | (1L << (ENCRYPT - 726)) | (1L << (ENDPOINT - 726)) | (1L << (ENVELOPE - 726)) | (1L << (EQUALS - 726)) | (1L << (EXP - 726)) | (1L << (EXPORT_SET - 726)) | (1L << (EXTERIORRING - 726)) | (1L << (EXTRACTVALUE - 726)) | (1L << (FIELD - 726)) | (1L << (FIND_IN_SET - 726)) | (1L << (FLOOR - 726)) | (1L << (FORMAT - 726)) | (1L << (FOUND_ROWS - 726)) | (1L << (FROM_BASE64 - 726)) | (1L << (FROM_DAYS - 726)) | (1L << (FROM_UNIXTIME - 726)) | (1L << (GEOMCOLLFROMTEXT - 726)) | (1L << (GEOMCOLLFROMWKB - 726)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 726)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 726)) | (1L << (GEOMETRYFROMTEXT - 726)) | (1L << (GEOMETRYFROMWKB - 726)) | (1L << (GEOMETRYN - 726)) | (1L << (GEOMETRYTYPE - 726)) | (1L << (GEOMFROMTEXT - 726)) | (1L << (GEOMFROMWKB - 726)) | (1L << (GET_FORMAT - 726)) | (1L << (GET_LOCK - 726)) | (1L << (GLENGTH - 726)) | (1L << (GREATEST - 726)) | (1L << (GTID_SUBSET - 726)) | (1L << (GTID_SUBTRACT - 726)) | (1L << (HEX - 726)) | (1L << (IFNULL - 726)) | (1L << (INET6_ATON - 726)) | (1L << (INET6_NTOA - 726)) | (1L << (INET_ATON - 726)) | (1L << (INET_NTOA - 726)) | (1L << (INSTR - 726)) | (1L << (INTERIORRINGN - 726)) | (1L << (INTERSECTS - 726)) | (1L << (ISCLOSED - 726)) | (1L << (ISEMPTY - 726)) | (1L << (ISNULL - 726)) | (1L << (ISSIMPLE - 726)) | (1L << (IS_FREE_LOCK - 726)) | (1L << (IS_IPV4 - 726)) | (1L << (IS_IPV4_COMPAT - 726)) | (1L << (IS_IPV4_MAPPED - 726)) | (1L << (IS_IPV6 - 726)) | (1L << (IS_USED_LOCK - 726)) | (1L << (LAST_INSERT_ID - 726)) | (1L << (LCASE - 726)) | (1L << (LEAST - 726)) | (1L << (LENGTH - 726)) | (1L << (LINEFROMTEXT - 726)) | (1L << (LINEFROMWKB - 726)) | (1L << (LINESTRINGFROMTEXT - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (LINESTRINGFROMWKB - 790)) | (1L << (LN - 790)) | (1L << (LOAD_FILE - 790)) | (1L << (LOCATE - 790)) | (1L << (LOG - 790)) | (1L << (LOG10 - 790)) | (1L << (LOG2 - 790)) | (1L << (LOWER - 790)) | (1L << (LPAD - 790)) | (1L << (LTRIM - 790)) | (1L << (MAKEDATE - 790)) | (1L << (MAKETIME - 790)) | (1L << (MAKE_SET - 790)) | (1L << (MASTER_POS_WAIT - 790)) | (1L << (MBRCONTAINS - 790)) | (1L << (MBRDISJOINT - 790)) | (1L << (MBREQUAL - 790)) | (1L << (MBRINTERSECTS - 790)) | (1L << (MBROVERLAPS - 790)) | (1L << (MBRTOUCHES - 790)) | (1L << (MBRWITHIN - 790)) | (1L << (MD5 - 790)) | (1L << (MLINEFROMTEXT - 790)) | (1L << (MLINEFROMWKB - 790)) | (1L << (MONTHNAME - 790)) | (1L << (MPOINTFROMTEXT - 790)) | (1L << (MPOINTFROMWKB - 790)) | (1L << (MPOLYFROMTEXT - 790)) | (1L << (MPOLYFROMWKB - 790)) | (1L << (MULTILINESTRINGFROMTEXT - 790)) | (1L << (MULTILINESTRINGFROMWKB - 790)) | (1L << (MULTIPOINTFROMTEXT - 790)) | (1L << (MULTIPOINTFROMWKB - 790)) | (1L << (MULTIPOLYGONFROMTEXT - 790)) | (1L << (MULTIPOLYGONFROMWKB - 790)) | (1L << (NAME_CONST - 790)) | (1L << (NULLIF - 790)) | (1L << (NUMGEOMETRIES - 790)) | (1L << (NUMINTERIORRINGS - 790)) | (1L << (NUMPOINTS - 790)) | (1L << (OCT - 790)) | (1L << (OCTET_LENGTH - 790)) | (1L << (ORD - 790)) | (1L << (OVERLAPS - 790)) | (1L << (PERIOD_ADD - 790)) | (1L << (PERIOD_DIFF - 790)) | (1L << (PI - 790)) | (1L << (POINTFROMTEXT - 790)) | (1L << (POINTFROMWKB - 790)) | (1L << (POINTN - 790)) | (1L << (POLYFROMTEXT - 790)) | (1L << (POLYFROMWKB - 790)) | (1L << (POLYGONFROMTEXT - 790)) | (1L << (POLYGONFROMWKB - 790)) | (1L << (POW - 790)) | (1L << (POWER - 790)) | (1L << (QUOTE - 790)) | (1L << (RADIANS - 790)) | (1L << (RAND - 790)) | (1L << (RANDOM_BYTES - 790)) | (1L << (RELEASE_LOCK - 790)) | (1L << (REVERSE - 790)) | (1L << (ROUND - 790)) | (1L << (ROW_COUNT - 790)))) != 0) || ((((_la - 854)) & ~0x3f) == 0 && ((1L << (_la - 854)) & ((1L << (RPAD - 854)) | (1L << (RTRIM - 854)) | (1L << (SEC_TO_TIME - 854)) | (1L << (SESSION_USER - 854)) | (1L << (SHA - 854)) | (1L << (SHA1 - 854)) | (1L << (SHA2 - 854)) | (1L << (SIGN - 854)) | (1L << (SIN - 854)) | (1L << (SLEEP - 854)) | (1L << (SOUNDEX - 854)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 854)) | (1L << (SQRT - 854)) | (1L << (SRID - 854)) | (1L << (STARTPOINT - 854)) | (1L << (STRCMP - 854)) | (1L << (STR_TO_DATE - 854)) | (1L << (ST_AREA - 854)) | (1L << (ST_ASBINARY - 854)) | (1L << (ST_ASTEXT - 854)) | (1L << (ST_ASWKB - 854)) | (1L << (ST_ASWKT - 854)) | (1L << (ST_BUFFER - 854)) | (1L << (ST_CENTROID - 854)) | (1L << (ST_CONTAINS - 854)) | (1L << (ST_CROSSES - 854)) | (1L << (ST_DIFFERENCE - 854)) | (1L << (ST_DIMENSION - 854)) | (1L << (ST_DISJOINT - 854)) | (1L << (ST_DISTANCE - 854)) | (1L << (ST_ENDPOINT - 854)) | (1L << (ST_ENVELOPE - 854)) | (1L << (ST_EQUALS - 854)) | (1L << (ST_EXTERIORRING - 854)) | (1L << (ST_GEOMCOLLFROMTEXT - 854)) | (1L << (ST_GEOMCOLLFROMTXT - 854)) | (1L << (ST_GEOMCOLLFROMWKB - 854)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 854)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 854)) | (1L << (ST_GEOMETRYFROMTEXT - 854)) | (1L << (ST_GEOMETRYFROMWKB - 854)) | (1L << (ST_GEOMETRYN - 854)) | (1L << (ST_GEOMETRYTYPE - 854)) | (1L << (ST_GEOMFROMTEXT - 854)) | (1L << (ST_GEOMFROMWKB - 854)) | (1L << (ST_INTERIORRINGN - 854)) | (1L << (ST_INTERSECTION - 854)) | (1L << (ST_INTERSECTS - 854)) | (1L << (ST_ISCLOSED - 854)) | (1L << (ST_ISEMPTY - 854)) | (1L << (ST_ISSIMPLE - 854)) | (1L << (ST_LINEFROMTEXT - 854)) | (1L << (ST_LINEFROMWKB - 854)) | (1L << (ST_LINESTRINGFROMTEXT - 854)) | (1L << (ST_LINESTRINGFROMWKB - 854)) | (1L << (ST_NUMGEOMETRIES - 854)) | (1L << (ST_NUMINTERIORRING - 854)) | (1L << (ST_NUMINTERIORRINGS - 854)) | (1L << (ST_NUMPOINTS - 854)) | (1L << (ST_OVERLAPS - 854)) | (1L << (ST_POINTFROMTEXT - 854)) | (1L << (ST_POINTFROMWKB - 854)) | (1L << (ST_POINTN - 854)))) != 0) || ((((_la - 918)) & ~0x3f) == 0 && ((1L << (_la - 918)) & ((1L << (ST_POLYFROMTEXT - 918)) | (1L << (ST_POLYFROMWKB - 918)) | (1L << (ST_POLYGONFROMTEXT - 918)) | (1L << (ST_POLYGONFROMWKB - 918)) | (1L << (ST_SRID - 918)) | (1L << (ST_STARTPOINT - 918)) | (1L << (ST_SYMDIFFERENCE - 918)) | (1L << (ST_TOUCHES - 918)) | (1L << (ST_UNION - 918)) | (1L << (ST_WITHIN - 918)) | (1L << (ST_X - 918)) | (1L << (ST_Y - 918)) | (1L << (SUBDATE - 918)) | (1L << (SUBSTRING_INDEX - 918)) | (1L << (SUBTIME - 918)) | (1L << (SYSTEM_USER - 918)) | (1L << (TAN - 918)) | (1L << (TIMEDIFF - 918)) | (1L << (TIMESTAMPADD - 918)) | (1L << (TIMESTAMPDIFF - 918)) | (1L << (TIME_FORMAT - 918)) | (1L << (TIME_TO_SEC - 918)) | (1L << (TOUCHES - 918)) | (1L << (TO_BASE64 - 918)) | (1L << (TO_DAYS - 918)) | (1L << (TO_SECONDS - 918)) | (1L << (UCASE - 918)) | (1L << (UNCOMPRESS - 918)) | (1L << (UNCOMPRESSED_LENGTH - 918)) | (1L << (UNHEX - 918)) | (1L << (UNIX_TIMESTAMP - 918)) | (1L << (UPDATEXML - 918)) | (1L << (UPPER - 918)) | (1L << (UUID - 918)) | (1L << (UUID_SHORT - 918)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 918)) | (1L << (VERSION - 918)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 918)) | (1L << (WEEKDAY - 918)) | (1L << (WEEKOFYEAR - 918)) | (1L << (WEIGHT_STRING - 918)) | (1L << (WITHIN - 918)) | (1L << (YEARWEEK - 918)) | (1L << (Y_FUNCTION - 918)) | (1L << (X_FUNCTION - 918)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 301:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 302:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 303:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 9);
		case 6:
			return precpred(_ctx, 8);
		case 7:
			return precpred(_ctx, 6);
		case 8:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 3);
		case 10:
			return precpred(_ctx, 2);
		case 11:
			return precpred(_ctx, 1);
		case 12:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03fc\u18c8\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\3\2\5\2\u027e\n\2\3\2\5\2\u0281\n\2\3\2\3\2\3\3\3\3\5"+
		"\3\u0287\n\3\3\3\5\3\u028a\n\3\3\3\7\3\u028d\n\3\f\3\16\3\u0290\13\3\3"+
		"\3\3\3\5\3\u0294\n\3\3\3\5\3\u0297\n\3\3\3\5\3\u029a\n\3\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\5\4\u02a3\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u02ca\n\6\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\5\7\u02d6\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\5\b\u02e1\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\5\t\u02f2\n\t\3\n\3\n\3\n\5\n\u02f7\n\n\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\5\13\u0303\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\5\f\u031e\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0327\n\r\3\16\3\16\3"+
		"\16\5\16\u032c\n\16\3\16\3\16\7\16\u0330\n\16\f\16\16\16\u0333\13\16\3"+
		"\17\3\17\5\17\u0337\n\17\3\17\3\17\5\17\u033b\n\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\5\17\u0344\n\17\3\17\5\17\u0347\n\17\3\17\5\17\u034a\n"+
		"\17\3\17\3\17\5\17\u034e\n\17\3\17\3\17\3\17\3\20\3\20\5\20\u0355\n\20"+
		"\3\20\5\20\u0358\n\20\3\20\3\20\3\20\5\20\u035d\n\20\3\20\3\20\3\20\3"+
		"\20\7\20\u0363\n\20\f\20\16\20\u0366\13\20\3\20\3\20\5\20\u036a\n\20\3"+
		"\20\3\20\3\20\5\20\u036f\n\20\3\20\7\20\u0372\n\20\f\20\16\20\u0375\13"+
		"\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0380\n\21\3\21"+
		"\5\21\u0383\n\21\3\21\3\21\5\21\u0387\n\21\3\21\5\21\u038a\n\21\3\21\3"+
		"\21\5\21\u038e\n\21\3\21\5\21\u0391\n\21\3\21\3\21\5\21\u0395\n\21\3\21"+
		"\5\21\u0398\n\21\3\21\5\21\u039b\n\21\3\21\3\21\5\21\u039f\n\21\3\21\5"+
		"\21\u03a2\n\21\3\21\3\21\5\21\u03a6\n\21\3\21\3\21\3\22\3\22\5\22\u03ac"+
		"\n\22\3\22\3\22\3\22\3\22\5\22\u03b2\n\22\3\22\3\22\7\22\u03b6\n\22\f"+
		"\22\16\22\u03b9\13\22\3\22\3\22\7\22\u03bd\n\22\f\22\16\22\u03c0\13\22"+
		"\3\22\3\22\3\23\3\23\5\23\u03c6\n\23\3\23\3\23\3\23\3\23\5\23\u03cc\n"+
		"\23\3\23\3\23\7\23\u03d0\n\23\f\23\16\23\u03d3\13\23\3\23\3\23\3\23\3"+
		"\23\7\23\u03d9\n\23\f\23\16\23\u03dc\13\23\3\23\3\23\5\23\u03e0\n\23\3"+
		"\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u03ee"+
		"\n\24\f\24\16\24\u03f1\13\24\3\24\3\24\3\25\3\25\5\25\u03f7\n\25\3\25"+
		"\3\25\5\25\u03fb\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0405"+
		"\n\25\3\25\3\25\5\25\u0409\n\25\3\25\3\25\5\25\u040d\n\25\3\25\3\25\5"+
		"\25\u0411\n\25\3\25\3\25\5\25\u0415\n\25\3\25\7\25\u0418\n\25\f\25\16"+
		"\25\u041b\13\25\5\25\u041d\n\25\3\25\5\25\u0420\n\25\3\25\5\25\u0423\n"+
		"\25\3\25\5\25\u0426\n\25\3\25\3\25\3\25\3\25\5\25\u042c\n\25\3\25\3\25"+
		"\5\25\u0430\n\25\3\25\3\25\3\25\3\25\5\25\u0436\n\25\3\25\7\25\u0439\n"+
		"\25\f\25\16\25\u043c\13\25\5\25\u043e\n\25\3\25\5\25\u0441\n\25\5\25\u0443"+
		"\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u044e\n\26\3\26"+
		"\3\26\5\26\u0452\n\26\3\26\5\26\u0455\n\26\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0463\n\27\3\27\5\27\u0466\n\27"+
		"\3\27\3\27\5\27\u046a\n\27\3\27\5\27\u046d\n\27\3\27\3\27\5\27\u0471\n"+
		"\27\3\27\5\27\u0474\n\27\3\27\3\27\5\27\u0478\n\27\3\27\5\27\u047b\n\27"+
		"\3\27\3\27\5\27\u047f\n\27\3\27\5\27\u0482\n\27\3\27\5\27\u0485\n\27\3"+
		"\27\3\27\5\27\u0489\n\27\3\27\5\27\u048c\n\27\3\27\3\27\5\27\u0490\n\27"+
		"\3\27\3\27\3\30\3\30\5\30\u0496\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\3\30\3\30\3\30\5\30\u04a3\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u04aa"+
		"\n\31\3\31\3\31\3\31\5\31\u04af\n\31\3\31\5\31\u04b2\n\31\3\31\3\31\3"+
		"\31\5\31\u04b7\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u04bf\n\31\3\31"+
		"\3\31\3\31\3\31\5\31\u04c5\n\31\3\31\3\31\5\31\u04c9\n\31\3\32\5\32\u04cc"+
		"\n\32\3\32\3\32\3\32\5\32\u04d1\n\32\3\32\5\32\u04d4\n\32\3\32\3\32\5"+
		"\32\u04d8\n\32\3\32\5\32\u04db\n\32\3\32\3\32\5\32\u04df\n\32\3\32\5\32"+
		"\u04e2\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u04ea\n\33\5\33\u04ec\n"+
		"\33\3\34\3\34\3\34\7\34\u04f1\n\34\f\34\16\34\u04f4\13\34\3\34\3\34\3"+
		"\34\5\34\u04f9\n\34\3\34\3\34\3\34\3\34\7\34\u04ff\n\34\f\34\16\34\u0502"+
		"\13\34\5\34\u0504\n\34\3\34\3\34\3\34\7\34\u0509\n\34\f\34\16\34\u050c"+
		"\13\34\5\34\u050e\n\34\5\34\u0510\n\34\3\35\3\35\3\35\3\35\5\35\u0516"+
		"\n\35\3\36\3\36\3\36\3\36\5\36\u051c\n\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u052d\n\37\3 \3 \3"+
		" \3 \3 \5 \u0534\n \3!\3!\3!\3\"\3\"\5\"\u053b\n\"\3\"\3\"\3\"\3\"\3\""+
		"\3\"\3\"\3\"\3\"\5\"\u0546\n\"\3#\5#\u0549\n#\3#\3#\3#\3$\3$\3$\3%\3%"+
		"\3%\3%\3%\5%\u0556\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0563\n%\3%"+
		"\3%\3%\5%\u0568\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0578"+
		"\n&\3\'\3\'\3\'\3\'\7\'\u057e\n\'\f\'\16\'\u0581\13\'\3\'\3\'\3(\3(\3"+
		"(\3(\3(\5(\u058a\n(\3)\3)\7)\u058e\n)\f)\16)\u0591\13)\3*\3*\3*\3*\3*"+
		"\3*\3*\5*\u059a\n*\3*\5*\u059d\n*\3*\3*\3*\5*\u05a2\n*\3*\3*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\5*\u05af\n*\3*\3*\3*\3*\3*\5*\u05b6\n*\3*\3*\3*\5*"+
		"\u05bb\n*\3+\3+\5+\u05bf\n+\5+\u05c1\n+\3+\3+\3+\5+\u05c6\n+\3+\5+\u05c9"+
		"\n+\3+\3+\7+\u05cd\n+\f+\16+\u05d0\13+\3+\3+\5+\u05d4\n+\5+\u05d6\n+\3"+
		"+\3+\5+\u05da\n+\3+\5+\u05dd\n+\3+\5+\u05e0\n+\3+\3+\7+\u05e4\n+\f+\16"+
		"+\u05e7\13+\3+\3+\5+\u05eb\n+\5+\u05ed\n+\3+\3+\3+\5+\u05f2\n+\3+\3+\3"+
		"+\3+\3+\5+\u05f9\n+\5+\u05fb\n+\3+\3+\3+\3+\3+\5+\u0602\n+\3,\3,\3,\5"+
		",\u0607\n,\3,\3,\5,\u060b\n,\3,\5,\u060e\n,\3-\3-\3-\3-\3-\3-\5-\u0616"+
		"\n-\3-\3-\3-\3-\3-\3-\5-\u061e\n-\5-\u0620\n-\3.\3.\3.\3.\3.\3.\5.\u0628"+
		"\n.\3/\3/\5/\u062c\n/\3/\5/\u062f\n/\3/\3/\7/\u0633\n/\f/\16/\u0636\13"+
		"/\3/\3/\5/\u063a\n/\3/\5/\u063d\n/\3/\3/\7/\u0641\n/\f/\16/\u0644\13/"+
		"\5/\u0646\n/\3\60\3\60\5\60\u064a\n\60\3\60\3\60\3\60\5\60\u064f\n\60"+
		"\3\60\3\60\3\60\5\60\u0654\n\60\3\60\3\60\5\60\u0658\n\60\3\60\3\60\3"+
		"\60\5\60\u065d\n\60\3\60\5\60\u0660\n\60\3\60\3\60\5\60\u0664\n\60\3\60"+
		"\3\60\5\60\u0668\n\60\3\60\3\60\5\60\u066c\n\60\3\60\3\60\5\60\u0670\n"+
		"\60\3\60\3\60\3\60\5\60\u0675\n\60\3\60\3\60\3\60\5\60\u067a\n\60\3\60"+
		"\3\60\3\60\5\60\u067f\n\60\3\60\3\60\3\60\3\60\5\60\u0685\n\60\3\60\3"+
		"\60\3\60\5\60\u068a\n\60\3\60\3\60\3\60\5\60\u068f\n\60\3\60\3\60\3\60"+
		"\3\60\5\60\u0695\n\60\3\60\3\60\3\60\5\60\u069a\n\60\3\60\3\60\3\60\5"+
		"\60\u069f\n\60\3\60\3\60\3\60\5\60\u06a4\n\60\3\60\3\60\3\60\5\60\u06a9"+
		"\n\60\3\60\3\60\3\60\5\60\u06ae\n\60\3\60\3\60\3\60\5\60\u06b3\n\60\3"+
		"\60\3\60\3\60\5\60\u06b8\n\60\3\60\3\60\3\60\5\60\u06bd\n\60\3\60\3\60"+
		"\3\60\5\60\u06c2\n\60\3\60\3\60\3\60\5\60\u06c7\n\60\3\60\3\60\3\60\3"+
		"\60\5\60\u06cd\n\60\3\60\3\60\3\60\5\60\u06d2\n\60\3\60\3\60\3\60\3\60"+
		"\5\60\u06d8\n\60\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u06e2\n"+
		"\62\3\62\3\62\3\62\3\62\3\62\5\62\u06e9\n\62\5\62\u06eb\n\62\3\62\3\62"+
		"\3\62\3\62\7\62\u06f1\n\62\f\62\16\62\u06f4\13\62\3\62\3\62\5\62\u06f8"+
		"\n\62\3\63\5\63\u06fb\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0703\n"+
		"\63\3\63\3\63\3\63\3\63\5\63\u0709\n\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0719\n\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0725\n\63\5\63\u0727\n\63\3"+
		"\64\5\64\u072a\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0732\n\64\3\64"+
		"\3\64\3\64\3\64\5\64\u0738\n\64\3\64\3\64\3\64\3\64\5\64\u073e\n\64\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0749\n\65\f\65\16\65"+
		"\u074c\13\65\3\65\3\65\7\65\u0750\n\65\f\65\16\65\u0753\13\65\3\65\3\65"+
		"\3\65\7\65\u0758\n\65\f\65\16\65\u075b\13\65\5\65\u075d\n\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\7\65\u0766\n\65\f\65\16\65\u0769\13\65\3\65"+
		"\3\65\3\65\7\65\u076e\n\65\f\65\16\65\u0771\13\65\5\65\u0773\n\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u077d\n\65\f\65\16\65\u0780\13"+
		"\65\3\65\3\65\7\65\u0784\n\65\f\65\16\65\u0787\13\65\3\65\3\65\3\65\7"+
		"\65\u078c\n\65\f\65\16\65\u078f\13\65\5\65\u0791\n\65\3\65\3\65\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\7\65\u079b\n\65\f\65\16\65\u079e\13\65\3\65\3"+
		"\65\7\65\u07a2\n\65\f\65\16\65\u07a5\13\65\3\65\3\65\3\65\7\65\u07aa\n"+
		"\65\f\65\16\65\u07ad\13\65\5\65\u07af\n\65\3\65\3\65\3\65\7\65\u07b4\n"+
		"\65\f\65\16\65\u07b7\13\65\3\65\3\65\3\65\7\65\u07bc\n\65\f\65\16\65\u07bf"+
		"\13\65\5\65\u07c1\n\65\5\65\u07c3\n\65\3\66\3\66\3\66\5\66\u07c8\n\66"+
		"\3\67\3\67\3\67\3\67\6\67\u07ce\n\67\r\67\16\67\u07cf\3\67\3\67\38\38"+
		"\38\78\u07d7\n8\f8\168\u07da\138\39\59\u07dd\n9\39\39\59\u07e1\n9\39\3"+
		"9\39\59\u07e6\n9\39\39\39\39\59\u07ec\n9\39\39\39\39\59\u07f2\n9\39\3"+
		"9\39\59\u07f7\n9\39\39\39\59\u07fc\n9\39\39\39\59\u0801\n9\39\39\39\5"+
		"9\u0806\n9\39\59\u0809\n9\3:\3:\3:\5:\u080e\n:\3:\6:\u0811\n:\r:\16:\u0812"+
		"\3:\3:\3:\3:\3:\3:\3:\3:\5:\u081d\n:\3;\3;\5;\u0821\n;\3;\3;\3;\3;\3;"+
		"\5;\u0828\n;\3;\3;\3;\5;\u082d\n;\3;\5;\u0830\n;\3;\3;\3;\5;\u0835\n;"+
		"\3;\5;\u0838\n;\3;\3;\5;\u083c\n;\3;\3;\5;\u0840\n;\3<\3<\3<\3<\7<\u0846"+
		"\n<\f<\16<\u0849\13<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\5"+
		">\u085b\n>\3>\5>\u085e\n>\3>\5>\u0861\n>\3>\3>\5>\u0865\n>\3>\3>\3?\3"+
		"?\3?\3?\7?\u086d\n?\f?\16?\u0870\13?\3@\3@\3@\3@\3@\3@\3@\3@\7@\u087a"+
		"\n@\f@\16@\u087d\13@\3@\3@\3A\3A\5A\u0883\nA\3A\5A\u0886\nA\3A\3A\3A\3"+
		"A\3A\7A\u088d\nA\fA\16A\u0890\13A\5A\u0892\nA\3A\5A\u0895\nA\3B\3B\3B"+
		"\3B\3B\3B\3B\3B\3B\5B\u08a0\nB\3B\5B\u08a3\nB\3B\3B\5B\u08a7\nB\3B\3B"+
		"\3C\3C\3C\3C\5C\u08af\nC\3C\5C\u08b2\nC\3C\3C\3C\5C\u08b7\nC\3C\3C\3C"+
		"\3C\3C\3C\5C\u08bf\nC\3C\3C\3C\3C\5C\u08c5\nC\3C\3C\5C\u08c9\nC\3D\3D"+
		"\5D\u08cd\nD\3D\7D\u08d0\nD\fD\16D\u08d3\13D\3D\3D\5D\u08d7\nD\3D\3D\3"+
		"D\3D\3D\5D\u08de\nD\3D\3D\5D\u08e2\nD\3D\3D\3D\3D\3D\3D\3D\7D\u08eb\n"+
		"D\fD\16D\u08ee\13D\3D\3D\3D\3D\3D\5D\u08f5\nD\3D\5D\u08f8\nD\3D\3D\7D"+
		"\u08fc\nD\fD\16D\u08ff\13D\3D\3D\3D\5D\u0904\nD\5D\u0906\nD\3D\3D\3D\5"+
		"D\u090b\nD\3D\3D\7D\u090f\nD\fD\16D\u0912\13D\3D\3D\3D\5D\u0917\nD\5D"+
		"\u0919\nD\3D\3D\5D\u091d\nD\3D\5D\u0920\nD\3D\5D\u0923\nD\3D\3D\7D\u0927"+
		"\nD\fD\16D\u092a\13D\3D\3D\3D\5D\u092f\nD\3D\5D\u0932\nD\3D\3D\7D\u0936"+
		"\nD\fD\16D\u0939\13D\3D\3D\3D\5D\u093e\nD\5D\u0940\nD\3D\3D\3D\5D\u0945"+
		"\nD\3D\3D\3D\3D\3D\3D\5D\u094d\nD\5D\u094f\nD\3D\3D\3D\3D\3D\3D\3D\5D"+
		"\u0958\nD\3D\3D\3D\5D\u095d\nD\3D\3D\3D\3D\3D\3D\5D\u0965\nD\3D\3D\5D"+
		"\u0969\nD\3D\3D\3D\3D\3D\3D\5D\u0971\nD\3D\3D\3D\3D\3D\3D\3D\3D\5D\u097b"+
		"\nD\3D\3D\3D\5D\u0980\nD\3D\3D\3D\3D\3D\5D\u0987\nD\3D\3D\5D\u098b\nD"+
		"\3D\3D\5D\u098f\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\5D\u09a7\nD\3D\3D\5D\u09ab\nD\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\5D\u09b7\nD\3D\5D\u09ba\nD\3D\3D\3D\3D\3D\3D\3D\5D\u09c3\nD\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09d2\nD\fD\16D\u09d5\13D\3D\3"+
		"D\3D\3D\3D\3D\3D\3D\3D\5D\u09e0\nD\3D\3D\3D\3D\3D\5D\u09e7\nD\3D\3D\3"+
		"D\3D\3D\5D\u09ee\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09fb\nD\fD\16"+
		"D\u09fe\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0a0a\nD\3D\3D\3D\3D\5D\u0a10"+
		"\nD\3D\3D\3D\3D\5D\u0a16\nD\3D\3D\3D\3D\5D\u0a1c\nD\3D\3D\3D\3D\5D\u0a22"+
		"\nD\3D\3D\3D\3D\5D\u0a28\nD\3D\3D\3D\3D\5D\u0a2e\nD\3E\3E\3E\5E\u0a33"+
		"\nE\3E\3E\3F\3F\3F\5F\u0a3a\nF\3F\3F\3G\3G\3G\5G\u0a41\nG\3G\3G\3G\3G"+
		"\3G\5G\u0a48\nG\3G\3G\3G\5G\u0a4d\nG\3G\7G\u0a50\nG\fG\16G\u0a53\13G\3"+
		"H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\5I\u0a60\nI\3I\3I\3J\3J\3J\5J\u0a67\n"+
		"J\3J\3J\3K\3K\3K\5K\u0a6e\nK\3K\3K\3L\3L\5L\u0a74\nL\3L\3L\5L\u0a78\n"+
		"L\3L\3L\5L\u0a7c\nL\3M\3M\3M\3M\3M\5M\u0a83\nM\3M\5M\u0a86\nM\3N\3N\3"+
		"N\5N\u0a8b\nN\3N\3N\3O\3O\3O\5O\u0a92\nO\3O\3O\3O\7O\u0a97\nO\fO\16O\u0a9a"+
		"\13O\3O\5O\u0a9d\nO\3P\3P\3P\3P\3P\7P\u0aa4\nP\fP\16P\u0aa7\13P\3Q\3Q"+
		"\3Q\3Q\3R\3R\5R\u0aaf\nR\3R\3R\3S\3S\3S\3S\3S\5S\u0ab8\nS\3S\5S\u0abb"+
		"\nS\3T\3T\5T\u0abf\nT\3U\3U\3U\3V\3V\3V\3V\5V\u0ac8\nV\3W\3W\5W\u0acc"+
		"\nW\3W\5W\u0acf\nW\3W\5W\u0ad2\nW\3W\3W\3W\3W\5W\u0ad8\nW\3W\5W\u0adb"+
		"\nW\3W\3W\3W\3W\5W\u0ae1\nW\3W\3W\3W\3W\3W\7W\u0ae8\nW\fW\16W\u0aeb\13"+
		"W\5W\u0aed\nW\3W\3W\3W\3W\3W\3W\3W\7W\u0af6\nW\fW\16W\u0af9\13W\5W\u0afb"+
		"\nW\3X\3X\3X\5X\u0b00\nX\3X\5X\u0b03\nX\3X\3X\3X\5X\u0b08\nX\3X\3X\3X"+
		"\3X\3X\3X\3X\3X\5X\u0b12\nX\3X\3X\3X\5X\u0b17\nX\3X\3X\6X\u0b1b\nX\rX"+
		"\16X\u0b1c\5X\u0b1f\nX\3X\3X\6X\u0b23\nX\rX\16X\u0b24\5X\u0b27\nX\3X\3"+
		"X\3X\3X\5X\u0b2d\nX\3X\3X\3X\3X\7X\u0b33\nX\fX\16X\u0b36\13X\3X\3X\5X"+
		"\u0b3a\nX\3X\3X\3X\3X\7X\u0b40\nX\fX\16X\u0b43\13X\5X\u0b45\nX\3Y\3Y\3"+
		"Y\5Y\u0b4a\nY\3Y\5Y\u0b4d\nY\3Y\3Y\3Y\5Y\u0b52\nY\3Y\3Y\3Y\3Y\3Y\3Y\5"+
		"Y\u0b5a\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b62\nY\3Y\3Y\3Y\3Y\5Y\u0b68\nY\3Y\3"+
		"Y\3Y\3Y\7Y\u0b6e\nY\fY\16Y\u0b71\13Y\3Y\3Y\5Y\u0b75\nY\3Y\3Y\3Y\3Y\7Y"+
		"\u0b7b\nY\fY\16Y\u0b7e\13Y\5Y\u0b80\nY\3Z\3Z\5Z\u0b84\nZ\3Z\5Z\u0b87\n"+
		"Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b8f\nZ\3Z\3Z\3Z\3Z\5Z\u0b95\nZ\3Z\3Z\3Z\3Z\3"+
		"Z\7Z\u0b9c\nZ\fZ\16Z\u0b9f\13Z\5Z\u0ba1\nZ\3[\3[\5[\u0ba5\n[\3[\3[\5["+
		"\u0ba9\n[\3[\3[\6[\u0bad\n[\r[\16[\u0bae\3[\3[\5[\u0bb3\n[\3[\3[\5[\u0bb7"+
		"\n[\5[\u0bb9\n[\3[\5[\u0bbc\n[\3[\5[\u0bbf\n[\3[\5[\u0bc2\n[\3[\3[\6["+
		"\u0bc6\n[\r[\16[\u0bc7\3[\3[\5[\u0bcc\n[\3[\5[\u0bcf\n[\3[\5[\u0bd2\n"+
		"[\3[\5[\u0bd5\n[\3[\5[\u0bd8\n[\5[\u0bda\n[\3\\\3\\\5\\\u0bde\n\\\3]\3"+
		"]\3]\3]\5]\u0be4\n]\3]\3]\3]\3]\5]\u0bea\n]\3]\7]\u0bed\n]\f]\16]\u0bf0"+
		"\13]\5]\u0bf2\n]\3^\3^\3^\3^\5^\u0bf8\n^\3_\3_\5_\u0bfc\n_\3`\3`\3`\3"+
		"`\3`\3`\5`\u0c04\n`\3a\3a\5a\u0c08\na\3a\5a\u0c0b\na\3a\5a\u0c0e\na\3"+
		"a\3a\3a\3a\3a\3a\3a\5a\u0c17\na\3a\3a\5a\u0c1b\na\3a\5a\u0c1e\na\3a\3"+
		"a\5a\u0c22\na\3b\3b\5b\u0c26\nb\3b\5b\u0c29\nb\3b\5b\u0c2c\nb\3b\3b\3"+
		"b\5b\u0c31\nb\3b\3b\3b\3b\5b\u0c37\nb\7b\u0c39\nb\fb\16b\u0c3c\13b\3b"+
		"\3b\3b\3b\3b\3b\3b\5b\u0c45\nb\3b\3b\3b\3b\5b\u0c4b\nb\7b\u0c4d\nb\fb"+
		"\16b\u0c50\13b\3b\3b\3b\5b\u0c55\nb\3b\3b\5b\u0c59\nb\3c\3c\3c\3c\5c\u0c5f"+
		"\nc\3c\5c\u0c62\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0c6e\nd\3d\3d\5d"+
		"\u0c72\nd\3d\3d\5d\u0c76\nd\3e\3e\3e\3e\3e\3e\5e\u0c7e\ne\3e\3e\5e\u0c82"+
		"\ne\3f\3f\3f\3f\3g\3g\5g\u0c8a\ng\3g\5g\u0c8d\ng\3g\3g\5g\u0c91\ng\3g"+
		"\5g\u0c94\ng\3g\3g\3g\3g\7g\u0c9a\ng\fg\16g\u0c9d\13g\3g\3g\5g\u0ca1\n"+
		"g\3g\5g\u0ca4\ng\3g\5g\u0ca7\ng\3h\3h\5h\u0cab\nh\3h\5h\u0cae\nh\3h\3"+
		"h\3h\3h\3h\7h\u0cb5\nh\fh\16h\u0cb8\13h\3h\3h\5h\u0cbc\nh\3i\3i\3i\3i"+
		"\3i\7i\u0cc3\ni\fi\16i\u0cc6\13i\3j\3j\5j\u0cca\nj\3k\3k\3k\7k\u0ccf\n"+
		"k\fk\16k\u0cd2\13k\3l\3l\7l\u0cd6\nl\fl\16l\u0cd9\13l\3l\3l\3l\7l\u0cde"+
		"\nl\fl\16l\u0ce1\13l\3l\3l\5l\u0ce5\nl\3m\3m\3m\3m\3m\3m\5m\u0ced\nm\3"+
		"m\5m\u0cf0\nm\3m\5m\u0cf3\nm\3m\3m\3m\7m\u0cf8\nm\fm\16m\u0cfb\13m\5m"+
		"\u0cfd\nm\3m\3m\3m\3m\3m\5m\u0d04\nm\3m\5m\u0d07\nm\3m\3m\3m\3m\3m\3m"+
		"\5m\u0d0f\nm\3n\3n\3n\3n\5n\u0d15\nn\3n\3n\3n\3n\3o\3o\3o\3o\3o\5o\u0d20"+
		"\no\3p\5p\u0d23\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d2e\np\3p\3p\3p\3p"+
		"\5p\u0d34\np\3p\3p\5p\u0d38\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d43\np"+
		"\3p\3p\3p\5p\u0d48\np\5p\u0d4a\np\3p\3p\5p\u0d4e\np\3q\3q\3q\3q\3q\3q"+
		"\3q\3q\5q\u0d58\nq\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0d62\nr\3s\3s\7s\u0d66"+
		"\ns\fs\16s\u0d69\13s\3s\3s\5s\u0d6d\ns\3s\5s\u0d70\ns\3s\5s\u0d73\ns\3"+
		"s\5s\u0d76\ns\3s\3s\7s\u0d7a\ns\fs\16s\u0d7d\13s\3s\3s\5s\u0d81\ns\3s"+
		"\5s\u0d84\ns\3s\5s\u0d87\ns\3s\5s\u0d8a\ns\5s\u0d8c\ns\3t\3t\7t\u0d90"+
		"\nt\ft\16t\u0d93\13t\3t\3t\5t\u0d97\nt\3t\5t\u0d9a\nt\3t\5t\u0d9d\nt\3"+
		"u\3u\5u\u0da1\nu\3u\3u\3v\3v\5v\u0da7\nv\3v\3v\5v\u0dab\nv\3w\3w\3w\3"+
		"w\3w\3w\3w\3w\5w\u0db5\nw\3x\3x\5x\u0db9\nx\3x\3x\7x\u0dbd\nx\fx\16x\u0dc0"+
		"\13x\3y\3y\3y\3y\3y\3y\5y\u0dc8\ny\3y\5y\u0dcb\ny\3y\3y\5y\u0dcf\ny\3"+
		"y\5y\u0dd2\ny\3y\3y\5y\u0dd6\ny\3y\3y\5y\u0dda\ny\3y\5y\u0ddd\ny\5y\u0ddf"+
		"\ny\3z\3z\3z\3z\7z\u0de5\nz\fz\16z\u0de8\13z\3z\3z\3z\3z\3z\3z\3z\3z\3"+
		"z\5z\u0df3\nz\3z\3z\6z\u0df7\nz\rz\16z\u0df8\5z\u0dfb\nz\3z\3z\6z\u0dff"+
		"\nz\rz\16z\u0e00\5z\u0e03\nz\5z\u0e05\nz\3{\3{\3{\3{\5{\u0e0b\n{\3{\3"+
		"{\3{\3{\3{\3{\5{\u0e13\n{\3|\3|\3|\3|\3|\3|\5|\u0e1b\n|\3}\3}\3}\3}\5"+
		"}\u0e21\n}\3}\3}\3}\3}\3}\7}\u0e28\n}\f}\16}\u0e2b\13}\3}\3}\5}\u0e2f"+
		"\n}\5}\u0e31\n}\3}\3}\5}\u0e35\n}\3~\3~\5~\u0e39\n~\3\177\3\177\3\177"+
		"\3\177\5\177\u0e3f\n\177\3\177\3\177\3\177\3\177\3\177\5\177\u0e46\n\177"+
		"\3\u0080\3\u0080\5\u0080\u0e4a\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\7\u0081\u0e51\n\u0081\f\u0081\16\u0081\u0e54\13\u0081\5\u0081"+
		"\u0e56\n\u0081\3\u0082\3\u0082\5\u0082\u0e5a\n\u0082\3\u0083\3\u0083\5"+
		"\u0083\u0e5e\n\u0083\3\u0083\3\u0083\5\u0083\u0e62\n\u0083\3\u0083\5\u0083"+
		"\u0e65\n\u0083\3\u0083\5\u0083\u0e68\n\u0083\3\u0083\5\u0083\u0e6b\n\u0083"+
		"\3\u0084\3\u0084\5\u0084\u0e6f\n\u0084\3\u0084\3\u0084\5\u0084\u0e73\n"+
		"\u0084\3\u0084\5\u0084\u0e76\n\u0084\3\u0084\5\u0084\u0e79\n\u0084\3\u0084"+
		"\5\u0084\u0e7c\n\u0084\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086"+
		"\u0e83\n\u0086\3\u0086\3\u0086\5\u0086\u0e87\n\u0086\3\u0086\3\u0086\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\7\u0088\u0e94\n\u0088\f\u0088\16\u0088\u0e97\13\u0088\3\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b"+
		"\u0ea3\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u0ea9\n\u008b\f"+
		"\u008b\16\u008b\u0eac\13\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\5\u008c\u0eb5\n\u008c\3\u008d\3\u008d\5\u008d\u0eb9\n"+
		"\u008d\3\u008d\5\u008d\u0ebc\n\u008d\3\u008d\3\u008d\3\u008e\3\u008e\5"+
		"\u008e\u0ec2\n\u008e\3\u008e\5\u008e\u0ec5\n\u008e\3\u008e\5\u008e\u0ec8"+
		"\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0ed1\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\5\u0090\u0eda\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\7\u0091\u0ee2\n\u0091\f\u0091\16\u0091\u0ee5\13\u0091\3\u0091\5\u0091"+
		"\u0ee8\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092"+
		"\u0ef0\n\u0092\f\u0092\16\u0092\u0ef3\13\u0092\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0efc\n\u0093\3\u0094\3\u0094"+
		"\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u0f04\n\u0095\3\u0095\5\u0095"+
		"\u0f07\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u0f0e\n"+
		"\u0096\f\u0096\16\u0096\u0f11\13\u0096\5\u0096\u0f13\n\u0096\3\u0096\3"+
		"\u0096\5\u0096\u0f17\n\u0096\3\u0096\7\u0096\u0f1a\n\u0096\f\u0096\16"+
		"\u0096\u0f1d\13\u0096\3\u0096\5\u0096\u0f20\n\u0096\3\u0097\3\u0097\3"+
		"\u0097\3\u0097\3\u0097\7\u0097\u0f27\n\u0097\f\u0097\16\u0097\u0f2a\13"+
		"\u0097\5\u0097\u0f2c\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3"+
		"\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0f49\n\u009a\f\u009a\16\u009a"+
		"\u0f4c\13\u009a\5\u009a\u0f4e\n\u009a\3\u009a\5\u009a\u0f51\n\u009a\3"+
		"\u009b\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0f87"+
		"\n\u009f\f\u009f\16\u009f\u0f8a\13\u009f\3\u009f\3\u009f\5\u009f\u0f8e"+
		"\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0faa\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0fb8\n\u00a3"+
		"\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u0fbd\n\u00a4\f\u00a4\16\u00a4\u0fc0"+
		"\13\u00a4\3\u00a4\5\u00a4\u0fc3\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\5\u00a5\u0fc9\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0fd1\n\u00a6\5\u00a6\u0fd3\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3"+
		"\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fde\n\u00a8\3"+
		"\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0fe8\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fef\n"+
		"\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0ff5\n\u00ac\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae\u0ffd\n\u00ae\3\u00af\3"+
		"\u00af\3\u00af\5\u00af\u1002\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7"+
		"\u00af\u1008\n\u00af\f\u00af\16\u00af\u100b\13\u00af\3\u00af\3\u00af\3"+
		"\u00af\7\u00af\u1010\n\u00af\f\u00af\16\u00af\u1013\13\u00af\3\u00af\3"+
		"\u00af\3\u00af\7\u00af\u1018\n\u00af\f\u00af\16\u00af\u101b\13\u00af\3"+
		"\u00af\3\u00af\3\u00af\7\u00af\u1020\n\u00af\f\u00af\16\u00af\u1023\13"+
		"\u00af\3\u00af\7\u00af\u1026\n\u00af\f\u00af\16\u00af\u1029\13\u00af\5"+
		"\u00af\u102b\n\u00af\3\u00af\3\u00af\5\u00af\u102f\n\u00af\3\u00b0\3\u00b0"+
		"\3\u00b0\5\u00b0\u1034\n\u00b0\3\u00b0\6\u00b0\u1037\n\u00b0\r\u00b0\16"+
		"\u00b0\u1038\3\u00b0\3\u00b0\6\u00b0\u103d\n\u00b0\r\u00b0\16\u00b0\u103e"+
		"\5\u00b0\u1041\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\6\u00b1\u104a\n\u00b1\r\u00b1\16\u00b1\u104b\3\u00b1\7\u00b1"+
		"\u104f\n\u00b1\f\u00b1\16\u00b1\u1052\13\u00b1\3\u00b1\3\u00b1\6\u00b1"+
		"\u1056\n\u00b1\r\u00b1\16\u00b1\u1057\5\u00b1\u105a\n\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b4"+
		"\3\u00b4\3\u00b4\5\u00b4\u1068\n\u00b4\3\u00b4\3\u00b4\6\u00b4\u106c\n"+
		"\u00b4\r\u00b4\16\u00b4\u106d\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1073\n"+
		"\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u1078\n\u00b5\3\u00b5\3\u00b5\6"+
		"\u00b5\u107c\n\u00b5\r\u00b5\16\u00b5\u107d\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u1085\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3"+
		"\u00b7\3\u00b7\5\u00b7\u108d\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\6"+
		"\u00b7\u1093\n\u00b7\r\u00b7\16\u00b7\u1094\3\u00b7\3\u00b7\3\u00b7\5"+
		"\u00b7\u109a\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10a0\n\u00b8"+
		"\3\u00b8\5\u00b8\u10a3\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u10ab\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\5\u00b9\u10b2\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u10bb\n\u00ba\3\u00ba\5\u00ba\u10be\n\u00ba\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u10cd\n\u00bc\f\u00bc\16\u00bc\u10d0"+
		"\13\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u10d7\n\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u10df\n\u00bd"+
		"\3\u00be\3\u00be\5\u00be\u10e3\n\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf"+
		"\3\u00bf\5\u00bf\u10ea\n\u00bf\3\u00bf\3\u00bf\6\u00bf\u10ee\n\u00bf\r"+
		"\u00bf\16\u00bf\u10ef\3\u00c0\3\u00c0\3\u00c0\3\u00c0\6\u00c0\u10f6\n"+
		"\u00c0\r\u00c0\16\u00c0\u10f7\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\7\u00c1\u10ff\n\u00c1\f\u00c1\16\u00c1\u1102\13\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\5\u00c1\u1107\n\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u110c\n"+
		"\u00c1\f\u00c1\16\u00c1\u110f\13\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\5\u00c1\u1115\n\u00c1\3\u00c1\7\u00c1\u1118\n\u00c1\f\u00c1\16\u00c1"+
		"\u111b\13\u00c1\5\u00c1\u111d\n\u00c1\5\u00c1\u111f\n\u00c1\3\u00c1\3"+
		"\u00c1\6\u00c1\u1123\n\u00c1\r\u00c1\16\u00c1\u1124\5\u00c1\u1127\n\u00c1"+
		"\3\u00c1\3\u00c1\7\u00c1\u112b\n\u00c1\f\u00c1\16\u00c1\u112e\13\u00c1"+
		"\5\u00c1\u1130\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2"+
		"\u1137\n\u00c2\f\u00c2\16\u00c2\u113a\13\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\5\u00c2\u113f\n\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u1144\n\u00c2\f"+
		"\u00c2\16\u00c2\u1147\13\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2"+
		"\u114d\n\u00c2\3\u00c2\7\u00c2\u1150\n\u00c2\f\u00c2\16\u00c2\u1153\13"+
		"\u00c2\5\u00c2\u1155\n\u00c2\5\u00c2\u1157\n\u00c2\3\u00c2\3\u00c2\6\u00c2"+
		"\u115b\n\u00c2\r\u00c2\16\u00c2\u115c\5\u00c2\u115f\n\u00c2\3\u00c2\3"+
		"\u00c2\7\u00c2\u1163\n\u00c2\f\u00c2\16\u00c2\u1166\13\u00c2\5\u00c2\u1168"+
		"\n\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u116d\n\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\7\u00c3\u1172\n\u00c3\f\u00c3\16\u00c3\u1175\13\u00c3\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u117b\n\u00c4\f\u00c4\16\u00c4\u117e"+
		"\13\u00c4\3\u00c4\3\u00c4\5\u00c4\u1182\n\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\7\u00c4\u1189\n\u00c4\f\u00c4\16\u00c4\u118c\13\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1192\n\u00c4\3\u00c4\7\u00c4"+
		"\u1195\n\u00c4\f\u00c4\16\u00c4\u1198\13\u00c4\5\u00c4\u119a\n\u00c4\5"+
		"\u00c4\u119c\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u11a2\n\u00c4"+
		"\f\u00c4\16\u00c4\u11a5\13\u00c4\5\u00c4\u11a7\n\u00c4\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u11b1\n\u00c5"+
		"\f\u00c5\16\u00c5\u11b4\13\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u11b9"+
		"\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u11c0\n\u00c6"+
		"\f\u00c6\16\u00c6\u11c3\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7"+
		"\u11c9\n\u00c7\f\u00c7\16\u00c7\u11cc\13\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u11d0\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11d7\n"+
		"\u00c7\f\u00c7\16\u00c7\u11da\13\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u11df\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\7\u00c7\u11e8\n\u00c7\f\u00c7\16\u00c7\u11eb\13\u00c7\5\u00c7\u11ed\n"+
		"\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\7\u00c8\u11f7\n\u00c8\f\u00c8\16\u00c8\u11fa\13\u00c8\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\5\u00c9\u1200\n\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u1205\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u1214\n\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u121f\n\u00cb\3\u00cb\5\u00cb\u1222\n\u00cb\3\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u122c\n\u00cc\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u1236\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\5\u00ce\u1240\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u124a\n\u00d0\3\u00d1\3\u00d1\5\u00d1"+
		"\u124e\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u1252\n\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u125b\n\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1277"+
		"\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u1289\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\5\u00d4"+
		"\u1291\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\7\u00d5\u129a\n\u00d5\f\u00d5\16\u00d5\u129d\13\u00d5\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u12a3\n\u00d6\3\u00d7\3\u00d7\5\u00d7\u12a7\n"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\5\u00d8\u12ae\n\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\5\u00d8\u12b3\n\u00d8\3\u00d8\5\u00d8\u12b6\n\u00d8"+
		"\3\u00d8\5\u00d8\u12b9\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u12c2\n\u00d9\3\u00da\3\u00da\5\u00da\u12c6\n"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\7\u00dd\u12e2\n\u00dd\f\u00dd\16\u00dd\u12e5\13\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u12eb\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u12ef\n"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12f6\n\u00dd\3"+
		"\u00dd\5\u00dd\u12f9\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\5\u00dd\u1303\n\u00dd\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u130d\n\u00de\3\u00de\3"+
		"\u00de\5\u00de\u1311\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1317"+
		"\n\u00de\3\u00de\5\u00de\u131a\n\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u131f\n\u00de\3\u00de\3\u00de\5\u00de\u1323\n\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\5\u00de\u132a\n\u00de\3\u00de\5\u00de\u132d\n\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1333\n\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\5\u00de\u134b\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1358"+
		"\n\u00de\3\u00de\5\u00de\u135b\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1365\n\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u136d\n\u00de\3\u00de\3\u00de"+
		"\5\u00de\u1371\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u1378\n\u00de\3\u00de\5\u00de\u137b\n\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\7\u00de\u1382\n\u00de\f\u00de\16\u00de\u1385\13\u00de\3"+
		"\u00de\3\u00de\3\u00de\5\u00de\u138a\n\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\5\u00de\u1390\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\5\u00de\u139a\n\u00de\5\u00de\u139c\n\u00de\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\5\u00df\u13a2\n\u00df\3\u00df\5\u00df\u13a5\n"+
		"\u00df\3\u00df\5\u00df\u13a8\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u13b4\n\u00e0\3"+
		"\u00e0\5\u00e0\u13b7\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u13bd"+
		"\n\u00e1\3\u00e2\5\u00e2\u13c0\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u13c8\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u13d0\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\5\u00e3\u13d6\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u13da\n\u00e3\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u13e8\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u13f2\n\u00e6\f\u00e6\16\u00e6"+
		"\u13f5\13\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u13fb\n\u00e6"+
		"\3\u00e6\5\u00e6\u13fe\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7"+
		"\5\u00e7\u1405\n\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u140a\n\u00e7\f"+
		"\u00e7\16\u00e7\u140d\13\u00e7\3\u00e8\3\u00e8\5\u00e8\u1411\n\u00e8\3"+
		"\u00e8\6\u00e8\u1414\n\u00e8\r\u00e8\16\u00e8\u1415\3\u00e9\3\u00e9\3"+
		"\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u141f\n\u00e9\f\u00e9\16"+
		"\u00e9\u1422\13\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb"+
		"\3\u00ec\3\u00ec\5\u00ec\u142c\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u1432\n\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1437\n\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\5\u00ed\u1444\n\u00ed\5\u00ed\u1446\n\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\5\u00ed\u144b\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1450"+
		"\n\u00ed\5\u00ed\u1452\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\5\u00ee\u1459\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u1460\n\u00ef\3\u00ef\5\u00ef\u1463\n\u00ef\3\u00ef\5\u00ef\u1466\n\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u146c\n\u00ef\3\u00ef\3\u00ef"+
		"\5\u00ef\u1470\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1476\n"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u147c\n\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u1489\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u148e\n"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4\u1494\n\u00f4\f\u00f4\16"+
		"\u00f4\u1497\13\u00f4\5\u00f4\u1499\n\u00f4\3\u00f5\3\u00f5\3\u00f5\5"+
		"\u00f5\u149e\n\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u14a3\n\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u14a9\n\u00f5\f\u00f5\16\u00f5\u14ac"+
		"\13\u00f5\5\u00f5\u14ae\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u14b4\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u14b8\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u14c3\n"+
		"\u00f7\f\u00f7\16\u00f7\u14c6\13\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u14cb\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\7\u00f7\u14d5\n\u00f7\f\u00f7\16\u00f7\u14d8\13\u00f7\5\u00f7"+
		"\u14da\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\5\u00f9\u14e3\n\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u14e8\n\u00f9\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u14ee\n\u00fa\3\u00fb\3\u00fb\3"+
		"\u00fc\3\u00fc\3\u00fc\5\u00fc\u14f5\n\u00fc\5\u00fc\u14f7\n\u00fc\3\u00fd"+
		"\3\u00fd\5\u00fd\u14fb\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd"+
		"\u1501\n\u00fd\3\u00fd\5\u00fd\u1504\n\u00fd\3\u00fe\3\u00fe\3\u00ff\3"+
		"\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u150e\n\u0100\3\u0101\3"+
		"\u0101\5\u0101\u1512\n\u0101\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\6\u0103\u1524\n\u0103\r\u0103\16\u0103\u1525\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u152d\n\u0104\5\u0104\u152f\n"+
		"\u0104\3\u0105\3\u0105\3\u0105\6\u0105\u1534\n\u0105\r\u0105\16\u0105"+
		"\u1535\5\u0105\u1538\n\u0105\3\u0106\3\u0106\5\u0106\u153c\n\u0106\3\u0107"+
		"\3\u0107\3\u0107\5\u0107\u1541\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u154c\n\u0108\3\u0109"+
		"\3\u0109\3\u0109\5\u0109\u1551\n\u0109\3\u010a\3\u010a\3\u010b\3\u010b"+
		"\5\u010b\u1557\n\u010b\3\u010c\5\u010c\u155a\n\u010c\3\u010c\3\u010c\5"+
		"\u010c\u155e\n\u010c\3\u010c\6\u010c\u1561\n\u010c\r\u010c\16\u010c\u1562"+
		"\3\u010c\5\u010c\u1566\n\u010c\3\u010c\3\u010c\5\u010c\u156a\n\u010c\3"+
		"\u010c\3\u010c\5\u010c\u156e\n\u010c\5\u010c\u1570\n\u010c\3\u010d\3\u010d"+
		"\3\u010e\5\u010e\u1575\n\u010e\3\u010e\3\u010e\3\u010f\5\u010f\u157a\n"+
		"\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\5\u0110\u1587\n\u0110\3\u0110\5\u0110\u158a\n"+
		"\u0110\3\u0111\3\u0111\5\u0111\u158e\n\u0111\3\u0111\5\u0111\u1591\n\u0111"+
		"\3\u0111\3\u0111\3\u0111\5\u0111\u1596\n\u0111\3\u0111\5\u0111\u1599\n"+
		"\u0111\3\u0111\3\u0111\5\u0111\u159d\n\u0111\3\u0111\3\u0111\3\u0111\5"+
		"\u0111\u15a2\n\u0111\3\u0111\5\u0111\u15a5\n\u0111\3\u0111\3\u0111\3\u0111"+
		"\5\u0111\u15aa\n\u0111\3\u0111\5\u0111\u15ad\n\u0111\3\u0111\3\u0111\3"+
		"\u0111\3\u0111\5\u0111\u15b3\n\u0111\3\u0111\5\u0111\u15b6\n\u0111\3\u0111"+
		"\3\u0111\5\u0111\u15ba\n\u0111\3\u0111\5\u0111\u15bd\n\u0111\3\u0111\5"+
		"\u0111\u15c0\n\u0111\3\u0111\3\u0111\5\u0111\u15c4\n\u0111\3\u0111\5\u0111"+
		"\u15c7\n\u0111\3\u0111\5\u0111\u15ca\n\u0111\3\u0111\3\u0111\5\u0111\u15ce"+
		"\n\u0111\3\u0111\5\u0111\u15d1\n\u0111\3\u0111\5\u0111\u15d4\n\u0111\3"+
		"\u0111\5\u0111\u15d7\n\u0111\3\u0111\3\u0111\5\u0111\u15db\n\u0111\3\u0111"+
		"\5\u0111\u15de\n\u0111\3\u0111\5\u0111\u15e1\n\u0111\3\u0111\3\u0111\3"+
		"\u0111\5\u0111\u15e6\n\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u15eb\n\u0111"+
		"\3\u0111\3\u0111\3\u0111\5\u0111\u15f0\n\u0111\3\u0111\5\u0111\u15f3\n"+
		"\u0111\3\u0111\5\u0111\u15f6\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\7"+
		"\u0112\u15fc\n\u0112\f\u0112\16\u0112\u15ff\13\u0112\3\u0112\3\u0112\3"+
		"\u0113\3\u0113\5\u0113\u1605\n\u0113\3\u0113\3\u0113\5\u0113\u1609\n\u0113"+
		"\3\u0113\3\u0113\3\u0113\5\u0113\u160e\n\u0113\3\u0113\5\u0113\u1611\n"+
		"\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1616\n\u0113\3\u0113\3\u0113\5"+
		"\u0113\u161a\n\u0113\5\u0113\u161c\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\5\u0116\u162c\n\u0116\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117"+
		"\7\u0117\u1633\n\u0117\f\u0117\16\u0117\u1636\13\u0117\3\u0118\3\u0118"+
		"\3\u0118\7\u0118\u163b\n\u0118\f\u0118\16\u0118\u163e\13\u0118\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\7\u0119\u1644\n\u0119\f\u0119\16\u0119\u1647"+
		"\13\u0119\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a\7\u011a\u164e\n\u011a"+
		"\f\u011a\16\u011a\u1651\13\u011a\3\u011b\3\u011b\3\u011b\7\u011b\u1656"+
		"\n\u011b\f\u011b\16\u011b\u1659\13\u011b\3\u011c\3\u011c\3\u011c\7\u011c"+
		"\u165e\n\u011c\f\u011c\16\u011c\u1661\13\u011c\3\u011d\3\u011d\3\u011d"+
		"\7\u011d\u1666\n\u011d\f\u011d\16\u011d\u1669\13\u011d\3\u011e\3\u011e"+
		"\3\u011e\7\u011e\u166e\n\u011e\f\u011e\16\u011e\u1671\13\u011e\3\u011f"+
		"\3\u011f\5\u011f\u1675\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u167c\n\u011f\5\u011f\u167e\n\u011f\3\u0120\3\u0120\3\u0120\5"+
		"\u0120\u1683\n\u0120\3\u0120\5\u0120\u1686\n\u0120\3\u0120\3\u0120\3\u0120"+
		"\5\u0120\u168b\n\u0120\3\u0120\5\u0120\u168e\n\u0120\3\u0121\3\u0121\5"+
		"\u0121\u1692\n\u0121\3\u0122\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\3"+
		"\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u16a0\n\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u16a7\n\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\5\u0124\u16ad\n\u0124\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\6\u0125\u16cd\n\u0125\r\u0125\16\u0125\u16ce\3\u0125\3\u0125\5\u0125"+
		"\u16d3\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\6\u0125\u16d9\n\u0125\r"+
		"\u0125\16\u0125\u16da\3\u0125\3\u0125\5\u0125\u16df\n\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u16e8\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u16f0\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u16f5\n\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u16fd\n\u0125\3\u0125\3\u0125\3\u0125\5"+
		"\u0125\u1702\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1707\n\u0125\5\u0125"+
		"\u1709\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1712\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1717\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u171f\n\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u1724\n\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u172c\n\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u1734\n\u0125\3\u0125\5\u0125\u1737\n\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125"+
		"\u1741\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\5\u0125\u174c\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u1757\n\u0127\f\u0127"+
		"\16\u0127\u175a\13\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127"+
		"\u1761\n\u0127\3\u0128\3\u0128\5\u0128\u1765\n\u0128\3\u0129\3\u0129\3"+
		"\u0129\5\u0129\u176a\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\5\u0129\u1773\n\u0129\3\u0129\5\u0129\u1776\n\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\5\u0129\u1782\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\5\u0129\u178a\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\7\u0129\u1792\n\u0129\f\u0129\16\u0129\u1795\13\u0129\5\u0129\u1797\n"+
		"\u0129\3\u0129\3\u0129\5\u0129\u179b\n\u0129\3\u0129\3\u0129\5\u0129\u179f"+
		"\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\7\u012a\u17ab\n\u012a\f\u012a\16\u012a\u17ae\13\u012a"+
		"\5\u012a\u17b0\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\7\u012a"+
		"\u17b7\n\u012a\f\u012a\16\u012a\u17ba\13\u012a\5\u012a\u17bc\n\u012a\3"+
		"\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u17d7"+
		"\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\5\u012d\u17e2\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u17e9\n\u012d\7\u012d\u17eb\n\u012d\f\u012d\16\u012d\u17ee\13"+
		"\u012d\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u17f4\n\u012e\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u17fc\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u1801\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7"+
		"\u012f\u1807\n\u012f\f\u012f\16\u012f\u180a\13\u012f\3\u0130\3\u0130\3"+
		"\u0130\5\u0130\u180f\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\5\u0130\u1819\n\u0130\3\u0130\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u1826\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u182c\n\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u1832\n\u0130\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\5\u0130\u1842\n\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\5\u0130\u1848\n\u0130\7\u0130\u184a\n\u0130\f\u0130\16\u0130"+
		"\u184d\13\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u185d"+
		"\n\u0131\f\u0131\16\u0131\u1860\13\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\6\u0131\u1869\n\u0131\r\u0131\16\u0131\u186a"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u187c\n\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131\7\u0131\u188d\n\u0131"+
		"\f\u0131\16\u0131\u1890\13\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\5\u0133\u18a2\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\5\u0134\u18ab\n\u0134\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u18b4\n\u0135\3\u0136\3\u0136"+
		"\3\u0137\3\u0137\3\u0138\3\u0138\3\u0139\3\u0139\3\u013a\3\u013a\3\u013b"+
		"\3\u013b\3\u013c\3\u013c\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e\2\5\u025c"+
		"\u025e\u0260\u013f\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60"+
		"\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086"+
		"\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e"+
		"\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6"+
		"\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce"+
		"\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6"+
		"\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe"+
		"\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116"+
		"\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e"+
		"\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146"+
		"\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e"+
		"\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176"+
		"\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e"+
		"\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6"+
		"\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be"+
		"\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6"+
		"\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee"+
		"\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206"+
		"\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e"+
		"\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236"+
		"\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e"+
		"\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266"+
		"\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\2\u0080\4"+
		"\2%%\u0089\u0089\4\2\u01c1\u01c1\u01c6\u01c6\5\2@@\u0090\u0090\u00a5\u00a5"+
		"\5\2((\u013e\u013e\u017d\u017d\6\2((\u015e\u015e\u01c0\u01c0\u0205\u0205"+
		"\4\2\u01b7\u01b7\u03ef\u03ef\4\2HH\u0081\u0081\4\2\17\17\u010e\u010e\5"+
		"\2**NN\u00a8\u00a8\4\2\u016b\u016b\u01d8\u01d8\5\2\u01af\u01af\u022b\u022b"+
		"\u0231\u0231\4\2\u0145\u0145\u0182\u0182\4\2\u0120\u0120\u0190\u0190\4"+
		"\2\u011e\u011e\u0174\u0174\5\2IIMMrr\5\2((\u014f\u014f\u0169\u0169\5\2"+
		"((\u014b\u014b\u028d\u028d\4\2\u021f\u021f\u023f\u023f\4\2JJTT\5\2\u016d"+
		"\u016d\u01cf\u01cf\u0207\u0207\4\2@@\u0090\u0090\3\2\u0124\u0125\3\2\u03e5"+
		"\u03e6\4\2\u03ef\u03ef\u03f7\u03f7\5\2\u0168\u0168\u018b\u018b\u01be\u01be"+
		"\4\2((\u03e5\u03e6\b\2((\u0131\u0131\u0133\u0133\u014f\u014f\u0169\u0169"+
		"\u01e5\u01e5\3\2\u03e6\u03e7\4\2\7\7\61\61\4\2\r\r\u009f\u009f\4\2\u00b0"+
		"\u00b0\u0243\u0243\4\2\24\24\u0084\u0084\5\2))FFaa\4\2aa\u0135\u0135\4"+
		"\2\u012c\u012c\u0165\u0165\4\2]]\u01fd\u01fd\4\2))aa\4\2\b\b//\4\2\u00ac"+
		"\u00ac\u023c\u023c\6\2\u0168\u0168\u018b\u018b\u01bd\u01bd\u01db\u01db"+
		"\4\2\u0168\u0168\u01bd\u01bd\4\2\16\16++\5\2==HH\u00aa\u00aa\4\2!!LL\4"+
		"\2YY\u0087\u0087\4\2\b\b/\60\3\2\u0214\u0215\4\2\u0170\u0170\u0203\u0203"+
		"\4\2\u00ca\u00ca\u0193\u0193\7\2bb\u0198\u0199\u019b\u019b\u019f\u01a7"+
		"\u01e7\u01e7\6\2\u0195\u0196\u019a\u019a\u019c\u019d\u01e8\u01e8\5\2c"+
		"c\u0194\u0194\u019e\u019e\4\2\u0184\u0184\u0216\u0216\4\2\u0210\u0210"+
		"\u0212\u0212\4\2\u0118\u0118\u0217\u0217\4\2SS\u01f6\u01f6\4\2\61\61\u0143"+
		"\u0143\5\2\36\3688\u00a3\u00a3\5\2ww\u009c\u009c\u016e\u016e\4\2__\u00a6"+
		"\u00a6\4\2\u0128\u0128\u0208\u0208\4\2&&\u023e\u023e\4\2ii\u0190\u0190"+
		"\4\2\u0161\u0161\u01e1\u01e1\6\2\u00b8\u00b8\u00ba\u00ba\u00be\u00be\u0220"+
		"\u0220\4\2\u03c5\u03c5\u03d7\u03d7\4\2\u0119\u0119\u01e9\u01e9\4\2??I"+
		"I\b\2ww\u009c\u009c\u00a1\u00a1\u015a\u015a\u016e\u016e\u023e\u023e\4"+
		"\2\u01b6\u01b6\u021c\u021c\4\2\u0157\u0157\u0242\u0242\4\2ww\u016e\u016e"+
		"\5\2JJUU\u017b\u017b\5\2\u0170\u0170\u0190\u0190\u0203\u0203\4\2\u021c"+
		"\u021c\u023d\u023d\4\2\u0136\u0136\u01e0\u01e0\b\2\u00ca\u00ca\u0154\u0154"+
		"\u0156\u0156\u016f\u016f\u01e6\u01e6\u0209\u0209\4\2+,99\5\2\u0161\u0161"+
		"\u01d1\u01d1\u02e9\u02e9\4\2\u0188\u0188\u022d\u022d\f\2\u0127\u0127\u012e"+
		"\u012e\u0138\u013a\u0140\u0140\u01b0\u01b0\u01b8\u01b8\u0221\u0221\u0228"+
		"\u0228\u02b9\u02b9\u035f\u035f\4\2\"\"\u0099\u0099\4\2kk\u0357\u0357\r"+
		"\2\u0127\u0127\u012e\u012e\u0138\u013a\u0140\u0140\u01b0\u01b0\u01b8\u01b8"+
		"\u01f7\u01f7\u0221\u0221\u0228\u0228\u02b9\u02b9\u035f\u035f\5\2\u03ef"+
		"\u03ef\u03f7\u03f7\u03f9\u03f9\3\2\u03fa\u03fb\5\2\u0288\u0293\u03ef\u03ef"+
		"\u03f7\u03f8\4\2\u03e5\u03e7\u03f0\u03f0\4\2::\u00a2\u00a2\4\2jj\u03f3"+
		"\u03f3\5\2\u00c6\u00c8\u00d0\u00d3\u01bb\u01bb\4\2\30\30\u00c7\u00c7\4"+
		"\2\30\30\u00c6\u00c6\3\2\u00b4\u00b9\4\2\u00a7\u00a7\u0206\u0206\4\2\u00bd"+
		"\u00c0\u0169\u0169\6\2\u00c1\u00c1\u00cc\u00cf\u00d6\u00d6\u011c\u011d"+
		"\5\2\u00c2\u00c5\u00ca\u00cb\u011a\u011a\4\2\u008c\u008c\u00d4\u00d4\4"+
		"\2\u0188\u0188\u0298\u02a0\4\2\u00ca\u00ca\u01bb\u01bb\5\2\u00c1\u00c2"+
		"\u00c4\u00c4\u0188\u0188\4\2\u00fb\u00fc\u0102\u0102\4\2##\u00f9\u00fc"+
		"\3\2\u0105\u0106\5\2\21\21WW\u00a0\u00a0\4\2\u00c6\u00c6\u00ca\u00ca\4"+
		"\2\u00c1\u00c2\u00c4\u00c4\5\2\16\16++\u0355\u0355\5\2\u00e2\u00e2\u00e8"+
		"\u00e9\u00ee\u00ee\5\2\u00e3\u00e5\u00ea\u00ed\u00ef\u00f1\6\2\u00e2\u00e2"+
		"\u00e6\u00e6\u00ee\u00ee\u00f3\u00f8\4\2\u01c4\u01c4\u01d2\u01d2\4\2h"+
		"h\u03da\u03da\5\2::\u00a2\u00a2\u0235\u0235\4\2}}\u0088\u0088\5\2\b\b"+
		"\u0111\u0111\u020c\u020c\6\2hh\u03d1\u03d1\u03d3\u03d3\u03da\u03db\3\2"+
		"\u03ce\u03d5\3\2\u0260\u0287\3\2\u0294\u0297\3\2\u0256\u025e\3\2\u024e"+
		"\u0255\5\2\u00c1\u00c5\u00d1\u00d1\u00d4\u00d4\17\2\"\"..kk\u0099\u0099"+
		"\u00d6\u00d6\u010c\u0180\u0182\u021e\u0220\u023e\u0241\u0248\u024d\u024d"+
		"\u028d\u028d\u02b9\u02b9\u035f\u035f\21\2%%YY\u0087\u0087\u00c1\u00c3"+
		"\u00c5\u00c5\u00e6\u00e6\u0104\u0104\u0181\u0181\u0240\u0240\u024e\u0255"+
		"\u025f\u025f\u0298\u0298\u029b\u02b8\u02ba\u035e\u0360\u03c4\2\u1d07\2"+
		"\u027d\3\2\2\2\4\u028e\3\2\2\2\6\u02a2\3\2\2\2\b\u02a4\3\2\2\2\n\u02c9"+
		"\3\2\2\2\f\u02d5\3\2\2\2\16\u02e0\3\2\2\2\20\u02f1\3\2\2\2\22\u02f6\3"+
		"\2\2\2\24\u0302\3\2\2\2\26\u031d\3\2\2\2\30\u0326\3\2\2\2\32\u0328\3\2"+
		"\2\2\34\u0334\3\2\2\2\36\u0352\3\2\2\2 \u0376\3\2\2\2\"\u03a9\3\2\2\2"+
		"$\u03c3\3\2\2\2&\u03e1\3\2\2\2(\u0442\3\2\2\2*\u0444\3\2\2\2,\u0456\3"+
		"\2\2\2.\u0493\3\2\2\2\60\u04a6\3\2\2\2\62\u04e1\3\2\2\2\64\u04e3\3\2\2"+
		"\2\66\u050f\3\2\2\28\u0515\3\2\2\2:\u0517\3\2\2\2<\u052c\3\2\2\2>\u0533"+
		"\3\2\2\2@\u0535\3\2\2\2B\u0545\3\2\2\2D\u0548\3\2\2\2F\u054d\3\2\2\2H"+
		"\u0567\3\2\2\2J\u0577\3\2\2\2L\u0579\3\2\2\2N\u0589\3\2\2\2P\u058b\3\2"+
		"\2\2R\u05ba\3\2\2\2T\u0601\3\2\2\2V\u0603\3\2\2\2X\u061f\3\2\2\2Z\u0627"+
		"\3\2\2\2\\\u0645\3\2\2\2^\u06d7\3\2\2\2`\u06d9\3\2\2\2b\u06dc\3\2\2\2"+
		"d\u0726\3\2\2\2f\u073d\3\2\2\2h\u07c2\3\2\2\2j\u07c7\3\2\2\2l\u07c9\3"+
		"\2\2\2n\u07d3\3\2\2\2p\u0808\3\2\2\2r\u081c\3\2\2\2t\u081e\3\2\2\2v\u0841"+
		"\3\2\2\2x\u084a\3\2\2\2z\u0851\3\2\2\2|\u0868\3\2\2\2~\u0871\3\2\2\2\u0080"+
		"\u0880\3\2\2\2\u0082\u0896\3\2\2\2\u0084\u08aa\3\2\2\2\u0086\u0a2d\3\2"+
		"\2\2\u0088\u0a2f\3\2\2\2\u008a\u0a36\3\2\2\2\u008c\u0a3d\3\2\2\2\u008e"+
		"\u0a54\3\2\2\2\u0090\u0a5c\3\2\2\2\u0092\u0a63\3\2\2\2\u0094\u0a6a\3\2"+
		"\2\2\u0096\u0a71\3\2\2\2\u0098\u0a7d\3\2\2\2\u009a\u0a87\3\2\2\2\u009c"+
		"\u0a8e\3\2\2\2\u009e\u0a9e\3\2\2\2\u00a0\u0aa8\3\2\2\2\u00a2\u0aac\3\2"+
		"\2\2\u00a4\u0ab2\3\2\2\2\u00a6\u0abe\3\2\2\2\u00a8\u0ac0\3\2\2\2\u00aa"+
		"\u0ac7\3\2\2\2\u00ac\u0ac9\3\2\2\2\u00ae\u0afc\3\2\2\2\u00b0\u0b46\3\2"+
		"\2\2\u00b2\u0b81\3\2\2\2\u00b4\u0bd9\3\2\2\2\u00b6\u0bdd\3\2\2\2\u00b8"+
		"\u0bf1\3\2\2\2\u00ba\u0bf3\3\2\2\2\u00bc\u0bfb\3\2\2\2\u00be\u0c03\3\2"+
		"\2\2\u00c0\u0c05\3\2\2\2\u00c2\u0c23\3\2\2\2\u00c4\u0c5a\3\2\2\2\u00c6"+
		"\u0c63\3\2\2\2\u00c8\u0c77\3\2\2\2\u00ca\u0c83\3\2\2\2\u00cc\u0c87\3\2"+
		"\2\2\u00ce\u0ca8\3\2\2\2\u00d0\u0cbd\3\2\2\2\u00d2\u0cc7\3\2\2\2\u00d4"+
		"\u0ccb\3\2\2\2\u00d6\u0ce4\3\2\2\2\u00d8\u0d0e\3\2\2\2\u00da\u0d10\3\2"+
		"\2\2\u00dc\u0d1f\3\2\2\2\u00de\u0d4d\3\2\2\2\u00e0\u0d57\3\2\2\2\u00e2"+
		"\u0d61\3\2\2\2\u00e4\u0d8b\3\2\2\2\u00e6\u0d8d\3\2\2\2\u00e8\u0d9e\3\2"+
		"\2\2\u00ea\u0da4\3\2\2\2\u00ec\u0db4\3\2\2\2\u00ee\u0db8\3\2\2\2\u00f0"+
		"\u0dde\3\2\2\2\u00f2\u0e04\3\2\2\2\u00f4\u0e12\3\2\2\2\u00f6\u0e1a\3\2"+
		"\2\2\u00f8\u0e1c\3\2\2\2\u00fa\u0e36\3\2\2\2\u00fc\u0e3a\3\2\2\2\u00fe"+
		"\u0e49\3\2\2\2\u0100\u0e4b\3\2\2\2\u0102\u0e57\3\2\2\2\u0104\u0e5b\3\2"+
		"\2\2\u0106\u0e6c\3\2\2\2\u0108\u0e7d\3\2\2\2\u010a\u0e80\3\2\2\2\u010c"+
		"\u0e8a\3\2\2\2\u010e\u0e8e\3\2\2\2\u0110\u0e98\3\2\2\2\u0112\u0e9b\3\2"+
		"\2\2\u0114\u0ea0\3\2\2\2\u0116\u0eb4\3\2\2\2\u0118\u0eb6\3\2\2\2\u011a"+
		"\u0ec7\3\2\2\2\u011c\u0ed0\3\2\2\2\u011e\u0ed9\3\2\2\2\u0120\u0edb\3\2"+
		"\2\2\u0122\u0ee9\3\2\2\2\u0124\u0ef4\3\2\2\2\u0126\u0efd\3\2\2\2\u0128"+
		"\u0f00\3\2\2\2\u012a\u0f08\3\2\2\2\u012c\u0f21\3\2\2\2\u012e\u0f2d\3\2"+
		"\2\2\u0130\u0f30\3\2\2\2\u0132\u0f50\3\2\2\2\u0134\u0f52\3\2\2\2\u0136"+
		"\u0f54\3\2\2\2\u0138\u0f56\3\2\2\2\u013a\u0f58\3\2\2\2\u013c\u0f8d\3\2"+
		"\2\2\u013e\u0f8f\3\2\2\2\u0140\u0f95\3\2\2\2\u0142\u0fa9\3\2\2\2\u0144"+
		"\u0fb7\3\2\2\2\u0146\u0fc2\3\2\2\2\u0148\u0fc4\3\2\2\2\u014a\u0fca\3\2"+
		"\2\2\u014c\u0fd4\3\2\2\2\u014e\u0fd8\3\2\2\2\u0150\u0fdf\3\2\2\2\u0152"+
		"\u0fe3\3\2\2\2\u0154\u0fe9\3\2\2\2\u0156\u0ff0\3\2\2\2\u0158\u0ff6\3\2"+
		"\2\2\u015a\u0ffc\3\2\2\2\u015c\u1001\3\2\2\2\u015e\u1030\3\2\2\2\u0160"+
		"\u1045\3\2\2\2\u0162\u105e\3\2\2\2\u0164\u1061\3\2\2\2\u0166\u1067\3\2"+
		"\2\2\u0168\u1077\3\2\2\2\u016a\u1086\3\2\2\2\u016c\u108c\3\2\2\2\u016e"+
		"\u10aa\3\2\2\2\u0170\u10ac\3\2\2\2\u0172\u10b3\3\2\2\2\u0174\u10bf\3\2"+
		"\2\2\u0176\u10c5\3\2\2\2\u0178\u10de\3\2\2\2\u017a\u10e2\3\2\2\2\u017c"+
		"\u10e6\3\2\2\2\u017e\u10f1\3\2\2\2\u0180\u112f\3\2\2\2\u0182\u1167\3\2"+
		"\2\2\u0184\u1169\3\2\2\2\u0186\u1176\3\2\2\2\u0188\u11a8\3\2\2\2\u018a"+
		"\u11ba\3\2\2\2\u018c\u11ec\3\2\2\2\u018e\u11ee\3\2\2\2\u0190\u11fb\3\2"+
		"\2\2\u0192\u1206\3\2\2\2\u0194\u1221\3\2\2\2\u0196\u122b\3\2\2\2\u0198"+
		"\u1235\3\2\2\2\u019a\u1237\3\2\2\2\u019c\u1241\3\2\2\2\u019e\u1244\3\2"+
		"\2\2\u01a0\u1276\3\2\2\2\u01a2\u1288\3\2\2\2\u01a4\u128a\3\2\2\2\u01a6"+
		"\u128e\3\2\2\2\u01a8\u1295\3\2\2\2\u01aa\u129e\3\2\2\2\u01ac\u12a4\3\2"+
		"\2\2\u01ae\u12ab\3\2\2\2\u01b0\u12c1\3\2\2\2\u01b2\u12c3\3\2\2\2\u01b4"+
		"\u12ce\3\2\2\2\u01b6\u12d4\3\2\2\2\u01b8\u1302\3\2\2\2\u01ba\u139b\3\2"+
		"\2\2\u01bc\u13a7\3\2\2\2\u01be\u13b6\3\2\2\2\u01c0\u13bc\3\2\2\2\u01c2"+
		"\u13cf\3\2\2\2\u01c4\u13d9\3\2\2\2\u01c6\u13e7\3\2\2\2\u01c8\u13e9\3\2"+
		"\2\2\u01ca\u13ec\3\2\2\2\u01cc\u1402\3\2\2\2\u01ce\u140e\3\2\2\2\u01d0"+
		"\u1417\3\2\2\2\u01d2\u1423\3\2\2\2\u01d4\u1427\3\2\2\2\u01d6\u1429\3\2"+
		"\2\2\u01d8\u1451\3\2\2\2\u01da\u1458\3\2\2\2\u01dc\u145a\3\2\2\2\u01de"+
		"\u1471\3\2\2\2\u01e0\u1477\3\2\2\2\u01e2\u147f\3\2\2\2\u01e4\u1482\3\2"+
		"\2\2\u01e6\u1485\3\2\2\2\u01e8\u149a\3\2\2\2\u01ea\u14af\3\2\2\2\u01ec"+
		"\u14b5\3\2\2\2\u01ee\u14db\3\2\2\2\u01f0\u14e7\3\2\2\2\u01f2\u14e9\3\2"+
		"\2\2\u01f4\u14ef\3\2\2\2\u01f6\u14f1\3\2\2\2\u01f8\u14fa\3\2\2\2\u01fa"+
		"\u1505\3\2\2\2\u01fc\u1507\3\2\2\2\u01fe\u150d\3\2\2\2\u0200\u1511\3\2"+
		"\2\2\u0202\u1513\3\2\2\2\u0204\u1515\3\2\2\2\u0206\u1527\3\2\2\2\u0208"+
		"\u1537\3\2\2\2\u020a\u153b\3\2\2\2\u020c\u1540\3\2\2\2\u020e\u154b\3\2"+
		"\2\2\u0210\u1550\3\2\2\2\u0212\u1552\3\2\2\2\u0214\u1556\3\2\2\2\u0216"+
		"\u156f\3\2\2\2\u0218\u1571\3\2\2\2\u021a\u1574\3\2\2\2\u021c\u1579\3\2"+
		"\2\2\u021e\u1589\3\2\2\2\u0220\u15f5\3\2\2\2\u0222\u15f7\3\2\2\2\u0224"+
		"\u161b\3\2\2\2\u0226\u161d\3\2\2\2\u0228\u1621\3\2\2\2\u022a\u1627\3\2"+
		"\2\2\u022c\u162f\3\2\2\2\u022e\u1637\3\2\2\2\u0230\u163f\3\2\2\2\u0232"+
		"\u164a\3\2\2\2\u0234\u1652\3\2\2\2\u0236\u165a\3\2\2\2\u0238\u1662\3\2"+
		"\2\2\u023a\u166a\3\2\2\2\u023c\u167d\3\2\2\2\u023e\u168d\3\2\2\2\u0240"+
		"\u1691\3\2\2\2\u0242\u1693\3\2\2\2\u0244\u1696\3\2\2\2\u0246\u16ac\3\2"+
		"\2\2\u0248\u174b\3\2\2\2\u024a\u174d\3\2\2\2\u024c\u1760\3\2\2\2\u024e"+
		"\u1762\3\2\2\2\u0250\u179e\3\2\2\2\u0252\u17a0\3\2\2\2\u0254\u17d6\3\2"+
		"\2\2\u0256\u17d8\3\2\2\2\u0258\u17e1\3\2\2\2\u025a\u17f3\3\2\2\2\u025c"+
		"\u1800\3\2\2\2\u025e\u180b\3\2\2\2\u0260\u187b\3\2\2\2\u0262\u1891\3\2"+
		"\2\2\u0264\u18a1\3\2\2\2\u0266\u18aa\3\2\2\2\u0268\u18b3\3\2\2\2\u026a"+
		"\u18b5\3\2\2\2\u026c\u18b7\3\2\2\2\u026e\u18b9\3\2\2\2\u0270\u18bb\3\2"+
		"\2\2\u0272\u18bd\3\2\2\2\u0274\u18bf\3\2\2\2\u0276\u18c1\3\2\2\2\u0278"+
		"\u18c3\3\2\2\2\u027a\u18c5\3\2\2\2\u027c\u027e\5\4\3\2\u027d\u027c\3\2"+
		"\2\2\u027d\u027e\3\2\2\2\u027e\u0280\3\2\2\2\u027f\u0281\7\u03d2\2\2\u0280"+
		"\u027f\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283\7\2"+
		"\2\3\u0283\3\3\2\2\2\u0284\u0286\5\6\4\2\u0285\u0287\7\u03d2\2\2\u0286"+
		"\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0289\3\2\2\2\u0288\u028a\7\u03e3"+
		"\2\2\u0289\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028d\3\2\2\2\u028b"+
		"\u028d\5\b\5\2\u028c\u0284\3\2\2\2\u028c\u028b\3\2\2\2\u028d\u0290\3\2"+
		"\2\2\u028e\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0299\3\2\2\2\u0290"+
		"\u028e\3\2\2\2\u0291\u0296\5\6\4\2\u0292\u0294\7\u03d2\2\2\u0293\u0292"+
		"\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0297\7\u03e3\2"+
		"\2\u0296\u0293\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u029a"+
		"\5\b\5\2\u0299\u0291\3\2\2\2\u0299\u0298\3\2\2\2\u029a\5\3\2\2\2\u029b"+
		"\u02a3\5\n\6\2\u029c\u02a3\5\f\7\2\u029d\u02a3\5\16\b\2\u029e\u02a3\5"+
		"\20\t\2\u029f\u02a3\5\22\n\2\u02a0\u02a3\5\26\f\2\u02a1\u02a3\5\30\r\2"+
		"\u02a2\u029b\3\2\2\2\u02a2\u029c\3\2\2\2\u02a2\u029d\3\2\2\2\u02a2\u029e"+
		"\3\2\2\2\u02a2\u029f\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a1\3\2\2\2\u02a3"+
		"\7\3\2\2\2\u02a4\u02a5\7\u03e3\2\2\u02a5\t\3\2\2\2\u02a6\u02ca\5\32\16"+
		"\2\u02a7\u02ca\5\34\17\2\u02a8\u02ca\5\36\20\2\u02a9\u02ca\5 \21\2\u02aa"+
		"\u02ca\5\"\22\2\u02ab\u02ca\5$\23\2\u02ac\u02ca\5&\24\2\u02ad\u02ca\5"+
		"(\25\2\u02ae\u02ca\5*\26\2\u02af\u02ca\5,\27\2\u02b0\u02ca\5.\30\2\u02b1"+
		"\u02ca\5\60\31\2\u02b2\u02ca\5r:\2\u02b3\u02ca\5t;\2\u02b4\u02ca\5v<\2"+
		"\u02b5\u02ca\5x=\2\u02b6\u02ca\5z>\2\u02b7\u02ca\5|?\2\u02b8\u02ca\5~"+
		"@\2\u02b9\u02ca\5\u0080A\2\u02ba\u02ca\5\u0082B\2\u02bb\u02ca\5\u0084"+
		"C\2\u02bc\u02ca\5\u0088E\2\u02bd\u02ca\5\u008aF\2\u02be\u02ca\5\u008c"+
		"G\2\u02bf\u02ca\5\u008eH\2\u02c0\u02ca\5\u0090I\2\u02c1\u02ca\5\u0092"+
		"J\2\u02c2\u02ca\5\u0094K\2\u02c3\u02ca\5\u0096L\2\u02c4\u02ca\5\u0098"+
		"M\2\u02c5\u02ca\5\u009aN\2\u02c6\u02ca\5\u009cO\2\u02c7\u02ca\5\u009e"+
		"P\2\u02c8\u02ca\5\u00a2R\2\u02c9\u02a6\3\2\2\2\u02c9\u02a7\3\2\2\2\u02c9"+
		"\u02a8\3\2\2\2\u02c9\u02a9\3\2\2\2\u02c9\u02aa\3\2\2\2\u02c9\u02ab\3\2"+
		"\2\2\u02c9\u02ac\3\2\2\2\u02c9\u02ad\3\2\2\2\u02c9\u02ae\3\2\2\2\u02c9"+
		"\u02af\3\2\2\2\u02c9\u02b0\3\2\2\2\u02c9\u02b1\3\2\2\2\u02c9\u02b2\3\2"+
		"\2\2\u02c9\u02b3\3\2\2\2\u02c9\u02b4\3\2\2\2\u02c9\u02b5\3\2\2\2\u02c9"+
		"\u02b6\3\2\2\2\u02c9\u02b7\3\2\2\2\u02c9\u02b8\3\2\2\2\u02c9\u02b9\3\2"+
		"\2\2\u02c9\u02ba\3\2\2\2\u02c9\u02bb\3\2\2\2\u02c9\u02bc\3\2\2\2\u02c9"+
		"\u02bd\3\2\2\2\u02c9\u02be\3\2\2\2\u02c9\u02bf\3\2\2\2\u02c9\u02c0\3\2"+
		"\2\2\u02c9\u02c1\3\2\2\2\u02c9\u02c2\3\2\2\2\u02c9\u02c3\3\2\2\2\u02c9"+
		"\u02c4\3\2\2\2\u02c9\u02c5\3\2\2\2\u02c9\u02c6\3\2\2\2\u02c9\u02c7\3\2"+
		"\2\2\u02c9\u02c8\3\2\2\2\u02ca\13\3\2\2\2\u02cb\u02d6\5\u00b4[\2\u02cc"+
		"\u02d6\5\u00acW\2\u02cd\u02d6\5\u00b6\\\2\u02ce\u02d6\5\u00a6T\2\u02cf"+
		"\u02d6\5\u00b2Z\2\u02d0\u02d6\5\u00a4S\2\u02d1\u02d6\5\u00aeX\2\u02d2"+
		"\u02d6\5\u00b0Y\2\u02d3\u02d6\5\u00a8U\2\u02d4\u02d6\5\u00aaV\2\u02d5"+
		"\u02cb\3\2\2\2\u02d5\u02cc\3\2\2\2\u02d5\u02cd\3\2\2\2\u02d5\u02ce\3\2"+
		"\2\2\u02d5\u02cf\3\2\2\2\u02d5\u02d0\3\2\2\2\u02d5\u02d1\3\2\2\2\u02d5"+
		"\u02d2\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d4\3\2\2\2\u02d6\r\3\2\2\2"+
		"\u02d7\u02e1\5\u0100\u0081\2\u02d8\u02e1\5\u0102\u0082\2\u02d9\u02e1\5"+
		"\u0104\u0083\2\u02da\u02e1\5\u0106\u0084\2\u02db\u02e1\5\u0108\u0085\2"+
		"\u02dc\u02e1\5\u010a\u0086\2\u02dd\u02e1\5\u010c\u0087\2\u02de\u02e1\5"+
		"\u010e\u0088\2\u02df\u02e1\5\u0110\u0089\2\u02e0\u02d7\3\2\2\2\u02e0\u02d8"+
		"\3\2\2\2\u02e0\u02d9\3\2\2\2\u02e0\u02da\3\2\2\2\u02e0\u02db\3\2\2\2\u02e0"+
		"\u02dc\3\2\2\2\u02e0\u02dd\3\2\2\2\u02e0\u02de\3\2\2\2\u02e0\u02df\3\2"+
		"\2\2\u02e1\17\3\2\2\2\u02e2\u02f2\5\u0120\u0091\2\u02e3\u02f2\5\u0122"+
		"\u0092\2\u02e4\u02f2\5\u0124\u0093\2\u02e5\u02f2\5\u0126\u0094\2\u02e6"+
		"\u02f2\5\u0128\u0095\2\u02e7\u02f2\5\u012a\u0096\2\u02e8\u02f2\5\u012c"+
		"\u0097\2\u02e9\u02f2\5\u012e\u0098\2\u02ea\u02f2\5\u0130\u0099\2\u02eb"+
		"\u02f2\5\u0148\u00a5\2\u02ec\u02f2\5\u014a\u00a6\2\u02ed\u02f2\5\u014c"+
		"\u00a7\2\u02ee\u02f2\5\u014e\u00a8\2\u02ef\u02f2\5\u0150\u00a9\2\u02f0"+
		"\u02f2\5\u0152\u00aa\2\u02f1\u02e2\3\2\2\2\u02f1\u02e3\3\2\2\2\u02f1\u02e4"+
		"\3\2\2\2\u02f1\u02e5\3\2\2\2\u02f1\u02e6\3\2\2\2\u02f1\u02e7\3\2\2\2\u02f1"+
		"\u02e8\3\2\2\2\u02f1\u02e9\3\2\2\2\u02f1\u02ea\3\2\2\2\u02f1\u02eb\3\2"+
		"\2\2\u02f1\u02ec\3\2\2\2\u02f1\u02ed\3\2\2\2\u02f1\u02ee\3\2\2\2\u02f1"+
		"\u02ef\3\2\2\2\u02f1\u02f0\3\2\2\2\u02f2\21\3\2\2\2\u02f3\u02f7\5\u0154"+
		"\u00ab\2\u02f4\u02f7\5\u0156\u00ac\2\u02f5\u02f7\5\u0158\u00ad\2\u02f6"+
		"\u02f3\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f6\u02f5\3\2\2\2\u02f7\23\3\2\2"+
		"\2\u02f8\u0303\5\u015c\u00af\2\u02f9\u0303\5\u015e\u00b0\2\u02fa\u0303"+
		"\5\u0160\u00b1\2\u02fb\u0303\5\u0164\u00b3\2\u02fc\u0303\5\u0166\u00b4"+
		"\2\u02fd\u0303\5\u0168\u00b5\2\u02fe\u0303\5\u016c\u00b7\2\u02ff\u0303"+
		"\5\u0162\u00b2\2\u0300\u0303\5\u016a\u00b6\2\u0301\u0303\5\u016e\u00b8"+
		"\2\u0302\u02f8\3\2\2\2\u0302\u02f9\3\2\2\2\u0302\u02fa\3\2\2\2\u0302\u02fb"+
		"\3\2\2\2\u0302\u02fc\3\2\2\2\u0302\u02fd\3\2\2\2\u0302\u02fe\3\2\2\2\u0302"+
		"\u02ff\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0301\3\2\2\2\u0303\25\3\2\2"+
		"\2\u0304\u031e\5\u0180\u00c1\2\u0305\u031e\5\u0182\u00c2\2\u0306\u031e"+
		"\5\u0184\u00c3\2\u0307\u031e\5\u0186\u00c4\2\u0308\u031e\5\u0188\u00c5"+
		"\2\u0309\u031e\5\u018a\u00c6\2\u030a\u031e\5\u018c\u00c7\2\u030b\u031e"+
		"\5\u018e\u00c8\2\u030c\u031e\5\u01a6\u00d4\2\u030d\u031e\5\u01a8\u00d5"+
		"\2\u030e\u031e\5\u01aa\u00d6\2\u030f\u031e\5\u01ac\u00d7\2\u0310\u031e"+
		"\5\u01ae\u00d8\2\u0311\u031e\5\u01b2\u00da\2\u0312\u031e\5\u01b4\u00db"+
		"\2\u0313\u031e\5\u01b6\u00dc\2\u0314\u031e\5\u01b8\u00dd\2\u0315\u031e"+
		"\5\u01ba\u00de\2\u0316\u031e\5\u01c8\u00e5\2\u0317\u031e\5\u01ca\u00e6"+
		"\2\u0318\u031e\5\u01cc\u00e7\2\u0319\u031e\5\u01ce\u00e8\2\u031a\u031e"+
		"\5\u01d0\u00e9\2\u031b\u031e\5\u01d2\u00ea\2\u031c\u031e\5\u01d4\u00eb"+
		"\2\u031d\u0304\3\2\2\2\u031d\u0305\3\2\2\2\u031d\u0306\3\2\2\2\u031d\u0307"+
		"\3\2\2\2\u031d\u0308\3\2\2\2\u031d\u0309\3\2\2\2\u031d\u030a\3\2\2\2\u031d"+
		"\u030b\3\2\2\2\u031d\u030c\3\2\2\2\u031d\u030d\3\2\2\2\u031d\u030e\3\2"+
		"\2\2\u031d\u030f\3\2\2\2\u031d\u0310\3\2\2\2\u031d\u0311\3\2\2\2\u031d"+
		"\u0312\3\2\2\2\u031d\u0313\3\2\2\2\u031d\u0314\3\2\2\2\u031d\u0315\3\2"+
		"\2\2\u031d\u0316\3\2\2\2\u031d\u0317\3\2\2\2\u031d\u0318\3\2\2\2\u031d"+
		"\u0319\3\2\2\2\u031d\u031a\3\2\2\2\u031d\u031b\3\2\2\2\u031d\u031c\3\2"+
		"\2\2\u031e\27\3\2\2\2\u031f\u0327\5\u01de\u00f0\2\u0320\u0327\5\u01e0"+
		"\u00f1\2\u0321\u0327\5\u01e2\u00f2\2\u0322\u0327\5\u01e4\u00f3\2\u0323"+
		"\u0327\5\u01e6\u00f4\2\u0324\u0327\5\u01e8\u00f5\2\u0325\u0327\5\u01ec"+
		"\u00f7\2\u0326\u031f\3\2\2\2\u0326\u0320\3\2\2\2\u0326\u0321\3\2\2\2\u0326"+
		"\u0322\3\2\2\2\u0326\u0323\3\2\2\2\u0326\u0324\3\2\2\2\u0326\u0325\3\2"+
		"\2\2\u0327\31\3\2\2\2\u0328\u0329\7 \2\2\u0329\u032b\t\2\2\2\u032a\u032c"+
		"\5\u0244\u0123\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032d\3"+
		"\2\2\2\u032d\u0331\5\u020c\u0107\2\u032e\u0330\5\62\32\2\u032f\u032e\3"+
		"\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f\3\2\2\2\u0331\u0332\3\2\2\2\u0332"+
		"\33\3\2\2\2\u0333\u0331\3\2\2\2\u0334\u0336\7 \2\2\u0335\u0337\5\64\33"+
		"\2\u0336\u0335\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u033a"+
		"\7\u015a\2\2\u0339\u033b\5\u0244\u0123\2\u033a\u0339\3\2\2\2\u033a\u033b"+
		"\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\5\u01f2\u00fa\2\u033d\u033e\7"+
		"l\2\2\u033e\u033f\7\u0200\2\2\u033f\u0346\5\66\34\2\u0340\u0341\7l\2\2"+
		"\u0341\u0343\7\u0132\2\2\u0342\u0344\7h\2\2\u0343\u0342\3\2\2\2\u0343"+
		"\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0347\7\u01da\2\2\u0346\u0340"+
		"\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349\3\2\2\2\u0348\u034a\5> \2\u0349"+
		"\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u034c\7\u012f"+
		"\2\2\u034c\u034e\7\u03ef\2\2\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e"+
		"\u034f\3\2\2\2\u034f\u0350\7\u014c\2\2\u0350\u0351\5\u015a\u00ae\2\u0351"+
		"\35\3\2\2\2\u0352\u0354\7 \2\2\u0353\u0355\t\3\2\2\u0354\u0353\3\2\2\2"+
		"\u0354\u0355\3\2\2\2\u0355\u0357\3\2\2\2\u0356\u0358\t\4\2\2\u0357\u0356"+
		"\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a\7J\2\2\u035a"+
		"\u035c\5\u020c\u0107\2\u035b\u035d\5@!\2\u035c\u035b\3\2\2\2\u035c\u035d"+
		"\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f\7l\2\2\u035f\u0360\5\u01f4\u00fb"+
		"\2\u0360\u0364\5\u0230\u0119\2\u0361\u0363\5B\"\2\u0362\u0361\3\2\2\2"+
		"\u0363\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0373"+
		"\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u0369\7\u0110\2\2\u0368\u036a\7\u03d7"+
		"\2\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b\3\2\2\2\u036b"+
		"\u0372\t\5\2\2\u036c\u036e\7_\2\2\u036d\u036f\7\u03d7\2\2\u036e\u036d"+
		"\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0372\t\6\2\2\u0371"+
		"\u0367\3\2\2\2\u0371\u036c\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2"+
		"\2\2\u0373\u0374\3\2\2\2\u0374\37\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0377"+
		"\7 \2\2\u0377\u0378\7\u0191\2\2\u0378\u0379\7D\2\2\u0379\u037a\5\u020c"+
		"\u0107\2\u037a\u037b\7\7\2\2\u037b\u037c\7\u0232\2\2\u037c\u0382\7\u03ef"+
		"\2\2\u037d\u037f\7\u017c\2\2\u037e\u0380\7\u03d7\2\2\u037f\u037e\3\2\2"+
		"\2\u037f\u0380\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0383\5\u0214\u010b\2"+
		"\u0382\u037d\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0389\3\2\2\2\u0384\u0386"+
		"\7\u0233\2\2\u0385\u0387\7\u03d7\2\2\u0386\u0385\3\2\2\2\u0386\u0387\3"+
		"\2\2\2\u0387\u0388\3\2\2\2\u0388\u038a\5\u0214\u010b\2\u0389\u0384\3\2"+
		"\2\2\u0389\u038a\3\2\2\2\u038a\u0390\3\2\2\2\u038b\u038d\7\u01e4\2\2\u038c"+
		"\u038e\7\u03d7\2\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f"+
		"\3\2\2\2\u038f\u0391\5\u0214\u010b\2\u0390\u038b\3\2\2\2\u0390\u0391\3"+
		"\2\2\2\u0391\u0397\3\2\2\2\u0392\u0394\7\u01bf\2\2\u0393\u0395\7\u03d7"+
		"\2\2\u0394\u0393\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0396\3\2\2\2\u0396"+
		"\u0398\5\u020c\u0107\2\u0397\u0392\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039a"+
		"\3\2\2\2\u0399\u039b\7\u0241\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2"+
		"\2\u039b\u03a1\3\2\2\2\u039c\u039e\7\u012f\2\2\u039d\u039f\7\u03d7\2\2"+
		"\u039e\u039d\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2"+
		"\7\u03ef\2\2\u03a1\u039c\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a3\3\2\2"+
		"\2\u03a3\u03a5\7\u0154\2\2\u03a4\u03a6\7\u03d7\2\2\u03a5\u03a4\3\2\2\2"+
		"\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\5\u0202\u0102\2\u03a8"+
		"!\3\2\2\2\u03a9\u03ab\7 \2\2\u03aa\u03ac\5\64\33\2\u03ab\u03aa\3\2\2\2"+
		"\u03ab\u03ac\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\7w\2\2\u03ae\u03af"+
		"\5\u01f2\u00fa\2\u03af\u03b1\7\u03e0\2\2\u03b0\u03b2\5D#\2\u03b1\u03b0"+
		"\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b7\3\2\2\2\u03b3\u03b4\7\u03e2\2"+
		"\2\u03b4\u03b6\5D#\2\u03b5\u03b3\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5"+
		"\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03ba\3\2\2\2\u03b9\u03b7\3\2\2\2\u03ba"+
		"\u03be\7\u03e1\2\2\u03bb\u03bd\5H%\2\u03bc\u03bb\3\2\2\2\u03bd\u03c0\3"+
		"\2\2\2\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c1\3\2\2\2\u03c0"+
		"\u03be\3\2\2\2\u03c1\u03c2\5\u015a\u00ae\2\u03c2#\3\2\2\2\u03c3\u03c5"+
		"\7 \2\2\u03c4\u03c6\5\64\33\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2"+
		"\u03c6\u03c7\3\2\2\2\u03c7\u03c8\7\u016e\2\2\u03c8\u03c9\5\u01f2\u00fa"+
		"\2\u03c9\u03cb\7\u03e0\2\2\u03ca\u03cc\5F$\2\u03cb\u03ca\3\2\2\2\u03cb"+
		"\u03cc\3\2\2\2\u03cc\u03d1\3\2\2\2\u03cd\u03ce\7\u03e2\2\2\u03ce\u03d0"+
		"\5F$\2\u03cf\u03cd\3\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1"+
		"\u03d2\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4\u03d5\7\u03e1"+
		"\2\2\u03d5\u03d6\7\u01f8\2\2\u03d6\u03da\5\u0220\u0111\2\u03d7\u03d9\5"+
		"H%\2\u03d8\u03d7\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da"+
		"\u03db\3\2\2\2\u03db\u03df\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd\u03e0\5\u015a"+
		"\u00ae\2\u03de\u03e0\5\u016a\u00b6\2\u03df\u03dd\3\2\2\2\u03df\u03de\3"+
		"\2\2\2\u03e0%\3\2\2\2\u03e1\u03e2\7 \2\2\u03e2\u03e3\7\u0202\2\2\u03e3"+
		"\u03e4\5\u020c\u0107\2\u03e4\u03e5\7>\2\2\u03e5\u03e6\7\u0141\2\2\u03e6"+
		"\u03e7\7\u0245\2\2\u03e7\u03e8\t\7\2\2\u03e8\u03e9\7\u01ca\2\2\u03e9\u03ea"+
		"\7\u03e0\2\2\u03ea\u03ef\5J&\2\u03eb\u03ec\7\u03e2\2\2\u03ec\u03ee\5J"+
		"&\2\u03ed\u03eb\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef"+
		"\u03f0\3\2\2\2\u03f0\u03f2\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f2\u03f3\7\u03e1"+
		"\2\2\u03f3\'\3\2\2\2\u03f4\u03f6\7 \2\2\u03f5\u03f7\7\u022a\2\2\u03f6"+
		"\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\7\u009c"+
		"\2\2\u03f9\u03fb\5\u0244\u0123\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2"+
		"\2\u03fb\u03fc\3\2\2\2\u03fc\u0404\5\u01f4\u00fb\2\u03fd\u03fe\7Z\2\2"+
		"\u03fe\u0405\5\u01f4\u00fb\2\u03ff\u0400\7\u03e0\2\2\u0400\u0401\7Z\2"+
		"\2\u0401\u0402\5\u01f4\u00fb\2\u0402\u0403\7\u03e1\2\2\u0403\u0405\3\2"+
		"\2\2\u0404\u03fd\3\2\2\2\u0404\u03ff\3\2\2\2\u0405\u0443\3\2\2\2\u0406"+
		"\u0408\7 \2\2\u0407\u0409\7\u022a\2\2\u0408\u0407\3\2\2\2\u0408\u0409"+
		"\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040c\7\u009c\2\2\u040b\u040d\5\u0244"+
		"\u0123\2\u040c\u040b\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040e\3\2\2\2\u040e"+
		"\u0410\5\u01f4\u00fb\2\u040f\u0411\5L\'\2\u0410\u040f\3\2\2\2\u0410\u0411"+
		"\3\2\2\2\u0411\u041c\3\2\2\2\u0412\u0419\5^\60\2\u0413\u0415\7\u03e2\2"+
		"\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418"+
		"\5^\60\2\u0417\u0414\3\2\2\2\u0418\u041b\3\2\2\2\u0419\u0417\3\2\2\2\u0419"+
		"\u041a\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041c\u0412\3\2"+
		"\2\2\u041c\u041d\3\2\2\2\u041d\u041f\3\2\2\2\u041e\u0420\5b\62\2\u041f"+
		"\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422\3\2\2\2\u0421\u0423\t\b"+
		"\2\2\u0422\u0421\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424"+
		"\u0426\7\r\2\2\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\3\2"+
		"\2\2\u0427\u0428\5\u00b4[\2\u0428\u0443\3\2\2\2\u0429\u042b\7 \2\2\u042a"+
		"\u042c\7\u022a\2\2\u042b\u042a\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d"+
		"\3\2\2\2\u042d\u042f\7\u009c\2\2\u042e\u0430\5\u0244\u0123\2\u042f\u042e"+
		"\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0432\5\u01f4\u00fb"+
		"\2\u0432\u043d\5L\'\2\u0433\u043a\5^\60\2\u0434\u0436\7\u03e2\2\2\u0435"+
		"\u0434\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\5^"+
		"\60\2\u0438\u0435\3\2\2\2\u0439\u043c\3\2\2\2\u043a\u0438\3\2\2\2\u043a"+
		"\u043b\3\2\2\2\u043b\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043d\u0433\3\2"+
		"\2\2\u043d\u043e\3\2\2\2\u043e\u0440\3\2\2\2\u043f\u0441\5b\62\2\u0440"+
		"\u043f\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0443\3\2\2\2\u0442\u03f4\3\2"+
		"\2\2\u0442\u0406\3\2\2\2\u0442\u0429\3\2\2\2\u0443)\3\2\2\2\u0444\u0445"+
		"\7 \2\2\u0445\u0446\7\u0229\2\2\u0446\u0447\5\u020c\u0107\2\u0447\u0448"+
		"\7\7\2\2\u0448\u0449\7\u0142\2\2\u0449\u044d\7\u03ef\2\2\u044a\u044b\7"+
		"\u0166\2\2\u044b\u044c\7\u03d7\2\2\u044c\u044e\5\u0214\u010b\2\u044d\u044a"+
		"\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0454\3\2\2\2\u044f\u0451\7\u0154\2"+
		"\2\u0450\u0452\7\u03d7\2\2\u0451\u0450\3\2\2\2\u0451\u0452\3\2\2\2\u0452"+
		"\u0453\3\2\2\2\u0453\u0455\5\u0202\u0102\2\u0454\u044f\3\2\2\2\u0454\u0455"+
		"\3\2\2\2\u0455+\3\2\2\2\u0456\u0457\7 \2\2\u0457\u0458\7\u0229\2\2\u0458"+
		"\u0459\5\u020c\u0107\2\u0459\u045a\7\7\2\2\u045a\u045b\7\u0142\2\2\u045b"+
		"\u045c\7\u03ef\2\2\u045c\u045d\7\u00aa\2\2\u045d\u045e\7\u0191\2\2\u045e"+
		"\u045f\7D\2\2\u045f\u0465\5\u020c\u0107\2\u0460\u0462\7\u0162\2\2\u0461"+
		"\u0463\7\u03d7\2\2\u0462\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0464"+
		"\3\2\2\2\u0464\u0466\5\u0214\u010b\2\u0465\u0460\3\2\2\2\u0465\u0466\3"+
		"\2\2\2\u0466\u046c\3\2\2\2\u0467\u0469\7\u017c\2\2\u0468\u046a\7\u03d7"+
		"\2\2\u0469\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b\3\2\2\2\u046b"+
		"\u046d\5\u0214\u010b\2\u046c\u0467\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u0473"+
		"\3\2\2\2\u046e\u0470\7\u0115\2\2\u046f\u0471\7\u03d7\2\2\u0470\u046f\3"+
		"\2\2\2\u0470\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474\5\u0214\u010b"+
		"\2\u0473\u046e\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u047a\3\2\2\2\u0475\u0477"+
		"\7\u01ab\2\2\u0476\u0478\7\u03d7\2\2\u0477\u0476\3\2\2\2\u0477\u0478\3"+
		"\2\2\2\u0478\u0479\3\2\2\2\u0479\u047b\5\u0214\u010b\2\u047a\u0475\3\2"+
		"\2\2\u047a\u047b\3\2\2\2\u047b\u0481\3\2\2\2\u047c\u047e\7\u01bf\2\2\u047d"+
		"\u047f\7\u03d7\2\2\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480"+
		"\3\2\2\2\u0480\u0482\5\u020c\u0107\2\u0481\u047c\3\2\2\2\u0481\u0482\3"+
		"\2\2\2\u0482\u0484\3\2\2\2\u0483\u0485\7\u0241\2\2\u0484\u0483\3\2\2\2"+
		"\u0484\u0485\3\2\2\2\u0485\u048b\3\2\2\2\u0486\u0488\7\u012f\2\2\u0487"+
		"\u0489\7\u03d7\2\2\u0488\u0487\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a"+
		"\3\2\2\2\u048a\u048c\7\u03ef\2\2\u048b\u0486\3\2\2\2\u048b\u048c\3\2\2"+
		"\2\u048c\u048d\3\2\2\2\u048d\u048f\7\u0154\2\2\u048e\u0490\7\u03d7\2\2"+
		"\u048f\u048e\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0492"+
		"\5\u0202\u0102\2\u0492-\3\2\2\2\u0493\u0495\7 \2\2\u0494\u0496\5\64\33"+
		"\2\u0495\u0494\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498"+
		"\7\u00a1\2\2\u0498\u0499\5\u01f2\u00fa\2\u0499\u049a\t\t\2\2\u049a\u049b"+
		"\t\n\2\2\u049b\u049c\7l\2\2\u049c\u049d\5\u01f4\u00fb\2\u049d\u049e\7"+
		"<\2\2\u049e\u049f\7\62\2\2\u049f\u04a2\7\u01fc\2\2\u04a0\u04a1\t\13\2"+
		"\2\u04a1\u04a3\5\u01f2\u00fa\2\u04a2\u04a0\3\2\2\2\u04a2\u04a3\3\2\2\2"+
		"\u04a3\u04a4\3\2\2\2\u04a4\u04a5\5\u015a\u00ae\2\u04a5/\3\2\2\2\u04a6"+
		"\u04a9\7 \2\2\u04a7\u04a8\7p\2\2\u04a8\u04aa\7\u0081\2\2\u04a9\u04a7\3"+
		"\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ae\3\2\2\2\u04ab\u04ac\7\u0110\2\2"+
		"\u04ac\u04ad\7\u03d7\2\2\u04ad\u04af\t\f\2\2\u04ae\u04ab\3\2\2\2\u04ae"+
		"\u04af\3\2\2\2\u04af\u04b1\3\2\2\2\u04b0\u04b2\5\64\33\2\u04b1\u04b0\3"+
		"\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b6\3\2\2\2\u04b3\u04b4\7\u0091\2\2"+
		"\u04b4\u04b5\7\u0201\2\2\u04b5\u04b7\t\r\2\2\u04b6\u04b3\3\2\2\2\u04b6"+
		"\u04b7\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04b9\7\u023e\2\2\u04b9\u04be"+
		"\5\u01f2\u00fa\2\u04ba\u04bb\7\u03e0\2\2\u04bb\u04bc\5\u022c\u0117\2\u04bc"+
		"\u04bd\7\u03e1\2\2\u04bd\u04bf\3\2\2\2\u04be\u04ba\3\2\2\2\u04be\u04bf"+
		"\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1\7\r\2\2\u04c1\u04c8\5\u00b4["+
		"\2\u04c2\u04c4\7\u00b0\2\2\u04c3\u04c5\t\16\2\2\u04c4\u04c3\3\2\2\2\u04c4"+
		"\u04c5\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7\7\31\2\2\u04c7\u04c9\7"+
		"n\2\2\u04c8\u04c2\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\61\3\2\2\2\u04ca\u04cc"+
		"\7(\2\2\u04cb\u04ca\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04d0\3\2\2\2\u04cd"+
		"\u04ce\7\30\2\2\u04ce\u04d1\7\u008c\2\2\u04cf\u04d1\7\u02be\2\2\u04d0"+
		"\u04cd\3\2\2\2\u04d0\u04cf\3\2\2\2\u04d1\u04d3\3\2\2\2\u04d2\u04d4\7\u03d7"+
		"\2\2\u04d3\u04d2\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5"+
		"\u04d8\5\u01fe\u0100\2\u04d6\u04d8\7(\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d6"+
		"\3\2\2\2\u04d8\u04e2\3\2\2\2\u04d9\u04db\7(\2\2\u04da\u04d9\3\2\2\2\u04da"+
		"\u04db\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04de\7\32";
	private static final String _serializedATNSegment1 =
		"\2\2\u04dd\u04df\7\u03d7\2\2\u04de\u04dd\3\2\2\2\u04de\u04df\3\2\2\2\u04df"+
		"\u04e0\3\2\2\2\u04e0\u04e2\5\u0200\u0101\2\u04e1\u04cb\3\2\2\2\u04e1\u04da"+
		"\3\2\2\2\u04e2\63\3\2\2\2\u04e3\u04e4\7\u0145\2\2\u04e4\u04eb\7\u03d7"+
		"\2\2\u04e5\u04ec\5\u01fa\u00fe\2\u04e6\u04e9\7#\2\2\u04e7\u04e8\7\u03e0"+
		"\2\2\u04e8\u04ea\7\u03e1\2\2\u04e9\u04e7\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea"+
		"\u04ec\3\2\2\2\u04eb\u04e5\3\2\2\2\u04eb\u04e6\3\2\2\2\u04ec\65\3\2\2"+
		"\2\u04ed\u04ee\7\u0112\2\2\u04ee\u04f2\58\35\2\u04ef\u04f1\5:\36\2\u04f0"+
		"\u04ef\3\2\2\2\u04f1\u04f4\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3\3\2"+
		"\2\2\u04f3\u0510\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f5\u04f8\7\u015c\2\2\u04f6"+
		"\u04f9\5\u0212\u010a\2\u04f7\u04f9\5\u025c\u012f\2\u04f8\u04f6\3\2\2\2"+
		"\u04f8\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u0503\5<\37\2\u04fb\u04fc"+
		"\7\u0218\2\2\u04fc\u0500\58\35\2\u04fd\u04ff\5:\36\2\u04fe\u04fd\3\2\2"+
		"\2\u04ff\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u0504"+
		"\3\2\2\2\u0502\u0500\3\2\2\2\u0503\u04fb\3\2\2\2\u0503\u0504\3\2\2\2\u0504"+
		"\u050d\3\2\2\2\u0505\u0506\7\u0153\2\2\u0506\u050a\58\35\2\u0507\u0509"+
		"\5:\36\2\u0508\u0507\3\2\2\2\u0509\u050c\3\2\2\2\u050a\u0508\3\2\2\2\u050a"+
		"\u050b\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050a\3\2\2\2\u050d\u0505\3\2"+
		"\2\2\u050d\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u04ed\3\2\2\2\u050f"+
		"\u04f5\3\2\2\2\u0510\67\3\2\2\2\u0511\u0516\7\u00fb\2\2\u0512\u0516\5"+
		"\u0216\u010c\2\u0513\u0516\5\u0212\u010a\2\u0514\u0516\5\u025c\u012f\2"+
		"\u0515\u0511\3\2\2\2\u0515\u0512\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0514"+
		"\3\2\2\2\u05169\3\2\2\2\u0517\u0518\7\u03d1\2\2\u0518\u051b\7O\2\2\u0519"+
		"\u051c\5\u0212\u010a\2\u051a\u051c\5\u025c\u012f\2\u051b\u0519\3\2\2\2"+
		"\u051b\u051a\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e\5<\37\2\u051e;\3"+
		"\2\2\2\u051f\u052d\5\u0274\u013b\2\u0520\u052d\7\u00c5\2\2\u0521\u052d"+
		"\7\u00d7\2\2\u0522\u052d\7\u00d8\2\2\u0523\u052d\7\u00d9\2\2\u0524\u052d"+
		"\7\u00da\2\2\u0525\u052d\7\u00db\2\2\u0526\u052d\7\u00dc\2\2\u0527\u052d"+
		"\7\u00dd\2\2\u0528\u052d\7\u00de\2\2\u0529\u052d\7\u00df\2\2\u052a\u052d"+
		"\7\u00e0\2\2\u052b\u052d\7\u00e1\2\2\u052c\u051f\3\2\2\2\u052c\u0520\3"+
		"\2\2\2\u052c\u0521\3\2\2\2\u052c\u0522\3\2\2\2\u052c\u0523\3\2\2\2\u052c"+
		"\u0524\3\2\2\2\u052c\u0525\3\2\2\2\u052c\u0526\3\2\2\2\u052c\u0527\3\2"+
		"\2\2\u052c\u0528\3\2\2\2\u052c\u0529\3\2\2\2\u052c\u052a\3\2\2\2\u052c"+
		"\u052b\3\2\2\2\u052d=\3\2\2\2\u052e\u0534\7\u0150\2\2\u052f\u0534\7\u0149"+
		"\2\2\u0530\u0531\7\u0149\2\2\u0531\u0532\7l\2\2\u0532\u0534\7\u0208\2"+
		"\2\u0533\u052e\3\2\2\2\u0533\u052f\3\2\2\2\u0533\u0530\3\2\2\2\u0534?"+
		"\3\2\2\2\u0535\u0536\7\u00ab\2\2\u0536\u0537\t\17\2\2\u0537A\3\2\2\2\u0538"+
		"\u053a\7\u0189\2\2\u0539\u053b\7\u03d7\2\2\u053a\u0539\3\2\2\2\u053a\u053b"+
		"\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u0546\5\u0214\u010b\2\u053d\u0546\5"+
		"@!\2\u053e\u053f\7\u00b0\2\2\u053f\u0540\7\u01ce\2\2\u0540\u0546\5\u020c"+
		"\u0107\2\u0541\u0542\7\u012f\2\2\u0542\u0546\7\u03ef\2\2\u0543\u0546\7"+
		"\u0181\2\2\u0544\u0546\7\u0240\2\2\u0545\u0538\3\2\2\2\u0545\u053d\3\2"+
		"\2\2\u0545\u053e\3\2\2\2\u0545\u0541\3\2\2\2\u0545\u0543\3\2\2\2\u0545"+
		"\u0544\3\2\2\2\u0546C\3\2\2\2\u0547\u0549\t\20\2\2\u0548\u0547\3\2\2\2"+
		"\u0548\u0549\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b\5\u020c\u0107\2\u054b"+
		"\u054c\5\u0220\u0111\2\u054cE\3\2\2\2\u054d\u054e\5\u020c\u0107\2\u054e"+
		"\u054f\5\u0220\u0111\2\u054fG\3\2\2\2\u0550\u0551\7\u012f\2\2\u0551\u0568"+
		"\7\u03ef\2\2\u0552\u0553\7\u018a\2\2\u0553\u0568\7\u0091\2\2\u0554\u0556"+
		"\7h\2\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557\3\2\2\2\u0557"+
		"\u0568\7-\2\2\u0558\u0559\7\u013b\2\2\u0559\u0563\7\u0091\2\2\u055a\u055b"+
		"\7\u01be\2\2\u055b\u0563\7\u0091\2\2\u055c\u055d\7{\2\2\u055d\u055e\7"+
		"\u0091\2\2\u055e\u0563\7\u0141\2\2\u055f\u0560\7f\2\2\u0560\u0561\7\u0091"+
		"\2\2\u0561\u0563\7\u0141\2\2\u0562\u0558\3\2\2\2\u0562\u055a\3\2\2\2\u0562"+
		"\u055c\3\2\2\2\u0562\u055f\3\2\2\2\u0563\u0568\3\2\2\2\u0564\u0565\7\u0091"+
		"\2\2\u0565\u0566\7\u0201\2\2\u0566\u0568\t\r\2\2\u0567\u0550\3\2\2\2\u0567"+
		"\u0552\3\2\2\2\u0567\u0555\3\2\2\2\u0567\u0562\3\2\2\2\u0567\u0564\3\2"+
		"\2\2\u0568I\3\2\2\2\u0569\u056a\7\u0176\2\2\u056a\u0578\7\u03ef\2\2\u056b"+
		"\u056c\7%\2\2\u056c\u0578\7\u03ef\2\2\u056d\u056e\7\u0238\2\2\u056e\u0578"+
		"\7\u03ef\2\2\u056f\u0570\7\u01d2\2\2\u0570\u0578\7\u03ef\2\2\u0571\u0572"+
		"\7\u020b\2\2\u0572\u0578\7\u03ef\2\2\u0573\u0574\7\u01cb\2\2\u0574\u0578"+
		"\7\u03ef\2\2\u0575\u0576\7\u01d7\2\2\u0576\u0578\5\u0212\u010a\2\u0577"+
		"\u0569\3\2\2\2\u0577\u056b\3\2\2\2\u0577\u056d\3\2\2\2\u0577\u056f\3\2"+
		"\2\2\u0577\u0571\3\2\2\2\u0577\u0573\3\2\2\2\u0577\u0575\3\2\2\2\u0578"+
		"K\3\2\2\2\u0579\u057a\7\u03e0\2\2\u057a\u057f\5N(\2\u057b\u057c\7\u03e2"+
		"\2\2\u057c\u057e\5N(\2\u057d\u057b\3\2\2\2\u057e\u0581\3\2\2\2\u057f\u057d"+
		"\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0582\3\2\2\2\u0581\u057f\3\2\2\2\u0582"+
		"\u0583\7\u03e1\2\2\u0583M\3\2\2\2\u0584\u0585\5\u020c\u0107\2\u0585\u0586"+
		"\5P)\2\u0586\u058a\3\2\2\2\u0587\u058a\5T+\2\u0588\u058a\5\\/\2\u0589"+
		"\u0584\3\2\2\2\u0589\u0587\3\2\2\2\u0589\u0588\3\2\2\2\u058aO\3\2\2\2"+
		"\u058b\u058f\5\u0220\u0111\2\u058c\u058e\5R*\2\u058d\u058c\3\2\2\2\u058e"+
		"\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u058f\u0590\3\2\2\2\u0590Q\3\2\2\2"+
		"\u0591\u058f\3\2\2\2\u0592\u05bb\5\u021c\u010f\2\u0593\u0594\7(\2\2\u0594"+
		"\u05bb\5\u023c\u011f\2\u0595\u059a\7\u0116\2\2\u0596\u0597\7l\2\2\u0597"+
		"\u0598\7\u00a8\2\2\u0598\u059a\5\u023e\u0120\2\u0599\u0595\3\2\2\2\u0599"+
		"\u0596\3\2\2\2\u059a\u05bb\3\2\2\2\u059b\u059d\7v\2\2\u059c\u059b\3\2"+
		"\2\2\u059c\u059d\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u05bb\7T\2\2\u059f"+
		"\u05a1\7\u00a5\2\2\u05a0\u05a2\7T\2\2\u05a1\u05a0\3\2\2\2\u05a1\u05a2"+
		"\3\2\2\2\u05a2\u05bb\3\2\2\2\u05a3\u05a4\7\u012f\2\2\u05a4\u05bb\7\u03ef"+
		"\2\2\u05a5\u05a6\7\u012d\2\2\u05a6\u05bb\t\21\2\2\u05a7\u05a8\7\u021e"+
		"\2\2\u05a8\u05bb\t\22\2\2\u05a9\u05bb\5V,\2\u05aa\u05ab\7\32\2\2\u05ab"+
		"\u05bb\5\u0200\u0101\2\u05ac\u05ad\7A\2\2\u05ad\u05af\7\n\2\2\u05ae\u05ac"+
		"\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b1\7\r\2\2\u05b1"+
		"\u05b2\7\u03e0\2\2\u05b2\u05b3\5\u025c\u012f\2\u05b3\u05b5\7\u03e1\2\2"+
		"\u05b4\u05b6\t\23\2\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05bb"+
		"\3\2\2\2\u05b7\u05b8\7\u00d6\2\2\u05b8\u05b9\7(\2\2\u05b9\u05bb\7\u023c"+
		"\2\2\u05ba\u0592\3\2\2\2\u05ba\u0593\3\2\2\2\u05ba\u0599\3\2\2\2\u05ba"+
		"\u059c\3\2\2\2\u05ba\u059f\3\2\2\2\u05ba\u05a3\3\2\2\2\u05ba\u05a5\3\2"+
		"\2\2\u05ba\u05a7\3\2\2\2\u05ba\u05a9\3\2\2\2\u05ba\u05aa\3\2\2\2\u05ba"+
		"\u05ae\3\2\2\2\u05ba\u05b7\3\2\2\2\u05bbS\3\2\2\2\u05bc\u05be\7\35\2\2"+
		"\u05bd\u05bf\5\u020c\u0107\2\u05be\u05bd\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf"+
		"\u05c1\3\2\2\2\u05c0\u05bc\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c2\3\2"+
		"\2\2\u05c2\u05c3\7v\2\2\u05c3\u05c5\7T\2\2\u05c4\u05c6\5\u020c\u0107\2"+
		"\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c8\3\2\2\2\u05c7\u05c9"+
		"\5@!\2\u05c8\u05c7\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca"+
		"\u05ce\5\u0230\u0119\2\u05cb\u05cd\5B\"\2\u05cc\u05cb\3\2\2\2\u05cd\u05d0"+
		"\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u0602\3\2\2\2\u05d0"+
		"\u05ce\3\2\2\2\u05d1\u05d3\7\35\2\2\u05d2\u05d4\5\u020c\u0107\2\u05d3"+
		"\u05d2\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d6\3\2\2\2\u05d5\u05d1\3\2"+
		"\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05d9\7\u00a5\2\2\u05d8"+
		"\u05da\t\24\2\2\u05d9\u05d8\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\3"+
		"\2\2\2\u05db\u05dd\5\u020c\u0107\2\u05dc\u05db\3\2\2\2\u05dc\u05dd\3\2"+
		"\2\2\u05dd\u05df\3\2\2\2\u05de\u05e0\5@!\2\u05df\u05de\3\2\2\2\u05df\u05e0"+
		"\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e5\5\u0230\u0119\2\u05e2\u05e4\5"+
		"B\"\2\u05e3\u05e2\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e3\3\2\2\2\u05e5"+
		"\u05e6\3\2\2\2\u05e6\u0602\3\2\2\2\u05e7\u05e5\3\2\2\2\u05e8\u05ea\7\35"+
		"\2\2\u05e9\u05eb\5\u020c\u0107\2\u05ea\u05e9\3\2\2\2\u05ea\u05eb\3\2\2"+
		"\2\u05eb\u05ed\3\2\2\2\u05ec\u05e8\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ee"+
		"\3\2\2\2\u05ee\u05ef\7>\2\2\u05ef\u05f1\7T\2\2\u05f0\u05f2\5\u020c\u0107"+
		"\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4"+
		"\5\u0230\u0119\2\u05f4\u05f5\5V,\2\u05f5\u0602\3\2\2\2\u05f6\u05f8\7\35"+
		"\2\2\u05f7\u05f9\5\u020c\u0107\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9\3\2\2"+
		"\2\u05f9\u05fb\3\2\2\2\u05fa\u05f6\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc"+
		"\3\2\2\2\u05fc\u05fd\7\31\2\2\u05fd\u05fe\7\u03e0\2\2\u05fe\u05ff\5\u025c"+
		"\u012f\2\u05ff\u0600\7\u03e1\2\2\u0600\u0602\3\2\2\2\u0601\u05c0\3\2\2"+
		"\2\u0601\u05d5\3\2\2\2\u0601\u05ec\3\2\2\2\u0601\u05fa\3\2\2\2\u0602U"+
		"\3\2\2\2\u0603\u0604\7|\2\2\u0604\u0606\5\u01f4\u00fb\2\u0605\u0607\5"+
		"\u0230\u0119\2\u0606\u0605\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u060a\3\2"+
		"\2\2\u0608\u0609\7d\2\2\u0609\u060b\t\25\2\2\u060a\u0608\3\2\2\2\u060a"+
		"\u060b\3\2\2\2\u060b\u060d\3\2\2\2\u060c\u060e\5X-\2\u060d\u060c\3\2\2"+
		"\2\u060d\u060e\3\2\2\2\u060eW\3\2\2\2\u060f\u0610\7l\2\2\u0610\u0611\7"+
		"*\2\2\u0611\u0615\5Z.\2\u0612\u0613\7l\2\2\u0613\u0614\7\u00a8\2\2\u0614"+
		"\u0616\5Z.\2\u0615\u0612\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0620\3\2\2"+
		"\2\u0617\u0618\7l\2\2\u0618\u0619\7\u00a8\2\2\u0619\u061d\5Z.\2\u061a"+
		"\u061b\7l\2\2\u061b\u061c\7*\2\2\u061c\u061e\5Z.\2\u061d\u061a\3\2\2\2"+
		"\u061d\u061e\3\2\2\2\u061e\u0620\3\2\2\2\u061f\u060f\3\2\2\2\u061f\u0617"+
		"\3\2\2\2\u0620Y\3\2\2\2\u0621\u0628\7\u0084\2\2\u0622\u0628\7\24\2\2\u0623"+
		"\u0624\7\u008c\2\2\u0624\u0628\7j\2\2\u0625\u0626\7\u01be\2\2\u0626\u0628"+
		"\7\u010d\2\2\u0627\u0621\3\2\2\2\u0627\u0622\3\2\2\2\u0627\u0623\3\2\2"+
		"\2\u0627\u0625\3\2\2\2\u0628[\3\2\2\2\u0629\u062b\t\24\2\2\u062a\u062c"+
		"\5\u020c\u0107\2\u062b\u062a\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062e\3"+
		"\2\2\2\u062d\u062f\5@!\2\u062e\u062d\3\2\2\2\u062e\u062f\3\2\2\2\u062f"+
		"\u0630\3\2\2\2\u0630\u0634\5\u0230\u0119\2\u0631\u0633\5B\"\2\u0632\u0631"+
		"\3\2\2\2\u0633\u0636\3\2\2\2\u0634\u0632\3\2\2\2\u0634\u0635\3\2\2\2\u0635"+
		"\u0646\3\2\2\2\u0636\u0634\3\2\2\2\u0637\u0639\t\26\2\2\u0638\u063a\t"+
		"\24\2\2\u0639\u0638\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063c\3\2\2\2\u063b"+
		"\u063d\5\u020c\u0107\2\u063c\u063b\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e"+
		"\3\2\2\2\u063e\u0642\5\u0230\u0119\2\u063f\u0641\5B\"\2\u0640\u063f\3"+
		"\2\2\2\u0641\u0644\3\2\2\2\u0642\u0640\3\2\2\2\u0642\u0643\3\2\2\2\u0643"+
		"\u0646\3\2\2\2\u0644\u0642\3\2\2\2\u0645\u0629\3\2\2\2\u0645\u0637\3\2"+
		"\2\2\u0646]\3\2\2\2\u0647\u0649\7\u0154\2\2\u0648\u064a\7\u03d7\2\2\u0649"+
		"\u0648\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u06d8\5\u0202"+
		"\u0102\2\u064c\u064e\7\u0116\2\2\u064d\u064f\7\u03d7\2\2\u064e\u064d\3"+
		"\2\2\2\u064e\u064f\3\2\2\2\u064f\u0650\3\2\2\2\u0650\u06d8\5\u0212\u010a"+
		"\2\u0651\u0653\7\u0117\2\2\u0652\u0654\7\u03d7\2\2\u0653\u0652\3\2\2\2"+
		"\u0653\u0654\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u06d8\5\u0212\u010a\2\u0656"+
		"\u0658\7(\2\2\u0657\u0656\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065c\3\2"+
		"\2\2\u0659\u065a\7\30\2\2\u065a\u065d\7\u008c\2\2\u065b\u065d\7\u02be"+
		"\2\2\u065c\u0659\3\2\2\2\u065c\u065b\3\2\2\2\u065d\u065f\3\2\2\2\u065e"+
		"\u0660\7\u03d7\2\2\u065f\u065e\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0663"+
		"\3\2\2\2\u0661\u0664\5\u01fe\u0100\2\u0662\u0664\7(\2\2\u0663\u0661\3"+
		"\2\2\2\u0663\u0662\3\2\2\2\u0664\u06d8\3\2\2\2\u0665\u0667\t\27\2\2\u0666"+
		"\u0668\7\u03d7\2\2\u0667\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669"+
		"\3\2\2\2\u0669\u06d8\t\30\2\2\u066a\u066c\7(\2\2\u066b\u066a\3\2\2\2\u066b"+
		"\u066c\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u066f\7\32\2\2\u066e\u0670\7"+
		"\u03d7\2\2\u066f\u066e\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0671\3\2\2\2"+
		"\u0671\u06d8\5\u0200\u0101\2\u0672\u0674\7\u012f\2\2\u0673\u0675\7\u03d7"+
		"\2\2\u0674\u0673\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0676\3\2\2\2\u0676"+
		"\u06d8\7\u03ef\2\2\u0677\u0679\7\u0134\2\2\u0678\u067a\7\u03d7\2\2\u0679"+
		"\u0678\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u06d8\t\31"+
		"\2\2\u067c\u067e\7\u0136\2\2\u067d\u067f\7\u03d7\2\2\u067e\u067d\3\2\2"+
		"\2\u067e\u067f\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u06d8\7\u03ef\2\2\u0681"+
		"\u0682\7\u0141\2\2\u0682\u0684\7\u0148\2\2\u0683\u0685\7\u03d7\2\2\u0684"+
		"\u0683\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u06d8\7\u03ef"+
		"\2\2\u0687\u0689\7\u0146\2\2\u0688\u068a\7\u03d7\2\2\u0689\u0688\3\2\2"+
		"\2\u0689\u068a\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u06d8\t\30\2\2\u068c"+
		"\u068e\7\u0151\2\2\u068d\u068f\7\u03d7\2\2\u068e\u068d\3\2\2\2\u068e\u068f"+
		"\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u06d8\7\u03ef\2\2\u0691\u0692\7J\2"+
		"\2\u0692\u0694\7\u0148\2\2\u0693\u0695\7\u03d7\2\2\u0694\u0693\3\2\2\2"+
		"\u0694\u0695\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u06d8\7\u03ef\2\2\u0697"+
		"\u0699\7\u017e\2\2\u0698\u069a\7\u03d7\2\2\u0699\u0698\3\2\2\2\u0699\u069a"+
		"\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u06d8\t\32\2\2\u069c\u069e\7\u0189"+
		"\2\2\u069d\u069f\7\u03d7\2\2\u069e\u069d\3\2\2\2\u069e\u069f\3\2\2\2\u069f"+
		"\u06a0\3\2\2\2\u06a0\u06d8\5\u0214\u010b\2\u06a1\u06a3\7\u01aa\2\2\u06a2"+
		"\u06a4\7\u03d7\2\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5"+
		"\3\2\2\2\u06a5\u06d8\5\u0212\u010a\2\u06a6\u06a8\7\u01b3\2\2\u06a7\u06a9"+
		"\7\u03d7\2\2\u06a8\u06a7\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06aa\3\2\2"+
		"\2\u06aa\u06d8\5\u0212\u010a\2\u06ab\u06ad\7\u01cc\2\2\u06ac\u06ae\7\u03d7"+
		"\2\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2\u06af"+
		"\u06d8\t\33\2\2\u06b0\u06b2\7\u01d2\2\2\u06b1\u06b3\7\u03d7\2\2\u06b2"+
		"\u06b1\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06d8\7\u03ef"+
		"\2\2\u06b5\u06b7\7\u01fe\2\2\u06b6\u06b8\7\u03d7\2\2\u06b7\u06b6\3\2\2"+
		"\2\u06b7\u06b8\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06d8\t\34\2\2\u06ba"+
		"\u06bc\7\u0219\2\2\u06bb\u06bd\7\u03d7\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd"+
		"\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06d8\t\33\2\2\u06bf\u06c1\7\u021a"+
		"\2\2\u06c0\u06c2\7\u03d7\2\2\u06c1\u06c0\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2"+
		"\u06c3\3\2\2\2\u06c3\u06d8\t\33\2\2\u06c4\u06c6\7\u021b\2\2\u06c5\u06c7"+
		"\7\u03d7\2\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c8\3\2\2"+
		"\2\u06c8\u06d8\5\u0212\u010a\2\u06c9\u06ca\7\u0229\2\2\u06ca\u06cc\5\u020c"+
		"\u0107\2\u06cb\u06cd\5`\61\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd"+
		"\u06d8\3\2\2\2\u06ce\u06d8\5`\61\2\u06cf\u06d1\7\u00a4\2\2\u06d0\u06d2"+
		"\7\u03d7\2\2\u06d1\u06d0\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2"+
		"\2\u06d3\u06d4\7\u03e0\2\2\u06d4\u06d5\5\u022e\u0118\2\u06d5\u06d6\7\u03e1"+
		"\2\2\u06d6\u06d8\3\2\2\2\u06d7\u0647\3\2\2\2\u06d7\u064c\3\2\2\2\u06d7"+
		"\u0651\3\2\2\2\u06d7\u0657\3\2\2\2\u06d7\u0665\3\2\2\2\u06d7\u066b\3\2"+
		"\2\2\u06d7\u0672\3\2\2\2\u06d7\u0677\3\2\2\2\u06d7\u067c\3\2\2\2\u06d7"+
		"\u0681\3\2\2\2\u06d7\u0687\3\2\2\2\u06d7\u068c\3\2\2\2\u06d7\u0691\3\2"+
		"\2\2\u06d7\u0697\3\2\2\2\u06d7\u069c\3\2\2\2\u06d7\u06a1\3\2\2\2\u06d7"+
		"\u06a6\3\2\2\2\u06d7\u06ab\3\2\2\2\u06d7\u06b0\3\2\2\2\u06d7\u06b5\3\2"+
		"\2\2\u06d7\u06ba\3\2\2\2\u06d7\u06bf\3\2\2\2\u06d7\u06c4\3\2\2\2\u06d7"+
		"\u06c9\3\2\2\2\u06d7\u06ce\3\2\2\2\u06d7\u06cf\3\2\2\2\u06d8_\3\2\2\2"+
		"\u06d9\u06da\7\u021e\2\2\u06da\u06db\t\22\2\2\u06dba\3\2\2\2\u06dc\u06dd"+
		"\7u\2\2\u06dd\u06de\7\22\2\2\u06de\u06e1\5d\63\2\u06df\u06e0\7\u01d1\2"+
		"\2\u06e0\u06e2\5\u0212\u010a\2\u06e1\u06df\3\2\2\2\u06e1\u06e2\3\2\2\2"+
		"\u06e2\u06ea\3\2\2\2\u06e3\u06e4\7\u0223\2\2\u06e4\u06e5\7\22\2\2\u06e5"+
		"\u06e8\5f\64\2\u06e6\u06e7\7\u0224\2\2\u06e7\u06e9\5\u0212\u010a\2\u06e8"+
		"\u06e6\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06eb\3\2\2\2\u06ea\u06e3\3\2"+
		"\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06f7\3\2\2\2\u06ec\u06ed\7\u03e0\2\2\u06ed"+
		"\u06f2\5h\65\2\u06ee\u06ef\7\u03e2\2\2\u06ef\u06f1\5h\65\2\u06f0\u06ee"+
		"\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2\u06f0\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3"+
		"\u06f5\3\2\2\2\u06f4\u06f2\3\2\2\2\u06f5\u06f6\7\u03e1\2\2\u06f6\u06f8"+
		"\3\2\2\2\u06f7\u06ec\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8c\3\2\2\2\u06f9"+
		"\u06fb\7\\\2\2\u06fa\u06f9\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc\3\2"+
		"\2\2\u06fc\u06fd\7\u0174\2\2\u06fd\u06fe\7\u03e0\2\2\u06fe\u06ff\5\u025c"+
		"\u012f\2\u06ff\u0700\7\u03e1\2\2\u0700\u0727\3\2\2\2\u0701\u0703\7\\\2"+
		"\2\u0702\u0701\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0708"+
		"\7T\2\2\u0705\u0706\7\u0110\2\2\u0706\u0707\7\u03d7\2\2\u0707\u0709\t"+
		"\35\2\2\u0708\u0705\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070a\3\2\2\2\u070a"+
		"\u070b\7\u03e0\2\2\u070b\u070c\5\u022c\u0117\2\u070c\u070d\7\u03e1\2\2"+
		"\u070d\u0727\3\2\2\2\u070e\u0718\7y\2\2\u070f\u0710\7\u03e0\2\2\u0710"+
		"\u0711\5\u025c\u012f\2\u0711\u0712\7\u03e1\2\2\u0712\u0719\3\2\2\2\u0713"+
		"\u0714\7\u012c\2\2\u0714\u0715\7\u03e0\2\2\u0715\u0716\5\u022c\u0117\2"+
		"\u0716\u0717\7\u03e1\2\2\u0717\u0719\3\2\2\2\u0718\u070f\3\2\2\2\u0718"+
		"\u0713\3\2\2\2\u0719\u0727\3\2\2\2\u071a\u0724\7\u018f\2\2\u071b\u071c"+
		"\7\u03e0\2\2\u071c\u071d\5\u025c\u012f\2\u071d\u071e\7\u03e1\2\2\u071e"+
		"\u0725\3\2\2\2\u071f\u0720\7\u012c\2\2\u0720\u0721\7\u03e0\2\2\u0721\u0722"+
		"\5\u022c\u0117\2\u0722\u0723\7\u03e1\2\2\u0723\u0725\3\2\2\2\u0724\u071b"+
		"\3\2\2\2\u0724\u071f\3\2\2\2\u0725\u0727\3\2\2\2\u0726\u06fa\3\2\2\2\u0726"+
		"\u0702\3\2\2\2\u0726\u070e\3\2\2\2\u0726\u071a\3\2\2\2\u0727e\3\2\2\2"+
		"\u0728\u072a\7\\\2\2\u0729\u0728\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072b"+
		"\3\2\2\2\u072b\u072c\7\u0174\2\2\u072c\u072d\7\u03e0\2\2\u072d\u072e\5"+
		"\u025c\u012f\2\u072e\u072f\7\u03e1\2\2\u072f\u073e\3\2\2\2\u0730\u0732"+
		"\7\\\2\2\u0731\u0730\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0733\3\2\2\2\u0733"+
		"\u0737\7T\2\2\u0734\u0735\7\u0110\2\2\u0735\u0736\7\u03d7\2\2\u0736\u0738"+
		"\t\35\2\2\u0737\u0734\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u0739\3\2\2\2"+
		"\u0739\u073a\7\u03e0\2\2\u073a\u073b\5\u022c\u0117\2\u073b\u073c\7\u03e1"+
		"\2\2\u073c\u073e\3\2\2\2\u073d\u0729\3\2\2\2\u073d\u0731\3\2\2\2\u073e"+
		"g\3\2\2\2\u073f\u0740\7u\2\2\u0740\u0741\5\u020c\u0107\2\u0741\u0742\7"+
		"\u00ac\2\2\u0742\u0743\7\u018d\2\2\u0743\u0744\7\u022c\2\2\u0744\u0745"+
		"\7\u03e0\2\2\u0745\u074a\5j\66\2\u0746\u0747\7\u03e2\2\2\u0747\u0749\5"+
		"j\66\2\u0748\u0746\3\2\2\2\u0749\u074c\3\2\2\2\u074a\u0748\3\2\2\2\u074a"+
		"\u074b\3\2\2\2\u074b\u074d\3\2\2\2\u074c\u074a\3\2\2\2\u074d\u0751\7\u03e1"+
		"\2\2\u074e\u0750\5p9\2\u074f\u074e\3\2\2\2\u0750\u0753\3\2\2\2\u0751\u074f"+
		"\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u075c\3\2\2\2\u0753\u0751\3\2\2\2\u0754"+
		"\u0759\5n8\2\u0755\u0756\7\u03e2\2\2\u0756\u0758\5n8\2\u0757\u0755\3\2"+
		"\2\2\u0758\u075b\3\2\2\2\u0759\u0757\3\2\2\2\u0759\u075a\3\2\2\2\u075a"+
		"\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075c\u0754\3\2\2\2\u075c\u075d\3\2"+
		"\2\2\u075d\u07c3\3\2\2\2\u075e\u075f\7u\2\2\u075f\u0760\5\u020c\u0107"+
		"\2\u0760\u0761\7\u00ac\2\2\u0761\u0762\7\u018d\2\2\u0762\u0763\7\u022c"+
		"\2\2\u0763\u0767\5j\66\2\u0764\u0766\5p9\2\u0765\u0764\3\2\2\2\u0766\u0769"+
		"\3\2\2\2\u0767\u0765\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u0772\3\2\2\2\u0769"+
		"\u0767\3\2\2\2\u076a\u076f\5n8\2\u076b\u076c\7\u03e2\2\2\u076c\u076e\5"+
		"n8\2\u076d\u076b\3\2\2\2\u076e\u0771\3\2\2\2\u076f\u076d\3\2\2\2\u076f"+
		"\u0770\3\2\2\2\u0770\u0773\3\2\2\2\u0771\u076f\3\2\2\2\u0772\u076a\3\2"+
		"\2\2\u0772\u0773\3\2\2\2\u0773\u07c3\3\2\2\2\u0774\u0775\7u\2\2\u0775"+
		"\u0776\5\u020c\u0107\2\u0776\u0777\7\u00ac\2\2\u0777\u0778\7I\2\2\u0778"+
		"\u0779\7\u03e0\2\2\u0779\u077e\5j\66\2\u077a\u077b\7\u03e2\2\2\u077b\u077d"+
		"\5j\66\2\u077c\u077a\3\2\2\2\u077d\u0780\3\2\2\2\u077e\u077c\3\2\2\2\u077e"+
		"\u077f\3\2\2\2\u077f\u0781\3\2\2\2\u0780\u077e\3\2\2\2\u0781\u0785\7\u03e1"+
		"\2\2\u0782\u0784\5p9\2\u0783\u0782\3\2\2\2\u0784\u0787\3\2\2\2\u0785\u0783"+
		"\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0790\3\2\2\2\u0787\u0785\3\2\2\2\u0788"+
		"\u078d\5n8\2\u0789\u078a\7\u03e2\2\2\u078a\u078c\5n8\2\u078b\u0789\3\2"+
		"\2\2\u078c\u078f\3\2\2\2\u078d\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e"+
		"\u0791\3\2\2\2\u078f\u078d\3\2\2\2\u0790\u0788\3\2\2\2\u0790\u0791\3\2"+
		"\2\2\u0791\u07c3\3\2\2\2\u0792\u0793\7u\2\2\u0793\u0794\5\u020c\u0107"+
		"\2\u0794\u0795\7\u00ac\2\2\u0795\u0796\7I\2\2\u0796\u0797\7\u03e0\2\2"+
		"\u0797\u079c\5l\67\2\u0798\u0799\7\u03e2\2\2\u0799\u079b\5l\67\2\u079a"+
		"\u0798\3\2\2\2\u079b\u079e\3\2\2\2\u079c\u079a\3\2\2\2\u079c\u079d\3\2"+
		"\2\2\u079d\u079f\3\2\2\2\u079e\u079c\3\2\2\2\u079f\u07a3\7\u03e1\2\2\u07a0"+
		"\u07a2\5p9\2\u07a1\u07a0\3\2\2\2\u07a2\u07a5\3\2\2\2\u07a3\u07a1\3\2\2"+
		"\2\u07a3\u07a4\3\2\2\2\u07a4\u07ae\3\2\2\2\u07a5\u07a3\3\2\2\2\u07a6\u07ab"+
		"\5n8\2\u07a7\u07a8\7\u03e2\2\2\u07a8\u07aa\5n8\2\u07a9\u07a7\3\2\2\2\u07aa"+
		"\u07ad\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07af\3\2"+
		"\2\2\u07ad\u07ab\3\2\2\2\u07ae\u07a6\3\2\2\2\u07ae\u07af\3\2\2\2\u07af"+
		"\u07c3\3\2\2\2\u07b0\u07b1\7u\2\2\u07b1\u07b5\5\u020c\u0107\2\u07b2\u07b4"+
		"\5p9\2\u07b3\u07b2\3\2\2\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b5"+
		"\u07b6\3\2\2\2\u07b6\u07c0\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b8\u07bd\5n"+
		"8\2\u07b9\u07ba\7\u03e2\2\2\u07ba\u07bc\5n8\2\u07bb\u07b9\3\2\2\2\u07bc"+
		"\u07bf\3\2\2\2\u07bd\u07bb\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07c1\3\2"+
		"\2\2\u07bf\u07bd\3\2\2\2\u07c0\u07b8\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1"+
		"\u07c3\3\2\2\2\u07c2\u073f\3\2\2\2\u07c2\u075e\3\2\2\2\u07c2\u0774\3\2"+
		"\2\2\u07c2\u0792\3\2\2\2\u07c2\u07b0\3\2\2\2\u07c3i\3\2\2\2\u07c4\u07c8"+
		"\5\u021e\u0110\2\u07c5\u07c8\5\u025c\u012f\2\u07c6\u07c8\7e\2\2\u07c7"+
		"\u07c4\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c7\u07c6\3\2\2\2\u07c8k\3\2\2\2"+
		"\u07c9\u07ca\7\u03e0\2\2\u07ca\u07cd\5j\66\2\u07cb\u07cc\7\u03e2\2\2\u07cc"+
		"\u07ce\5j\66\2\u07cd\u07cb\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07cd\3\2"+
		"\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d2\7\u03e1\2\2\u07d2"+
		"m\3\2\2\2\u07d3\u07d4\7\u0223\2\2\u07d4\u07d8\5\u020c\u0107\2\u07d5\u07d7"+
		"\5p9\2\u07d6\u07d5\3\2\2\2\u07d7\u07da\3\2\2\2\u07d8\u07d6\3\2\2\2\u07d8"+
		"\u07d9\3\2\2\2\u07d9o\3\2\2\2\u07da\u07d8\3\2\2\2\u07db\u07dd\7\u021e"+
		"\2\2\u07dc\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07de\3\2\2\2\u07de"+
		"\u07e0\7\u0154\2\2\u07df\u07e1\7\u03d7\2\2\u07e0\u07df\3\2\2\2\u07e0\u07e1"+
		"\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u0809\5\u0202\u0102\2\u07e3\u07e5\7"+
		"\u012f\2\2\u07e4\u07e6\7\u03d7\2\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2"+
		"\2\2\u07e6\u07e7\3\2\2\2\u07e7\u0809\7\u03ef\2\2\u07e8\u07e9\7\u0141\2"+
		"\2\u07e9\u07eb\7\u0148\2\2\u07ea\u07ec\7\u03d7\2\2\u07eb\u07ea\3\2\2\2"+
		"\u07eb\u07ec\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u0809\7\u03ef\2\2\u07ee"+
		"\u07ef\7J\2\2\u07ef\u07f1\7\u0148\2\2\u07f0\u07f2\7\u03d7\2\2\u07f1\u07f0"+
		"\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u0809\7\u03ef\2"+
		"\2\u07f4\u07f6\7\u01aa\2\2\u07f5\u07f7\7\u03d7\2\2\u07f6\u07f5\3\2\2\2"+
		"\u07f6\u07f7\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u0809\5\u0212\u010a\2\u07f9"+
		"\u07fb\7\u01b3\2\2\u07fa\u07fc\7\u03d7\2\2\u07fb\u07fa\3\2\2\2\u07fb\u07fc"+
		"\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u0809\5\u0212\u010a\2\u07fe\u0800\7"+
		"\u0229\2\2\u07ff\u0801\7\u03d7\2\2\u0800\u07ff\3\2\2\2\u0800\u0801\3\2"+
		"\2\2\u0801\u0802\3\2\2\2\u0802\u0809\5\u020c\u0107\2\u0803\u0805\7\u01bf"+
		"\2\2\u0804\u0806\7\u03d7\2\2\u0805\u0804\3\2\2\2\u0805\u0806\3\2\2\2\u0806"+
		"\u0807\3\2\2\2\u0807\u0809\5\u020c\u0107\2\u0808\u07dc\3\2\2\2\u0808\u07e3"+
		"\3\2\2\2\u0808\u07e8\3\2\2\2\u0808\u07ee\3\2\2\2\u0808\u07f4\3\2\2\2\u0808"+
		"\u07f9\3\2\2\2\u0808\u07fe\3\2\2\2\u0808\u0803\3\2\2\2\u0809q\3\2\2\2"+
		"\u080a\u080b\7\t\2\2\u080b\u080d\t\2\2\2\u080c\u080e\5\u020c\u0107\2\u080d"+
		"\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0810\3\2\2\2\u080f\u0811\5\62"+
		"\32\2\u0810\u080f\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0810\3\2\2\2\u0812"+
		"\u0813\3\2\2\2\u0813\u081d\3\2\2\2\u0814\u0815\7\t\2\2\u0815\u0816\t\2"+
		"\2\2\u0816\u0817\5\u020c\u0107\2\u0817\u0818\7\u0237\2\2\u0818\u0819\7"+
		"\u0141\2\2\u0819\u081a\7\u0148\2\2\u081a\u081b\7\u01b9\2\2\u081b\u081d"+
		"\3\2\2\2\u081c\u080a\3\2\2\2\u081c\u0814\3\2\2\2\u081ds\3\2\2\2\u081e"+
		"\u0820\7\t\2\2\u081f\u0821\5\64\33\2\u0820\u081f\3\2\2\2\u0820\u0821\3"+
		"\2\2\2\u0821\u0822\3\2\2\2\u0822\u0823\7\u015a\2\2\u0823\u0827\5\u01f2"+
		"\u00fa\2\u0824\u0825\7l\2\2\u0825\u0826\7\u0200\2\2\u0826\u0828\5\66\34"+
		"\2\u0827\u0824\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u082f\3\2\2\2\u0829\u082a"+
		"\7l\2\2\u082a\u082c\7\u0132\2\2\u082b\u082d\7h\2\2\u082c\u082b\3\2\2\2"+
		"\u082c\u082d\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u0830\7\u01da\2\2\u082f"+
		"\u0829\3\2\2\2\u082f\u0830\3\2\2\2\u0830\u0834\3\2\2\2\u0831\u0832\7\177"+
		"\2\2\u0832\u0833\7\u009f\2\2\u0833\u0835\5\u01f2\u00fa\2\u0834\u0831\3"+
		"\2\2\2\u0834\u0835\3\2\2\2\u0835\u0837\3\2\2\2\u0836\u0838\5> \2\u0837"+
		"\u0836\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u083b\3\2\2\2\u0839\u083a\7\u012f"+
		"\2\2\u083a\u083c\7\u03ef\2\2\u083b\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083c"+
		"\u083f\3\2\2\2\u083d\u083e\7\u014c\2\2\u083e\u0840\5\u015a\u00ae\2\u083f"+
		"\u083d\3\2\2\2\u083f\u0840\3\2\2\2\u0840u\3\2\2\2\u0841\u0842\7\t\2\2"+
		"\u0842\u0843\7\u016e\2\2\u0843\u0847\5\u01f2\u00fa\2\u0844\u0846\5H%\2"+
		"\u0845\u0844\3\2\2\2\u0846\u0849\3\2\2\2\u0847\u0845\3\2\2\2\u0847\u0848"+
		"\3\2\2\2\u0848w\3\2\2\2\u0849\u0847\3\2\2\2\u084a\u084b\7\t\2\2\u084b"+
		"\u084c\7\u0180\2\2\u084c\u084d\7\u01fb\2\2\u084d\u084e\7\u028c\2\2\u084e"+
		"\u084f\7\u0193\2\2\u084f\u0850\7T\2\2\u0850y\3\2\2\2\u0851\u0852\7\t\2"+
		"\2\u0852\u0853\7\u0191\2\2\u0853\u0854\7D\2\2\u0854\u0855\5\u020c\u0107"+
		"\2\u0855\u0856\7\7\2\2\u0856\u0857\7\u0232\2\2\u0857\u085d\7\u03ef\2\2"+
		"\u0858\u085a\7\u017c\2\2\u0859\u085b\7\u03d7\2\2\u085a\u0859\3\2\2\2\u085a"+
		"\u085b\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085e\5\u0214\u010b\2\u085d\u0858"+
		"\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860\3\2\2\2\u085f\u0861\7\u0241\2"+
		"\2\u0860\u085f\3\2\2\2\u0860\u0861\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864"+
		"\7\u0154\2\2\u0863\u0865\7\u03d7\2\2\u0864\u0863\3\2\2\2\u0864\u0865\3"+
		"\2\2\2\u0865\u0866\3\2\2\2\u0866\u0867\5\u0202\u0102\2\u0867{\3\2\2\2"+
		"\u0868\u0869\7\t\2\2\u0869\u086a\7w\2\2\u086a\u086e\5\u01f2\u00fa\2\u086b"+
		"\u086d\5H%\2\u086c\u086b\3\2\2\2\u086d\u0870\3\2\2\2\u086e\u086c\3\2\2"+
		"\2\u086e\u086f\3\2\2\2\u086f}\3\2\2\2\u0870\u086e\3\2\2\2\u0871\u0872"+
		"\7\t\2\2\u0872\u0873\7\u0202\2\2\u0873\u0874\5\u020c\u0107\2\u0874\u0875"+
		"\7\u01ca\2\2\u0875\u0876\7\u03e0\2\2\u0876\u087b\5J&\2\u0877\u0878\7\u03e2"+
		"\2\2\u0878\u087a\5J&\2\u0879\u0877\3\2\2\2\u087a\u087d\3\2\2\2\u087b\u0879"+
		"\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087e\3\2\2\2\u087d\u087b\3\2\2\2\u087e"+
		"\u087f\7\u03e1\2\2\u087f\177\3\2\2\2\u0880\u0882\7\t\2\2\u0881\u0883\t"+
		"\3\2\2\u0882\u0881\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0885\3\2\2\2\u0884"+
		"\u0886\7H\2\2\u0885\u0884\3\2\2\2\u0885\u0886\3\2\2\2\u0886\u0887\3\2"+
		"\2\2\u0887\u0888\7\u009c\2\2\u0888\u0891\5\u01f4\u00fb\2\u0889\u088e\5"+
		"\u0086D\2\u088a\u088b\7\u03e2\2\2\u088b\u088d\5\u0086D\2\u088c\u088a\3"+
		"\2\2\2\u088d\u0890\3\2\2\2\u088e\u088c\3\2\2\2\u088e\u088f\3\2\2\2\u088f"+
		"\u0892\3\2\2\2\u0890\u088e\3\2\2\2\u0891\u0889\3\2\2\2\u0891\u0892\3\2"+
		"\2\2\u0892\u0894\3\2\2\2\u0893\u0895\5b\62\2\u0894\u0893\3\2\2\2\u0894"+
		"\u0895\3\2\2\2\u0895\u0081\3\2\2\2\u0896\u0897\7\t\2\2\u0897\u0898\7\u0229"+
		"\2\2\u0898\u0899\5\u020c\u0107\2\u0899\u089a\t\36\2\2\u089a\u089b\7\u0142"+
		"\2\2\u089b\u089f\7\u03ef\2\2\u089c\u089d\7\u017c\2\2\u089d\u089e\7\u03d7"+
		"\2\2\u089e\u08a0\5\u0214\u010b\2\u089f\u089c\3\2\2\2\u089f\u08a0\3\2\2"+
		"\2\u08a0\u08a2\3\2\2\2\u08a1\u08a3\7\u0241\2\2\u08a2\u08a1\3\2\2\2\u08a2"+
		"\u08a3\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a6\7\u0154\2\2\u08a5\u08a7"+
		"\7\u03d7\2\2\u08a6\u08a5\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\3\2\2"+
		"\2\u08a8\u08a9\5\u0202\u0102\2\u08a9\u0083\3\2\2\2\u08aa\u08ae\7\t\2\2"+
		"\u08ab\u08ac\7\u0110\2\2\u08ac\u08ad\7\u03d7\2\2\u08ad\u08af\t\f\2\2\u08ae"+
		"\u08ab\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b1\3\2\2\2\u08b0\u08b2\5\64"+
		"\33\2\u08b1\u08b0\3\2\2\2\u08b1\u08b2\3\2\2\2\u08b2\u08b6\3\2\2\2\u08b3"+
		"\u08b4\7\u0091\2\2\u08b4\u08b5\7\u0201\2\2\u08b5\u08b7\t\r\2\2\u08b6\u08b3"+
		"\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08b9\7\u023e\2"+
		"\2\u08b9\u08be\5\u01f2\u00fa\2\u08ba\u08bb\7\u03e0\2\2\u08bb\u08bc\5\u022c"+
		"\u0117\2\u08bc\u08bd\7\u03e1\2\2\u08bd\u08bf\3\2\2\2\u08be\u08ba\3\2\2"+
		"\2\u08be\u08bf\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0\u08c1\7\r\2\2\u08c1\u08c8"+
		"\5\u00b4[\2\u08c2\u08c4\7\u00b0\2\2\u08c3\u08c5\t\16\2\2\u08c4\u08c3\3"+
		"\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\7\31\2\2\u08c7"+
		"\u08c9\7n\2\2\u08c8\u08c2\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u0085\3\2"+
		"\2\2\u08ca\u08d1\5^\60\2\u08cb\u08cd\7\u03e2\2\2\u08cc\u08cb\3\2\2\2\u08cc"+
		"\u08cd\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d0\5^\60\2\u08cf\u08cc\3\2"+
		"\2\2\u08d0\u08d3\3\2\2\2\u08d1\u08cf\3\2\2\2\u08d1\u08d2\3\2\2\2\u08d2"+
		"\u0a2e\3\2\2\2\u08d3\u08d1\3\2\2\2\u08d4\u08d6\7\7\2\2\u08d5\u08d7\7\33"+
		"\2\2\u08d6\u08d5\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08d8\3\2\2\2\u08d8"+
		"\u08d9\5\u020c\u0107\2\u08d9\u08dd\5P)\2\u08da\u08de\7\u0168\2\2\u08db"+
		"\u08dc\7\u010e\2\2\u08dc\u08de\5\u020c\u0107\2\u08dd\u08da\3\2\2\2\u08dd"+
		"\u08db\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u0a2e\3\2\2\2\u08df\u08e1\7\7"+
		"\2\2\u08e0\u08e2\7\33\2\2\u08e1\u08e0\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2"+
		"\u08e3\3\2\2\2\u08e3\u08e4\7\u03e0\2\2\u08e4\u08e5\5\u020c\u0107\2\u08e5"+
		"\u08ec\5P)\2\u08e6\u08e7\7\u03e2\2\2\u08e7\u08e8\5\u020c\u0107\2\u08e8"+
		"\u08e9\5P)\2\u08e9\u08eb\3\2\2\2\u08ea\u08e6\3\2\2\2\u08eb\u08ee\3\2\2"+
		"\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ef\3\2\2\2\u08ee\u08ec"+
		"\3\2\2\2\u08ef\u08f0\7\u03e1\2\2\u08f0\u0a2e\3\2\2\2\u08f1\u08f2\7\7\2"+
		"\2\u08f2\u08f4\t\24\2\2\u08f3\u08f5\5\u020c\u0107\2\u08f4\u08f3\3\2\2"+
		"\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\3\2\2\2\u08f6\u08f8\5@!\2\u08f7\u08f6"+
		"\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u08fd\5\u0230\u0119"+
		"\2\u08fa\u08fc\5B\"\2\u08fb\u08fa\3\2\2\2\u08fc\u08ff\3\2\2\2\u08fd\u08fb"+
		"\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u0a2e\3\2\2\2\u08ff\u08fd\3\2\2\2\u0900"+
		"\u0905\7\7\2\2\u0901\u0903\7\35\2\2\u0902\u0904\5\u020c\u0107\2\u0903"+
		"\u0902\3\2\2\2\u0903\u0904\3\2\2\2\u0904\u0906\3\2\2\2\u0905\u0901\3\2"+
		"\2\2\u0905\u0906\3\2\2\2\u0906\u0907\3\2\2\2\u0907\u0908\7v\2\2\u0908"+
		"\u090a\7T\2\2\u0909\u090b\5@!\2\u090a\u0909\3\2\2\2\u090a\u090b\3\2\2"+
		"\2\u090b\u090c\3\2\2\2\u090c\u0910\5\u0230\u0119\2\u090d\u090f\5B\"\2"+
		"\u090e\u090d\3\2\2\2\u090f\u0912\3\2\2\2\u0910\u090e\3\2\2\2\u0910\u0911"+
		"\3\2\2\2\u0911\u0a2e\3\2\2\2\u0912\u0910\3\2\2\2\u0913\u0918\7\7\2\2\u0914"+
		"\u0916\7\35\2\2\u0915\u0917\5\u020c\u0107\2\u0916\u0915\3\2\2\2\u0916"+
		"\u0917\3\2\2\2\u0917\u0919\3\2\2\2\u0918\u0914\3\2\2\2\u0918\u0919\3\2"+
		"\2\2\u0919\u091a\3\2\2\2\u091a\u091c\7\u00a5\2\2\u091b\u091d\t\24\2\2"+
		"\u091c\u091b\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091f\3\2\2\2\u091e\u0920"+
		"\5\u020c\u0107\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0922\3"+
		"\2\2\2\u0921\u0923\5@!\2\u0922\u0921\3\2\2\2\u0922\u0923\3\2\2\2\u0923"+
		"\u0924\3\2\2\2\u0924\u0928\5\u0230\u0119\2\u0925\u0927\5B\"\2\u0926\u0925"+
		"\3\2\2\2\u0927\u092a\3\2\2\2\u0928\u0926\3\2\2\2\u0928\u0929\3\2\2\2\u0929"+
		"\u0a2e\3\2\2\2\u092a\u0928\3\2\2\2\u092b\u092c\7\7\2\2\u092c\u092e\t\26"+
		"\2\2\u092d\u092f\t\24\2\2\u092e\u092d\3\2\2\2\u092e\u092f\3\2\2\2\u092f"+
		"\u0931\3\2\2\2\u0930\u0932\5\u020c\u0107\2\u0931\u0930\3\2\2\2\u0931\u0932"+
		"\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0937\5\u0230\u0119\2\u0934\u0936\5"+
		"B\"\2\u0935\u0934\3\2\2\2\u0936\u0939\3\2\2\2\u0937\u0935\3\2\2\2\u0937"+
		"\u0938\3\2\2\2\u0938\u0a2e\3\2\2\2\u0939\u0937\3\2\2\2\u093a\u093f\7\7"+
		"\2\2\u093b\u093d\7\35\2\2\u093c\u093e\5\u020c\u0107\2\u093d\u093c\3\2"+
		"\2\2\u093d\u093e\3\2\2\2\u093e\u0940\3\2\2\2\u093f\u093b\3\2\2\2\u093f"+
		"\u0940\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0942\7>\2\2\u0942\u0944\7T\2"+
		"\2\u0943\u0945\5\u020c\u0107\2\u0944\u0943\3\2\2\2\u0944\u0945\3\2\2\2"+
		"\u0945\u0946\3\2\2\2\u0946\u0947\5\u0230\u0119\2\u0947\u0948\5V,\2\u0948"+
		"\u0a2e\3\2\2\2\u0949\u094e\7\7\2\2\u094a\u094c\7\35\2\2\u094b\u094d\5"+
		"\u020c\u0107\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094f\3\2"+
		"\2\2\u094e\u094a\3\2\2\2\u094e\u094f\3\2\2\2\u094f\u0950\3\2\2\2\u0950"+
		"\u0951\7\31\2\2\u0951\u0952\7\u03e0\2\2\u0952\u0953\5\u025c\u012f\2\u0953"+
		"\u0954\7\u03e1\2\2\u0954\u0a2e\3\2\2\2\u0955\u0957\7\u0110\2\2\u0956\u0958"+
		"\7\u03d7\2\2\u0957\u0956\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u0959\3\2\2"+
		"\2\u0959\u0a2e\t\5\2\2\u095a\u095c\7\t\2\2\u095b\u095d\7\33\2\2\u095c"+
		"\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u0964\5\u020c"+
		"\u0107\2\u095f\u0960\7\u008c\2\2\u0960\u0961\7(\2\2\u0961\u0965\5\u023c"+
		"\u011f\2\u0962\u0963\7\61\2\2\u0963\u0965\7(\2\2\u0964\u095f\3\2\2\2\u0964"+
		"\u0962\3\2\2\2\u0965\u0a2e\3\2\2\2\u0966\u0968\7\27\2\2\u0967\u0969\7"+
		"\33\2\2\u0968\u0967\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096a\3\2\2\2\u096a"+
		"\u096b\5\u020c\u0107\2\u096b\u096c\5\u020c\u0107\2\u096c\u0970\5P)\2\u096d"+
		"\u0971\7\u0168\2\2\u096e\u096f\7\u010e\2\2\u096f\u0971\5\u020c\u0107\2"+
		"\u0970\u096d\3\2\2\2\u0970\u096e\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0a2e"+
		"\3\2\2\2\u0972\u0973\7\177\2\2\u0973\u0974\7\33\2\2\u0974\u0975\5\u020c"+
		"\u0107\2\u0975\u0976\7\u009f\2\2\u0976\u0977\5\u020c\u0107\2\u0977\u0a2e"+
		"\3\2\2\2\u0978\u097a\7_\2\2\u0979\u097b\7\u03d7\2\2\u097a\u0979\3\2\2"+
		"\2\u097a\u097b\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u0a2e\t\6\2\2\u097d\u097f"+
		"\7\u01b5\2\2\u097e\u0980\7\33\2\2\u097f\u097e\3\2\2\2\u097f\u0980\3\2"+
		"\2\2\u0980\u0981\3\2\2\2\u0981\u0982\5\u020c\u0107\2\u0982\u0986\5P)\2"+
		"\u0983\u0987\7\u0168\2\2\u0984\u0985\7\u010e\2\2\u0985\u0987\5\u020c\u0107"+
		"\2\u0986\u0983\3\2\2\2\u0986\u0984\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0a2e"+
		"\3\2\2\2\u0988\u098a\7\61\2\2\u0989\u098b\7\33\2\2\u098a\u0989\3\2\2\2"+
		"\u098a\u098b\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u098e\5\u020c\u0107\2\u098d"+
		"\u098f\7\u0084\2\2\u098e\u098d\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0a2e"+
		"\3\2\2\2\u0990\u0991\7\61\2\2\u0991\u0992\7v\2\2\u0992\u0a2e\7T\2\2\u0993"+
		"\u0994\7\177\2\2\u0994\u0995\t\24\2\2\u0995\u0996\5\u020c\u0107\2\u0996"+
		"\u0997\7\u009f\2\2\u0997\u0998\5\u020c\u0107\2\u0998\u0a2e\3\2\2\2\u0999"+
		"\u099a\7\61\2\2\u099a\u099b\t\24\2\2\u099b\u0a2e\5\u020c\u0107\2\u099c"+
		"\u099d\7\61\2\2\u099d\u099e\7>\2\2\u099e\u099f\7T\2\2\u099f\u0a2e\5\u020c"+
		"\u0107\2\u09a0\u09a1\7\u0149\2\2\u09a1\u0a2e\7U\2\2\u09a2\u09a3\7\u0150"+
		"\2\2\u09a3\u0a2e\7U\2\2\u09a4\u09a6\7\177\2\2\u09a5\u09a7\t\37\2\2\u09a6"+
		"\u09a5\3\2\2\2\u09a6\u09a7\3\2\2\2\u09a7\u09aa\3\2\2\2\u09a8\u09ab\5\u020c"+
		"\u0107\2\u09a9\u09ab\5\u01f2\u00fa\2\u09aa\u09a8\3\2\2\2\u09aa\u09a9\3"+
		"\2\2\2\u09ab\u0a2e\3\2\2\2\u09ac\u09ad\7q\2\2\u09ad\u09ae\7\22\2\2\u09ae"+
		"\u0a2e\5\u022c\u0117\2\u09af\u09b0\7\37\2\2\u09b0\u09b1\7\u009f\2\2\u09b1"+
		"\u09b2\7\30\2\2\u09b2\u09b3\7\u008c\2\2\u09b3\u09b6\5\u01fe\u0100\2\u09b4"+
		"\u09b5\7\32\2\2\u09b5\u09b7\5\u0200\u0101\2\u09b6\u09b4\3\2\2\2\u09b6"+
		"\u09b7\3\2\2\2\u09b7\u0a2e\3\2\2\2\u09b8\u09ba\7(\2\2\u09b9\u09b8\3\2"+
		"\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bc\7\30\2\2\u09bc"+
		"\u09bd\7\u008c\2\2\u09bd\u09be\7\u03d7\2\2\u09be\u09c2\5\u01fe\u0100\2"+
		"\u09bf\u09c0\7\32\2\2\u09c0\u09c1\7\u03d7\2\2\u09c1\u09c3\5\u0200\u0101"+
		"\2\u09c2\u09bf\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u0a2e\3\2\2\2\u09c4\u09c5"+
		"\7\u014a\2\2\u09c5\u0a2e\7\u0229\2\2\u09c6\u09c7\7\u017a\2\2\u09c7\u0a2e"+
		"\7\u0229\2\2\u09c8\u0a2e\7=\2\2\u09c9\u09ca\t \2\2\u09ca\u0a2e\7\u023b"+
		"\2\2\u09cb\u09cc\7\7\2\2\u09cc\u09cd\7u\2\2\u09cd\u09ce\7\u03e0\2\2\u09ce"+
		"\u09d3\5h\65\2\u09cf\u09d0\7\u03e2\2\2\u09d0\u09d2\5h\65\2\u09d1\u09cf"+
		"\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4"+
		"\u09d6\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d6\u09d7\7\u03e1\2\2\u09d7\u0a2e"+
		"\3\2\2\2\u09d8\u09d9\7\61\2\2\u09d9\u09da\7u\2\2\u09da\u0a2e\5\u022c\u0117"+
		"\2\u09db\u09dc\7\u014a\2\2\u09dc\u09df\7u\2\2\u09dd\u09e0\5\u022c\u0117"+
		"\2\u09de\u09e0\7\b\2\2\u09df\u09dd\3\2\2\2\u09df\u09de\3\2\2\2\u09e0\u09e1"+
		"\3\2\2\2\u09e1\u0a2e\7\u0229\2\2\u09e2\u09e3\7\u017a\2\2\u09e3\u09e6\7"+
		"u\2\2\u09e4\u09e7\5\u022c\u0117\2\u09e5\u09e7\7\b\2\2\u09e6\u09e4\3\2"+
		"\2\2\u09e6\u09e5\3\2\2\2\u09e7\u09e8\3\2\2\2\u09e8\u0a2e\7\u0229\2\2\u09e9"+
		"\u09ea\7\u0230\2\2\u09ea\u09ed\7u\2\2\u09eb\u09ee\5\u022c\u0117\2\u09ec"+
		"\u09ee\7\b\2\2\u09ed\u09eb\3\2\2\2\u09ed\u09ec\3\2\2\2\u09ee\u0a2e\3\2"+
		"\2\2\u09ef\u09f0\7\u012a\2\2\u09f0\u09f1\7u\2\2\u09f1\u0a2e\5\u0212\u010a"+
		"\2\u09f2\u09f3\7\u01eb\2\2\u09f3\u09f4\7u\2\2\u09f4\u09f5\5\u022c\u0117"+
		"\2\u09f5\u09f6\7P\2\2\u09f6\u09f7\7\u03e0\2\2\u09f7\u09fc\5h\65\2\u09f8"+
		"\u09f9\7\u03e2\2\2\u09f9\u09fb\5h\65\2\u09fa\u09f8\3\2\2\2\u09fb\u09fe"+
		"\3\2\2\2\u09fc\u09fa\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u09ff\3\2\2\2\u09fe"+
		"\u09fc\3\2\2\2\u09ff\u0a00\7\u03e1\2\2\u0a00\u0a2e\3\2\2\2\u0a01\u0a02"+
		"\7\u015d\2\2\u0a02\u0a03\7u\2\2\u0a03\u0a04\5\u020c\u0107\2\u0a04\u0a05"+
		"\7\u00b0\2\2\u0a05\u0a06\7\u009c\2\2\u0a06\u0a09\5\u01f4\u00fb\2\u0a07"+
		"\u0a08\t \2\2\u0a08\u0a0a\7\u023b\2\2\u0a09\u0a07\3\2\2\2\u0a09\u0a0a"+
		"\3\2\2\2\u0a0a\u0a2e\3\2\2\2\u0a0b\u0a0c\7\13\2\2\u0a0c\u0a0f\7u\2\2\u0a0d"+
		"\u0a10\5\u022c\u0117\2\u0a0e\u0a10\7\b\2\2\u0a0f\u0a0d\3\2\2\2\u0a0f\u0a0e"+
		"\3\2\2\2\u0a10\u0a2e\3\2\2\2\u0a11\u0a12\7\31\2\2\u0a12\u0a15\7u\2\2\u0a13"+
		"\u0a16\5\u022c\u0117\2\u0a14\u0a16\7\b\2\2\u0a15\u0a13\3\2\2\2\u0a15\u0a14"+
		"\3\2\2\2\u0a16\u0a2e\3\2\2\2\u0a17\u0a18\7m\2\2\u0a18\u0a1b\7u\2\2\u0a19"+
		"\u0a1c\5\u022c\u0117\2\u0a1a\u0a1c\7\b\2\2\u0a1b\u0a19\3\2\2\2\u0a1b\u0a1a"+
		"\3\2\2\2\u0a1c\u0a2e\3\2\2\2\u0a1d\u0a1e\7\u01e2\2\2\u0a1e\u0a21\7u\2"+
		"\2\u0a1f\u0a22\5\u022c\u0117\2\u0a20\u0a22\7\b\2\2\u0a21\u0a1f\3\2\2\2"+
		"\u0a21\u0a20\3\2\2\2\u0a22\u0a2e\3\2\2\2\u0a23\u0a24\7\u01ec\2\2\u0a24"+
		"\u0a27\7u\2\2\u0a25\u0a28\5\u022c\u0117\2\u0a26\u0a28\7\b\2\2\u0a27\u0a25"+
		"\3\2\2\2\u0a27\u0a26\3\2\2\2\u0a28\u0a2e\3\2\2\2\u0a29\u0a2a\7\u01ea\2"+
		"\2\u0a2a\u0a2e\7\u01d0\2\2\u0a2b\u0a2c\7\u0237\2\2\u0a2c\u0a2e\7\u01d0"+
		"\2\2\u0a2d\u08ca\3\2\2\2\u0a2d\u08d4\3\2\2\2\u0a2d\u08df\3\2\2\2\u0a2d"+
		"\u08f1\3\2\2\2\u0a2d\u0900\3\2\2\2\u0a2d\u0913\3\2\2\2\u0a2d\u092b\3\2"+
		"\2\2\u0a2d\u093a\3\2\2\2\u0a2d\u0949\3\2\2\2\u0a2d\u0955\3\2\2\2\u0a2d"+
		"\u095a\3\2\2\2\u0a2d\u0966\3\2\2\2\u0a2d\u0972\3\2\2\2\u0a2d\u0978\3\2"+
		"\2\2\u0a2d\u097d\3\2\2\2\u0a2d\u0988\3\2\2\2\u0a2d\u0990\3\2\2\2\u0a2d"+
		"\u0993\3\2\2\2\u0a2d\u0999\3\2\2\2\u0a2d\u099c\3\2\2\2\u0a2d\u09a0\3\2"+
		"\2\2\u0a2d\u09a2\3\2\2\2\u0a2d\u09a4\3\2\2\2\u0a2d\u09ac\3\2\2\2\u0a2d"+
		"\u09af\3\2\2\2\u0a2d\u09b9\3\2\2\2\u0a2d\u09c4\3\2\2\2\u0a2d\u09c6\3\2"+
		"\2\2\u0a2d\u09c8\3\2\2\2\u0a2d\u09c9\3\2\2\2\u0a2d\u09cb\3\2\2\2\u0a2d"+
		"\u09d8\3\2\2\2\u0a2d\u09db\3\2\2\2\u0a2d\u09e2\3\2\2\2\u0a2d\u09e9\3\2"+
		"\2\2\u0a2d\u09ef\3\2\2\2\u0a2d\u09f2\3\2\2\2\u0a2d\u0a01\3\2\2\2\u0a2d"+
		"\u0a0b\3\2\2\2\u0a2d\u0a11\3\2\2\2\u0a2d\u0a17\3\2\2\2\u0a2d\u0a1d\3\2"+
		"\2\2\u0a2d\u0a23\3\2\2\2\u0a2d\u0a29\3\2\2\2\u0a2d\u0a2b\3\2\2\2\u0a2e"+
		"\u0087\3\2\2\2\u0a2f\u0a30\7\61\2\2\u0a30\u0a32\t\2\2\2\u0a31\u0a33\5"+
		"\u0242\u0122\2\u0a32\u0a31\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3\2"+
		"\2\2\u0a34\u0a35\5\u020c\u0107\2\u0a35\u0089\3\2\2\2\u0a36\u0a37\7\61"+
		"\2\2\u0a37\u0a39\7\u015a\2\2\u0a38\u0a3a\5\u0242\u0122\2\u0a39\u0a38\3"+
		"\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3c\5\u01f2\u00fa"+
		"\2\u0a3c\u008b\3\2\2\2\u0a3d\u0a3e\7\61\2\2\u0a3e\u0a40\7J\2\2\u0a3f\u0a41"+
		"\t\3\2\2\u0a40\u0a3f\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a42\3\2\2\2\u0a42"+
		"\u0a43\5\u020c\u0107\2\u0a43\u0a44\7l\2\2\u0a44\u0a51\5\u01f4\u00fb\2"+
		"\u0a45\u0a47\7\u0110\2\2\u0a46\u0a48\7\u03d7\2\2\u0a47\u0a46\3\2\2\2\u0a47"+
		"\u0a48\3\2\2\2\u0a48\u0a49\3\2\2\2\u0a49\u0a50\t\5\2\2\u0a4a\u0a4c\7_"+
		"\2\2\u0a4b\u0a4d\7\u03d7\2\2\u0a4c\u0a4b\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d"+
		"\u0a4e\3\2\2\2\u0a4e\u0a50\t\6\2\2\u0a4f\u0a45\3\2\2\2\u0a4f\u0a4a\3\2"+
		"\2\2\u0a50\u0a53\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52"+
		"\u008d\3\2\2\2\u0a53\u0a51\3\2\2\2\u0a54\u0a55\7\61\2\2\u0a55\u0a56\7"+
		"\u0191\2\2\u0a56\u0a57\7D\2\2\u0a57\u0a58\5\u020c\u0107\2\u0a58\u0a59"+
		"\7\u0154\2\2\u0a59\u0a5a\7\u03d7\2\2\u0a5a\u0a5b\5\u0202\u0102\2\u0a5b"+
		"\u008f\3\2\2\2\u0a5c\u0a5d\7\61\2\2\u0a5d\u0a5f\7w\2\2\u0a5e\u0a60\5\u0242"+
		"\u0122\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61"+
		"\u0a62\5\u01f2\u00fa\2\u0a62\u0091\3\2\2\2\u0a63\u0a64\7\61\2\2\u0a64"+
		"\u0a66\7\u016e\2\2\u0a65\u0a67\5\u0242\u0122\2\u0a66\u0a65\3\2\2\2\u0a66"+
		"\u0a67\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68\u0a69\5\u01f2\u00fa\2\u0a69\u0093"+
		"\3\2\2\2\u0a6a\u0a6b\7\61\2\2\u0a6b\u0a6d\7\u0202\2\2\u0a6c\u0a6e\5\u0242"+
		"\u0122\2\u0a6d\u0a6c\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f"+
		"\u0a70\5\u020c\u0107\2\u0a70\u0095\3\2\2\2\u0a71\u0a73\7\61\2\2\u0a72"+
		"\u0a74\7\u022a\2\2\u0a73\u0a72\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75"+
		"\3\2\2\2\u0a75\u0a77\7\u009c\2\2\u0a76\u0a78\5\u0242\u0122\2\u0a77\u0a76"+
		"\3\2\2\2\u0a77\u0a78\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7b\5\u022e\u0118"+
		"\2\u0a7a\u0a7c\t!\2\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0097"+
		"\3\2\2\2\u0a7d\u0a7e\7\61\2\2\u0a7e\u0a7f\7\u0229\2\2\u0a7f\u0a85\5\u020c"+
		"\u0107\2\u0a80\u0a82\7\u0154\2\2\u0a81\u0a83\7\u03d7\2\2\u0a82\u0a81\3"+
		"\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0a86\5\u0202\u0102"+
		"\2\u0a85\u0a80\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0099\3\2\2\2\u0a87\u0a88"+
		"\7\61\2\2\u0a88\u0a8a\7\u00a1\2\2\u0a89\u0a8b\5\u0242\u0122\2\u0a8a\u0a89"+
		"\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\5\u01f2\u00fa"+
		"\2\u0a8d\u009b\3\2\2\2\u0a8e\u0a8f\7\61\2\2\u0a8f\u0a91\7\u023e\2\2\u0a90"+
		"\u0a92\5\u0242\u0122\2\u0a91\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a93"+
		"\3\2\2\2\u0a93\u0a98\5\u01f2\u00fa\2\u0a94\u0a95\7\u03e2\2\2\u0a95\u0a97"+
		"\5\u01f2\u00fa\2\u0a96\u0a94\3\2\2\2\u0a97\u0a9a\3\2\2\2\u0a98\u0a96\3"+
		"\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9c\3\2\2\2\u0a9a\u0a98\3\2\2\2\u0a9b"+
		"\u0a9d\t!\2\2\u0a9c\u0a9b\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u009d\3\2"+
		"\2\2\u0a9e\u0a9f\7\177\2\2\u0a9f\u0aa0\7\u009c\2\2\u0aa0\u0aa5\5\u00a0"+
		"Q\2\u0aa1\u0aa2\7\u03e2\2\2\u0aa2\u0aa4\5\u00a0Q\2\u0aa3\u0aa1\3\2\2\2"+
		"\u0aa4\u0aa7\3\2\2\2\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u009f"+
		"\3\2\2\2\u0aa7\u0aa5\3\2\2\2\u0aa8\u0aa9\5\u01f4\u00fb\2\u0aa9\u0aaa\7"+
		"\u009f\2\2\u0aaa\u0aab\5\u01f4\u00fb\2\u0aab\u00a1\3\2\2\2\u0aac\u0aae"+
		"\7\u0230\2\2\u0aad\u0aaf\7\u009c\2\2\u0aae\u0aad\3\2\2\2\u0aae\u0aaf\3"+
		"\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab1\5\u01f4\u00fb\2\u0ab1\u00a3\3\2"+
		"\2\2\u0ab2\u0ab3\7\23\2\2\u0ab3\u0aba\5\u01f2\u00fa\2\u0ab4\u0ab7\7\u03e0"+
		"\2\2\u0ab5\u0ab8\5\u0236\u011c\2\u0ab6\u0ab8\5\u0232\u011a\2\u0ab7\u0ab5"+
		"\3\2\2\2\u0ab7\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9"+
		"\u0abb\7\u03e1\2\2\u0aba\u0ab4\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u00a5"+
		"\3\2\2\2\u0abc\u0abf\5\u00c0a\2\u0abd\u0abf\5\u00c2b\2\u0abe\u0abc\3\2"+
		"\2\2\u0abe\u0abd\3\2\2\2\u0abf\u00a7\3\2\2\2\u0ac0\u0ac1\7\u014c\2\2\u0ac1"+
		"\u0ac2\5\u0232\u011a\2\u0ac2\u00a9\3\2\2\2\u0ac3\u0ac8\5\u00c4c\2\u0ac4"+
		"\u0ac8\5\u00c6d\2\u0ac5\u0ac8\5\u00c8e\2\u0ac6\u0ac8\5\u00caf\2\u0ac7"+
		"\u0ac3\3\2\2\2\u0ac7\u0ac4\3\2\2\2\u0ac7\u0ac5\3\2\2\2\u0ac7\u0ac6\3\2"+
		"\2\2\u0ac8\u00ab\3\2\2\2\u0ac9\u0acb\7N\2\2\u0aca\u0acc\t\"\2\2\u0acb"+
		"\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace\3\2\2\2\u0acd\u0acf\7H"+
		"\2\2\u0ace\u0acd\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad1\3\2\2\2\u0ad0"+
		"\u0ad2\7P\2\2\u0ad1\u0ad0\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad3\3\2"+
		"\2\2\u0ad3\u0ada\5\u01f4\u00fb\2\u0ad4\u0ad5\7u\2\2\u0ad5\u0ad7\7\u03e0"+
		"\2\2\u0ad6\u0ad8\5\u022c\u0117\2\u0ad7\u0ad6\3\2\2\2\u0ad7\u0ad8\3\2\2"+
		"\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0adb\7\u03e1\2\2\u0ada\u0ad4\3\2\2\2\u0ada"+
		"\u0adb\3\2\2\2\u0adb\u0aec\3\2\2\2\u0adc\u0add\7\u03e0\2\2\u0add\u0ade"+
		"\5\u022c\u0117\2\u0ade\u0adf\7\u03e1\2\2\u0adf\u0ae1\3\2\2\2\u0ae0\u0adc"+
		"\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0aed\5\u00b8]"+
		"\2\u0ae3\u0ae4\7\u008c\2\2\u0ae4\u0ae9\5\u00ba^\2\u0ae5\u0ae6\7\u03e2"+
		"\2\2\u0ae6\u0ae8\5\u00ba^\2\u0ae7\u0ae5\3\2\2\2\u0ae8\u0aeb\3\2\2\2\u0ae9"+
		"\u0ae7\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aed\3\2\2\2\u0aeb\u0ae9\3\2"+
		"\2\2\u0aec\u0ae0\3\2\2\2\u0aec\u0ae3\3\2\2\2\u0aed\u0afa\3\2\2\2\u0aee"+
		"\u0aef\7l\2\2\u0aef\u0af0\7\u014e\2\2\u0af0\u0af1\7T\2\2\u0af1\u0af2\7"+
		"\u00a8\2\2\u0af2\u0af7\5\u00ba^\2\u0af3\u0af4\7\u03e2\2\2\u0af4\u0af6"+
		"\5\u00ba^\2\u0af5\u0af3\3\2\2\2\u0af6\u0af9\3\2\2\2\u0af7\u0af5\3\2\2"+
		"\2\u0af7\u0af8\3\2\2\2\u0af8\u0afb\3\2\2\2\u0af9\u0af7\3\2\2\2\u0afa\u0aee"+
		"\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u00ad\3\2\2\2\u0afc\u0afd\7^\2\2\u0afd"+
		"\u0aff\7\u0141\2\2\u0afe\u0b00\t#\2\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00"+
		"\3\2\2\2\u0b00\u0b02\3\2\2\2\u0b01\u0b03\7\u0190\2\2\u0b02\u0b01\3\2\2"+
		"\2\u0b02\u0b03\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\7K\2\2\u0b05\u0b07"+
		"\7\u03ef\2\2\u0b06\u0b08\t\b\2\2\u0b07\u0b06\3\2\2\2\u0b07\u0b08\3\2\2"+
		"\2\u0b08\u0b09\3\2\2\2\u0b09\u0b0a\7P\2\2\u0b0a\u0b0b\7\u009c\2\2\u0b0b"+
		"\u0b11\5\u01f4\u00fb\2\u0b0c\u0b0d\7u\2\2\u0b0d\u0b0e\7\u03e0\2\2\u0b0e"+
		"\u0b0f\5\u022c\u0117\2\u0b0f\u0b10\7\u03e1\2\2\u0b10\u0b12\3\2\2\2\u0b11"+
		"\u0b0c\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b16\3\2\2\2\u0b13\u0b14\7\30"+
		"\2\2\u0b14\u0b15\7\u008c\2\2\u0b15\u0b17\5\u01fe\u0100\2\u0b16\u0b13\3"+
		"\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b1e\3\2\2\2\u0b18\u0b1a\t$\2\2\u0b19"+
		"\u0b1b\5\u00f4{\2\u0b1a\u0b19\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1a"+
		"\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1f\3\2\2\2\u0b1e\u0b18\3\2\2\2\u0b1e"+
		"\u0b1f\3\2\2\2\u0b1f\u0b26\3\2\2\2\u0b20\u0b22\7]\2\2\u0b21\u0b23\5\u00f6"+
		"|\2\u0b22\u0b21\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b22\3\2\2\2\u0b24"+
		"\u0b25\3\2\2\2\u0b25\u0b27\3\2\2\2\u0b26\u0b20\3\2\2\2\u0b26\u0b27\3\2"+
		"\2\2\u0b27\u0b2c\3\2\2\2\u0b28\u0b29\7H\2\2\u0b29\u0b2a\5\u0212\u010a"+
		"\2\u0b2a\u0b2b\t%\2\2\u0b2b\u0b2d\3\2\2\2\u0b2c\u0b28\3\2\2\2\u0b2c\u0b2d"+
		"\3\2\2\2\u0b2d\u0b39\3\2\2\2\u0b2e\u0b2f\7\u03e0\2\2\u0b2f\u0b34\5\u00bc"+
		"_\2\u0b30\u0b31\7\u03e2\2\2\u0b31\u0b33\5\u00bc_\2\u0b32\u0b30\3\2\2\2"+
		"\u0b33\u0b36\3\2\2\2\u0b34\u0b32\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35\u0b37"+
		"\3\2\2\2\u0b36\u0b34\3\2\2\2\u0b37\u0b38\7\u03e1\2\2\u0b38\u0b3a\3\2\2"+
		"\2\u0b39\u0b2e\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b44\3\2\2\2\u0b3b\u0b3c"+
		"\7\u008c\2\2\u0b3c\u0b41\5\u00ba^\2\u0b3d\u0b3e\7\u03e2\2\2\u0b3e\u0b40"+
		"\5\u00ba^\2\u0b3f\u0b3d\3\2\2\2\u0b40\u0b43\3\2\2\2\u0b41\u0b3f\3\2\2"+
		"\2\u0b41\u0b42\3\2\2\2\u0b42\u0b45\3\2\2\2\u0b43\u0b41\3\2\2\2\u0b44\u0b3b"+
		"\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u00af\3\2\2\2\u0b46\u0b47\7^\2\2\u0b47"+
		"\u0b49\7\u0248\2\2\u0b48\u0b4a\t#\2\2\u0b49\u0b48\3\2\2\2\u0b49\u0b4a"+
		"\3\2\2\2\u0b4a\u0b4c\3\2\2\2\u0b4b\u0b4d\7\u0190\2\2\u0b4c\u0b4b\3\2\2"+
		"\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b4f\7K\2\2\u0b4f\u0b51"+
		"\7\u03ef\2\2\u0b50\u0b52\t\b\2\2\u0b51\u0b50\3\2\2\2\u0b51\u0b52\3\2\2"+
		"\2\u0b52\u0b53\3\2\2\2\u0b53\u0b54\7P\2\2\u0b54\u0b55\7\u009c\2\2\u0b55"+
		"\u0b59\5\u01f4\u00fb\2\u0b56\u0b57\7\30\2\2\u0b57\u0b58\7\u008c\2\2\u0b58"+
		"\u0b5a\5\u01fe\u0100\2\u0b59\u0b56\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a\u0b61"+
		"\3\2\2\2\u0b5b\u0b5c\7\u01fd\2\2\u0b5c\u0b5d\7\u0178\2\2\u0b5d\u0b5e\7"+
		"\22\2\2\u0b5e\u0b5f\7\u03d9\2\2\u0b5f\u0b60\7\u03ef\2\2\u0b60\u0b62\7"+
		"\u03d8\2\2\u0b61\u0b5b\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0b67\3\2\2\2"+
		"\u0b63\u0b64\7H\2\2\u0b64\u0b65\5\u0212\u010a\2\u0b65\u0b66\t%\2\2\u0b66"+
		"\u0b68\3\2\2\2\u0b67\u0b63\3\2\2\2\u0b67\u0b68\3\2\2\2\u0b68\u0b74\3\2"+
		"\2\2\u0b69\u0b6a\7\u03e0\2\2\u0b6a\u0b6f\5\u00bc_\2\u0b6b\u0b6c\7\u03e2"+
		"\2\2\u0b6c\u0b6e\5\u00bc_\2\u0b6d\u0b6b\3\2\2\2\u0b6e\u0b71\3\2\2\2\u0b6f"+
		"\u0b6d\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b72\3\2\2\2\u0b71\u0b6f\3\2"+
		"\2\2\u0b72\u0b73\7\u03e1\2\2\u0b73\u0b75\3\2\2\2\u0b74\u0b69\3\2\2\2\u0b74"+
		"\u0b75\3\2\2\2\u0b75\u0b7f\3\2\2\2\u0b76\u0b77\7\u008c\2\2\u0b77\u0b7c"+
		"\5\u00ba^\2\u0b78\u0b79\7\u03e2\2\2\u0b79\u0b7b\5\u00ba^\2\u0b7a\u0b78"+
		"\3\2\2\2\u0b7b\u0b7e\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d"+
		"\u0b80\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7f\u0b76\3\2\2\2\u0b7f\u0b80\3\2"+
		"\2\2\u0b80\u00b1\3\2\2\2\u0b81\u0b83\7\u0081\2\2\u0b82\u0b84\t&\2\2\u0b83"+
		"\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86\3\2\2\2\u0b85\u0b87\7P"+
		"\2\2\u0b86\u0b85\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88"+
		"\u0b8e\5\u01f4\u00fb\2\u0b89\u0b8a\7u\2\2\u0b8a\u0b8b\7\u03e0\2\2\u0b8b"+
		"\u0b8c\5\u022c\u0117\2\u0b8c\u0b8d\7\u03e1\2\2\u0b8d\u0b8f\3\2\2\2\u0b8e"+
		"\u0b89\3\2\2\2\u0b8e\u0b8f\3\2\2\2\u0b8f\u0ba0\3\2\2\2\u0b90\u0b91\7\u03e0"+
		"\2\2\u0b91\u0b92\5\u022c\u0117\2\u0b92\u0b93\7\u03e1\2\2\u0b93\u0b95\3"+
		"\2\2\2\u0b94\u0b90\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96"+
		"\u0ba1\5\u00b8]\2\u0b97\u0b98\7\u008c\2\2\u0b98\u0b9d\5\u00ba^\2\u0b99"+
		"\u0b9a\7\u03e2\2\2\u0b9a\u0b9c\5\u00ba^\2\u0b9b\u0b99\3\2\2\2\u0b9c\u0b9f"+
		"\3\2\2\2\u0b9d\u0b9b\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba1\3\2\2\2\u0b9f"+
		"\u0b9d\3\2\2\2\u0ba0\u0b94\3\2\2\2\u0ba0\u0b97\3\2\2\2\u0ba1\u00b3\3\2"+
		"\2\2\u0ba2\u0ba4\5\u00e4s\2\u0ba3\u0ba5\5\u00be`\2\u0ba4\u0ba3\3\2\2\2"+
		"\u0ba4\u0ba5\3\2\2\2\u0ba5\u0bda\3\2\2\2\u0ba6\u0ba8\5\u00e0q\2\u0ba7"+
		"\u0ba9\5\u00be`\2\u0ba8\u0ba7\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0bda"+
		"\3\2\2\2\u0baa\u0bac\5\u00e6t\2\u0bab\u0bad\5\u00eav\2\u0bac\u0bab\3\2"+
		"\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bac\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf"+
		"\u0bb8\3\2\2\2\u0bb0\u0bb2\7\u00a4\2\2\u0bb1\u0bb3\t\'\2\2\u0bb2\u0bb1"+
		"\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb6\3\2\2\2\u0bb4\u0bb7\5\u00e4s"+
		"\2\u0bb5\u0bb7\5\u00e0q\2\u0bb6\u0bb4\3\2\2\2\u0bb6\u0bb5\3\2\2\2\u0bb7"+
		"\u0bb9\3\2\2\2\u0bb8\u0bb0\3\2\2\2\u0bb8\u0bb9\3\2\2\2\u0bb9\u0bbb\3\2"+
		"\2\2\u0bba\u0bbc\5\u00d0i\2\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc"+
		"\u0bbe\3\2\2\2\u0bbd\u0bbf\5\u00fc\177\2\u0bbe\u0bbd\3\2\2\2\u0bbe\u0bbf"+
		"\3\2\2\2\u0bbf\u0bc1\3\2\2\2\u0bc0\u0bc2\5\u00be`\2\u0bc1\u0bc0\3\2\2"+
		"\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bda\3\2\2\2\u0bc3\u0bc5\5\u00e2r\2\u0bc4"+
		"\u0bc6\5\u00e8u\2\u0bc5\u0bc4\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc5"+
		"\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bce\3\2\2\2\u0bc9\u0bcb\7\u00a4\2"+
		"\2\u0bca\u0bcc\t\'\2\2\u0bcb\u0bca\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc\u0bcd"+
		"\3\2\2\2\u0bcd\u0bcf\5\u00e0q\2\u0bce\u0bc9\3\2\2\2\u0bce\u0bcf\3\2\2"+
		"\2\u0bcf\u0bd1\3\2\2\2\u0bd0\u0bd2\5\u00d0i\2\u0bd1\u0bd0\3\2\2\2\u0bd1"+
		"\u0bd2\3\2\2\2\u0bd2\u0bd4\3\2\2\2\u0bd3\u0bd5\5\u00fc\177\2\u0bd4\u0bd3"+
		"\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bd8\5\u00be`"+
		"\2\u0bd7\u0bd6\3\2\2\2\u0bd7\u0bd8\3\2\2\2\u0bd8\u0bda\3\2\2\2\u0bd9\u0ba2"+
		"\3\2\2\2\u0bd9\u0ba6\3\2\2\2\u0bd9\u0baa\3\2\2\2\u0bd9\u0bc3\3\2\2\2\u0bda"+
		"\u00b5\3\2\2\2\u0bdb\u0bde\5\u00ccg\2\u0bdc\u0bde\5\u00ceh\2\u0bdd\u0bdb"+
		"\3\2\2\2\u0bdd\u0bdc\3\2\2\2\u0bde\u00b7\3\2\2\2\u0bdf\u0bf2\5\u00b4["+
		"\2\u0be0\u0be1\t(\2\2\u0be1\u0be3\7\u03e0\2\2\u0be2\u0be4\5\u0234\u011b"+
		"\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0bee"+
		"\7\u03e1\2\2\u0be6\u0be7\7\u03e2\2\2\u0be7\u0be9\7\u03e0\2\2\u0be8\u0bea"+
		"\5\u0234\u011b\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0beb\3"+
		"\2\2\2\u0beb\u0bed\7\u03e1\2\2\u0bec\u0be6\3\2\2\2\u0bed\u0bf0\3\2\2\2"+
		"\u0bee\u0bec\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u0bf2\3\2\2\2\u0bf0\u0bee"+
		"\3\2\2\2\u0bf1\u0bdf\3\2\2\2\u0bf1\u0be0\3\2\2\2\u0bf2\u00b9\3\2\2\2\u0bf3"+
		"\u0bf4\5\u01f6\u00fc\2\u0bf4\u0bf7\7\u03d7\2\2\u0bf5\u0bf8\5\u025c\u012f"+
		"\2\u0bf6\u0bf8\7(\2\2\u0bf7\u0bf5\3\2\2\2\u0bf7\u0bf6\3\2\2\2\u0bf8\u00bb"+
		"\3\2\2\2\u0bf9\u0bfc\5\u020c\u0107\2\u0bfa\u0bfc\7\u03fa\2\2\u0bfb\u0bf9"+
		"\3\2\2\2\u0bfb\u0bfa\3\2\2\2\u0bfc\u00bd\3\2\2\2\u0bfd\u0bfe\7<\2\2\u0bfe"+
		"\u0c04\7\u00a8\2\2\u0bff\u0c00\7_\2\2\u0c00\u0c01\7I\2\2\u0c01\u0c02\7"+
		"\u0204\2\2\u0c02\u0c04\7\u01b4\2\2\u0c03\u0bfd\3\2\2\2\u0c03\u0bff\3\2"+
		"\2\2\u0c04\u00bf\3\2\2\2\u0c05\u0c07\7*\2\2\u0c06\u0c08\7a\2\2\u0c07\u0c06"+
		"\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c0a\3\2\2\2\u0c09\u0c0b\7\u01e1\2"+
		"\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0d\3\2\2\2\u0c0c\u0c0e"+
		"\7H\2\2\u0c0d\u0c0c\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f"+
		"\u0c10\7?\2\2\u0c10\u0c16\5\u01f4\u00fb\2\u0c11\u0c12\7u\2\2\u0c12\u0c13"+
		"\7\u03e0\2\2\u0c13\u0c14\5\u022c\u0117\2\u0c14\u0c15\7\u03e1\2\2\u0c15"+
		"\u0c17\3\2\2\2\u0c16\u0c11\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c1a\3\2"+
		"\2\2\u0c18\u0c19\7\u00ae\2\2\u0c19\u0c1b\5\u025c\u012f\2\u0c1a\u0c18\3"+
		"\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1d\3\2\2\2\u0c1c\u0c1e\5\u00d0i\2"+
		"\u0c1d\u0c1c\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c21\3\2\2\2\u0c1f\u0c20"+
		"\7[\2\2\u0c20\u0c22\5\u00fe\u0080\2\u0c21\u0c1f\3\2\2\2\u0c21\u0c22\3"+
		"\2\2\2\u0c22\u00c1\3\2\2\2\u0c23\u0c25\7*\2\2\u0c24\u0c26\7a\2\2\u0c25"+
		"\u0c24\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c28\3\2\2\2\u0c27\u0c29\7\u01e1"+
		"\2\2\u0c28\u0c27\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2b\3\2\2\2\u0c2a"+
		"\u0c2c\7H\2\2\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0c54\3\2"+
		"\2\2\u0c2d\u0c30\5\u01f4\u00fb\2\u0c2e\u0c2f\7\u03df\2\2\u0c2f\u0c31\7"+
		"\u03ce\2\2\u0c30\u0c2e\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0c3a\3\2\2\2"+
		"\u0c32\u0c33\7\u03e2\2\2\u0c33\u0c36\5\u01f4\u00fb\2\u0c34\u0c35\7\u03df"+
		"\2\2\u0c35\u0c37\7\u03ce\2\2\u0c36\u0c34\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37"+
		"\u0c39\3\2\2\2\u0c38\u0c32\3\2\2\2\u0c39\u0c3c\3\2\2\2\u0c3a\u0c38\3\2"+
		"\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3d\3\2\2\2\u0c3c\u0c3a\3\2\2\2\u0c3d"+
		"\u0c3e\7?\2\2\u0c3e\u0c3f\5\u00d4k\2\u0c3f\u0c55\3\2\2\2\u0c40\u0c41\7"+
		"?\2\2\u0c41\u0c44\5\u01f4\u00fb\2\u0c42\u0c43\7\u03df\2\2\u0c43\u0c45"+
		"\7\u03ce\2\2\u0c44\u0c42\3\2\2\2\u0c44\u0c45\3\2\2\2\u0c45\u0c4e\3\2\2"+
		"\2\u0c46\u0c47\7\u03e2\2\2\u0c47\u0c4a\5\u01f4\u00fb\2\u0c48\u0c49\7\u03df"+
		"\2\2\u0c49\u0c4b\7\u03ce\2\2\u0c4a\u0c48\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b"+
		"\u0c4d\3\2\2\2\u0c4c\u0c46\3\2\2\2\u0c4d\u0c50\3\2\2\2\u0c4e\u0c4c\3\2"+
		"\2\2\u0c4e\u0c4f\3\2\2\2\u0c4f\u0c51\3\2\2\2\u0c50\u0c4e\3\2\2\2\u0c51"+
		"\u0c52\7\u00ab\2\2\u0c52\u0c53\5\u00d4k\2\u0c53\u0c55\3\2\2\2\u0c54\u0c2d"+
		"\3\2\2\2\u0c54\u0c40\3\2\2\2\u0c55\u0c58\3\2\2\2\u0c56\u0c57\7\u00ae\2"+
		"\2\u0c57\u0c59\5\u025c\u012f\2\u0c58\u0c56\3\2\2\2\u0c58\u0c59\3\2\2\2"+
		"\u0c59\u00c3\3\2\2\2\u0c5a\u0c5b\7\u0173\2\2\u0c5b\u0c5c\5\u01f4\u00fb"+
		"\2\u0c5c\u0c61\7\u01c8\2\2\u0c5d\u0c5f\7\r\2\2\u0c5e\u0c5d\3\2\2\2\u0c5e"+
		"\u0c5f\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c62\5\u020c\u0107\2\u0c61\u0c5e"+
		"\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u00c5\3\2\2\2\u0c63\u0c64\7\u0173\2"+
		"\2\u0c64\u0c65\5\u01f4\u00fb\2\u0c65\u0c66\7z\2\2\u0c66\u0c6d\5\u020c"+
		"\u0107\2\u0c67\u0c68\5\u0264\u0133\2\u0c68\u0c69\7\u03e0\2\2\u0c69\u0c6a"+
		"\5\u0236\u011c\2\u0c6a\u0c6b\7\u03e1\2\2\u0c6b\u0c6e\3\2\2\2\u0c6c\u0c6e"+
		"\t)\2\2\u0c6d\u0c67\3\2\2\2\u0c6d\u0c6c\3\2\2\2\u0c6e\u0c71\3\2\2\2\u0c6f"+
		"\u0c70\7\u00ae\2\2\u0c70\u0c72\5\u025c\u012f\2\u0c71\u0c6f\3\2\2\2\u0c71"+
		"\u0c72\3\2\2\2\u0c72\u0c75\3\2\2\2\u0c73\u0c74\7[\2\2\u0c74\u0c76\5\u00fe"+
		"\u0080\2\u0c75\u0c73\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76\u00c7\3\2\2\2\u0c77"+
		"\u0c78\7\u0173\2\2\u0c78\u0c79\5\u01f4\u00fb\2\u0c79\u0c7a\7z\2\2\u0c7a"+
		"\u0c7d\t*\2\2\u0c7b\u0c7c\7\u00ae\2\2\u0c7c\u0c7e\5\u025c\u012f\2\u0c7d"+
		"\u0c7b\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c81\3\2\2\2\u0c7f\u0c80\7["+
		"\2\2\u0c80\u0c82\5\u00fe\u0080\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2"+
		"\2\u0c82\u00c9\3\2\2\2\u0c83\u0c84\7\u0173\2\2\u0c84\u0c85\5\u01f4\u00fb"+
		"\2\u0c85\u0c86\7\u0129\2\2\u0c86\u00cb\3\2\2\2\u0c87\u0c89\7\u00a8\2\2"+
		"\u0c88\u0c8a\7a\2\2\u0c89\u0c88\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u0c8c"+
		"\3\2\2\2\u0c8b\u0c8d\7H\2\2\u0c8c\u0c8b\3\2\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d"+
		"\u0c8e\3\2\2\2\u0c8e\u0c93\5\u01f4\u00fb\2\u0c8f\u0c91\7\r\2\2\u0c90\u0c8f"+
		"\3\2\2\2\u0c90\u0c91\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c94\5\u020c\u0107"+
		"\2\u0c93\u0c90\3\2\2\2\u0c93\u0c94\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c96"+
		"\7\u008c\2\2\u0c96\u0c9b\5\u00ba^\2\u0c97\u0c98\7\u03e2\2\2\u0c98\u0c9a"+
		"\5\u00ba^\2\u0c99\u0c97\3\2\2\2\u0c9a\u0c9d\3\2\2\2\u0c9b\u0c99\3\2\2"+
		"\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0ca0\3\2\2\2\u0c9d\u0c9b\3\2\2\2\u0c9e\u0c9f"+
		"\7\u00ae\2\2\u0c9f\u0ca1\5\u025c\u012f\2\u0ca0\u0c9e\3\2\2\2\u0ca0\u0ca1"+
		"\3\2\2\2\u0ca1\u0ca3\3\2\2\2\u0ca2\u0ca4\5\u00d0i\2\u0ca3\u0ca2\3\2\2"+
		"\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0ca6\3\2\2\2\u0ca5\u0ca7\5\u00fc\177\2\u0ca6"+
		"\u0ca5\3\2\2\2\u0ca6\u0ca7\3\2\2\2\u0ca7\u00cd\3\2\2\2\u0ca8\u0caa\7\u00a8"+
		"\2\2\u0ca9\u0cab\7a\2\2\u0caa\u0ca9\3\2\2\2\u0caa\u0cab\3\2\2\2\u0cab"+
		"\u0cad\3\2\2\2\u0cac\u0cae\7H\2\2\u0cad\u0cac\3\2\2\2\u0cad\u0cae\3\2"+
		"\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cb0\5\u00d4k\2\u0cb0\u0cb1\7\u008c\2"+
		"\2\u0cb1\u0cb6\5\u00ba^\2\u0cb2\u0cb3\7\u03e2\2\2\u0cb3\u0cb5\5\u00ba"+
		"^\2\u0cb4\u0cb2\3\2\2\2\u0cb5\u0cb8\3\2\2\2\u0cb6\u0cb4\3\2\2\2\u0cb6"+
		"\u0cb7\3\2\2\2\u0cb7\u0cbb\3\2\2\2\u0cb8\u0cb6\3\2\2\2\u0cb9\u0cba\7\u00ae"+
		"\2\2\u0cba\u0cbc\5\u025c\u012f\2\u0cbb\u0cb9\3\2\2\2\u0cbb\u0cbc\3\2\2"+
		"\2\u0cbc\u00cf\3\2\2\2\u0cbd\u0cbe\7q\2\2\u0cbe\u0cbf\7\22\2\2\u0cbf\u0cc4"+
		"\5\u00d2j\2\u0cc0\u0cc1\7\u03e2\2\2\u0cc1\u0cc3\5\u00d2j\2\u0cc2\u0cc0"+
		"\3\2\2\2\u0cc3\u0cc6\3\2\2\2\u0cc4\u0cc2\3\2\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5"+
		"\u00d1\3\2\2\2\u0cc6\u0cc4\3\2\2\2\u0cc7\u0cc9\5\u025c\u012f\2\u0cc8\u0cca"+
		"\t+\2\2\u0cc9\u0cc8\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u00d3\3\2\2\2\u0ccb"+
		"\u0cd0\5\u00d6l\2\u0ccc\u0ccd\7\u03e2\2\2\u0ccd\u0ccf\5\u00d6l\2\u0cce"+
		"\u0ccc\3\2\2\2\u0ccf\u0cd2\3\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd0\u0cd1\3\2"+
		"\2\2\u0cd1\u00d5\3\2\2\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cd7\5\u00d8m\2\u0cd4"+
		"\u0cd6\5\u00dep\2\u0cd5\u0cd4\3\2\2\2\u0cd6\u0cd9\3\2\2\2\u0cd7\u0cd5"+
		"\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8\u0ce5\3\2\2\2\u0cd9\u0cd7\3\2\2\2\u0cda"+
		"\u0cdb\7\u03e0\2\2\u0cdb\u0cdf\5\u00d8m\2\u0cdc\u0cde\5\u00dep\2\u0cdd"+
		"\u0cdc\3\2\2\2\u0cde\u0ce1\3\2\2\2\u0cdf\u0cdd\3\2\2\2\u0cdf\u0ce0\3\2"+
		"\2\2\u0ce0\u0ce2\3\2\2\2\u0ce1\u0cdf\3\2\2\2\u0ce2\u0ce3\7\u03e1\2\2\u0ce3"+
		"\u0ce5\3\2\2\2\u0ce4\u0cd3\3\2\2\2\u0ce4\u0cda\3\2\2\2\u0ce5\u00d7\3\2"+
		"\2\2\u0ce6\u0cec\5\u01f4\u00fb\2\u0ce7\u0ce8\7u\2\2\u0ce8\u0ce9\7\u03e0"+
		"\2\2\u0ce9\u0cea\5\u022c\u0117\2\u0cea\u0ceb\7\u03e1\2\2\u0ceb\u0ced\3"+
		"\2\2\2\u0cec\u0ce7\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced\u0cf2\3\2\2\2\u0cee"+
		"\u0cf0\7\r\2\2\u0cef\u0cee\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cf1\3\2"+
		"\2\2\u0cf1\u0cf3\5\u020c\u0107\2\u0cf2\u0cef\3\2\2\2\u0cf2\u0cf3\3\2\2"+
		"\2\u0cf3\u0cfc\3\2\2\2\u0cf4\u0cf9\5\u00dan\2\u0cf5\u0cf6\7\u03e2\2\2"+
		"\u0cf6\u0cf8\5\u00dan\2\u0cf7\u0cf5\3\2\2\2\u0cf8\u0cfb\3\2\2\2\u0cf9"+
		"\u0cf7\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cfd\3\2\2\2\u0cfb\u0cf9\3\2"+
		"\2\2\u0cfc\u0cf4\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd\u0d0f\3\2\2\2\u0cfe"+
		"\u0d04\5\u00b4[\2\u0cff\u0d00\7\u03e0\2\2\u0d00\u0d01\5\u00b4[\2\u0d01"+
		"\u0d02\7\u03e1\2\2\u0d02\u0d04\3\2\2\2\u0d03\u0cfe\3\2\2\2\u0d03\u0cff"+
		"\3\2\2\2\u0d04\u0d06\3\2\2\2\u0d05\u0d07\7\r\2\2\u0d06\u0d05\3\2\2\2\u0d06"+
		"\u0d07\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d09\5\u020c\u0107\2\u0d09\u0d0f"+
		"\3\2\2\2\u0d0a\u0d0b\7\u03e0\2\2\u0d0b\u0d0c\5\u00d4k\2\u0d0c\u0d0d\7"+
		"\u03e1\2\2\u0d0d\u0d0f\3\2\2\2\u0d0e\u0ce6\3\2\2\2\u0d0e\u0d03\3\2\2\2"+
		"\u0d0e\u0d0a\3\2\2\2\u0d0f\u00d9\3\2\2\2\u0d10\u0d11\t,\2\2\u0d11\u0d14"+
		"\t\24\2\2\u0d12\u0d13\7<\2\2\u0d13\u0d15\5\u00dco\2\u0d14\u0d12\3\2\2"+
		"\2\u0d14\u0d15\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17\7\u03e0\2\2\u0d17"+
		"\u0d18\5\u022c\u0117\2\u0d18\u0d19\7\u03e1\2\2\u0d19\u00db\3\2\2\2\u0d1a"+
		"\u0d20\7S\2\2\u0d1b\u0d1c\7q\2\2\u0d1c\u0d20\7\22\2\2\u0d1d\u0d1e\7D\2"+
		"\2\u0d1e\u0d20\7\22\2\2\u0d1f\u0d1a\3\2\2\2\u0d1f\u0d1b\3\2\2\2\u0d1f"+
		"\u0d1d\3\2\2\2\u0d20\u00dd\3\2\2\2\u0d21\u0d23\t-\2\2\u0d22\u0d21\3\2"+
		"\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d25\7S\2\2\u0d25"+
		"\u0d2d\5\u00d8m\2\u0d26\u0d27\7l\2\2\u0d27\u0d2e\5\u025c\u012f\2\u0d28"+
		"\u0d29\7\u00ab\2\2\u0d29\u0d2a\7\u03e0\2\2\u0d2a\u0d2b\5\u022c\u0117\2"+
		"\u0d2b\u0d2c\7\u03e1\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d26\3\2\2\2\u0d2d"+
		"\u0d28\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d4e\3\2\2\2\u0d2f\u0d30\7\u009b"+
		"\2\2\u0d30\u0d33\5\u00d8m\2\u0d31\u0d32\7l\2\2\u0d32\u0d34\5\u025c\u012f"+
		"\2\u0d33\u0d31\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d4e\3\2\2\2\u0d35\u0d37"+
		"\t.\2\2\u0d36\u0d38\7s\2\2\u0d37\u0d36\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38"+
		"\u0d39\3\2\2\2\u0d39\u0d3a\7S\2\2\u0d3a\u0d42\5\u00d8m\2\u0d3b\u0d3c\7"+
		"l\2\2\u0d3c\u0d43\5\u025c\u012f\2\u0d3d\u0d3e\7\u00ab\2\2\u0d3e\u0d3f"+
		"\7\u03e0\2\2\u0d3f\u0d40\5\u022c\u0117\2\u0d40\u0d41\7\u03e1\2\2\u0d41"+
		"\u0d43\3\2\2\2\u0d42\u0d3b\3\2\2\2\u0d42\u0d3d\3\2\2\2\u0d43\u0d4e\3\2"+
		"\2\2\u0d44\u0d49\7g\2\2\u0d45\u0d47\t.\2\2\u0d46\u0d48\7s\2\2\u0d47\u0d46"+
		"\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d4a\3\2\2\2\u0d49\u0d45\3\2\2\2\u0d49"+
		"\u0d4a\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d4c\7S\2\2\u0d4c\u0d4e\5\u00d8"+
		"m\2\u0d4d\u0d22\3\2\2\2\u0d4d\u0d2f\3\2\2\2\u0d4d\u0d35\3\2\2\2\u0d4d"+
		"\u0d44\3\2\2\2\u0d4e\u00df\3\2\2\2\u0d4f\u0d50\7\u03e0\2\2\u0d50\u0d51"+
		"\5\u00e4s\2\u0d51\u0d52\7\u03e1\2\2\u0d52\u0d58\3\2\2\2\u0d53\u0d54\7"+
		"\u03e0\2\2\u0d54\u0d55\5\u00e0q\2\u0d55\u0d56\7\u03e1\2\2\u0d56\u0d58"+
		"\3\2\2\2\u0d57\u0d4f\3\2\2\2\u0d57\u0d53\3\2\2\2\u0d58\u00e1\3\2\2\2\u0d59"+
		"\u0d5a\7\u03e0\2\2\u0d5a\u0d5b\5\u00e6t\2\u0d5b\u0d5c\7\u03e1\2\2\u0d5c"+
		"\u0d62\3\2\2\2\u0d5d\u0d5e\7\u03e0\2\2\u0d5e\u0d5f\5\u00e2r\2\u0d5f\u0d60"+
		"\7\u03e1\2\2\u0d60\u0d62\3\2\2\2\u0d61\u0d59\3\2\2\2\u0d61\u0d5d\3\2\2"+
		"\2\u0d62\u00e3\3\2\2\2\u0d63\u0d67\7\u008b\2\2\u0d64\u0d66\5\u00ecw\2"+
		"\u0d65\u0d64\3\2\2\2\u0d66\u0d69\3\2\2\2\u0d67\u0d65\3\2\2\2\u0d67\u0d68"+
		"\3\2\2\2\u0d68\u0d6a\3\2\2\2\u0d69\u0d67\3\2\2\2\u0d6a\u0d6c\5\u00eex"+
		"\2\u0d6b\u0d6d\5\u00f2z\2\u0d6c\u0d6b\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d"+
		"\u0d6f\3\2\2\2\u0d6e\u0d70\5\u00f8}\2\u0d6f\u0d6e\3\2\2\2\u0d6f\u0d70"+
		"\3\2\2\2\u0d70\u0d72\3\2\2\2\u0d71\u0d73\5\u00d0i\2\u0d72\u0d71\3\2\2"+
		"\2\u0d72\u0d73\3\2\2\2\u0d73\u0d75\3\2\2\2\u0d74\u0d76\5\u00fc\177\2\u0d75"+
		"\u0d74\3\2\2\2\u0d75\u0d76\3\2\2\2\u0d76\u0d8c\3\2\2\2\u0d77\u0d7b\7\u008b"+
		"\2\2\u0d78\u0d7a\5\u00ecw\2\u0d79\u0d78\3\2\2\2\u0d7a\u0d7d\3\2\2\2\u0d7b"+
		"\u0d79\3\2\2\2\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7e\3\2\2\2\u0d7d\u0d7b\3\2"+
		"\2\2\u0d7e\u0d80\5\u00eex\2\u0d7f\u0d81\5\u00f8}\2\u0d80\u0d7f\3\2\2\2"+
		"\u0d80\u0d81\3\2\2\2\u0d81\u0d83\3\2\2\2\u0d82\u0d84\5\u00d0i\2\u0d83"+
		"\u0d82\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0d86\3\2\2\2\u0d85\u0d87\5\u00fc"+
		"\177\2\u0d86\u0d85\3\2\2\2\u0d86\u0d87\3\2\2\2\u0d87\u0d89\3\2\2\2\u0d88"+
		"\u0d8a\5\u00f2z\2\u0d89\u0d88\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8c"+
		"\3\2\2\2\u0d8b\u0d63\3\2\2\2\u0d8b\u0d77\3\2\2\2\u0d8c\u00e5\3\2\2\2\u0d8d"+
		"\u0d91\7\u008b\2\2\u0d8e\u0d90\5\u00ecw\2\u0d8f\u0d8e\3\2\2\2\u0d90\u0d93"+
		"\3\2\2\2\u0d91\u0d8f\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0d94\3\2\2\2\u0d93"+
		"\u0d91\3\2\2\2\u0d94\u0d96\5\u00eex\2\u0d95\u0d97\5\u00f8}\2\u0d96\u0d95"+
		"\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d99\3\2\2\2\u0d98\u0d9a\5\u00d0i"+
		"\2\u0d99\u0d98\3\2\2\2\u0d99\u0d9a\3\2\2\2\u0d9a\u0d9c\3\2\2\2\u0d9b\u0d9d"+
		"\5\u00fc\177\2\u0d9c\u0d9b\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u00e7\3\2"+
		"\2\2\u0d9e\u0da0\7\u00a4\2\2\u0d9f\u0da1\t\'\2\2\u0da0\u0d9f\3\2\2\2\u0da0"+
		"\u0da1\3\2\2\2\u0da1\u0da2\3\2\2\2\u0da2\u0da3\5\u00e2r\2\u0da3\u00e9"+
		"\3\2\2\2\u0da4\u0da6\7\u00a4\2\2\u0da5\u0da7\t\'\2\2\u0da6\u0da5\3\2\2"+
		"\2\u0da6\u0da7\3\2\2\2\u0da7\u0daa\3\2\2\2\u0da8\u0dab\5\u00e6t\2\u0da9"+
		"\u0dab\5\u00e2r\2\u0daa\u0da8\3\2\2\2\u0daa\u0da9\3\2\2\2\u0dab\u00eb"+
		"\3\2\2\2\u0dac\u0db5\t/\2\2\u0dad\u0db5\7F\2\2\u0dae\u0db5\7\u009b\2\2"+
		"\u0daf\u0db5\7\u0097\2\2\u0db0\u0db5\7\u0095\2\2\u0db1\u0db5\7\u0213\2"+
		"\2\u0db2\u0db5\t\60\2\2\u0db3\u0db5\7\u0096\2\2\u0db4\u0dac\3\2\2\2\u0db4"+
		"\u0dad\3\2\2\2\u0db4\u0dae\3\2\2\2\u0db4\u0daf\3\2\2\2\u0db4\u0db0\3\2"+
		"\2\2\u0db4\u0db1\3\2\2\2\u0db4\u0db2\3\2\2\2\u0db4\u0db3\3\2\2\2\u0db5"+
		"\u00ed\3\2\2\2\u0db6\u0db9\7\u03ce\2\2\u0db7\u0db9\5\u00f0y\2\u0db8\u0db6"+
		"\3\2\2\2\u0db8\u0db7\3\2\2\2\u0db9\u0dbe\3\2\2\2\u0dba\u0dbb\7\u03e2\2"+
		"\2\u0dbb\u0dbd\5\u00f0y\2\u0dbc\u0dba\3\2\2\2\u0dbd\u0dc0\3\2\2\2\u0dbe"+
		"\u0dbc\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u00ef\3\2\2\2\u0dc0\u0dbe\3\2"+
		"\2\2\u0dc1\u0dc2\5\u01f2\u00fa\2\u0dc2\u0dc3\7\u03df\2\2\u0dc3\u0dc4\7"+
		"\u03ce\2\2\u0dc4\u0ddf\3\2\2\2\u0dc5\u0dca\5\u01f6\u00fc\2\u0dc6\u0dc8"+
		"\7\r\2\2\u0dc7\u0dc6\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9"+
		"\u0dcb\5\u020c\u0107\2\u0dca\u0dc7\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0ddf"+
		"\3\2\2\2\u0dcc\u0dd1\5\u0246\u0124\2\u0dcd\u0dcf\7\r\2\2\u0dce\u0dcd\3"+
		"\2\2\2\u0dce\u0dcf\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd2\5\u020c\u0107"+
		"\2\u0dd1\u0dce\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u0ddf\3\2\2\2\u0dd3\u0dd4"+
		"\7\u03fa\2\2\u0dd4\u0dd6\7\u03c5\2\2\u0dd5\u0dd3\3\2\2\2\u0dd5\u0dd6\3"+
		"\2\2\2\u0dd6\u0dd7\3\2\2\2\u0dd7\u0ddc\5\u025c\u012f\2\u0dd8\u0dda\7\r"+
		"\2\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb"+
		"\u0ddd\5\u020c\u0107\2\u0ddc\u0dd9\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0ddf"+
		"\3\2\2\2\u0dde\u0dc1\3\2\2\2\u0dde\u0dc5\3\2\2\2\u0dde\u0dcc\3\2\2\2\u0dde"+
		"\u0dd5\3\2\2\2\u0ddf\u00f1\3\2\2\2\u0de0\u0de1\7P\2\2\u0de1\u0de6\5\u00bc"+
		"_\2\u0de2\u0de3\7\u03e2\2\2\u0de3\u0de5\5\u00bc_\2\u0de4\u0de2\3\2\2\2"+
		"\u0de5\u0de8\3\2\2\2\u0de6\u0de4\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u0e05"+
		"\3\2\2\2\u0de8\u0de6\3\2\2\2\u0de9\u0dea\7P\2\2\u0dea\u0deb\7\u014d\2"+
		"\2\u0deb\u0e05\7\u03ef\2\2\u0dec\u0ded\7P\2\2\u0ded\u0dee\7t\2\2\u0dee"+
		"\u0df2\7\u03ef\2\2\u0def\u0df0\7\30\2\2\u0df0\u0df1\7\u008c\2\2\u0df1"+
		"\u0df3\5\u01fe\u0100\2\u0df2\u0def\3\2\2\2\u0df2\u0df3\3\2\2\2\u0df3\u0dfa"+
		"\3\2\2\2\u0df4\u0df6\t$\2\2\u0df5\u0df7\5\u00f4{\2\u0df6\u0df5\3\2\2\2"+
		"\u0df7\u0df8\3\2\2\2\u0df8\u0df6\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u0dfb"+
		"\3\2\2\2\u0dfa\u0df4\3\2\2\2\u0dfa\u0dfb\3\2\2\2\u0dfb\u0e02\3\2\2\2\u0dfc"+
		"\u0dfe\7]\2\2\u0dfd\u0dff\5\u00f6|\2\u0dfe\u0dfd\3\2\2\2\u0dff\u0e00\3"+
		"\2\2\2\u0e00\u0dfe\3\2\2\2\u0e00\u0e01\3\2\2\2\u0e01\u0e03\3\2\2\2\u0e02"+
		"\u0dfc\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e05\3\2\2\2\u0e04\u0de0\3\2"+
		"\2\2\u0e04\u0de9\3\2\2\2\u0e04\u0dec\3\2\2\2\u0e05\u00f3\3\2\2\2\u0e06"+
		"\u0e07\7\u009d\2\2\u0e07\u0e08\7\22\2\2\u0e08\u0e13\7\u03ef\2\2\u0e09"+
		"\u0e0b\7o\2\2\u0e0a\u0e09\3\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b\u0e0c\3\2"+
		"\2\2\u0e0c\u0e0d\7\65\2\2\u0e0d\u0e0e\7\22\2\2\u0e0e\u0e13\7\u03ef\2\2"+
		"\u0e0f\u0e10\7\66\2\2\u0e10\u0e11\7\22\2\2\u0e11\u0e13\7\u03ef\2\2\u0e12"+
		"\u0e06\3\2\2\2\u0e12\u0e0a\3\2\2\2\u0e12\u0e0f\3\2\2\2\u0e13\u00f5\3\2"+
		"\2\2\u0e14\u0e15\7\u009a\2\2\u0e15\u0e16\7\22\2\2\u0e16\u0e1b\7\u03ef"+
		"\2\2\u0e17\u0e18\7\u009d\2\2\u0e18\u0e19\7\22\2\2\u0e19\u0e1b\7\u03ef"+
		"\2\2\u0e1a\u0e14\3\2\2\2\u0e1a\u0e17\3\2\2\2\u0e1b\u00f7\3\2\2\2\u0e1c"+
		"\u0e1d\7?\2\2\u0e1d\u0e20\5\u00d4k\2\u0e1e\u0e1f\7\u00ae\2\2\u0e1f\u0e21"+
		"\5\u025c\u012f\2\u0e20\u0e1e\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e30\3"+
		"\2\2\2\u0e22\u0e23\7D\2\2\u0e23\u0e24\7\22\2\2\u0e24\u0e29\5\u00fa~\2"+
		"\u0e25\u0e26\7\u03e2\2\2\u0e26\u0e28\5\u00fa~\2\u0e27\u0e25\3\2\2\2\u0e28"+
		"\u0e2b\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2e\3\2"+
		"\2\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e2d\7\u00b0\2\2\u0e2d\u0e2f\7\u01fa\2"+
		"\2\u0e2e\u0e2c\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e31\3\2\2\2\u0e30\u0e22"+
		"\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e34\3\2\2\2\u0e32\u0e33\7E\2\2\u0e33"+
		"\u0e35\5\u025c\u012f\2\u0e34\u0e32\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35\u00f9"+
		"\3\2\2\2\u0e36\u0e38\5\u025c\u012f\2\u0e37\u0e39\t+\2\2\u0e38\u0e37\3"+
		"\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u00fb\3\2\2\2\u0e3a\u0e45\7[\2\2\u0e3b"+
		"\u0e3c\5\u00fe\u0080\2\u0e3c\u0e3d\7\u03e2\2\2\u0e3d\u0e3f\3\2\2\2\u0e3e"+
		"\u0e3b\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e46\5\u00fe"+
		"\u0080\2\u0e41\u0e42\5\u00fe\u0080\2\u0e42\u0e43\7\u01c2\2\2\u0e43\u0e44"+
		"\5\u00fe\u0080\2\u0e44\u0e46\3\2\2\2\u0e45\u0e3e\3\2\2\2\u0e45\u0e41\3"+
		"\2\2\2\u0e46\u00fd\3\2\2\2\u0e47\u0e4a\5\u0212\u010a\2\u0e48\u0e4a\5\u01fc"+
		"\u00ff\2\u0e49\u0e47\3\2\2\2\u0e49\u0e48\3\2\2\2\u0e4a\u00ff\3\2\2\2\u0e4b"+
		"\u0e4c\7\u0217\2\2\u0e4c\u0e55\7\u022e\2\2\u0e4d\u0e52\5\u0116\u008c\2"+
		"\u0e4e\u0e4f\7\u03e2\2\2\u0e4f\u0e51\5\u0116\u008c\2\u0e50\u0e4e\3\2\2"+
		"\2\u0e51\u0e54\3\2\2\2\u0e52\u0e50\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u0e56"+
		"\3\2\2\2\u0e54\u0e52\3\2\2\2\u0e55\u0e4d\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56"+
		"\u0101\3\2\2\2\u0e57\u0e59\7\u0118\2\2\u0e58\u0e5a\7\u0244\2\2\u0e59\u0e58"+
		"\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0103\3\2\2\2\u0e5b\u0e5d\7\u0130\2"+
		"\2\u0e5c\u0e5e\7\u0244\2\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e"+
		"\u0e64\3\2\2\2\u0e5f\u0e61\7\f\2\2\u0e60\u0e62\7\u01be\2\2\u0e61\u0e60"+
		"\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e65\7\u0121\2"+
		"\2\u0e64\u0e5f\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e6a\3\2\2\2\u0e66\u0e68"+
		"\7\u01be\2\2\u0e67\u0e66\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0e69\3\2\2"+
		"\2\u0e69\u0e6b\7~\2\2\u0e6a\u0e67\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0105"+
		"\3\2\2\2\u0e6c\u0e6e\7\u01f9\2\2\u0e6d\u0e6f\7\u0244\2\2\u0e6e\u0e6d\3"+
		"\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e75\3\2\2\2\u0e70\u0e72\7\f\2\2\u0e71"+
		"\u0e73\7\u01be\2\2\u0e72\u0e71\3\2\2\2\u0e72\u0e73\3\2\2\2\u0e73\u0e74"+
		"\3\2\2\2\u0e74\u0e76\7\u0121\2\2\u0e75\u0e70\3\2\2\2\u0e75\u0e76\3\2\2"+
		"\2\u0e76\u0e7b\3\2\2\2\u0e77\u0e79\7\u01be\2\2\u0e78\u0e77\3\2\2\2\u0e78"+
		"\u0e79\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7c\7~\2\2\u0e7b\u0e78\3\2"+
		"\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0107\3\2\2\2\u0e7d\u0e7e\7\u01ff\2\2\u0e7e"+
		"\u0e7f\5\u020c\u0107\2\u0e7f\u0109\3\2\2\2\u0e80\u0e82\7\u01f9\2\2\u0e81"+
		"\u0e83\7\u0244\2\2\u0e82\u0e81\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e84"+
		"\3\2\2\2\u0e84\u0e86\7\u009f\2\2\u0e85\u0e87\7\u01ff\2\2\u0e86\u0e85\3"+
		"\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e88\3\2\2\2\u0e88\u0e89\5\u020c\u0107"+
		"\2\u0e89\u010b\3\2\2\2\u0e8a\u0e8b\7~\2\2\u0e8b\u0e8c\7\u01ff\2\2\u0e8c"+
		"\u0e8d\5\u020c\u0107\2\u0e8d\u010d\3\2\2\2\u0e8e\u0e8f\7_\2\2\u0e8f\u0e90"+
		"\7\u0256\2\2\u0e90\u0e95\5\u0118\u008d\2\u0e91\u0e92\7\u03e2\2\2\u0e92"+
		"\u0e94\5\u0118\u008d\2\u0e93\u0e91\3\2\2\2\u0e94\u0e97\3\2\2\2\u0e95\u0e93"+
		"\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u010f\3\2\2\2\u0e97\u0e95\3\2\2\2\u0e98"+
		"\u0e99\7\u00a6\2\2\u0e99\u0e9a\7\u0256\2\2\u0e9a\u0111\3\2\2\2\u0e9b\u0e9c"+
		"\7\u008c\2\2\u0e9c\u0e9d\7\u0114\2\2\u0e9d\u0e9e\7\u03d7\2\2\u0e9e\u0e9f"+
		"\t\30\2\2\u0e9f\u0113\3\2\2\2\u0ea0\u0ea2\7\u008c\2\2\u0ea1\u0ea3\t\61"+
		"\2\2\u0ea2\u0ea1\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4"+
		"\u0ea5\7\u022e\2\2\u0ea5\u0eaa\5\u011c\u008f\2\u0ea6\u0ea7\7\u03e2\2\2"+
		"\u0ea7\u0ea9\5\u011c\u008f\2\u0ea8\u0ea6\3\2\2\2\u0ea9\u0eac\3\2\2\2\u0eaa"+
		"\u0ea8\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab\u0115\3\2\2\2\u0eac\u0eaa\3\2"+
		"\2\2\u0ead\u0eae\7\u00b0\2\2\u0eae\u0eaf\7\u0137\2\2\u0eaf\u0eb5\7\u020a"+
		"\2\2\u0eb0\u0eb1\7z\2\2\u0eb1\u0eb5\7\u00b1\2\2\u0eb2\u0eb3\7z\2\2\u0eb3"+
		"\u0eb5\7\u01c7\2\2\u0eb4\u0ead\3\2\2\2\u0eb4\u0eb0\3\2\2\2\u0eb4\u0eb2"+
		"\3\2\2\2\u0eb5\u0117\3\2\2\2\u0eb6\u0ebb\5\u01f4\u00fb\2\u0eb7\u0eb9\7"+
		"\r\2\2\u0eb8\u0eb7\3\2\2\2\u0eb8\u0eb9\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba"+
		"\u0ebc\5\u020c\u0107\2\u0ebb\u0eb8\3\2\2\2\u0ebb\u0ebc\3\2\2\2\u0ebc\u0ebd"+
		"\3\2\2\2\u0ebd\u0ebe\5\u011a\u008e\2\u0ebe\u0119\3\2\2\2\u0ebf\u0ec1\7"+
		"z\2\2\u0ec0\u0ec2\7\u0190\2\2\u0ec1\u0ec0\3\2\2\2\u0ec1\u0ec2\3\2\2\2"+
		"\u0ec2\u0ec8\3\2\2\2\u0ec3\u0ec5\7a\2\2\u0ec4\u0ec3\3\2\2\2\u0ec4\u0ec5"+
		"\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u0ec8\7\u00b1\2\2\u0ec7\u0ebf\3\2\2"+
		"\2\u0ec7\u0ec4\3\2\2\2\u0ec8\u011b\3\2\2\2\u0ec9\u0eca\7\u0186\2\2\u0eca"+
		"\u0ecb\7\u018e\2\2\u0ecb\u0ed1\5\u011e\u0090\2\u0ecc\u0ecd\7z\2\2\u0ecd"+
		"\u0ed1\7\u00b1\2\2\u0ece\u0ecf\7z\2\2\u0ecf\u0ed1\7\u01c7\2\2\u0ed0\u0ec9"+
		"\3\2\2\2\u0ed0\u0ecc\3\2\2\2\u0ed0\u0ece\3\2\2\2\u0ed1\u011d\3\2\2\2\u0ed2"+
		"\u0ed3\7\u0294\2\2\u0ed3\u0eda\7z\2\2\u0ed4\u0ed5\7z\2\2\u0ed5\u0eda\7"+
		"\u0295\2\2\u0ed6\u0ed7\7z\2\2\u0ed7\u0eda\7\u0296\2\2\u0ed8\u0eda\7\u0297"+
		"\2\2\u0ed9\u0ed2\3\2\2\2\u0ed9\u0ed4\3\2\2\2\u0ed9\u0ed6\3\2\2\2\u0ed9"+
		"\u0ed8\3\2\2\2\u0eda\u011f\3\2\2\2\u0edb\u0edc\7\27\2\2\u0edc\u0edd\7"+
		"\u0193\2\2\u0edd\u0ede\7\u009f\2\2\u0ede\u0ee3\5\u0132\u009a\2\u0edf\u0ee0"+
		"\7\u03e2\2\2\u0ee0\u0ee2\5\u0132\u009a\2\u0ee1\u0edf\3\2\2\2\u0ee2\u0ee5"+
		"\3\2\2\2\u0ee3\u0ee1\3\2\2\2\u0ee3\u0ee4\3\2\2\2\u0ee4\u0ee7\3\2\2\2\u0ee5"+
		"\u0ee3\3\2\2\2\u0ee6\u0ee8\5\u013a\u009e\2\u0ee7\u0ee6\3\2\2\2\u0ee7\u0ee8"+
		"\3\2\2\2\u0ee8\u0121\3\2\2\2\u0ee9\u0eea\7\27\2\2\u0eea\u0eeb\7\u01f4"+
		"\2\2\u0eeb\u0eec\7\u0167\2\2\u0eec\u0ef1\5\u013c\u009f\2\u0eed\u0eee\7"+
		"\u03e2\2\2\u0eee\u0ef0\5\u013c\u009f\2\u0eef\u0eed\3\2\2\2\u0ef0\u0ef3"+
		"\3\2\2\2\u0ef1\u0eef\3\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u0123\3\2\2\2\u0ef3"+
		"\u0ef1\3\2\2\2\u0ef4\u0ef5\7x\2\2\u0ef5\u0ef6\t\62\2\2\u0ef6\u0efb\7\u0192"+
		"\2\2\u0ef7\u0ef8\7\u009f\2\2\u0ef8\u0efc\7\u03ef\2\2\u0ef9\u0efa\7\17"+
		"\2\2\u0efa\u0efc\7\u03ef\2\2\u0efb\u0ef7\3\2\2\2\u0efb\u0ef9\3\2\2\2\u0efc"+
		"\u0125\3\2\2\2\u0efd\u0efe\7\u01f5\2\2\u0efe\u0eff\7\u0193\2\2\u0eff\u0127"+
		"\3\2\2\2\u0f00\u0f01\7\u01f5\2\2\u0f01\u0f03\7\u0208\2\2\u0f02\u0f04\7"+
		"\b\2\2\u0f03\u0f02\3\2\2\2\u0f03\u0f04\3\2\2\2\u0f04\u0f06\3\2\2\2\u0f05"+
		"\u0f07\5\u013a\u009e\2\u0f06\u0f05\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0129"+
		"\3\2\2\2\u0f08\u0f09\7\u0217\2\2\u0f09\u0f12\7\u0208\2\2\u0f0a\u0f0f\5"+
		"\u0140\u00a1\2\u0f0b\u0f0c\7\u03e2\2\2\u0f0c\u0f0e\5\u0140\u00a1\2\u0f0d"+
		"\u0f0b\3\2\2\2\u0f0e\u0f11\3\2\2\2\u0f0f\u0f0d\3\2\2\2\u0f0f\u0f10\3\2"+
		"\2\2\u0f10\u0f13\3\2\2\2\u0f11\u0f0f\3\2\2\2\u0f12\u0f0a\3\2\2\2\u0f12"+
		"\u0f13\3\2\2\2\u0f13\u0f16\3\2\2\2\u0f14\u0f15\7\u0236\2\2\u0f15\u0f17"+
		"\5\u0142\u00a2\2\u0f16\u0f14\3\2\2\2\u0f16\u0f17\3\2\2\2\u0f17\u0f1b\3"+
		"\2\2\2\u0f18\u0f1a\5\u0144\u00a3\2\u0f19\u0f18\3\2\2\2\u0f1a\u0f1d\3\2"+
		"\2\2\u0f1b\u0f19\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1f\3\2\2\2\u0f1d"+
		"\u0f1b\3\2\2\2\u0f1e\u0f20\5\u013a\u009e\2\u0f1f\u0f1e\3\2\2\2\u0f1f\u0f20"+
		"\3\2\2\2\u0f20\u012b\3\2\2\2\u0f21\u0f22\7\u021d\2\2\u0f22\u0f2b\7\u0208"+
		"\2\2\u0f23\u0f28\5\u0140\u00a1\2\u0f24\u0f25\7\u03e2\2\2\u0f25\u0f27\5"+
		"\u0140\u00a1\2\u0f26\u0f24\3\2\2\2\u0f27\u0f2a\3\2\2\2\u0f28\u0f26\3\2"+
		"\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0f2c\3\2\2\2\u0f2a\u0f28\3\2\2\2\u0f2b"+
		"\u0f23\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u012d\3\2\2\2\u0f2d\u0f2e\7\u0217"+
		"\2\2\u0f2e\u0f2f\7\u0172\2\2\u0f2f\u012f\3\2\2\2\u0f30\u0f31\7\u021d\2"+
		"\2\u0f31\u0f32\7\u0172\2\2\u0f32\u0131\3\2\2\2\u0f33\u0f34\5\u0134\u009b"+
		"\2\u0f34\u0f35\7\u03d7\2\2\u0f35\u0f36\7\u03ef\2\2\u0f36\u0f51\3\2\2\2"+
		"\u0f37\u0f38\5\u0136\u009c\2\u0f38\u0f39\7\u03d7\2\2\u0f39\u0f3a\5\u0212"+
		"\u010a\2\u0f3a\u0f51\3\2\2\2\u0f3b\u0f3c\5\u0138\u009d\2\u0f3c\u0f3d\7"+
		"\u03d7\2\2\u0f3d\u0f3e\t\30\2\2\u0f3e\u0f51\3\2\2\2\u0f3f\u0f40\7\u0197"+
		"\2\2\u0f40\u0f41\7\u03d7\2\2\u0f41\u0f51\7\u03f2\2\2\u0f42\u0f43\7\u0179"+
		"\2\2\u0f43\u0f44\7\u03d7\2\2\u0f44\u0f4d\7\u03e0\2\2\u0f45\u0f4a\5\u020c"+
		"\u0107\2\u0f46\u0f47\7\u03e2\2\2\u0f47\u0f49\5\u020c\u0107\2\u0f48\u0f46"+
		"\3\2\2\2\u0f49\u0f4c\3\2\2\2\u0f4a\u0f48\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b"+
		"\u0f4e\3\2\2\2\u0f4c\u0f4a\3\2\2\2\u0f4d\u0f45\3\2\2\2\u0f4d\u0f4e\3\2"+
		"\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0f51\7\u03e1\2\2\u0f50\u0f33\3\2\2\2\u0f50"+
		"\u0f37\3\2\2\2\u0f50\u0f3b\3\2\2\2\u0f50\u0f3f\3\2\2\2\u0f50\u0f42\3\2"+
		"\2\2\u0f51\u0133\3\2\2\2\u0f52\u0f53\t\63\2\2\u0f53\u0135\3\2\2\2\u0f54"+
		"\u0f55\t\64\2\2\u0f55\u0137\3\2\2\2\u0f56\u0f57\t\65\2\2\u0f57\u0139\3"+
		"\2\2\2\u0f58\u0f59\7<\2\2\u0f59\u0f5a\7\u0123\2\2\u0f5a\u0f5b\7\u03ef"+
		"\2\2\u0f5b\u013b\3\2\2\2\u0f5c\u0f5d\7\u01ed\2\2\u0f5d\u0f5e\7\u03d7\2"+
		"\2\u0f5e\u0f5f\7\u03e0\2\2\u0f5f\u0f60\5\u022c\u0117\2\u0f60\u0f61\7\u03e1"+
		"\2\2\u0f61\u0f8e\3\2\2\2\u0f62\u0f63\7\u01ef\2\2\u0f63\u0f64\7\u03d7\2"+
		"\2\u0f64\u0f65\7\u03e0\2\2\u0f65\u0f66\5\u022c\u0117\2\u0f66\u0f67\7\u03e1"+
		"\2\2\u0f67\u0f8e\3\2\2\2\u0f68\u0f69\7\u01ee\2\2\u0f69\u0f6a\7\u03d7\2"+
		"\2\u0f6a\u0f6b\7\u03e0\2\2\u0f6b\u0f6c\5\u022e\u0118\2\u0f6c\u0f6d\7\u03e1"+
		"\2\2\u0f6d\u0f8e\3\2\2\2\u0f6e\u0f6f\7\u01f0\2\2\u0f6f\u0f70\7\u03d7\2"+
		"\2\u0f70\u0f71\7\u03e0\2\2\u0f71\u0f72\5\u022e\u0118\2\u0f72\u0f73\7\u03e1"+
		"\2\2\u0f73\u0f8e\3\2\2\2\u0f74\u0f75\7\u01f2\2\2\u0f75\u0f76\7\u03d7\2"+
		"\2\u0f76\u0f77\7\u03e0\2\2\u0f77\u0f78\5\u0238\u011d\2\u0f78\u0f79\7\u03e1"+
		"\2\2\u0f79\u0f8e\3\2\2\2\u0f7a\u0f7b\7\u01f3\2\2\u0f7b\u0f7c\7\u03d7\2"+
		"\2\u0f7c\u0f7d\7\u03e0\2\2\u0f7d\u0f7e\5\u0238\u011d\2\u0f7e\u0f7f\7\u03e1"+
		"\2\2\u0f7f\u0f8e\3\2\2\2\u0f80\u0f81\7\u01f1\2\2\u0f81\u0f82\7\u03d7\2"+
		"\2\u0f82\u0f83\7\u03e0\2\2\u0f83\u0f88\5\u013e\u00a0\2\u0f84\u0f85\7\u03e2"+
		"\2\2\u0f85\u0f87\5\u013e\u00a0\2\u0f86\u0f84\3\2\2\2\u0f87\u0f8a\3\2\2"+
		"\2\u0f88\u0f86\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89\u0f8b\3\2\2\2\u0f8a\u0f88"+
		"\3\2\2\2\u0f8b\u0f8c\7\u03e1\2\2\u0f8c\u0f8e\3\2\2\2\u0f8d\u0f5c\3\2\2"+
		"\2\u0f8d\u0f62\3\2\2\2\u0f8d\u0f68\3\2\2\2\u0f8d\u0f6e\3\2\2\2\u0f8d\u0f74"+
		"\3\2\2\2\u0f8d\u0f7a\3\2\2\2\u0f8d\u0f80\3\2\2\2\u0f8e\u013d\3\2\2\2\u0f8f"+
		"\u0f90\7\u03e0\2\2\u0f90\u0f91\5\u01f4\u00fb\2\u0f91\u0f92\7\u03e2\2\2"+
		"\u0f92\u0f93\5\u01f4\u00fb\2\u0f93\u0f94\7\u03e1\2\2\u0f94\u013f\3\2\2"+
		"\2\u0f95\u0f96\t\66\2\2\u0f96\u0141\3\2\2\2\u0f97\u0f98\t\67\2\2\u0f98"+
		"\u0f99\7\u03d7\2\2\u0f99\u0faa\5\u0146\u00a4\2\u0f9a\u0f9b\7\u0199\2\2"+
		"\u0f9b\u0f9c\7\u03d7\2\2\u0f9c\u0f9d\7\u03ef\2\2\u0f9d\u0f9e\7\u03e2\2"+
		"\2\u0f9e\u0f9f\7\u019a\2\2\u0f9f\u0fa0\7\u03d7\2\2\u0fa0\u0faa\5\u0212"+
		"\u010a\2\u0fa1\u0fa2\7\u01e7\2\2\u0fa2\u0fa3\7\u03d7\2\2\u0fa3\u0fa4\7"+
		"\u03ef\2\2\u0fa4\u0fa5\7\u03e2\2\2\u0fa5\u0fa6\7\u01e8\2\2\u0fa6\u0fa7"+
		"\7\u03d7\2\2\u0fa7\u0faa\5\u0212\u010a\2\u0fa8\u0faa\7\u0211\2\2\u0fa9"+
		"\u0f97\3\2\2\2\u0fa9\u0f9a\3\2\2\2\u0fa9\u0fa1\3\2\2\2\u0fa9\u0fa8\3\2"+
		"\2\2\u0faa\u0143\3\2\2\2\u0fab\u0fac\7\u0238\2\2\u0fac\u0fad\7\u03d7\2"+
		"\2\u0fad\u0fb8\7\u03ef\2\2\u0fae\u0faf\7\u01d2\2\2\u0faf\u0fb0\7\u03d7"+
		"\2\2\u0fb0\u0fb8\7\u03ef\2\2\u0fb1\u0fb2\7\u0144\2\2\u0fb2\u0fb3\7\u03d7"+
		"\2\2\u0fb3\u0fb8\7\u03ef\2\2\u0fb4\u0fb5\7\u01d5\2\2\u0fb5\u0fb6\7\u03d7"+
		"\2\2\u0fb6\u0fb8\7\u03ef\2\2\u0fb7\u0fab\3\2\2\2\u0fb7\u0fae\3\2\2\2\u0fb7"+
		"\u0fb1\3\2\2\2\u0fb7\u0fb4\3\2\2\2\u0fb8\u0145\3\2\2\2\u0fb9\u0fbe\5\u0204"+
		"\u0103\2\u0fba\u0fbb\7\u03e2\2\2\u0fbb\u0fbd\5\u0204\u0103\2\u0fbc\u0fba"+
		"\3\2\2\2\u0fbd\u0fc0\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbe\u0fbf\3\2\2\2\u0fbf"+
		"\u0fc3\3\2\2\2\u0fc0\u0fbe\3\2\2\2\u0fc1\u0fc3\7\u03ef\2\2\u0fc2\u0fb9"+
		"\3\2\2\2\u0fc2\u0fc1\3\2\2\2\u0fc3\u0147\3\2\2\2\u0fc4\u0fc5\7\u0247\2"+
		"\2\u0fc5\u0fc6\t8\2\2\u0fc6\u0fc8\5\u0206\u0104\2\u0fc7\u0fc9\t9\2\2\u0fc8"+
		"\u0fc7\3\2\2\2\u0fc8\u0fc9\3\2\2\2\u0fc9\u0149\3\2\2\2\u0fca\u0fcb\7\u0247"+
		"\2\2\u0fcb\u0fcc\7\u0152\2\2\u0fcc\u0fd2\5\u0206\u0104\2\u0fcd\u0fd0\7"+
		"\u0225\2\2\u0fce\u0fcf\7<\2\2\u0fcf\u0fd1\7\u01b2\2\2\u0fd0\u0fce\3\2"+
		"\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1\u0fd3\3\2\2\2\u0fd2\u0fcd\3\2\2\2\u0fd2"+
		"\u0fd3\3\2\2\2\u0fd3\u014b\3\2\2\2\u0fd4\u0fd5\7\u0247\2\2\u0fd5\u0fd6"+
		"\7\u01d9\2\2\u0fd6\u0fd7\5\u0206\u0104\2\u0fd7\u014d\3\2\2\2\u0fd8\u0fd9"+
		"\7\u0247\2\2\u0fd9\u0fda\7\u0130\2\2\u0fda\u0fdd\5\u0206\u0104\2\u0fdb"+
		"\u0fdc\7\u01c5\2\2\u0fdc\u0fde\7\u01d3\2\2\u0fdd\u0fdb\3\2\2\2\u0fdd\u0fde"+
		"\3\2\2\2\u0fde\u014f\3\2\2\2\u0fdf\u0fe0\7\u0247\2\2\u0fe0\u0fe1\7\u01f9"+
		"\2\2\u0fe1\u0fe2\5\u0206\u0104\2\u0fe2\u0151\3\2\2\2\u0fe3\u0fe4\7\u0247"+
		"\2\2\u0fe4\u0fe7\7\u01e3\2\2\u0fe5\u0fe6\7\37\2\2\u0fe6\u0fe8\5\u0206"+
		"\u0104\2\u0fe7\u0fe5\3\2\2\2\u0fe7\u0fe8\3\2\2\2\u0fe8\u0153\3\2\2\2\u0fe9"+
		"\u0fea\7\u01d9\2\2\u0fea\u0feb\5\u020c\u0107\2\u0feb\u0fee\7?\2\2\u0fec"+
		"\u0fef\7\u03ef\2\2\u0fed\u0fef\7\u03fa\2\2\u0fee\u0fec\3\2\2\2\u0fee\u0fed"+
		"\3\2\2\2\u0fef\u0155\3\2\2\2\u0ff0\u0ff1\7\u0258\2\2\u0ff1\u0ff4\5\u020c"+
		"\u0107\2\u0ff2\u0ff3\7\u00ab\2\2\u0ff3\u0ff5\5\u023a\u011e\2\u0ff4\u0ff2"+
		"\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0157\3\2\2\2\u0ff6\u0ff7\t:\2\2\u0ff7"+
		"\u0ff8\7\u01d9\2\2\u0ff8\u0ff9\5\u020c\u0107\2\u0ff9\u0159\3\2\2\2\u0ffa"+
		"\u0ffd\5\u015c\u00af\2\u0ffb\u0ffd\5\6\4\2\u0ffc\u0ffa\3\2\2\2\u0ffc\u0ffb"+
		"\3\2\2\2\u0ffd\u015b\3\2\2\2\u0ffe\u0fff\5\u020c\u0107\2\u0fff\u1000\7"+
		"\u03eb\2\2\u1000\u1002\3\2\2\2\u1001\u0ffe\3\2\2\2\u1001\u1002\3\2\2\2"+
		"\u1002\u1003\3\2\2\2\u1003\u102a\7\u0118\2\2\u1004\u1005\5\u0170\u00b9"+
		"\2\u1005\u1006\7\u03e3\2\2\u1006\u1008\3\2\2\2\u1007\u1004\3\2\2\2\u1008"+
		"\u100b\3\2\2\2\u1009\u1007\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u1011\3\2"+
		"\2\2\u100b\u1009\3\2\2\2\u100c\u100d\5\u0172\u00ba\2\u100d\u100e\7\u03e3"+
		"\2\2\u100e\u1010\3\2\2\2\u100f\u100c\3\2\2\2\u1010\u1013\3\2\2\2\u1011"+
		"\u100f\3\2\2\2\u1011\u1012\3\2\2\2\u1012\u1019\3\2\2\2\u1013\u1011\3\2"+
		"\2\2\u1014\u1015\5\u0174\u00bb\2\u1015\u1016\7\u03e3\2\2\u1016\u1018\3"+
		"\2\2\2\u1017\u1014\3\2\2\2\u1018\u101b\3\2\2\2\u1019\u1017\3\2\2\2\u1019"+
		"\u101a\3\2\2\2\u101a\u1021\3\2\2\2\u101b\u1019\3\2\2\2\u101c\u101d\5\u0176"+
		"\u00bc\2\u101d\u101e\7\u03e3\2\2\u101e\u1020\3\2\2\2\u101f\u101c\3\2\2"+
		"\2\u1020\u1023\3\2\2\2\u1021\u101f\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1027"+
		"\3\2\2\2\u1023\u1021\3\2\2\2\u1024\u1026\5\u017a\u00be\2\u1025\u1024\3"+
		"\2\2\2\u1026\u1029\3\2\2\2\u1027\u1025\3\2\2\2\u1027\u1028\3\2\2\2\u1028"+
		"\u102b\3\2\2\2\u1029\u1027\3\2\2\2\u102a\u1009\3\2\2\2\u102a\u102b\3\2"+
		"\2\2\u102b\u102c\3\2\2\2\u102c\u102e\7\u0152\2\2\u102d\u102f\5\u020c\u0107"+
		"\2\u102e\u102d\3\2\2\2\u102e\u102f\3\2\2\2\u102f\u015d\3\2\2\2\u1030\u1033"+
		"\7\25\2\2\u1031\u1034\5\u020c\u0107\2\u1032\u1034\5\u025c\u012f\2\u1033"+
		"\u1031\3\2\2\2\u1033\u1032\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u1036\3\2"+
		"\2\2\u1035\u1037\5\u017c\u00bf\2\u1036\u1035\3\2\2\2\u1037\u1038\3\2\2"+
		"\2\u1038\u1036\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u1040\3\2\2\2\u103a\u103c"+
		"\7\63\2\2\u103b\u103d\5\u017a\u00be\2\u103c\u103b\3\2\2\2\u103d\u103e"+
		"\3\2\2\2\u103e\u103c\3\2\2\2\u103e\u103f\3\2\2\2\u103f\u1041\3\2\2\2\u1040"+
		"\u103a\3\2\2\2\u1040\u1041\3\2\2\2\u1041\u1042\3\2\2\2\u1042\u1043\7\u0152"+
		"\2\2\u1043\u1044\7\25\2\2\u1044\u015f\3\2\2\2\u1045\u1046\7G\2\2\u1046"+
		"\u1047\5\u025c\u012f\2\u1047\u1049\7\u009e\2\2\u1048\u104a\5\u017a\u00be"+
		"\2\u1049\u1048\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u1049\3\2\2\2\u104b\u104c"+
		"\3\2\2\2\u104c\u1050\3\2\2\2\u104d\u104f\5\u017e\u00c0\2\u104e\u104d\3"+
		"\2\2\2\u104f\u1052\3\2\2\2\u1050\u104e\3\2\2\2\u1050\u1051\3\2\2\2\u1051"+
		"\u1059\3\2\2\2\u1052\u1050\3\2\2\2\u1053\u1055\7\63\2\2\u1054\u1056\5"+
		"\u017a\u00be\2\u1055\u1054\3\2\2\2\u1056\u1057\3\2\2\2\u1057\u1055\3\2"+
		"\2\2\u1057\u1058\3\2\2\2\u1058\u105a\3\2\2\2\u1059\u1053\3\2\2\2\u1059"+
		"\u105a\3\2\2\2\u105a\u105b\3\2\2\2\u105b\u105c\7\u0152\2\2\u105c\u105d"+
		"\7G\2\2\u105d\u0161\3\2\2\2\u105e\u105f\7R\2\2\u105f\u1060\5\u020c\u0107"+
		"\2\u1060\u0163\3\2\2\2\u1061\u1062\7X\2\2\u1062\u1063\5\u020c\u0107\2"+
		"\u1063\u0165\3\2\2\2\u1064\u1065\5\u020c\u0107\2\u1065\u1066\7\u03eb\2"+
		"\2\u1066\u1068\3\2\2\2\u1067\u1064\3\2\2\2\u1067\u1068\3\2\2\2\u1068\u1069"+
		"\3\2\2\2\u1069\u106b\7`\2\2\u106a\u106c\5\u017a\u00be\2\u106b\u106a\3"+
		"\2\2\2\u106c\u106d\3\2\2\2\u106d\u106b\3\2\2\2\u106d\u106e\3\2\2\2\u106e"+
		"\u106f\3\2\2\2\u106f\u1070\7\u0152\2\2\u1070\u1072\7`\2\2\u1071\u1073"+
		"\5\u020c\u0107\2\u1072\u1071\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u0167\3"+
		"\2\2\2\u1074\u1075\5\u020c\u0107\2\u1075\u1076\7\u03eb\2\2\u1076\u1078"+
		"\3\2\2\2\u1077\u1074\3\2\2\2\u1077\u1078\3\2\2\2\u1078\u1079\3\2\2\2\u1079"+
		"\u107b\7\u0080\2\2\u107a\u107c\5\u017a\u00be\2\u107b\u107a\3\2\2\2\u107c"+
		"\u107d\3\2\2\2\u107d\u107b\3\2\2\2\u107d\u107e\3";
	private static final String _serializedATNSegment2 =
		"\2\2\2\u107e\u107f\3\2\2\2\u107f\u1080\7\u0236\2\2\u1080\u1081\5\u025c"+
		"\u012f\2\u1081\u1082\7\u0152\2\2\u1082\u1084\7\u0080\2\2\u1083\u1085\5"+
		"\u020c\u0107\2\u1084\u1083\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u0169\3\2"+
		"\2\2\u1086\u1087\7\u0085\2\2\u1087\u1088\5\u025c\u012f\2\u1088\u016b\3"+
		"\2\2\2\u1089\u108a\5\u020c\u0107\2\u108a\u108b\7\u03eb\2\2\u108b\u108d"+
		"\3\2\2\2\u108c\u1089\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u108e\3\2\2\2\u108e"+
		"\u108f\7\u00af\2\2\u108f\u1090\5\u025c\u012f\2\u1090\u1092\7\u014c\2\2"+
		"\u1091\u1093\5\u017a\u00be\2\u1092\u1091\3\2\2\2\u1093\u1094\3\2\2\2\u1094"+
		"\u1092\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097\7\u0152"+
		"\2\2\u1097\u1099\7\u00af\2\2\u1098\u109a\5\u020c\u0107\2\u1099\u1098\3"+
		"\2\2\2\u1099\u109a\3\2\2\2\u109a\u016d\3\2\2\2\u109b\u109c\7\u0129\2\2"+
		"\u109c\u10ab\5\u020c\u0107\2\u109d\u10a2\7;\2\2\u109e\u10a0\7\u01bd\2"+
		"\2\u109f\u109e\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a1\3\2\2\2\u10a1\u10a3"+
		"\7?\2\2\u10a2\u109f\3\2\2\2\u10a2\u10a3\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4"+
		"\u10a5\5\u020c\u0107\2\u10a5\u10a6\7P\2\2\u10a6\u10a7\5\u022c\u0117\2"+
		"\u10a7\u10ab\3\2\2\2\u10a8\u10a9\7\u01c8\2\2\u10a9\u10ab\5\u020c\u0107"+
		"\2\u10aa\u109b\3\2\2\2\u10aa\u109d\3\2\2\2\u10aa\u10a8\3\2\2\2\u10ab\u016f"+
		"\3\2\2\2\u10ac\u10ad\7\'\2\2\u10ad\u10ae\5\u022c\u0117\2\u10ae\u10b1\5"+
		"\u0220\u0111\2\u10af\u10b0\7(\2\2\u10b0\u10b2\5\u023c\u011f\2\u10b1\u10af"+
		"\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u0171\3\2\2\2\u10b3\u10b4\7\'\2\2\u10b4"+
		"\u10b5\5\u020c\u0107\2\u10b5\u10b6\7\34\2\2\u10b6\u10bd\7<\2\2\u10b7\u10be"+
		"\5\u0212\u010a\2\u10b8\u10ba\7\u0093\2\2\u10b9\u10bb\7\u023c\2\2\u10ba"+
		"\u10b9\3\2\2\2\u10ba\u10bb\3\2\2\2\u10bb\u10bc\3\2\2\2\u10bc\u10be\7\u03ef"+
		"\2\2\u10bd\u10b7\3\2\2\2\u10bd\u10b8\3\2\2\2\u10be\u0173\3\2\2\2\u10bf"+
		"\u10c0\7\'\2\2\u10c0\u10c1\5\u020c\u0107\2\u10c1\u10c2\7$\2\2\u10c2\u10c3"+
		"\7<\2\2\u10c3\u10c4\5\u00b4[\2\u10c4\u0175\3\2\2\2\u10c5\u10c6\7\'\2\2"+
		"\u10c6\u10c7\t;\2\2\u10c7\u10c8\7\u0173\2\2\u10c8\u10c9\7<\2\2\u10c9\u10ce"+
		"\5\u0178\u00bd\2\u10ca\u10cb\7\u03e2\2\2\u10cb\u10cd\5\u0178\u00bd\2\u10cc"+
		"\u10ca\3\2\2\2\u10cd\u10d0\3\2\2\2\u10ce\u10cc\3\2\2\2\u10ce\u10cf\3\2"+
		"\2\2\u10cf\u10d1\3\2\2\2\u10d0\u10ce\3\2\2\2\u10d1\u10d2\5\u015a\u00ae"+
		"\2\u10d2\u0177\3\2\2\2\u10d3\u10df\5\u0212\u010a\2\u10d4\u10d6\7\u0093"+
		"\2\2\u10d5\u10d7\7\u023c\2\2\u10d6\u10d5\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7"+
		"\u10d8\3\2\2\2\u10d8\u10df\7\u03ef\2\2\u10d9\u10df\5\u020c\u0107\2\u10da"+
		"\u10df\7\u0094\2\2\u10db\u10dc\7h\2\2\u10dc\u10df\7\u016c\2\2\u10dd\u10df"+
		"\7\u0092\2\2\u10de\u10d3\3\2\2\2\u10de\u10d4\3\2\2\2\u10de\u10d9\3\2\2"+
		"\2\u10de\u10da\3\2\2\2\u10de\u10db\3\2\2\2\u10de\u10dd\3\2\2\2\u10df\u0179"+
		"\3\2\2\2\u10e0\u10e3\5\24\13\2\u10e1\u10e3\5\6\4\2\u10e2\u10e0\3\2\2\2"+
		"\u10e2\u10e1\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e5\7\u03e3\2\2\u10e5"+
		"\u017b\3\2\2\2\u10e6\u10e9\7\u00ad\2\2\u10e7\u10ea\5\u021e\u0110\2\u10e8"+
		"\u10ea\5\u025c\u012f\2\u10e9\u10e7\3\2\2\2\u10e9\u10e8\3\2\2\2\u10ea\u10eb"+
		"\3\2\2\2\u10eb\u10ed\7\u009e\2\2\u10ec\u10ee\5\u017a\u00be\2\u10ed\u10ec"+
		"\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u10ed\3\2\2\2\u10ef\u10f0\3\2\2\2\u10f0"+
		"\u017d\3\2\2\2\u10f1\u10f2\7\64\2\2\u10f2\u10f3\5\u025c\u012f\2\u10f3"+
		"\u10f5\7\u009e\2\2\u10f4\u10f6\5\u017a\u00be\2\u10f5\u10f4\3\2\2\2\u10f6"+
		"\u10f7\3\2\2\2\u10f7\u10f5\3\2\2\2\u10f7\u10f8\3\2\2\2\u10f8\u017f\3\2"+
		"\2\2\u10f9\u10fa\7\t\2\2\u10fa\u10fb\7\u0238\2\2\u10fb\u1100\5\u0192\u00ca"+
		"\2\u10fc\u10fd\7\u03e2\2\2\u10fd\u10ff\5\u0192\u00ca\2\u10fe\u10fc\3\2"+
		"\2\2\u10ff\u1102\3\2\2\2\u1100\u10fe\3\2\2\2\u1100\u1101\3\2\2\2\u1101"+
		"\u1130\3\2\2\2\u1102\u1100\3\2\2\2\u1103\u1104\7\t\2\2\u1104\u1106\7\u0238"+
		"\2\2\u1105\u1107\5\u0242\u0122\2\u1106\u1105\3\2\2\2\u1106\u1107\3\2\2"+
		"\2\u1107\u1108\3\2\2\2\u1108\u110d\5\u0194\u00cb\2\u1109\u110a\7\u03e2"+
		"\2\2\u110a\u110c\5\u0194\u00cb\2\u110b\u1109\3\2\2\2\u110c\u110f\3\2\2"+
		"\2\u110d\u110b\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u111e\3\2\2\2\u110f\u110d"+
		"\3\2\2\2\u1110\u111c\7\u0082\2\2\u1111\u111d\7\u01c0\2\2\u1112\u1119\5"+
		"\u0196\u00cc\2\u1113\u1115\7\f\2\2\u1114\u1113\3\2\2\2\u1114\u1115\3\2"+
		"\2\2\u1115\u1116\3\2\2\2\u1116\u1118\5\u0196\u00cc\2\u1117\u1114\3\2\2"+
		"\2\u1118\u111b\3\2\2\2\u1119\u1117\3\2\2\2\u1119\u111a\3\2\2\2\u111a\u111d"+
		"\3\2\2\2\u111b\u1119\3\2\2\2\u111c\u1111\3\2\2\2\u111c\u1112\3\2\2\2\u111d"+
		"\u111f\3\2\2\2\u111e\u1110\3\2\2\2\u111e\u111f\3\2\2\2\u111f\u1126\3\2"+
		"\2\2\u1120\u1122\7\u00b0\2\2\u1121\u1123\5\u0198\u00cd\2\u1122\u1121\3"+
		"\2\2\2\u1123\u1124\3\2\2\2\u1124\u1122\3\2\2\2\u1124\u1125\3\2\2\2\u1125"+
		"\u1127\3\2\2\2\u1126\u1120\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u112c\3\2"+
		"\2\2\u1128\u112b\5\u019a\u00ce\2\u1129\u112b\5\u019c\u00cf\2\u112a\u1128"+
		"\3\2\2\2\u112a\u1129\3\2\2\2\u112b\u112e\3\2\2\2\u112c\u112a\3\2\2\2\u112c"+
		"\u112d\3\2\2\2\u112d\u1130\3\2\2\2\u112e\u112c\3\2\2\2\u112f\u10f9\3\2"+
		"\2\2\u112f\u1103\3\2\2\2\u1130\u0181\3\2\2\2\u1131\u1132\7 \2\2\u1132"+
		"\u1133\7\u0238\2\2\u1133\u1138\5\u0194\u00cb\2\u1134\u1135\7\u03e2\2\2"+
		"\u1135\u1137\5\u0194\u00cb\2\u1136\u1134\3\2\2\2\u1137\u113a\3\2\2\2\u1138"+
		"\u1136\3\2\2\2\u1138\u1139\3\2\2\2\u1139\u1168\3\2\2\2\u113a\u1138\3\2"+
		"\2\2\u113b\u113c\7 \2\2\u113c\u113e\7\u0238\2\2\u113d\u113f\5\u0244\u0123"+
		"\2\u113e\u113d\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u1140\3\2\2\2\u1140\u1145"+
		"\5\u0194\u00cb\2\u1141\u1142\7\u03e2\2\2\u1142\u1144\5\u0194\u00cb\2\u1143"+
		"\u1141\3\2\2\2\u1144\u1147\3\2\2\2\u1145\u1143\3\2\2\2\u1145\u1146\3\2"+
		"\2\2\u1146\u1156\3\2\2\2\u1147\u1145\3\2\2\2\u1148\u1154\7\u0082\2\2\u1149"+
		"\u1155\7\u01c0\2\2\u114a\u1151\5\u0196\u00cc\2\u114b\u114d\7\f\2\2\u114c"+
		"\u114b\3\2\2\2\u114c\u114d\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1150\5\u0196"+
		"\u00cc\2\u114f\u114c\3\2\2\2\u1150\u1153\3\2\2\2\u1151\u114f\3\2\2\2\u1151"+
		"\u1152\3\2\2\2\u1152\u1155\3\2\2\2\u1153\u1151\3\2\2\2\u1154\u1149\3\2"+
		"\2\2\u1154\u114a\3\2\2\2\u1155\u1157\3\2\2\2\u1156\u1148\3\2\2\2\u1156"+
		"\u1157\3\2\2\2\u1157\u115e\3\2\2\2\u1158\u115a\7\u00b0\2\2\u1159\u115b"+
		"\5\u0198\u00cd\2\u115a\u1159\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u115a\3"+
		"\2\2\2\u115c\u115d\3\2\2\2\u115d\u115f\3\2\2\2\u115e\u1158\3\2\2\2\u115e"+
		"\u115f\3\2\2\2\u115f\u1164\3\2\2\2\u1160\u1163\5\u019a\u00ce\2\u1161\u1163"+
		"\5\u019c\u00cf\2\u1162\u1160\3\2\2\2\u1162\u1161\3\2\2\2\u1163\u1166\3"+
		"\2\2\2\u1164\u1162\3\2\2\2\u1164\u1165\3\2\2\2\u1165\u1168\3\2\2\2\u1166"+
		"\u1164\3\2\2\2\u1167\u1131\3\2\2\2\u1167\u113b\3\2\2\2\u1168\u0183\3\2"+
		"\2\2\u1169\u116a\7\61\2\2\u116a\u116c\7\u0238\2\2\u116b\u116d\5\u0242"+
		"\u0122\2\u116c\u116b\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u116e\3\2\2\2\u116e"+
		"\u1173\5\u01fa\u00fe\2\u116f\u1170\7\u03e2\2\2\u1170\u1172\5\u01fa\u00fe"+
		"\2\u1171\u116f\3\2\2\2\u1172\u1175\3\2\2\2\u1173\u1171\3\2\2\2\u1173\u1174"+
		"\3\2\2\2\u1174\u0185\3\2\2\2\u1175\u1173\3\2\2\2\u1176\u1177\7C\2\2\u1177"+
		"\u117c\5\u019e\u00d0\2\u1178\u1179\7\u03e2\2\2\u1179\u117b\5\u019e\u00d0"+
		"\2\u117a\u1178\3\2\2\2\u117b\u117e\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117d"+
		"\3\2\2\2\u117d\u117f\3\2\2\2\u117e\u117c\3\2\2\2\u117f\u1181\7l\2\2\u1180"+
		"\u1182\t<\2\2\u1181\u1180\3\2\2\2\u1181\u1182\3\2\2\2\u1182\u1183\3\2"+
		"\2\2\u1183\u1184\5\u01a2\u00d2\2\u1184\u1185\7\u009f\2\2\u1185\u118a\5"+
		"\u0194\u00cb\2\u1186\u1187\7\u03e2\2\2\u1187\u1189\5\u0194\u00cb\2\u1188"+
		"\u1186\3\2\2\2\u1189\u118c\3\2\2\2\u118a\u1188\3\2\2\2\u118a\u118b\3\2"+
		"\2\2\u118b\u119b\3\2\2\2\u118c\u118a\3\2\2\2\u118d\u1199\7\u0082\2\2\u118e"+
		"\u119a\7\u01c0\2\2\u118f\u1196\5\u0196\u00cc\2\u1190\u1192\7\f\2\2\u1191"+
		"\u1190\3\2\2\2\u1191\u1192\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u1195\5\u0196"+
		"\u00cc\2\u1194\u1191\3\2\2\2\u1195\u1198\3\2\2\2\u1196\u1194\3\2\2\2\u1196"+
		"\u1197\3\2\2\2\u1197\u119a\3\2\2\2\u1198\u1196\3\2\2\2\u1199\u118e\3\2"+
		"\2\2\u1199\u118f\3\2\2\2\u119a\u119c\3\2\2\2\u119b\u118d\3\2\2\2\u119b"+
		"\u119c\3\2\2\2\u119c\u11a6\3\2\2\2\u119d\u11a3\7\u00b0\2\2\u119e\u119f"+
		"\7C\2\2\u119f\u11a2\7n\2\2\u11a0\u11a2\5\u0198\u00cd\2\u11a1\u119e\3\2"+
		"\2\2\u11a1\u11a0\3\2\2\2\u11a2\u11a5\3\2\2\2\u11a3\u11a1\3\2\2\2\u11a3"+
		"\u11a4\3\2\2\2\u11a4\u11a7\3\2\2\2\u11a5\u11a3\3\2\2\2\u11a6\u119d\3\2"+
		"\2\2\u11a6\u11a7\3\2\2\2\u11a7\u0187\3\2\2\2\u11a8\u11a9\7C\2\2\u11a9"+
		"\u11aa\7\u01df\2\2\u11aa\u11ab\7l\2\2\u11ab\u11ac\5\u01fa\u00fe\2\u11ac"+
		"\u11ad\7\u009f\2\2\u11ad\u11b2\5\u01fa\u00fe\2\u11ae\u11af\7\u03e2\2\2"+
		"\u11af\u11b1\5\u01fa\u00fe\2\u11b0\u11ae\3\2\2\2\u11b1\u11b4\3\2\2\2\u11b2"+
		"\u11b0\3\2\2\2\u11b2\u11b3\3\2\2\2\u11b3\u11b8\3\2\2\2\u11b4\u11b2\3\2"+
		"\2\2\u11b5\u11b6\7\u00b0\2\2\u11b6\u11b7\7C\2\2\u11b7\u11b9\7n\2\2\u11b8"+
		"\u11b5\3\2\2\2\u11b8\u11b9\3\2\2\2\u11b9\u0189\3\2\2\2\u11ba\u11bb\7\177"+
		"\2\2\u11bb\u11bc\7\u0238\2\2\u11bc\u11c1\5\u01a4\u00d3\2\u11bd\u11be\7"+
		"\u03e2\2\2\u11be\u11c0\5\u01a4\u00d3\2\u11bf\u11bd\3\2\2\2\u11c0\u11c3"+
		"\3\2\2\2\u11c1\u11bf\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u018b\3\2\2\2\u11c3"+
		"\u11c1\3\2\2\2\u11c4\u11c5\7\u0086\2\2\u11c5\u11ca\5\u019e\u00d0\2\u11c6"+
		"\u11c7\7\u03e2\2\2\u11c7\u11c9\5\u019e\u00d0\2\u11c8\u11c6\3\2\2\2\u11c9"+
		"\u11cc\3\2\2\2\u11ca\u11c8\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb\u11cd\3\2"+
		"\2\2\u11cc\u11ca\3\2\2\2\u11cd\u11cf\7l\2\2\u11ce\u11d0\t<\2\2\u11cf\u11ce"+
		"\3\2\2\2\u11cf\u11d0\3\2\2\2\u11d0\u11d1\3\2\2\2\u11d1\u11d2\5\u01a2\u00d2"+
		"\2\u11d2\u11d3\7?\2\2\u11d3\u11d8\5\u01fa\u00fe\2\u11d4\u11d5\7\u03e2"+
		"\2\2\u11d5\u11d7\5\u01fa\u00fe\2\u11d6\u11d4\3\2\2\2\u11d7\u11da\3\2\2"+
		"\2\u11d8\u11d6\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11ed\3\2\2\2\u11da\u11d8"+
		"\3\2\2\2\u11db\u11dc\7\u0086\2\2\u11dc\u11de\7\b\2\2\u11dd\u11df\7\u025e"+
		"\2\2\u11de\u11dd\3\2\2\2\u11de\u11df\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0"+
		"\u11e1\7\u03e2\2\2\u11e1\u11e2\7C\2\2\u11e2\u11e3\7n\2\2\u11e3\u11e4\7"+
		"?\2\2\u11e4\u11e9\5\u01fa\u00fe\2\u11e5\u11e6\7\u03e2\2\2\u11e6\u11e8"+
		"\5\u01fa\u00fe\2\u11e7\u11e5\3\2\2\2\u11e8\u11eb\3\2\2\2\u11e9\u11e7\3"+
		"\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11ed\3\2\2\2\u11eb\u11e9\3\2\2\2\u11ec"+
		"\u11c4\3\2\2\2\u11ec\u11db\3\2\2\2\u11ed\u018d\3\2\2\2\u11ee\u11ef\7\u0086"+
		"\2\2\u11ef\u11f0\7\u01df\2\2\u11f0\u11f1\7l\2\2\u11f1\u11f2\5\u01fa\u00fe"+
		"\2\u11f2\u11f3\7?\2\2\u11f3\u11f8\5\u01fa\u00fe\2\u11f4\u11f5\7\u03e2"+
		"\2\2\u11f5\u11f7\5\u01fa\u00fe\2\u11f6\u11f4\3\2\2\2\u11f7\u11fa\3\2\2"+
		"\2\u11f8\u11f6\3\2\2\2\u11f8\u11f9\3\2\2\2\u11f9\u018f\3\2\2\2\u11fa\u11f8"+
		"\3\2\2\2\u11fb\u11fc\7\u008c\2\2\u11fc\u11ff\7\u01d2\2\2\u11fd\u11fe\7"+
		"<\2\2\u11fe\u1200\5\u01fa\u00fe\2\u11ff\u11fd\3\2\2\2\u11ff\u1200\3\2"+
		"\2\2\u1200\u1201\3\2\2\2\u1201\u1204\7\u03d7\2\2\u1202\u1205\5\u0256\u012c"+
		"\2\u1203\u1205\7\u03ef\2\2\u1204\u1202\3\2\2\2\u1204\u1203\3\2\2\2\u1205"+
		"\u0191\3\2\2\2\u1206\u1207\5\u01fa\u00fe\2\u1207\u1208\5\u019a\u00ce\2"+
		"\u1208\u0193\3\2\2\2\u1209\u120a\5\u01fa\u00fe\2\u120a\u120b\7\u0178\2"+
		"\2\u120b\u120c\7\22\2\2\u120c\u120d\7\u01d2\2\2\u120d\u120e\7\u03ef\2"+
		"\2\u120e\u1222\3\2\2\2\u120f\u1210\5\u01fa\u00fe\2\u1210\u1213\7\u0178"+
		"\2\2\u1211\u1212\7\u00b0\2\2\u1212\u1214\5\u020a\u0106\2\u1213\u1211\3"+
		"\2\2\2\u1213\u1214\3\2\2\2\u1214\u1215\3\2\2\2\u1215\u1216\7\22\2\2\u1216"+
		"\u1217\7\u03ef\2\2\u1217\u1222\3\2\2\2\u1218\u1219\5\u01fa\u00fe\2\u1219"+
		"\u121a\7\u0178\2\2\u121a\u121b\7\u00b0\2\2\u121b\u121e\5\u020a\u0106\2"+
		"\u121c\u121d\7\r\2\2\u121d\u121f\7\u03ef\2\2\u121e\u121c\3\2\2\2\u121e"+
		"\u121f\3\2\2\2\u121f\u1222\3\2\2\2\u1220\u1222\5\u01fa\u00fe\2\u1221\u1209"+
		"\3\2\2\2\u1221\u120f\3\2\2\2\u1221\u1218\3\2\2\2\u1221\u1220\3\2\2\2\u1222"+
		"\u0195\3\2\2\2\u1223\u122c\7\u0098\2\2\u1224\u122c\7\u0246\2\2\u1225\u1226"+
		"\7\u0126\2\2\u1226\u122c\7\u03ef\2\2\u1227\u1228\7\u0187\2\2\u1228\u122c"+
		"\7\u03ef\2\2\u1229\u122a\7\u0222\2\2\u122a\u122c\7\u03ef\2\2\u122b\u1223"+
		"\3\2\2\2\u122b\u1224\3\2\2\2\u122b\u1225\3\2\2\2\u122b\u1227\3\2\2\2\u122b"+
		"\u1229\3\2\2\2\u122c\u0197\3\2\2\2\u122d\u122e\7\u01a9\2\2\u122e\u1236"+
		"\5\u0212\u010a\2\u122f\u1230\7\u01ac\2\2\u1230\u1236\5\u0212\u010a\2\u1231"+
		"\u1232\7\u01a8\2\2\u1232\u1236\5\u0212\u010a\2\u1233\u1234\7\u01ad\2\2"+
		"\u1234\u1236\5\u0212\u010a\2\u1235\u122d\3\2\2\2\u1235\u122f\3\2\2\2\u1235"+
		"\u1231\3\2\2\2\u1235\u1233\3\2\2\2\u1236\u0199\3\2\2\2\u1237\u1238\7\u01d2"+
		"\2\2\u1238\u123f\7\u015f\2\2\u1239\u1240\7(\2\2\u123a\u1240\7\u01bc\2"+
		"\2\u123b\u123c\7O\2\2\u123c\u123d\5\u0212\u010a\2\u123d\u123e\7\u0250"+
		"\2\2\u123e\u1240\3\2\2\2\u123f\u1239\3\2\2\2\u123f\u123a\3\2\2\2\u123f"+
		"\u123b\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u019b\3\2\2\2\u1241\u1242\7\u010c"+
		"\2\2\u1242\u1243\t=\2\2\u1243\u019d\3\2\2\2\u1244\u1249\5\u01a0\u00d1"+
		"\2\u1245\u1246\7\u03e0\2\2\u1246\u1247\5\u022c\u0117\2\u1247\u1248\7\u03e1"+
		"\2\2\u1248\u124a\3\2\2\2\u1249\u1245\3\2\2\2\u1249\u124a\3\2\2\2\u124a"+
		"\u019f\3\2\2\2\u124b\u124d\7\b\2\2\u124c\u124e\7\u025e\2\2\u124d\u124c"+
		"\3\2\2\2\u124d\u124e\3\2\2\2\u124e\u1277\3\2\2\2\u124f\u1251\7\t\2\2\u1250"+
		"\u1252\7\u0257\2\2\u1251\u1250\3\2\2\2\u1251\u1252\3\2\2\2\u1252\u1277"+
		"\3\2\2\2\u1253\u125a\7 \2\2\u1254\u1255\7\u022a\2\2\u1255\u125b\7\u0256"+
		"\2\2\u1256\u125b\7\u0257\2\2\u1257\u125b\7\u023e\2\2\u1258\u125b\7\u0238"+
		"\2\2\u1259\u125b\7\u0229\2\2\u125a\u1254\3\2\2\2\u125a\u1256\3\2\2\2\u125a"+
		"\u1257\3\2\2\2\u125a\u1258\3\2\2\2\u125a\u1259\3\2\2\2\u125a\u125b\3\2"+
		"\2\2\u125b\u1277\3\2\2\2\u125c\u1277\7*\2\2\u125d\u1277\7\61\2\2\u125e"+
		"\u1277\7\u015a\2\2\u125f\u1277\7\u0258\2\2\u1260\u1277\7\u0259\2\2\u1261"+
		"\u1262\7C\2\2\u1262\u1277\7n\2\2\u1263\u1277\7J\2\2\u1264\u1277\7N\2\2"+
		"\u1265\u1266\7_\2\2\u1266\u1277\7\u0256\2\2\u1267\u1277\7\u025a\2\2\u1268"+
		"\u1277\7\u01df\2\2\u1269\u1277\7|\2\2\u126a\u1277\7\u025b\2\2\u126b\u126c"+
		"\7\u01f4\2\2\u126c\u1277\t>\2\2\u126d\u1277\7\u008b\2\2\u126e\u126f\7"+
		"\u008e\2\2\u126f\u1277\t?\2\2\u1270\u1277\7\u025c\2\2\u1271\u1277\7\u025d"+
		"\2\2\u1272\u1277\7\u00a1\2\2\u1273\u1277\7\u00a8\2\2\u1274\u1277\7\u00a9"+
		"\2\2\u1275\u1277\7\u025f\2\2\u1276\u124b\3\2\2\2\u1276\u124f\3\2\2\2\u1276"+
		"\u1253\3\2\2\2\u1276\u125c\3\2\2\2\u1276\u125d\3\2\2\2\u1276\u125e\3\2"+
		"\2\2\u1276\u125f\3\2\2\2\u1276\u1260\3\2\2\2\u1276\u1261\3\2\2\2\u1276"+
		"\u1263\3\2\2\2\u1276\u1264\3\2\2\2\u1276\u1265\3\2\2\2\u1276\u1267\3\2"+
		"\2\2\u1276\u1268\3\2\2\2\u1276\u1269\3\2\2\2\u1276\u126a\3\2\2\2\u1276"+
		"\u126b\3\2\2\2\u1276\u126d\3\2\2\2\u1276\u126e\3\2\2\2\u1276\u1270\3\2"+
		"\2\2\u1276\u1271\3\2\2\2\u1276\u1272\3\2\2\2\u1276\u1273\3\2\2\2\u1276"+
		"\u1274\3\2\2\2\u1276\u1275\3\2\2\2\u1277\u01a1\3\2\2\2\u1278\u1289\7\u03ce"+
		"\2\2\u1279\u127a\7\u03ce\2\2\u127a\u127b\7\u03df\2\2\u127b\u1289\7\u03ce"+
		"\2\2\u127c\u127d\5\u020c\u0107\2\u127d\u127e\7\u03df\2\2\u127e\u127f\7"+
		"\u03ce\2\2\u127f\u1289\3\2\2\2\u1280\u1281\5\u020c\u0107\2\u1281\u1282"+
		"\7\u03df\2\2\u1282\u1283\5\u020c\u0107\2\u1283\u1289\3\2\2\2\u1284\u1285"+
		"\5\u020c\u0107\2\u1285\u1286\5\u0210\u0109\2\u1286\u1289\3\2\2\2\u1287"+
		"\u1289\5\u020c\u0107\2\u1288\u1278\3\2\2\2\u1288\u1279\3\2\2\2\u1288\u127c"+
		"\3\2\2\2\u1288\u1280\3\2\2\2\u1288\u1284\3\2\2\2\u1288\u1287\3\2\2\2\u1289"+
		"\u01a3\3\2\2\2\u128a\u128b\5\u01fa\u00fe\2\u128b\u128c\7\u009f\2\2\u128c"+
		"\u128d\5\u01fa\u00fe\2\u128d\u01a5\3\2\2\2\u128e\u1290\7\13\2\2\u128f"+
		"\u1291\t@\2\2\u1290\u128f\3\2\2\2\u1290\u1291\3\2\2\2\u1291\u1292\3\2"+
		"\2\2\u1292\u1293\7\u009c\2\2\u1293\u1294\5\u022e\u0118\2\u1294\u01a7\3"+
		"\2\2\2\u1295\u1296\7\31\2\2\u1296\u1297\7\u009c\2\2\u1297\u129b\5\u022e"+
		"\u0118\2\u1298\u129a\5\u01b0\u00d9\2\u1299\u1298\3\2\2\2\u129a\u129d\3"+
		"\2\2\2\u129b\u1299\3\2\2\2\u129b\u129c\3\2\2\2\u129c\u01a9\3\2\2\2\u129d"+
		"\u129b\3\2\2\2\u129e\u129f\7\u0124\2\2\u129f\u12a0\7\u009c\2\2\u12a0\u12a2"+
		"\5\u022e\u0118\2\u12a1\u12a3\tA\2\2\u12a2\u12a1\3\2\2\2\u12a2\u12a3\3"+
		"\2\2\2\u12a3\u01ab\3\2\2\2\u12a4\u12a6\7m\2\2\u12a5\u12a7\t@\2\2\u12a6"+
		"\u12a5\3\2\2\2\u12a6\u12a7\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12a9\7\u009c"+
		"\2\2\u12a9\u12aa\5\u022e\u0118\2\u12aa\u01ad\3\2\2\2\u12ab\u12ad\7\u01ec"+
		"\2\2\u12ac\u12ae\t@\2\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae"+
		"\u12af\3\2\2\2\u12af\u12b0\7\u009c\2\2\u12b0\u12b2\5\u022e\u0118\2\u12b1"+
		"\u12b3\7\u01e1\2\2\u12b2\u12b1\3\2\2\2\u12b2\u12b3\3\2\2\2\u12b3\u12b5"+
		"\3\2\2\2\u12b4\u12b6\7\u0161\2\2\u12b5\u12b4\3\2\2\2\u12b5\u12b6\3\2\2"+
		"\2\u12b6\u12b8\3\2\2\2\u12b7\u12b9\7\u0239\2\2\u12b8\u12b7\3\2\2\2\u12b8"+
		"\u12b9\3\2\2\2\u12b9\u01af\3\2\2\2\u12ba\u12bb\7<\2\2\u12bb\u12c2\7\u0237"+
		"\2\2\u12bc\u12c2\7\u01e1\2\2\u12bd\u12c2\7\u0163\2\2\u12be\u12c2\7\u01ae"+
		"\2\2\u12bf\u12c2\7\u0161\2\2\u12c0\u12c2\7\u0122\2\2\u12c1\u12ba\3\2\2"+
		"\2\u12c1\u12bc\3\2\2\2\u12c1\u12bd\3\2\2\2\u12c1\u12be\3\2\2\2\u12c1\u12bf"+
		"\3\2\2\2\u12c1\u12c0\3\2\2\2\u12c2\u01b1\3\2\2\2\u12c3\u12c5\7 \2\2\u12c4"+
		"\u12c6\7\u010f\2\2\u12c5\u12c4\3\2\2\2\u12c5\u12c6\3\2\2\2\u12c6\u12c7"+
		"\3\2\2\2\u12c7\u12c8\7\u016e\2\2\u12c8\u12c9\5\u020c\u0107\2\u12c9\u12ca"+
		"\7\u01f8\2\2\u12ca\u12cb\tB\2\2\u12cb\u12cc\7\u020d\2\2\u12cc\u12cd\7"+
		"\u03ef\2\2\u12cd\u01b3\3\2\2\2\u12ce\u12cf\7\u017f\2\2\u12cf\u12d0\7\u01d4"+
		"\2\2\u12d0\u12d1\5\u020c\u0107\2\u12d1\u12d2\7\u020d\2\2\u12d2\u12d3\7"+
		"\u03ef\2\2\u12d3\u01b5\3\2\2\2\u12d4\u12d5\7\u0234\2\2\u12d5\u12d6\7\u01d4"+
		"\2\2\u12d6\u12d7\5\u020c\u0107\2\u12d7\u01b7\3\2\2\2\u12d8\u12d9\7\u008c"+
		"\2\2\u12d9\u12da\5\u01bc\u00df\2\u12da\u12db\tC\2\2\u12db\u12e3\5\u025c"+
		"\u012f\2\u12dc\u12dd\7\u03e2\2\2\u12dd\u12de\5\u01bc\u00df\2\u12de\u12df"+
		"\tC\2\2\u12df\u12e0\5\u025c\u012f\2\u12e0\u12e2\3\2\2\2\u12e1\u12dc\3"+
		"\2\2\2\u12e2\u12e5\3\2\2\2\u12e3\u12e1\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4"+
		"\u1303\3\2\2\2\u12e5\u12e3\3\2\2\2\u12e6\u12ea\7\u008c\2\2\u12e7\u12e8"+
		"\7\30\2\2\u12e8\u12eb\7\u008c\2\2\u12e9\u12eb\7\u02be\2\2\u12ea\u12e7"+
		"\3\2\2\2\u12ea\u12e9\3\2\2\2\u12eb\u12ee\3\2\2\2\u12ec\u12ef\5\u01fe\u0100"+
		"\2\u12ed\u12ef\7(\2\2\u12ee\u12ec\3\2\2\2\u12ee\u12ed\3\2\2\2\u12ef\u1303"+
		"\3\2\2\2\u12f0\u12f1\7\u008c\2\2\u12f1\u12f8\7\u01ba\2\2\u12f2\u12f5\5"+
		"\u01fe\u0100\2\u12f3\u12f4\7\32\2\2\u12f4\u12f6\5\u0200\u0101\2\u12f5"+
		"\u12f3\3\2\2\2\u12f5\u12f6\3\2\2\2\u12f6\u12f9\3\2\2\2\u12f7\u12f9\7("+
		"\2\2\u12f8\u12f2\3\2\2\2\u12f8\u12f7\3\2\2\2\u12f9\u1303\3\2\2\2\u12fa"+
		"\u1303\5\u0190\u00c9\2\u12fb\u1303\5\u0114\u008b\2\u12fc\u1303\5\u0112"+
		"\u008a\2\u12fd\u12fe\7\u008c\2\2\u12fe\u12ff\5\u01f2\u00fa\2\u12ff\u1300"+
		"\tC\2\2\u1300\u1301\5\u025c\u012f\2\u1301\u1303\3\2\2\2\u1302\u12d8\3"+
		"\2\2\2\u1302\u12e6\3\2\2\2\u1302\u12f0\3\2\2\2\u1302\u12fa\3\2\2\2\u1302"+
		"\u12fb\3\2\2\2\u1302\u12fc\3\2\2\2\u1302\u12fd\3\2\2\2\u1303\u01b9\3\2"+
		"\2\2\u1304\u1305\7\u008e\2\2\u1305\u1306\t\62\2\2\u1306\u139c\7\u0192"+
		"\2\2\u1307\u1308\7\u008e\2\2\u1308\u1309\tD\2\2\u1309\u130c\7\u015b\2"+
		"\2\u130a\u130b\7I\2\2\u130b\u130d\7\u03ef\2\2\u130c\u130a\3\2\2\2\u130c"+
		"\u130d\3\2\2\2\u130d\u1310\3\2\2\2\u130e\u130f\7?\2\2\u130f\u1311\5\u0212"+
		"\u010a\2\u1310\u130e\3\2\2\2\u1310\u1311\3\2\2\2\u1311\u1319\3\2\2\2\u1312"+
		"\u1316\7[\2\2\u1313\u1314\5\u0212\u010a\2\u1314\u1315\7\u03e2\2\2\u1315"+
		"\u1317\3\2\2\2\u1316\u1313\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1318\3\2"+
		"\2\2\u1318\u131a\5\u0212\u010a\2\u1319\u1312\3\2\2\2\u1319\u131a\3\2\2"+
		"\2\u131a\u139c\3\2\2\2\u131b\u131c\7\u008e\2\2\u131c\u131e\5\u01be\u00e0"+
		"\2\u131d\u131f\5\u01c0\u00e1\2\u131e\u131d\3\2\2\2\u131e\u131f\3\2\2\2"+
		"\u131f\u139c\3\2\2\2\u1320\u1322\7\u008e\2\2\u1321\u1323\7\u016d\2\2\u1322"+
		"\u1321\3\2\2\2\u1322\u1323\3\2\2\2\u1323\u1324\3\2\2\2\u1324\u1325\t$"+
		"\2\2\u1325\u1326\tE\2\2\u1326\u1329\5\u01f4\u00fb\2\u1327\u1328\tE\2\2"+
		"\u1328\u132a\5\u020c\u0107\2\u1329\u1327\3\2\2\2\u1329\u132a\3\2\2\2\u132a"+
		"\u132c\3\2\2\2\u132b\u132d\5\u01c0\u00e1\2\u132c\u132b\3\2\2\2\u132c\u132d"+
		"\3\2\2\2\u132d\u139c\3\2\2\2\u132e\u132f\7\u008e\2\2\u132f\u1330\7 \2"+
		"\2\u1330\u1332\t\2\2\2\u1331\u1333\5\u0244\u0123\2\u1332\u1331\3\2\2\2"+
		"\u1332\u1333\3\2\2\2\u1333\u1334\3\2\2\2\u1334\u139c\5\u020c\u0107\2\u1335"+
		"\u1336\7\u008e\2\2\u1336\u1337\7 \2\2\u1337\u1338\tF\2\2\u1338\u139c\5"+
		"\u01f2\u00fa\2\u1339\u133a\7\u008e\2\2\u133a\u133b\7 \2\2\u133b\u133c"+
		"\7\u0238\2\2\u133c\u139c\5\u01fa\u00fe\2\u133d\u133e\7\u008e\2\2\u133e"+
		"\u133f\7\u0154\2\2\u133f\u1340\5\u0202\u0102\2\u1340\u1341\tG\2\2\u1341"+
		"\u139c\3\2\2\2\u1342\u1343\7\u008e\2\2\u1343\u139c\5\u01c2\u00e2\2\u1344"+
		"\u1345\7\u008e\2\2\u1345\u1346\tH\2\2\u1346\u134a\7[\2\2\u1347\u1348\5"+
		"\u0212\u010a\2\u1348\u1349\7\u03e2\2\2\u1349\u134b\3\2\2\2\u134a\u1347"+
		"\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134c\3\2\2\2\u134c\u139c\5\u0212\u010a"+
		"\2\u134d\u134e\7\u008e\2\2\u134e\u134f\7\u00e6\2\2\u134f\u1350\7\u03e0"+
		"\2\2\u1350\u1351\7\u03ce\2\2\u1351\u1352\7\u03e1\2\2\u1352\u139c\tH\2"+
		"\2\u1353\u1354\7\u008e\2\2\u1354\u1357\5\u01c4\u00e3\2\u1355\u1356\tE"+
		"\2\2\u1356\u1358\5\u020c\u0107\2\u1357\u1355\3\2\2\2\u1357\u1358\3\2\2"+
		"\2\u1358\u135a\3\2\2\2\u1359\u135b\5\u01c0\u00e1\2\u135a\u1359\3\2\2\2"+
		"\u135a\u135b\3\2\2\2\u135b\u139c\3\2\2\2\u135c\u135d\7\u008e\2\2\u135d"+
		"\u135e\tI\2\2\u135e\u135f\7\u012b\2\2\u135f\u139c\5\u01f2\u00fa\2\u1360"+
		"\u1361\7\u008e\2\2\u1361\u1364\7\u0171\2\2\u1362\u1363\7<\2\2\u1363\u1365"+
		"\5\u01fa\u00fe\2\u1364\u1362\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u139c\3"+
		"\2\2\2\u1366\u1367\7\u008e\2\2\u1367\u1368\tJ\2\2\u1368\u1369\tE\2\2\u1369"+
		"\u136c\5\u01f4\u00fb\2\u136a\u136b\tE\2\2\u136b\u136d\5\u020c\u0107\2"+
		"\u136c\u136a\3\2\2\2\u136c\u136d\3\2\2\2\u136d\u1370\3\2\2\2\u136e\u136f"+
		"\7\u00ae\2\2\u136f\u1371\5\u025c\u012f\2\u1370\u136e\3\2\2\2\u1370\u1371"+
		"\3\2\2\2\u1371\u139c\3\2\2\2\u1372\u1373\7\u008e\2\2\u1373\u1374\7\u01c8"+
		"\2\2\u1374\u1377\7\u0256\2\2\u1375\u1376\tE\2\2\u1376\u1378\5\u020c\u0107"+
		"\2\u1377\u1375\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u137a\3\2\2\2\u1379\u137b"+
		"\5\u01c0\u00e1\2\u137a\u1379\3\2\2\2\u137a\u137b\3\2\2\2\u137b\u139c\3"+
		"\2\2\2\u137c\u137d\7\u008e\2\2\u137d\u137e\7\u01dd\2\2\u137e\u1383\5\u01c6"+
		"\u00e4\2\u137f\u1380\7\u03e2\2\2\u1380\u1382\5\u01c6\u00e4\2\u1381\u137f"+
		"\3\2\2\2\u1382\u1385\3\2\2\2\u1383\u1381\3\2\2\2\u1383\u1384\3\2\2\2\u1384"+
		"\u1389\3\2\2\2\u1385\u1383\3\2\2\2\u1386\u1387\7<\2\2\u1387\u1388\7\u01e0"+
		"\2\2\u1388\u138a\5\u0212\u010a\2\u1389\u1386\3\2\2\2\u1389\u138a\3\2\2"+
		"\2\u138a\u138b\3\2\2\2\u138b\u138f\7[\2\2\u138c\u138d\5\u0212\u010a\2"+
		"\u138d\u138e\7\u03e2\2\2\u138e\u1390\3\2\2\2\u138f\u138c\3\2\2\2\u138f"+
		"\u1390\3\2\2\2\u1390\u1391\3\2\2\2\u1391\u1392\5\u0212\u010a\2\u1392\u139c"+
		"\3\2\2\2\u1393\u1394\7\u008e\2\2\u1394\u1395\7\u0208\2\2\u1395\u1399\7"+
		"\u021c\2\2\u1396\u1397\7<\2\2\u1397\u1398\7\u0123\2\2\u1398\u139a\7\u03ef"+
		"\2\2\u1399\u1396\3\2\2\2\u1399\u139a\3\2\2\2\u139a\u139c\3\2\2\2\u139b"+
		"\u1304\3\2\2\2\u139b\u1307\3\2\2\2\u139b\u131b\3\2\2\2\u139b\u1320\3\2"+
		"\2\2\u139b\u132e\3\2\2\2\u139b\u1335\3\2\2\2\u139b\u1339\3\2\2\2\u139b"+
		"\u133d\3\2\2\2\u139b\u1342\3\2\2\2\u139b\u1344\3\2\2\2\u139b\u134d\3\2"+
		"\2\2\u139b\u1353\3\2\2\2\u139b\u135c\3\2\2\2\u139b\u1360\3\2\2\2\u139b"+
		"\u1366\3\2\2\2\u139b\u1372\3\2\2\2\u139b\u137c\3\2\2\2\u139b\u1393\3\2"+
		"\2\2\u139c\u01bb\3\2\2\2\u139d\u13a8\7\u03fa\2\2\u139e\u13a8\7\u03fb\2"+
		"\2\u139f\u13a0\7\u03e4\2\2\u13a0\u13a2\7\u03e4\2\2\u13a1\u139f\3\2\2\2"+
		"\u13a1\u13a2\3\2\2\2\u13a2\u13a3\3\2\2\2\u13a3\u13a5\tK\2\2\u13a4\u13a1"+
		"\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a8\5\u020c\u0107"+
		"\2\u13a7\u139d\3\2\2\2\u13a7\u139e\3\2\2\2\u13a7\u13a4\3\2\2\2\u13a8\u01bd"+
		"\3\2\2\2\u13a9\u13aa\7\30\2\2\u13aa\u13b7\7\u008c\2\2\u13ab\u13b7\7\u02c1"+
		"\2\2\u13ac\u13b7\7&\2\2\u13ad\u13b7\7\u008a\2\2\u13ae\u13af\7\u016e\2"+
		"\2\u13af\u13b7\7\u021c\2\2\u13b0\u13b1\7w\2\2\u13b1\u13b7\7\u021c\2\2"+
		"\u13b2\u13b4\t\61\2\2\u13b3\u13b2\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4\u13b5"+
		"\3\2\2\2\u13b5\u13b7\tL\2\2\u13b6\u13a9\3\2\2\2\u13b6\u13ab\3\2\2\2\u13b6"+
		"\u13ac\3\2\2\2\u13b6\u13ad\3\2\2\2\u13b6\u13ae\3\2\2\2\u13b6\u13b0\3\2"+
		"\2\2\u13b6\u13b3\3\2\2\2\u13b7\u01bf\3\2\2\2\u13b8\u13b9\7Z\2\2\u13b9"+
		"\u13bd\7\u03ef\2\2\u13ba\u13bb\7\u00ae\2\2\u13bb\u13bd\5\u025c\u012f\2"+
		"\u13bc\u13b8\3\2\2\2\u13bc\u13ba\3\2\2\2\u13bd\u01c1\3\2\2\2\u13be\u13c0"+
		"\7\u021e\2\2\u13bf\u13be\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u13c1\3\2\2"+
		"\2\u13c1\u13d0\7\u0155\2\2\u13c2\u13c3\7\u0193\2\2\u13c3\u13d0\7\u021c"+
		"\2\2\u13c4\u13d0\7\u01d6\2\2\u13c5\u13d0\7\u025e\2\2\u13c6\u13c8\7\u016d"+
		"\2\2\u13c7\u13c6\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u13c9\3\2\2\2\u13c9"+
		"\u13d0\7\u01dc\2\2\u13ca\u13d0\7\u01de\2\2\u13cb\u13cc\7\u0208\2\2\u13cc"+
		"\u13d0\7\u0177\2\2\u13cd\u13d0\7\u0113\2\2\u13ce\u13d0\7\u013d\2\2\u13cf"+
		"\u13bf\3\2\2\2\u13cf\u13c2\3\2\2\2\u13cf\u13c4\3\2\2\2\u13cf\u13c5\3\2"+
		"\2\2\u13cf\u13c7\3\2\2\2\u13cf\u13ca\3\2\2\2\u13cf\u13cb\3\2\2\2\u13cf"+
		"\u13cd\3\2\2\2\u13cf\u13ce\3\2\2\2\u13d0\u01c3\3\2\2\2\u13d1\u13da\7\u015b"+
		"\2\2\u13d2\u13d3\7\u009c\2\2\u13d3\u13da\7\u021c\2\2\u13d4\u13d6\7\u016d"+
		"\2\2\u13d5\u13d4\3\2\2\2\u13d5\u13d6\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7"+
		"\u13da\7\u0256\2\2\u13d8\u13da\7\u022f\2\2\u13d9\u13d1\3\2\2\2\u13d9\u13d2"+
		"\3\2\2\2\u13d9\u13d5\3\2\2\2\u13d9\u13d8\3\2\2\2\u13da\u01c5\3\2\2\2\u13db"+
		"\u13e8\7\b\2\2\u13dc\u13dd\7\u011b\2\2\u13dd\u13e8\7\u0183\2\2\u13de\u13df"+
		"\7\u013c\2\2\u13df\u13e8\7\u0227\2\2\u13e0\u13e8\7\u013f\2\2\u13e1\u13e8"+
		"\7\u0185\2\2\u13e2\u13e8\7\u028d\2\2\u13e3\u13e4\7\u01cd\2\2\u13e4\u13e8"+
		"\7\u0164\2\2\u13e5\u13e8\7\u020f\2\2\u13e6\u13e8\7\u0226\2\2\u13e7\u13db"+
		"\3\2\2\2\u13e7\u13dc\3\2\2\2\u13e7\u13de\3\2\2\2\u13e7\u13e0\3\2\2\2\u13e7"+
		"\u13e1\3\2\2\2\u13e7\u13e2\3\2\2\2\u13e7\u13e3\3\2\2\2\u13e7\u13e5\3\2"+
		"\2\2\u13e7\u13e6\3\2\2\2\u13e8\u01c7\3\2\2\2\u13e9\u13ea\7\u0119\2\2\u13ea"+
		"\u13eb\7\u03ef\2\2\u13eb\u01c9\3\2\2\2\u13ec\u13ed\7\u011f\2\2\u13ed\u13ee"+
		"\7J\2\2\u13ee\u13f3\5\u01d6\u00ec\2\u13ef\u13f0\7\u03e2\2\2\u13f0\u13f2"+
		"\5\u01d6\u00ec\2\u13f1\u13ef\3\2\2\2\u13f2\u13f5\3\2\2\2\u13f3\u13f1\3"+
		"\2\2\2\u13f3\u13f4\3\2\2\2\u13f4\u13fd\3\2\2\2\u13f5\u13f3\3\2\2\2\u13f6"+
		"\u13f7\7u\2\2\u13f7\u13fa\7\u03e0\2\2\u13f8\u13fb\5\u022c\u0117\2\u13f9"+
		"\u13fb\7\b\2\2\u13fa\u13f8\3\2\2\2\u13fa\u13f9\3\2\2\2\u13fb\u13fc\3\2"+
		"\2\2\u13fc\u13fe\7\u03e1\2\2\u13fd\u13f6\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe"+
		"\u13ff\3\2\2\2\u13ff\u1400\7I\2\2\u1400\u1401\5\u020c\u0107\2\u1401\u01cb"+
		"\3\2\2\2\u1402\u1404\7\u016a\2\2\u1403\u1405\t@\2\2\u1404\u1403\3\2\2"+
		"\2\u1404\u1405\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u140b\5\u01d8\u00ed\2"+
		"\u1407\u1408\7\u03e2\2\2\u1408\u140a\5\u01d8\u00ed\2\u1409\u1407\3\2\2"+
		"\2\u140a\u140d\3\2\2\2\u140b\u1409\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u01cd"+
		"\3\2\2\2\u140d\u140b\3\2\2\2\u140e\u1410\7V\2\2\u140f\u1411\tM\2\2\u1410"+
		"\u140f\3\2\2\2\u1410\u1411\3\2\2\2\u1411\u1413\3\2\2\2\u1412\u1414\5\u0212"+
		"\u010a\2\u1413\u1412\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u1413\3\2\2\2\u1415"+
		"\u1416\3\2\2\2\u1416\u01cf\3\2\2\2\u1417\u1418\7^\2\2\u1418\u1419\7J\2"+
		"\2\u1419\u141a\7P\2\2\u141a\u141b\7\u011f\2\2\u141b\u1420\5\u01dc\u00ef"+
		"\2\u141c\u141d\7\u03e2\2\2\u141d\u141f\5\u01dc\u00ef\2\u141e\u141c\3\2"+
		"\2\2\u141f\u1422\3\2\2\2\u1420\u141e\3\2\2\2\u1420\u1421\3\2\2\2\u1421"+
		"\u01d1\3\2\2\2\u1422\u1420\3\2\2\2\u1423\u1424\7\u01f5\2\2\u1424\u1425"+
		"\7\u01e0\2\2\u1425\u1426\7\u011f\2\2\u1426\u01d3\3\2\2\2\u1427\u1428\7"+
		"\u025c\2\2\u1428\u01d5\3\2\2\2\u1429\u1431\5\u01f4\u00fb\2\u142a\u142c"+
		"\t\24\2\2\u142b\u142a\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142d\3\2\2\2"+
		"\u142d\u142e\7\u03e0\2\2\u142e\u142f\5\u022c\u0117\2\u142f\u1430\7\u03e1"+
		"\2\2\u1430\u1432\3\2\2\2\u1431\u142b\3\2\2\2\u1431\u1432\3\2\2\2\u1432"+
		"\u01d7\3\2\2\2\u1433\u1446\7\u0147\2\2\u1434\u1446\7\u0177\2\2\u1435\u1437"+
		"\tN\2\2\u1436\u1435\3\2\2\2\u1436\u1437\3\2\2\2\u1437\u1438\3\2\2\2\u1438"+
		"\u1446\7\u0192\2\2\u1439\u1446\7\u01c9\2\2\u143a\u1446\7\u025e\2\2\u143b"+
		"\u143c\7\u01e0\2\2\u143c\u1446\7\u011f\2\2\u143d\u1446\7\u021c\2\2\u143e"+
		"\u1446\7\u023a\2\2\u143f\u1443\7\u0256\2\2\u1440\u1441\7\u00b0\2\2\u1441"+
		"\u1442\7z\2\2\u1442\u1444\7_\2\2\u1443\u1440\3\2\2\2\u1443\u1444\3\2\2"+
		"\2\u1444\u1446\3\2\2\2\u1445\u1433\3\2\2\2\u1445\u1434\3\2\2\2\u1445\u1436"+
		"\3\2\2\2\u1445\u1439\3\2\2\2\u1445\u143a\3\2\2\2\u1445\u143b\3\2\2\2\u1445"+
		"\u143d\3\2\2\2\u1445\u143e\3\2\2\2\u1445\u143f\3\2\2\2\u1446\u1452\3\2"+
		"\2\2\u1447\u1448\7\u01e6\2\2\u1448\u144a\7\u0192\2\2\u1449\u144b\5\u013a"+
		"\u009e\2\u144a\u1449\3\2\2\2\u144a\u144b\3\2\2\2\u144b\u1452\3\2\2\2\u144c"+
		"\u144d\7\u0256\2\2\u144d\u144f\5\u022e\u0118\2\u144e\u1450\5\u01da\u00ee"+
		"\2\u144f\u144e\3\2\2\2\u144f\u1450\3\2\2\2\u1450\u1452\3\2\2\2\u1451\u1445"+
		"\3\2\2\2\u1451\u1447\3\2\2\2\u1451\u144c\3\2\2\2\u1452\u01d9\3\2\2\2\u1453"+
		"\u1454\7\u00b0\2\2\u1454\u1455\7z\2\2\u1455\u1459\7_\2\2\u1456\u1457\7"+
		"<\2\2\u1457\u1459\7\u0160\2\2\u1458\u1453\3\2\2\2\u1458\u1456\3\2\2\2"+
		"\u1459\u01db\3\2\2\2\u145a\u1462\5\u01f4\u00fb\2\u145b\u145c\7u\2\2\u145c"+
		"\u145f\7\u03e0\2\2\u145d\u1460\5\u022c\u0117\2\u145e\u1460\7\b\2\2\u145f"+
		"\u145d\3\2\2\2\u145f\u145e\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1463\7\u03e1"+
		"\2\2\u1462\u145b\3\2\2\2\u1462\u1463\3\2\2\2\u1463\u146b\3\2\2\2\u1464"+
		"\u1466\t\24\2\2\u1465\u1464\3\2\2\2\u1465\u1466\3\2\2\2\u1466\u1467\3"+
		"\2\2\2\u1467\u1468\7\u03e0\2\2\u1468\u1469\5\u022c\u0117\2\u1469\u146a"+
		"\7\u03e1\2\2\u146a\u146c\3\2\2\2\u146b\u1465\3\2\2\2\u146b\u146c\3\2\2"+
		"\2\u146c\u146f\3\2\2\2\u146d\u146e\7H\2\2\u146e\u1470\7\u018c\2\2\u146f"+
		"\u146d\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u01dd\3\2\2\2\u1471\u1472\tO"+
		"\2\2\u1472\u1475\5\u01f4\u00fb\2\u1473\u1476\5\u020c\u0107\2\u1474\u1476"+
		"\7\u03ef\2\2\u1475\u1473\3\2\2\2\u1475\u1474\3\2\2\2\u1475\u1476\3\2\2"+
		"\2\u1476\u01df\3\2\2\2\u1477\u147b\tO\2\2\u1478\u1479\tP\2\2\u1479\u147a"+
		"\7\u03d7\2\2\u147a\u147c\tQ\2\2\u147b\u1478\3\2\2\2\u147b\u147c\3\2\2"+
		"\2\u147c\u147d\3\2\2\2\u147d\u147e\5\u01f0\u00f9\2\u147e\u01e1\3\2\2\2"+
		"\u147f\u1480\7\u0175\2\2\u1480\u1481\7\u03ef\2\2\u1481\u01e3\3\2\2\2\u1482"+
		"\u1483\7\u00aa\2\2\u1483\u1484\5\u020c\u0107\2\u1484\u01e5\3\2\2\2\u1485"+
		"\u148d\7\u008f\2\2\u1486\u1488\7\u0093\2\2\u1487\u1489\7\u023c\2\2\u1488"+
		"\u1487\3\2\2\2\u1488\u1489\3\2\2\2\u1489\u148a\3\2\2\2\u148a\u148e\5\u0216"+
		"\u010c\2\u148b\u148e\7\u03f7\2\2\u148c\u148e\7\u03f8\2\2\u148d\u1486\3"+
		"\2\2\2\u148d\u148b\3\2\2\2\u148d\u148c\3\2\2\2\u148e\u1498\3\2\2\2\u148f"+
		"\u1490\7\u008c\2\2\u1490\u1495\5\u01ea\u00f6\2\u1491\u1492\7\u03e2\2\2"+
		"\u1492\u1494\5\u01ea\u00f6\2\u1493\u1491\3\2\2\2\u1494\u1497\3\2\2\2\u1495"+
		"\u1493\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u1499\3\2\2\2\u1497\u1495\3\2"+
		"\2\2\u1498\u148f\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u01e7\3\2\2\2\u149a"+
		"\u14a2\7\u0083\2\2\u149b\u149d\7\u0093\2\2\u149c\u149e\7\u023c\2\2\u149d"+
		"\u149c\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14a3\5\u0216"+
		"\u010c\2\u14a0\u14a3\7\u03f7\2\2\u14a1\u14a3\7\u03f8\2\2\u14a2\u149b\3"+
		"\2\2\2\u14a2\u14a0\3\2\2\2\u14a2\u14a1\3\2\2\2\u14a2\u14a3\3\2\2\2\u14a3"+
		"\u14ad\3\2\2\2\u14a4\u14a5\7\u008c\2\2\u14a5\u14aa\5\u01ea\u00f6\2\u14a6"+
		"\u14a7\7\u03e2\2\2\u14a7\u14a9\5\u01ea\u00f6\2\u14a8\u14a6\3\2\2\2\u14a9"+
		"\u14ac\3\2\2\2\u14aa\u14a8\3\2\2\2\u14aa\u14ab\3\2\2\2\u14ab\u14ae\3\2"+
		"\2\2\u14ac\u14aa\3\2\2\2\u14ad\u14a4\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae"+
		"\u01e9\3\2\2\2\u14af\u14b0\tR\2\2\u14b0\u14b3\7\u03d7\2\2\u14b1\u14b4"+
		"\5\u0216\u010c\2\u14b2\u14b4\7\u03f0\2\2\u14b3\u14b1\3\2\2\2\u14b3\u14b2"+
		"\3\2\2\2\u14b4\u01eb\3\2\2\2\u14b5\u14b7\7B\2\2\u14b6\u14b8\tS\2\2\u14b7"+
		"\u14b6\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14b9\3\2\2\2\u14b9\u14d9\7."+
		"\2\2\u14ba\u14bb\5\u01bc\u00df\2\u14bb\u14bc\7\u03d7\2\2\u14bc\u14c4\t"+
		"T\2\2\u14bd\u14be\7\u03e2\2\2\u14be\u14bf\5\u01bc\u00df\2\u14bf\u14c0"+
		"\7\u03d7\2\2\u14c0\u14c1\tT\2\2\u14c1\u14c3\3\2\2\2\u14c2\u14bd\3\2\2"+
		"\2\u14c3\u14c6\3\2\2\2\u14c4\u14c2\3\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14da"+
		"\3\2\2\2\u14c6\u14c4\3\2\2\2\u14c7\u14ca\7\34\2\2\u14c8\u14cb\5\u0212"+
		"\u010a\2\u14c9\u14cb\5\u01bc\u00df\2\u14ca\u14c8\3\2\2\2\u14ca\u14c9\3"+
		"\2\2\2\u14cb\u14cc\3\2\2\2\u14cc\u14cd\5\u01bc\u00df\2\u14cd\u14ce\7\u03d7"+
		"\2\2\u14ce\u14d6\5\u01ee\u00f8\2\u14cf\u14d0\7\u03e2\2\2\u14d0\u14d1\5"+
		"\u01bc\u00df\2\u14d1\u14d2\7\u03d7\2\2\u14d2\u14d3\5\u01ee\u00f8\2\u14d3"+
		"\u14d5\3\2\2\2\u14d4\u14cf\3\2\2\2\u14d5\u14d8\3\2\2\2\u14d6\u14d4\3\2"+
		"\2\2\u14d6\u14d7\3\2\2\2\u14d7\u14da\3\2\2\2\u14d8\u14d6\3\2\2\2\u14d9"+
		"\u14ba\3\2\2\2\u14d9\u14c7\3\2\2\2\u14da\u01ed\3\2\2\2\u14db\u14dc\tU"+
		"\2\2\u14dc\u01ef\3\2\2\2\u14dd\u14e3\5\u00b4[\2\u14de\u14e3\5\u00a6T\2"+
		"\u14df\u14e3\5\u00acW\2\u14e0\u14e3\5\u00b2Z\2\u14e1\u14e3\5\u00b6\\\2"+
		"\u14e2\u14dd\3\2\2\2\u14e2\u14de\3\2\2\2\u14e2\u14df\3\2\2\2\u14e2\u14e0"+
		"\3\2\2\2\u14e2\u14e1\3\2\2\2\u14e3\u14e8\3\2\2\2\u14e4\u14e5\7<\2\2\u14e5"+
		"\u14e6\7\u0136\2\2\u14e6\u14e8\5\u020c\u0107\2\u14e7\u14e2\3\2\2\2\u14e7"+
		"\u14e4\3\2\2\2\u14e8\u01f1\3\2\2\2\u14e9\u14ed\5\u020c\u0107\2\u14ea\u14ee"+
		"\7\u03f6\2\2\u14eb\u14ec\7\u03df\2\2\u14ec\u14ee\5\u020c\u0107\2\u14ed"+
		"\u14ea\3\2\2\2\u14ed\u14eb\3\2\2\2\u14ed\u14ee\3\2\2\2\u14ee\u01f3\3\2"+
		"\2\2\u14ef\u14f0\5\u01f2\u00fa\2\u14f0\u01f5\3\2\2\2\u14f1\u14f6\5\u020c"+
		"\u0107\2\u14f2\u14f4\5\u0210\u0109\2\u14f3\u14f5\5\u0210\u0109\2\u14f4"+
		"\u14f3\3\2\2\2\u14f4\u14f5\3\2\2\2\u14f5\u14f7\3\2\2\2\u14f6\u14f2\3\2"+
		"\2\2\u14f6\u14f7\3\2\2\2\u14f7\u01f7\3\2\2\2\u14f8\u14fb\5\u020c\u0107"+
		"\2\u14f9\u14fb\7\u03ef\2\2\u14fa\u14f8\3\2\2\2\u14fa\u14f9\3\2\2\2\u14fb"+
		"\u1500\3\2\2\2\u14fc\u14fd\7\u03e0\2\2\u14fd\u14fe\5\u0212\u010a\2\u14fe"+
		"\u14ff\7\u03e1\2\2\u14ff\u1501\3\2\2\2\u1500\u14fc\3\2\2\2\u1500\u1501"+
		"\3\2\2\2\u1501\u1503\3\2\2\2\u1502\u1504\t+\2\2\u1503\u1502\3\2\2\2\u1503"+
		"\u1504\3\2\2\2\u1504\u01f9\3\2\2\2\u1505\u1506\tV\2\2\u1506\u01fb\3\2"+
		"\2\2\u1507\u1508\tW\2\2\u1508\u01fd\3\2\2\2\u1509\u150e\7\u00ca\2\2\u150a"+
		"\u150e\5\u026e\u0138\2\u150b\u150e\7\u03ef\2\2\u150c\u150e\7\u03ec\2\2"+
		"\u150d\u1509\3\2\2\2\u150d\u150a\3\2\2\2\u150d\u150b\3\2\2\2\u150d\u150c"+
		"\3\2\2\2\u150e\u01ff\3\2\2\2\u150f\u1512\5\u020c\u0107\2\u1510\u1512\7"+
		"\u03ef\2\2\u1511\u150f\3\2\2\2\u1511\u1510\3\2\2\2\u1512\u0201\3\2\2\2"+
		"\u1513\u1514\tX\2\2\u1514\u0203\3\2\2\2\u1515\u1516\5\u0212\u010a\2\u1516"+
		"\u1517\7\u03d3\2\2\u1517\u1518\5\u0212\u010a\2\u1518\u1519\7\u03d3\2\2"+
		"\u1519\u151a\5\u0212\u010a\2\u151a\u151b\7\u03d3\2\2\u151b\u151c\5\u0212"+
		"\u010a\2\u151c\u151d\7\u03d3\2\2\u151d\u1523\5\u0212\u010a\2\u151e\u151f"+
		"\7\u03eb\2\2\u151f\u1520\5\u0212\u010a\2\u1520\u1521\7\u03d3\2\2\u1521"+
		"\u1522\5\u0212\u010a\2\u1522\u1524\3\2\2\2\u1523\u151e\3\2\2\2\u1524\u1525"+
		"\3\2\2\2\u1525\u1523\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u0205\3\2\2\2\u1527"+
		"\u152e\5\u0208\u0105\2\u1528\u1529\7\u03e2\2\2\u1529\u152c\5\u0208\u0105"+
		"\2\u152a\u152b\7\u03e2\2\2\u152b\u152d\5\u0212\u010a\2\u152c\u152a\3\2"+
		"\2\2\u152c\u152d\3\2\2\2\u152d\u152f\3\2\2\2\u152e\u1528\3\2\2\2\u152e"+
		"\u152f\3\2\2\2\u152f\u0207\3\2\2\2\u1530\u1538\7\u03ef\2\2\u1531\u1538"+
		"\7\u03f4\2\2\u1532\u1534\7\u03f1\2\2\u1533\u1532\3\2\2\2\u1534\u1535\3"+
		"\2\2\2\u1535\u1533\3\2\2\2\u1535\u1536\3\2\2\2\u1536\u1538\3\2\2\2\u1537"+
		"\u1530\3\2\2\2\u1537\u1531\3\2\2\2\u1537\u1533\3\2\2\2\u1538\u0209\3\2"+
		"\2\2\u1539\u153c\5\u020c\u0107\2\u153a\u153c\7\u03ef\2\2\u153b\u1539\3"+
		"\2\2\2\u153b\u153a\3\2\2\2\u153c\u020b\3\2\2\2\u153d\u1541\5\u020e\u0108"+
		"\2\u153e\u1541\7\u03f8\2\2\u153f\u1541\7\u03ec\2\2\u1540\u153d\3\2\2\2"+
		"\u1540\u153e\3\2\2\2\u1540\u153f\3\2\2\2\u1541\u020d\3\2\2\2\u1542\u154c"+
		"\7\u03f7\2\2\u1543\u154c\5\u026e\u0138\2\u1544\u154c\5\u0270\u0139\2\u1545"+
		"\u154c\5\u0202\u0102\2\u1546\u154c\5\u0272\u013a\2\u1547\u154c\5\u0274"+
		"\u013b\2\u1548\u154c\5\u0276\u013c\2\u1549\u154c\5\u0278\u013d\2\u154a"+
		"\u154c\5\u027a\u013e\2\u154b\u1542\3\2\2\2\u154b\u1543\3\2\2\2\u154b\u1544"+
		"\3\2\2\2\u154b\u1545\3\2\2\2\u154b\u1546\3\2\2\2\u154b\u1547\3\2\2\2\u154b"+
		"\u1548\3\2\2\2\u154b\u1549\3\2\2\2\u154b\u154a\3\2\2\2\u154c\u020f\3\2"+
		"\2\2\u154d\u1551\7\u03f6\2\2\u154e\u154f\7\u03df\2\2\u154f\u1551\5\u020c"+
		"\u0107\2\u1550\u154d\3\2\2\2\u1550\u154e\3\2\2\2\u1551\u0211\3\2\2\2\u1552"+
		"\u1553\tY\2\2\u1553\u0213\3\2\2\2\u1554\u1557\7\u03ed\2\2\u1555\u1557"+
		"\5\u0212\u010a\2\u1556\u1554\3\2\2\2\u1556\u1555\3\2\2\2\u1557\u0215\3"+
		"\2\2\2\u1558\u155a\7\u03f5\2\2\u1559\u1558\3\2\2\2\u1559\u155a\3\2\2\2"+
		"\u155a\u155b\3\2\2\2\u155b\u155e\7\u03ef\2\2\u155c\u155e\7\u03ee\2\2\u155d"+
		"\u1559\3\2\2\2\u155d\u155c\3\2\2\2\u155e\u1560\3\2\2\2\u155f\u1561\7\u03ef"+
		"\2\2\u1560\u155f\3\2\2\2\u1561\u1562\3\2\2\2\u1562\u1560\3\2\2\2\u1562"+
		"\u1563\3\2\2\2\u1563\u1570\3\2\2\2\u1564\u1566\7\u03f5\2\2\u1565\u1564"+
		"\3\2\2\2\u1565\u1566\3\2\2\2\u1566\u1567\3\2\2\2\u1567\u156a\7\u03ef\2"+
		"\2\u1568\u156a\7\u03ee\2\2\u1569\u1565\3\2\2\2\u1569\u1568\3\2\2\2\u156a"+
		"\u156d\3\2\2\2\u156b\u156c\7\32\2\2\u156c\u156e\5\u0200\u0101\2\u156d"+
		"\u156b\3\2\2\2\u156d\u156e\3\2\2\2\u156e\u1570\3\2\2\2\u156f\u155d\3\2"+
		"\2\2\u156f\u1569\3\2\2\2\u1570\u0217\3\2\2\2\u1571\u1572\tZ\2\2\u1572"+
		"\u0219\3\2\2\2\u1573\u1575\7\u03f5\2\2\u1574\u1573\3\2\2\2\u1574\u1575"+
		"\3\2\2\2\u1575\u1576\3\2\2\2\u1576\u1577\7\u03f1\2\2\u1577\u021b\3\2\2"+
		"\2\u1578\u157a\7h\2\2\u1579\u1578\3\2\2\2\u1579\u157a\3\2\2\2\u157a\u157b"+
		"\3\2\2\2\u157b\u157c\t[\2\2\u157c\u021d\3\2\2\2\u157d\u158a\5\u0216\u010c"+
		"\2\u157e\u158a\5\u0212\u010a\2\u157f\u1580\7\u03d3\2\2\u1580\u158a\5\u0212"+
		"\u010a\2\u1581\u158a\5\u021a\u010e\2\u1582\u158a\5\u0218\u010d\2\u1583"+
		"\u158a\7\u03f2\2\2\u1584\u158a\7\u03f4\2\2\u1585\u1587\7h\2\2\u1586\u1585"+
		"\3\2\2\2\u1586\u1587\3\2\2\2\u1587\u1588\3\2\2\2\u1588\u158a\t[\2\2\u1589"+
		"\u157d\3\2\2\2\u1589\u157e\3\2\2\2\u1589\u157f\3\2\2\2\u1589\u1581\3\2"+
		"\2\2\u1589\u1582\3\2\2\2\u1589\u1583\3\2\2\2\u1589\u1584\3\2\2\2\u1589"+
		"\u1586\3\2\2\2\u158a\u021f\3\2\2\2\u158b\u158d\t\\\2\2\u158c\u158e\5\u0226"+
		"\u0114\2\u158d\u158c\3\2\2\2\u158d\u158e\3\2\2\2\u158e\u1590\3\2\2\2\u158f"+
		"\u1591\7\u00ca\2\2\u1590\u158f\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1598"+
		"\3\2\2\2\u1592\u1593\7\30\2\2\u1593\u1596\7\u008c\2\2\u1594\u1596\7\u02be"+
		"\2\2\u1595\u1592\3\2\2\2\u1595\u1594\3\2\2\2\u1596\u1597\3\2\2\2\u1597"+
		"\u1599\5\u01fe\u0100\2\u1598\u1595\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159c"+
		"\3\2\2\2\u159a\u159b\7\32\2\2\u159b\u159d\5\u0200\u0101\2\u159c\u159a"+
		"\3\2\2\2\u159c\u159d\3\2\2\2\u159d\u15f6\3\2\2\2\u159e\u159f\7\u00c9\2"+
		"\2\u159f\u15a1\t]\2\2\u15a0\u15a2\5\u0226\u0114\2\u15a1\u15a0\3\2\2\2"+
		"\u15a1\u15a2\3\2\2\2\u15a2\u15a4\3\2\2\2\u15a3\u15a5\7\u00ca\2\2\u15a4"+
		"\u15a3\3\2\2\2\u15a4\u15a5\3\2\2\2\u15a5\u15f6\3\2\2\2\u15a6\u15a7\7\u01bb"+
		"\2\2\u15a7\u15a9\7\u00c7\2\2\u15a8\u15aa\5\u0226\u0114\2\u15a9\u15a8\3"+
		"\2\2\2\u15a9\u15aa\3\2\2\2\u15aa\u15ac\3\2\2\2\u15ab\u15ad\7\u00ca\2\2"+
		"\u15ac\u15ab\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15f6\3\2\2\2\u15ae\u15af"+
		"\7\u00c9\2\2\u15af\u15b0\t^\2\2\u15b0\u15b2\7\u00d5\2\2\u15b1\u15b3\5"+
		"\u0226\u0114\2\u15b2\u15b1\3\2\2\2\u15b2\u15b3\3\2\2\2\u15b3\u15b5\3\2"+
		"\2\2\u15b4\u15b6\7\u00ca\2\2\u15b5\u15b4\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6"+
		"\u15f6\3\2\2\2\u15b7\u15b9\t_\2\2\u15b8\u15ba\5\u0226\u0114\2\u15b9\u15b8"+
		"\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15bc\3\2\2\2\u15bb\u15bd\t`\2\2\u15bc"+
		"\u15bb\3\2\2\2\u15bc\u15bd\3\2\2\2\u15bd\u15bf\3\2\2\2\u15be\u15c0\7\u00b3"+
		"\2\2\u15bf\u15be\3\2\2\2\u15bf\u15c0\3\2\2\2\u15c0\u15f6\3\2\2\2\u15c1"+
		"\u15c3\7\u00ba\2\2\u15c2\u15c4\5\u0228\u0115\2\u15c3\u15c2\3\2\2\2\u15c3"+
		"\u15c4\3\2\2\2\u15c4\u15c6\3\2\2\2\u15c5\u15c7\t`\2\2\u15c6\u15c5\3\2"+
		"\2\2\u15c6\u15c7\3\2\2\2\u15c7\u15c9\3\2\2\2\u15c8\u15ca\7\u00b3\2\2\u15c9"+
		"\u15c8\3\2\2\2\u15c9\u15ca\3\2\2\2\u15ca\u15f6\3\2\2\2\u15cb\u15cd\7\u00bb"+
		"\2\2\u15cc\u15ce\7\u00bc\2\2\u15cd\u15cc\3\2\2\2\u15cd\u15ce\3\2\2\2\u15ce"+
		"\u15d0\3\2\2\2\u15cf\u15d1\5\u0228\u0115\2\u15d0\u15cf\3\2\2\2\u15d0\u15d1"+
		"\3\2\2\2\u15d1\u15d3\3\2\2\2\u15d2\u15d4\t`\2\2\u15d3\u15d2\3\2\2\2\u15d3"+
		"\u15d4\3\2\2\2\u15d4\u15d6\3\2\2\2\u15d5\u15d7\7\u00b3\2\2\u15d6\u15d5"+
		"\3\2\2\2\u15d6\u15d7\3\2\2\2\u15d7\u15f6\3\2\2\2\u15d8\u15da\ta\2\2\u15d9"+
		"\u15db\5\u022a\u0116\2\u15da\u15d9\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dd"+
		"\3\2\2\2\u15dc\u15de\t`\2\2\u15dd\u15dc\3\2\2\2\u15dd\u15de\3\2\2\2\u15de"+
		"\u15e0\3\2\2\2\u15df\u15e1\7\u00b3\2\2\u15e0\u15df\3\2\2\2\u15e0\u15e1"+
		"\3\2\2\2\u15e1\u15f6\3\2\2\2\u15e2\u15f6\tb\2\2\u15e3\u15e5\tc\2\2\u15e4"+
		"\u15e6\5\u0226\u0114\2\u15e5\u15e4\3\2\2\2\u15e5\u15e6\3\2\2\2\u15e6\u15f6"+
		"\3\2\2\2\u15e7\u15e8\td\2\2\u15e8\u15ea\5\u0222\u0112\2\u15e9\u15eb\7"+
		"\u00ca\2\2\u15ea\u15e9\3\2\2\2\u15ea\u15eb\3\2\2\2\u15eb\u15f2\3\2\2\2"+
		"\u15ec\u15ed\7\30\2\2\u15ed\u15f0\7\u008c\2\2\u15ee\u15f0\7\u02be\2\2"+
		"\u15ef\u15ec\3\2\2\2\u15ef\u15ee\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u15f3"+
		"\5\u01fe\u0100\2\u15f2\u15ef\3\2\2\2\u15f2\u15f3\3\2\2\2\u15f3\u15f6\3"+
		"\2\2\2\u15f4\u15f6\te\2\2\u15f5\u158b\3\2\2\2\u15f5\u159e\3\2\2\2\u15f5"+
		"\u15a6\3\2\2\2\u15f5\u15ae\3\2\2\2\u15f5\u15b7\3\2\2\2\u15f5\u15c1\3\2"+
		"\2\2\u15f5\u15cb\3\2\2\2\u15f5\u15d8\3\2\2\2\u15f5\u15e2\3\2\2\2\u15f5"+
		"\u15e3\3\2\2\2\u15f5\u15e7\3\2\2\2\u15f5\u15f4\3\2\2\2\u15f6\u0221\3\2"+
		"\2\2\u15f7\u15f8\7\u03e0\2\2\u15f8\u15fd\7\u03ef\2\2\u15f9\u15fa\7\u03e2"+
		"\2\2\u15fa\u15fc\7\u03ef\2\2\u15fb\u15f9\3\2\2\2\u15fc\u15ff\3\2\2\2\u15fd"+
		"\u15fb\3\2\2\2\u15fd\u15fe\3\2\2\2\u15fe\u1600\3\2\2\2\u15ff\u15fd\3\2"+
		"\2\2\u1600\u1601\7\u03e1\2\2\u1601\u0223\3\2\2\2\u1602\u1604\tf\2\2\u1603"+
		"\u1605\5\u0226\u0114\2\u1604\u1603\3\2\2\2\u1604\u1605\3\2\2\2\u1605\u161c"+
		"\3\2\2\2\u1606\u1608\7\u00c6\2\2\u1607\u1609\5\u0226\u0114\2\u1608\u1607"+
		"\3\2\2\2\u1608\u1609\3\2\2\2\u1609\u1610\3\2\2\2\u160a\u160b\7\30\2\2"+
		"\u160b\u160e\7\u008c\2\2\u160c\u160e\7\u02be\2\2\u160d\u160a\3\2\2\2\u160d"+
		"\u160c\3\2\2\2\u160e\u160f\3\2\2\2\u160f\u1611\5\u01fe\u0100\2\u1610\u160d"+
		"\3\2\2\2\u1610\u1611\3\2\2\2\u1611\u161c\3\2\2\2\u1612\u161c\tg\2\2\u1613"+
		"\u1615\7\u00be\2\2\u1614\u1616\5\u0228\u0115\2\u1615\u1614\3\2\2\2\u1615"+
		"\u1616\3\2\2\2\u1616\u161c\3\2\2\2\u1617\u1619\t`\2\2\u1618\u161a\7\u00b8"+
		"\2\2\u1619\u1618\3\2\2\2\u1619\u161a\3\2\2\2\u161a\u161c\3\2\2\2\u161b"+
		"\u1602\3\2\2\2\u161b\u1606\3\2\2\2\u161b\u1612\3\2\2\2\u161b\u1613\3\2"+
		"\2\2\u161b\u1617\3\2\2\2\u161c\u0225\3\2\2\2\u161d\u161e\7\u03e0\2\2\u161e"+
		"\u161f\5\u0212\u010a\2\u161f\u1620\7\u03e1\2\2\u1620\u0227\3\2\2\2\u1621"+
		"\u1622\7\u03e0\2\2\u1622\u1623\5\u0212\u010a\2\u1623\u1624\7\u03e2\2\2"+
		"\u1624\u1625\5\u0212\u010a\2\u1625\u1626\7\u03e1\2\2\u1626\u0229\3\2\2"+
		"\2\u1627\u1628\7\u03e0\2\2\u1628\u162b\5\u0212\u010a\2\u1629\u162a\7\u03e2"+
		"\2\2\u162a\u162c\5\u0212\u010a\2\u162b\u1629\3\2\2\2\u162b\u162c\3\2\2"+
		"\2\u162c\u162d\3\2\2\2\u162d\u162e\7\u03e1\2\2\u162e\u022b\3\2\2\2\u162f"+
		"\u1634\5\u020c\u0107\2\u1630\u1631\7\u03e2\2\2\u1631\u1633\5\u020c\u0107"+
		"\2\u1632\u1630\3\2\2\2\u1633\u1636\3\2\2\2\u1634\u1632\3\2\2\2\u1634\u1635"+
		"\3\2\2\2\u1635\u022d\3\2\2\2\u1636\u1634\3\2\2\2\u1637\u163c\5\u01f4\u00fb"+
		"\2\u1638\u1639\7\u03e2\2\2\u1639\u163b\5\u01f4\u00fb\2\u163a\u1638\3\2"+
		"\2\2\u163b\u163e\3\2\2\2\u163c\u163a\3\2\2\2\u163c\u163d\3\2\2\2\u163d"+
		"\u022f\3\2\2\2\u163e\u163c\3\2\2\2\u163f\u1640\7\u03e0\2\2\u1640\u1645"+
		"\5\u01f8\u00fd\2\u1641\u1642\7\u03e2\2\2\u1642\u1644\5\u01f8\u00fd\2\u1643"+
		"\u1641\3\2\2\2\u1644\u1647\3\2\2\2\u1645\u1643\3\2\2\2\u1645\u1646\3\2"+
		"\2\2\u1646\u1648\3\2\2\2\u1647\u1645\3\2\2\2\u1648\u1649\7\u03e1\2\2\u1649"+
		"\u0231\3\2\2\2\u164a\u164f\5\u025c\u012f\2\u164b\u164c\7\u03e2\2\2\u164c"+
		"\u164e\5\u025c\u012f\2\u164d\u164b\3\2\2\2\u164e\u1651\3\2\2\2\u164f\u164d"+
		"\3\2\2\2\u164f\u1650\3\2\2\2\u1650\u0233\3\2\2\2\u1651\u164f\3\2\2\2\u1652"+
		"\u1657\5\u0240\u0121\2\u1653\u1654\7\u03e2\2\2\u1654\u1656\5\u0240\u0121"+
		"\2\u1655\u1653\3\2\2\2\u1656\u1659\3\2\2\2\u1657\u1655\3\2\2\2\u1657\u1658"+
		"\3\2\2\2\u1658\u0235\3\2\2\2\u1659\u1657\3\2\2\2\u165a\u165f\5\u021e\u0110"+
		"\2\u165b\u165c\7\u03e2\2\2\u165c\u165e\5\u021e\u0110\2\u165d\u165b\3\2"+
		"\2\2\u165e\u1661\3\2\2\2\u165f\u165d\3\2\2\2\u165f\u1660\3\2\2\2\u1660"+
		"\u0237\3\2\2\2\u1661\u165f\3\2\2\2\u1662\u1667\7\u03ef\2\2\u1663\u1664"+
		"\7\u03e2\2\2\u1664\u1666\7\u03ef\2\2\u1665\u1663\3\2\2\2\u1666\u1669\3"+
		"\2\2\2\u1667\u1665\3\2\2\2\u1667\u1668\3\2\2\2\u1668\u0239\3\2\2\2\u1669"+
		"\u1667\3\2\2\2\u166a\u166f\7\u03fa\2\2\u166b\u166c\7\u03e2\2\2\u166c\u166e"+
		"\7\u03fa\2\2\u166d\u166b\3\2\2\2\u166e\u1671\3\2\2\2\u166f\u166d\3\2\2"+
		"\2\u166f\u1670\3\2\2\2\u1670\u023b\3\2\2\2\u1671\u166f\3\2\2\2\u1672\u167e"+
		"\7j\2\2\u1673\u1675\5\u0262\u0132\2\u1674\u1673\3\2\2\2\u1674\u1675\3"+
		"\2\2\2\u1675\u1676\3\2\2\2\u1676\u167e\5\u021e\u0110\2\u1677\u167b\5\u023e"+
		"\u0120\2\u1678\u1679\7l\2\2\u1679\u167a\7\u00a8\2\2\u167a\u167c\5\u023e"+
		"\u0120\2\u167b\u1678\3\2\2\2\u167b\u167c\3\2\2\2\u167c\u167e\3\2\2\2\u167d"+
		"\u1672\3\2\2\2\u167d\u1674\3\2\2\2\u167d\u1677\3\2\2\2\u167e\u023d\3\2"+
		"\2\2\u167f\u1685\th\2\2\u1680\u1682\7\u03e0\2\2\u1681\u1683\5\u0212\u010a"+
		"\2\u1682\u1681\3\2\2\2\u1682\u1683\3\2\2\2\u1683\u1684\3\2\2\2\u1684\u1686"+
		"\7\u03e1\2\2\u1685\u1680\3\2\2\2\u1685\u1686\3\2\2\2\u1686\u168e\3\2\2"+
		"\2\u1687\u1688\7\u0103\2\2\u1688\u168a\7\u03e0\2\2\u1689\u168b\5\u0212"+
		"\u010a\2\u168a\u1689\3\2\2\2\u168a\u168b\3\2\2\2\u168b\u168c\3\2\2\2\u168c"+
		"\u168e\7\u03e1\2\2\u168d\u167f\3\2\2\2\u168d\u1687\3\2\2\2\u168e\u023f"+
		"\3\2\2\2\u168f\u1692\5\u025c\u012f\2\u1690\u1692\7(\2\2\u1691\u168f\3"+
		"\2\2\2\u1691\u1690\3\2\2\2\u1692\u0241\3\2\2\2\u1693\u1694\7G\2\2\u1694"+
		"\u1695\7\67\2\2\u1695\u0243\3\2\2\2\u1696\u1697\7G\2\2\u1697\u1698\7h"+
		"\2\2\u1698\u1699\7\67\2\2\u1699\u0245\3\2\2\2\u169a\u16ad\5\u0248\u0125"+
		"\2\u169b\u16ad\5\u0250\u0129\2\u169c\u169d\5\u0254\u012b\2\u169d\u169f"+
		"\7\u03e0\2\2\u169e\u16a0\5\u0258\u012d\2\u169f\u169e\3\2\2\2\u169f\u16a0"+
		"\3\2\2\2\u16a0\u16a1\3\2\2\2\u16a1\u16a2\7\u03e1\2\2\u16a2\u16ad\3\2\2"+
		"\2\u16a3\u16a4\5\u01f2\u00fa\2\u16a4\u16a6\7\u03e0\2\2\u16a5\u16a7\5\u0258"+
		"\u012d\2\u16a6\u16a5\3\2\2\2\u16a6\u16a7\3\2\2\2\u16a7\u16a8\3\2\2\2\u16a8"+
		"\u16a9\7\u03e1\2\2\u16a9\u16ad\3\2\2\2\u16aa\u16ad\5\u0256\u012c\2\u16ab"+
		"\u16ad\5\u0252\u012a\2\u16ac\u169a\3\2\2\2\u16ac\u169b\3\2\2\2\u16ac\u169c"+
		"\3\2\2\2\u16ac\u16a3\3\2\2\2\u16ac\u16aa\3\2\2\2\u16ac\u16ab\3\2\2\2\u16ad"+
		"\u0247\3\2\2\2\u16ae\u174c\ti\2\2\u16af\u16b0\7\37\2\2\u16b0\u16b1\7\u03e0"+
		"\2\2\u16b1\u16b2\5\u025c\u012f\2\u16b2\u16b3\7\u03e2\2\2\u16b3\u16b4\5"+
		"\u0224\u0113\2\u16b4\u16b5\7\u03e1\2\2\u16b5\u174c\3\2\2\2\u16b6\u16b7"+
		"\7\37\2\2\u16b7\u16b8\7\u03e0\2\2\u16b8\u16b9\5\u025c\u012f\2\u16b9\u16ba"+
		"\7\u00ab\2\2\u16ba\u16bb\5\u01fe\u0100\2\u16bb\u16bc\7\u03e1\2\2\u16bc"+
		"\u174c\3\2\2\2\u16bd\u16be\7\26\2\2\u16be\u16bf\7\u03e0\2\2\u16bf\u16c0"+
		"\5\u025c\u012f\2\u16c0\u16c1\7\r\2\2\u16c1\u16c2\5\u0224\u0113\2\u16c2"+
		"\u16c3\7\u03e1\2\2\u16c3\u174c\3\2\2\2\u16c4\u16c5\7\u00ac\2\2\u16c5\u16c6"+
		"\7\u03e0\2\2\u16c6\u16c7\5\u01f6\u00fc\2\u16c7\u16c8\7\u03e1\2\2\u16c8"+
		"\u174c\3\2\2\2\u16c9\u16ca\7\25\2\2\u16ca\u16cc\5\u025c\u012f\2\u16cb"+
		"\u16cd\5\u024a\u0126\2\u16cc\u16cb\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce\u16cc"+
		"\3\2\2\2\u16ce\u16cf\3\2\2\2\u16cf\u16d2\3\2\2\2\u16d0\u16d1\7\63\2\2"+
		"\u16d1\u16d3\5\u025a\u012e\2\u16d2\u16d0\3\2\2\2\u16d2\u16d3\3\2\2\2\u16d3"+
		"\u16d4\3\2\2\2\u16d4\u16d5\7\u0152\2\2\u16d5\u174c\3\2\2\2\u16d6\u16d8"+
		"\7\25\2\2\u16d7\u16d9\5\u024a\u0126\2\u16d8\u16d7\3\2\2\2\u16d9\u16da"+
		"\3\2\2\2\u16da\u16d8\3\2\2\2\u16da\u16db\3\2\2\2\u16db\u16de\3\2\2\2\u16dc"+
		"\u16dd\7\63\2\2\u16dd\u16df\5\u025a\u012e\2\u16de\u16dc\3\2\2\2\u16de"+
		"\u16df\3\2\2\2\u16df\u16e0\3\2\2\2\u16e0\u16e1\7\u0152\2\2\u16e1\u174c"+
		"\3\2\2\2\u16e2\u16e3\7\u00c6\2\2\u16e3\u16e4\7\u03e0\2\2\u16e4\u16e7\5"+
		"\u0258\u012d\2\u16e5\u16e6\7\u00ab\2\2\u16e6\u16e8\5\u01fe\u0100\2\u16e7"+
		"\u16e5\3\2\2\2\u16e7\u16e8\3\2\2\2\u16e8\u16e9\3\2\2\2\u16e9\u16ea\7\u03e1"+
		"\2\2\u16ea\u174c\3\2\2\2\u16eb\u16ec\7\u0104\2\2\u16ec\u16ef\7\u03e0\2"+
		"\2\u16ed\u16f0\5\u0216\u010c\2\u16ee\u16f0\5\u025c\u012f\2\u16ef\u16ed"+
		"\3\2\2\2\u16ef\u16ee\3\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f4\7I\2\2\u16f2"+
		"\u16f5\5\u0216\u010c\2\u16f3\u16f5\5\u025c\u012f\2\u16f4\u16f2\3\2\2\2"+
		"\u16f4\u16f3\3\2\2\2\u16f5\u16f6\3\2\2\2\u16f6\u16f7\7\u03e1\2\2\u16f7"+
		"\u174c\3\2\2\2\u16f8\u16f9\tj\2\2\u16f9\u16fc\7\u03e0\2\2\u16fa\u16fd"+
		"\5\u0216\u010c\2\u16fb\u16fd\5\u025c\u012f\2\u16fc\u16fa\3\2\2\2\u16fc"+
		"\u16fb\3\2\2\2\u16fd\u16fe\3\2\2\2\u16fe\u1701\7?\2\2\u16ff\u1702\5\u0212"+
		"\u010a\2\u1700\u1702\5\u025c\u012f\2\u1701\u16ff\3\2\2\2\u1701\u1700\3"+
		"\2\2\2\u1702\u1708\3\2\2\2\u1703\u1706\7<\2\2\u1704\u1707\5\u0212\u010a"+
		"\2\u1705\u1707\5\u025c\u012f\2\u1706\u1704\3\2\2\2\u1706\u1705\3\2\2\2"+
		"\u1707\u1709\3\2\2\2\u1708\u1703\3\2\2\2\u1708\u1709\3\2\2\2\u1709\u170a"+
		"\3\2\2\2\u170a\u170b\7\u03e1\2\2\u170b\u174c\3\2\2\2\u170c\u170d\7\u0108"+
		"\2\2\u170d\u170e\7\u03e0\2\2\u170e\u1711\tk\2\2\u170f\u1712\5\u0216\u010c"+
		"\2\u1710\u1712\5\u025c\u012f\2\u1711\u170f\3\2\2\2\u1711\u1710\3\2\2\2"+
		"\u1711\u1712\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1716\7?\2\2\u1714\u1717"+
		"\5\u0216\u010c\2\u1715\u1717\5\u025c\u012f\2\u1716\u1714\3\2\2\2\u1716"+
		"\u1715\3\2\2\2\u1717\u1718\3\2\2\2\u1718\u1719\7\u03e1\2\2\u1719\u174c"+
		"\3\2\2\2\u171a\u171b\7\u0108\2\2\u171b\u171e\7\u03e0\2\2\u171c\u171f\5"+
		"\u0216\u010c\2\u171d\u171f\5\u025c\u012f\2\u171e\u171c\3\2\2\2\u171e\u171d"+
		"\3\2\2\2\u171f\u1720\3\2\2\2\u1720\u1723\7?\2\2\u1721\u1724\5\u0216\u010c"+
		"\2\u1722\u1724\5\u025c\u012f\2\u1723\u1721\3\2\2\2\u1723\u1722\3\2\2\2"+
		"\u1724\u1725\3\2\2\2\u1725\u1726\7\u03e1\2\2\u1726\u174c\3\2\2\2\u1727"+
		"\u1728\7\u03c0\2\2\u1728\u172b\7\u03e0\2\2\u1729\u172c\5\u0216\u010c\2"+
		"\u172a\u172c\5\u025c\u012f\2\u172b\u1729\3\2\2\2\u172b\u172a\3\2\2\2\u172c"+
		"\u1733\3\2\2\2\u172d\u172e\7\r\2\2\u172e\u172f\tl\2\2\u172f\u1730\7\u03e0"+
		"\2\2\u1730\u1731\5\u0212\u010a\2\u1731\u1732\7\u03e1\2\2\u1732\u1734\3"+
		"\2\2\2\u1733\u172d\3\2\2\2\u1733\u1734\3\2\2\2\u1734\u1736\3\2\2\2\u1735"+
		"\u1737\5\u024c\u0127\2\u1736\u1735\3\2\2\2\u1736\u1737\3\2\2\2\u1737\u1738"+
		"\3\2\2\2\u1738\u1739\7\u03e1\2\2\u1739\u174c\3\2\2\2\u173a\u173b\7\u0101"+
		"\2\2\u173b\u173c\7\u03e0\2\2\u173c\u173d\5<\37\2\u173d\u1740\7?\2\2\u173e"+
		"\u1741\5\u0216\u010c\2\u173f\u1741\5\u025c\u012f\2\u1740\u173e\3\2\2\2"+
		"\u1740\u173f\3\2\2\2\u1741\u1742\3\2\2\2\u1742\u1743\7\u03e1\2\2\u1743"+
		"\u174c\3\2\2\2\u1744\u1745\7\u02f8\2\2\u1745\u1746\7\u03e0\2\2\u1746\u1747"+
		"\tm\2\2\u1747\u1748\7\u03e2\2\2\u1748\u1749\5\u0216\u010c\2\u1749\u174a"+
		"\7\u03e1\2\2\u174a\u174c\3\2\2\2\u174b\u16ae\3\2\2\2\u174b\u16af\3\2\2"+
		"\2\u174b\u16b6\3\2\2\2\u174b\u16bd\3\2\2\2\u174b\u16c4\3\2\2\2\u174b\u16c9"+
		"\3\2\2\2\u174b\u16d6\3\2\2\2\u174b\u16e2\3\2\2\2\u174b\u16eb\3\2\2\2\u174b"+
		"\u16f8\3\2\2\2\u174b\u170c\3\2\2\2\u174b\u171a\3\2\2\2\u174b\u1727\3\2"+
		"\2\2\u174b\u173a\3\2\2\2\u174b\u1744\3\2\2\2\u174c\u0249\3\2\2\2\u174d"+
		"\u174e\7\u00ad\2\2\u174e\u174f\5\u025a\u012e\2\u174f\u1750\7\u009e\2\2"+
		"\u1750\u1751\5\u025a\u012e\2\u1751\u024b\3\2\2\2\u1752\u1753\7\u018e\2"+
		"\2\u1753\u1758\5\u024e\u0128\2\u1754\u1755\7\u03e2\2\2\u1755\u1757\5\u024e"+
		"\u0128\2\u1756\u1754\3\2\2\2\u1757\u175a\3\2\2\2\u1758\u1756\3\2\2\2\u1758"+
		"\u1759\3\2\2\2\u1759\u1761\3\2\2\2\u175a\u1758\3\2\2\2\u175b\u175c\7\u018e"+
		"\2\2\u175c\u175d\5\u0212\u010a\2\u175d\u175e\7\u03d3\2\2\u175e\u175f\5"+
		"\u0212\u010a\2\u175f\u1761\3\2\2\2\u1760\u1752\3\2\2\2\u1760\u175b\3\2"+
		"\2\2\u1761\u024d\3\2\2\2\u1762\u1764\5\u0212\u010a\2\u1763\u1765\tn\2"+
		"\2\u1764\u1763\3\2\2\2\u1764\u1765\3\2\2\2\u1765\u024f\3\2\2\2\u1766\u1767"+
		"\to\2\2\u1767\u1769\7\u03e0\2\2\u1768\u176a\t\'\2\2\u1769\u1768\3\2\2"+
		"\2\u1769\u176a\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176c\5\u025a\u012e\2"+
		"\u176c\u176d\7\u03e1\2\2\u176d\u179f\3\2\2\2\u176e\u176f\7\u00e6\2\2\u176f"+
		"\u1775\7\u03e0\2\2\u1770\u1776\7\u03ce\2\2\u1771\u1773\7\b\2\2\u1772\u1771"+
		"\3\2\2\2\u1772\u1773\3\2\2\2\u1773\u1774\3\2\2\2\u1774\u1776\5\u025a\u012e"+
		"\2\u1775\u1770\3\2\2\2\u1775\u1772\3\2\2\2\u1776\u1777\3\2\2\2\u1777\u179f"+
		"\7\u03e1\2\2\u1778\u1779\7\u00e6\2\2\u1779\u177a\7\u03e0\2\2\u177a\u177b"+
		"\7/\2\2\u177b\u177c\5\u0258\u012d\2\u177c\u177d\7\u03e1\2\2\u177d\u179f"+
		"\3\2\2\2\u177e\u177f\tp\2\2\u177f\u1781\7\u03e0\2\2\u1780\u1782\7\b\2"+
		"\2\u1781\u1780\3\2\2\2\u1781\u1782\3\2\2\2\u1782\u1783\3\2\2\2\u1783\u1784"+
		"\5\u025a\u012e\2\u1784\u1785\7\u03e1\2\2\u1785\u179f\3\2\2\2\u1786\u1787"+
		"\7\u00e7\2\2\u1787\u1789\7\u03e0\2\2\u1788\u178a\7/\2\2\u1789\u1788\3"+
		"\2\2\2\u1789\u178a\3\2\2\2\u178a\u178b\3\2\2\2\u178b\u1796\5\u0258\u012d"+
		"\2\u178c\u178d\7q\2\2\u178d\u178e\7\22\2\2\u178e\u1793\5\u00d2j\2\u178f"+
		"\u1790\7\u03e2\2\2\u1790\u1792\5\u00d2j\2\u1791\u178f\3\2\2\2\u1792\u1795"+
		"\3\2\2\2\u1793\u1791\3\2\2\2\u1793\u1794\3\2\2\2\u1794\u1797\3\2\2\2\u1795"+
		"\u1793\3\2\2\2\u1796\u178c\3\2\2\2\u1796\u1797\3\2\2\2\u1797\u179a\3\2"+
		"\2\2\u1798\u1799\7\u008d\2\2\u1799\u179b\7\u03ef\2\2\u179a\u1798\3\2\2"+
		"\2\u179a\u179b\3\2\2\2\u179b\u179c\3\2\2\2\u179c\u179d\7\u03e1\2\2\u179d"+
		"\u179f\3\2\2\2\u179e\u1766\3\2\2\2\u179e\u176e\3\2\2\2\u179e\u1778\3\2"+
		"\2\2\u179e\u177e\3\2\2\2\u179e\u1786\3\2\2\2\u179f\u0251\3\2\2\2\u17a0"+
		"\u17a1\tq\2\2\u17a1\u17a2\7\u03e0\2\2\u17a2\u17a3\7\u03e1\2\2\u17a3\u17a4"+
		"\7\u00f2\2\2\u17a4\u17af\7\u03e0\2\2\u17a5\u17a6\7u\2\2\u17a6\u17a7\7"+
		"\22\2\2\u17a7\u17ac\5\u00fa~\2\u17a8\u17a9\7\u03e2\2\2\u17a9\u17ab\5\u00fa"+
		"~\2\u17aa\u17a8\3\2\2\2\u17ab\u17ae\3\2\2\2\u17ac\u17aa\3\2\2\2\u17ac"+
		"\u17ad\3\2\2\2\u17ad\u17b0\3\2\2\2\u17ae\u17ac\3\2\2\2\u17af\u17a5\3\2"+
		"\2\2\u17af\u17b0\3\2\2\2\u17b0\u17bb\3\2\2\2\u17b1\u17b2\7q\2\2\u17b2"+
		"\u17b3\7\22\2\2\u17b3\u17b8\5\u00d2j\2\u17b4\u17b5\7\u03e2\2\2\u17b5\u17b7"+
		"\5\u00d2j\2\u17b6\u17b4\3\2\2\2\u17b7\u17ba\3\2\2\2\u17b8\u17b6\3\2\2"+
		"\2\u17b8\u17b9\3\2\2\2\u17b9\u17bc\3\2\2\2\u17ba\u17b8\3\2\2\2\u17bb\u17b1"+
		"\3\2\2\2\u17bb\u17bc\3\2\2\2\u17bc\u17bd\3\2\2\2\u17bd\u17be\7\u03e1\2"+
		"\2\u17be\u0253\3\2\2\2\u17bf\u17d7\5\u027a\u013e\2\u17c0\u17d7\7\u0261"+
		"\2\2\u17c1\u17d7\7\u00fd\2\2\u17c2\u17d7\7\u00f9\2\2\u17c3\u17d7\7\u00fa"+
		"\2\2\u17c4\u17d7\7\u00fb\2\2\u17c5\u17d7\7\u00fe\2\2\u17c6\u17d7\7\u00ff"+
		"\2\2\u17c7\u17d7\7\u0100\2\2\u17c8\u17d7\7G\2\2\u17c9\u17d7\7N\2\2\u17ca"+
		"\u17d7\7\u00fc\2\2\u17cb\u17d7\7\u0102\2\2\u17cc\u17d7\7\u01b1\2\2\u17cd"+
		"\u17d7\7\u0103\2\2\u17ce\u17d7\7\u0081\2\2\u17cf\u17d7\7\u0105\2\2\u17d0"+
		"\u17d7\7\u0106\2\2\u17d1\u17d7\7\u0107\2\2\u17d2\u17d7\7\u0108\2\2\u17d3"+
		"\u17d7\7\u0109\2\2\u17d4\u17d7\7\u010a\2\2\u17d5\u17d7\7\u010b\2\2\u17d6"+
		"\u17bf\3\2\2\2\u17d6\u17c0\3\2\2\2\u17d6\u17c1\3\2\2\2\u17d6\u17c2\3\2"+
		"\2\2\u17d6\u17c3\3\2\2\2\u17d6\u17c4\3\2\2\2\u17d6\u17c5\3\2\2\2\u17d6"+
		"\u17c6\3\2\2\2\u17d6\u17c7\3\2\2\2\u17d6\u17c8\3\2\2\2\u17d6\u17c9\3\2"+
		"\2\2\u17d6\u17ca\3\2\2\2\u17d6\u17cb\3\2\2\2\u17d6\u17cc\3\2\2\2\u17d6"+
		"\u17cd\3\2\2\2\u17d6\u17ce\3\2\2\2\u17d6\u17cf\3\2\2\2\u17d6\u17d0\3\2"+
		"\2\2\u17d6\u17d1\3\2\2\2\u17d6\u17d2\3\2\2\2\u17d6\u17d3\3\2\2\2\u17d6"+
		"\u17d4\3\2\2\2\u17d6\u17d5\3\2\2\2\u17d7\u0255\3\2\2\2\u17d8\u17d9\tr"+
		"\2\2\u17d9\u17da\7\u03e0\2\2\u17da\u17db\5\u025a\u012e\2\u17db\u17dc\7"+
		"\u03e1\2\2\u17dc\u0257\3\2\2\2\u17dd\u17e2\5\u021e\u0110\2\u17de\u17e2"+
		"\5\u01f6\u00fc\2\u17df\u17e2\5\u0246\u0124\2\u17e0\u17e2\5\u025c\u012f"+
		"\2\u17e1\u17dd\3\2\2\2\u17e1\u17de\3\2\2\2\u17e1\u17df\3\2\2\2\u17e1\u17e0"+
		"\3\2\2\2\u17e2\u17ec\3\2\2\2\u17e3\u17e8\7\u03e2\2\2\u17e4\u17e9\5\u021e"+
		"\u0110\2\u17e5\u17e9\5\u01f6\u00fc\2\u17e6\u17e9\5\u0246\u0124\2\u17e7"+
		"\u17e9\5\u025c\u012f\2\u17e8\u17e4\3\2\2\2\u17e8\u17e5\3\2\2\2\u17e8\u17e6"+
		"\3\2\2\2\u17e8\u17e7\3\2\2\2\u17e9\u17eb\3\2\2\2\u17ea\u17e3\3\2\2\2\u17eb"+
		"\u17ee\3\2\2\2\u17ec\u17ea\3\2\2\2\u17ec\u17ed\3\2\2\2\u17ed\u0259\3\2"+
		"\2\2\u17ee\u17ec\3\2\2\2\u17ef\u17f4\5\u021e\u0110\2\u17f0\u17f4\5\u01f6"+
		"\u00fc\2\u17f1\u17f4\5\u0246\u0124\2\u17f2\u17f4\5\u025c\u012f\2\u17f3"+
		"\u17ef\3\2\2\2\u17f3\u17f0\3\2\2\2\u17f3\u17f1\3\2\2\2\u17f3\u17f2\3\2"+
		"\2\2\u17f4\u025b\3\2\2\2\u17f5\u17f6\b\u012f\1\2\u17f6\u17f7\ts\2\2\u17f7"+
		"\u1801\5\u025c\u012f\6\u17f8\u17f9\5\u025e\u0130\2\u17f9\u17fb\7Q\2\2"+
		"\u17fa\u17fc\7h\2\2\u17fb\u17fa\3\2\2\2\u17fb\u17fc\3\2\2\2\u17fc\u17fd"+
		"\3\2\2\2\u17fd\u17fe\tt\2\2\u17fe\u1801\3\2\2\2\u17ff\u1801\5\u025e\u0130"+
		"\2\u1800\u17f5\3\2\2\2\u1800\u17f8\3\2\2\2\u1800\u17ff\3\2\2\2\u1801\u1808"+
		"\3\2\2\2\u1802\u1803\f\5\2\2\u1803\u1804\5\u0266\u0134\2\u1804\u1805\5"+
		"\u025c\u012f\6\u1805\u1807\3\2\2\2\u1806\u1802\3\2\2\2\u1807\u180a\3\2"+
		"\2\2\u1808\u1806\3\2\2\2\u1808\u1809\3\2\2\2\u1809\u025d\3\2\2\2\u180a"+
		"\u1808\3\2\2\2\u180b\u180e\b\u0130\1\2\u180c\u180d\7\u03fa\2\2\u180d\u180f"+
		"\7\u03c5\2\2\u180e\u180c\3\2\2\2\u180e\u180f\3\2\2\2\u180f\u1810\3\2\2"+
		"\2\u1810\u1811\5\u0260\u0131\2\u1811\u184b\3\2\2\2\u1812\u1813\f\t\2\2"+
		"\u1813\u1814\5\u0264\u0133\2\u1814\u1815\5\u025e\u0130\n\u1815\u184a\3"+
		"\2\2\2\u1816\u1818\f\7\2\2\u1817\u1819\7h\2\2\u1818\u1817\3\2\2\2\u1818"+
		"\u1819\3\2\2\2\u1819\u181a\3\2\2\2\u181a\u181b\7\20\2\2\u181b\u181c\5"+
		"\u025e\u0130\2\u181c\u181d\7\f\2\2\u181d\u181e\5\u025e\u0130\b\u181e\u184a"+
		"\3\2\2\2\u181f\u1820\f\6\2\2\u1820\u1821\7\u020e\2\2\u1821\u1822\7Z\2"+
		"\2\u1822\u184a\5\u025e\u0130\7\u1823\u1825\f\4\2\2\u1824\u1826\7h\2\2"+
		"\u1825\u1824\3\2\2\2\u1825\u1826\3\2\2\2\u1826\u1827\3\2\2\2\u1827\u1828"+
		"\tu\2\2\u1828\u184a\5\u025e\u0130\5\u1829\u182b\f\13\2\2\u182a\u182c\7"+
		"h\2\2\u182b\u182a\3\2\2\2\u182b\u182c\3\2\2\2\u182c\u182d\3\2\2\2\u182d"+
		"\u182e\7I\2\2\u182e\u1831\7\u03e0\2\2\u182f\u1832\5\u00b4[\2\u1830\u1832"+
		"\5\u0232\u011a\2\u1831\u182f\3\2\2\2\u1831\u1830\3\2\2\2\u1832\u1833\3"+
		"\2\2\2\u1833\u1834\7\u03e1\2\2\u1834\u184a\3\2\2\2\u1835\u1836\f\n\2\2"+
		"\u1836\u1837\7Q\2\2\u1837\u184a\5\u021c\u010f\2\u1838\u1839\f\b\2\2\u1839"+
		"\u183a\5\u0264\u0133\2\u183a\u183b\tv\2\2\u183b\u183c\7\u03e0\2\2\u183c"+
		"\u183d\5\u00b4[\2\u183d\u183e\7\u03e1\2\2\u183e\u184a\3\2\2\2\u183f\u1841"+
		"\f\5\2\2\u1840\u1842\7h\2\2\u1841\u1840\3\2\2\2\u1841\u1842\3\2\2\2\u1842"+
		"\u1843\3\2\2\2\u1843\u1844\7Z\2\2\u1844\u1847\5\u025e\u0130\2\u1845\u1846"+
		"\7\u0158\2\2\u1846\u1848\7\u03ef\2\2\u1847\u1845\3\2\2\2\u1847\u1848\3"+
		"\2\2\2\u1848\u184a\3\2\2\2\u1849\u1812\3\2\2\2\u1849\u1816\3\2\2\2\u1849"+
		"\u181f\3\2\2\2\u1849\u1823\3\2\2\2\u1849\u1829\3\2\2\2\u1849\u1835\3\2"+
		"\2\2\u1849\u1838\3\2\2\2\u1849\u183f\3\2\2\2\u184a\u184d\3\2\2\2\u184b"+
		"\u1849\3\2\2\2\u184b\u184c\3\2\2\2\u184c\u025f\3\2\2\2\u184d\u184b\3\2"+
		"\2\2\u184e\u184f\b\u0131\1\2\u184f\u187c\5\u021e\u0110\2\u1850\u187c\5"+
		"\u01f6\u00fc\2\u1851\u187c\5\u0246\u0124\2\u1852\u187c\5\u01fc\u00ff\2"+
		"\u1853\u1854\5\u0262\u0132\2\u1854\u1855\5\u0260\u0131\f\u1855\u187c\3"+
		"\2\2\2\u1856\u1857\7\u00ca\2\2\u1857\u187c\5\u0260\u0131\13\u1858\u1859"+
		"\7\u03e0\2\2\u1859\u185e\5\u025c\u012f\2\u185a\u185b\7\u03e2\2\2\u185b"+
		"\u185d\5\u025c\u012f\2\u185c\u185a\3\2\2\2\u185d\u1860\3\2\2\2\u185e\u185c"+
		"\3\2\2\2\u185e\u185f\3\2\2\2\u185f\u1861\3\2\2\2\u1860\u185e\3\2\2\2\u1861"+
		"\u1862\7\u03e1\2\2\u1862\u187c\3\2\2\2\u1863\u1864\7\u01fc\2\2\u1864\u1865"+
		"\7\u03e0\2\2\u1865\u1868\5\u025c\u012f\2\u1866\u1867\7\u03e2\2\2\u1867"+
		"\u1869\5\u025c\u012f\2\u1868\u1866\3\2\2\2\u1869\u186a\3\2\2\2\u186a\u1868"+
		"\3\2\2\2\u186a\u186b\3\2\2\2\u186b\u186c\3\2\2\2\u186c\u186d\7\u03e1\2"+
		"\2\u186d\u187c\3\2\2\2\u186e\u186f\7\67\2\2\u186f\u1870\7\u03e0\2\2\u1870"+
		"\u1871\5\u00b4[\2\u1871\u1872\7\u03e1\2\2\u1872\u187c\3\2\2\2\u1873\u1874"+
		"\7\u03e0\2\2\u1874\u1875\5\u00b4[\2\u1875\u1876\7\u03e1\2\2\u1876\u187c"+
		"\3\2\2\2\u1877\u1878\7O\2\2\u1878\u1879\5\u025c\u012f\2\u1879\u187a\5"+
		"<\37\2\u187a\u187c\3\2\2\2\u187b\u184e\3\2\2\2\u187b\u1850\3\2\2\2\u187b"+
		"\u1851\3\2\2\2\u187b\u1852\3\2\2\2\u187b\u1853\3\2\2\2\u187b\u1856\3\2"+
		"\2\2\u187b\u1858\3\2\2\2\u187b\u1863\3\2\2\2\u187b\u186e\3\2\2\2\u187b"+
		"\u1873\3\2\2\2\u187b\u1877\3\2\2\2\u187c\u188e\3\2\2\2\u187d\u187e\f\5"+
		"\2\2\u187e\u187f\5\u0268\u0135\2\u187f\u1880\5\u0260\u0131\6\u1880\u188d"+
		"\3\2\2\2\u1881\u1882\f\4\2\2\u1882\u1883\5\u026a\u0136\2\u1883\u1884\5"+
		"\u0260\u0131\5\u1884\u188d\3\2\2\2\u1885\u1886\f\3\2\2\u1886\u1887\5\u026c"+
		"\u0137\2\u1887\u1888\5\u0260\u0131\4\u1888\u188d\3\2\2\2\u1889\u188a\f"+
		"\16\2\2\u188a\u188b\7\32\2\2\u188b\u188d\5\u0200\u0101\2\u188c\u187d\3"+
		"\2\2\2\u188c\u1881\3\2\2\2\u188c\u1885\3\2\2\2\u188c\u1889\3\2\2\2\u188d"+
		"\u1890\3\2\2\2\u188e\u188c\3\2\2\2\u188e\u188f\3\2\2\2\u188f\u0261\3\2"+
		"\2\2\u1890\u188e\3\2\2\2\u1891\u1892\tw\2\2\u1892\u0263\3\2\2\2\u1893"+
		"\u18a2\7\u03d7\2\2\u1894\u18a2\7\u03d8\2\2\u1895\u18a2\7\u03d9\2\2\u1896"+
		"\u1897\7\u03d9\2\2\u1897\u18a2\7\u03d7\2\2\u1898\u1899\7\u03d8\2\2\u1899"+
		"\u18a2\7\u03d7\2\2\u189a\u189b\7\u03d9\2\2\u189b\u18a2\7\u03d8\2\2\u189c"+
		"\u189d\7\u03da\2\2\u189d\u18a2\7\u03d7\2\2\u189e\u189f\7\u03d9\2\2\u189f"+
		"\u18a0\7\u03d7\2\2\u18a0\u18a2\7\u03d8\2\2\u18a1\u1893\3\2\2\2\u18a1\u1894"+
		"\3\2\2\2\u18a1\u1895\3\2\2\2\u18a1\u1896\3\2\2\2\u18a1\u1898\3\2\2\2\u18a1"+
		"\u189a\3\2\2\2\u18a1\u189c\3\2\2\2\u18a1\u189e\3\2\2\2\u18a2\u0265\3\2"+
		"\2\2\u18a3\u18ab\7\f\2\2\u18a4\u18a5\7\u03dd\2\2\u18a5\u18ab\7\u03dd\2"+
		"\2\u18a6\u18ab\7\u00b2\2\2\u18a7\u18ab\7p\2\2\u18a8\u18a9\7\u03dc\2\2"+
		"\u18a9\u18ab\7\u03dc\2\2\u18aa\u18a3\3\2\2\2\u18aa\u18a4\3\2\2\2\u18aa"+
		"\u18a6\3\2\2\2\u18aa\u18a7\3\2\2\2\u18aa\u18a8\3\2\2\2\u18ab\u0267\3\2"+
		"\2\2\u18ac\u18ad\7\u03d9\2\2\u18ad\u18b4\7\u03d9\2\2\u18ae\u18af\7\u03d8"+
		"\2\2\u18af\u18b4\7\u03d8\2\2\u18b0\u18b4\7\u03dd\2\2\u18b1\u18b4\7\u03de"+
		"\2\2\u18b2\u18b4\7\u03dc\2\2\u18b3\u18ac\3\2\2\2\u18b3\u18ae\3\2\2\2\u18b3"+
		"\u18b0\3\2\2\2\u18b3\u18b1\3\2\2\2\u18b3\u18b2\3\2\2\2\u18b4\u0269\3\2"+
		"\2\2\u18b5\u18b6\tx\2\2\u18b6\u026b\3\2\2\2\u18b7\u18b8\7\u03d6\2\2\u18b8"+
		"\u026d\3\2\2\2\u18b9\u18ba\ty\2\2\u18ba\u026f\3\2\2\2\u18bb\u18bc\tz\2"+
		"\2\u18bc\u0271\3\2\2\2\u18bd\u18be\t{\2\2\u18be\u0273\3\2\2\2\u18bf\u18c0"+
		"\t|\2\2\u18c0\u0275\3\2\2\2\u18c1\u18c2\t}\2\2\u18c2\u0277\3\2\2\2\u18c3"+
		"\u18c4\t~\2\2\u18c4\u0279\3\2\2\2\u18c5\u18c6\t\177\2\2\u18c6\u027b\3"+
		"\2\2\2\u039c\u027d\u0280\u0286\u0289\u028c\u028e\u0293\u0296\u0299\u02a2"+
		"\u02c9\u02d5\u02e0\u02f1\u02f6\u0302\u031d\u0326\u032b\u0331\u0336\u033a"+
		"\u0343\u0346\u0349\u034d\u0354\u0357\u035c\u0364\u0369\u036e\u0371\u0373"+
		"\u037f\u0382\u0386\u0389\u038d\u0390\u0394\u0397\u039a\u039e\u03a1\u03a5"+
		"\u03ab\u03b1\u03b7\u03be\u03c5\u03cb\u03d1\u03da\u03df\u03ef\u03f6\u03fa"+
		"\u0404\u0408\u040c\u0410\u0414\u0419\u041c\u041f\u0422\u0425\u042b\u042f"+
		"\u0435\u043a\u043d\u0440\u0442\u044d\u0451\u0454\u0462\u0465\u0469\u046c"+
		"\u0470\u0473\u0477\u047a\u047e\u0481\u0484\u0488\u048b\u048f\u0495\u04a2"+
		"\u04a9\u04ae\u04b1\u04b6\u04be\u04c4\u04c8\u04cb\u04d0\u04d3\u04d7\u04da"+
		"\u04de\u04e1\u04e9\u04eb\u04f2\u04f8\u0500\u0503\u050a\u050d\u050f\u0515"+
		"\u051b\u052c\u0533\u053a\u0545\u0548\u0555\u0562\u0567\u0577\u057f\u0589"+
		"\u058f\u0599\u059c\u05a1\u05ae\u05b5\u05ba\u05be\u05c0\u05c5\u05c8\u05ce"+
		"\u05d3\u05d5\u05d9\u05dc\u05df\u05e5\u05ea\u05ec\u05f1\u05f8\u05fa\u0601"+
		"\u0606\u060a\u060d\u0615\u061d\u061f\u0627\u062b\u062e\u0634\u0639\u063c"+
		"\u0642\u0645\u0649\u064e\u0653\u0657\u065c\u065f\u0663\u0667\u066b\u066f"+
		"\u0674\u0679\u067e\u0684\u0689\u068e\u0694\u0699\u069e\u06a3\u06a8\u06ad"+
		"\u06b2\u06b7\u06bc\u06c1\u06c6\u06cc\u06d1\u06d7\u06e1\u06e8\u06ea\u06f2"+
		"\u06f7\u06fa\u0702\u0708\u0718\u0724\u0726\u0729\u0731\u0737\u073d\u074a"+
		"\u0751\u0759\u075c\u0767\u076f\u0772\u077e\u0785\u078d\u0790\u079c\u07a3"+
		"\u07ab\u07ae\u07b5\u07bd\u07c0\u07c2\u07c7\u07cf\u07d8\u07dc\u07e0\u07e5"+
		"\u07eb\u07f1\u07f6\u07fb\u0800\u0805\u0808\u080d\u0812\u081c\u0820\u0827"+
		"\u082c\u082f\u0834\u0837\u083b\u083f\u0847\u085a\u085d\u0860\u0864\u086e"+
		"\u087b\u0882\u0885\u088e\u0891\u0894\u089f\u08a2\u08a6\u08ae\u08b1\u08b6"+
		"\u08be\u08c4\u08c8\u08cc\u08d1\u08d6\u08dd\u08e1\u08ec\u08f4\u08f7\u08fd"+
		"\u0903\u0905\u090a\u0910\u0916\u0918\u091c\u091f\u0922\u0928\u092e\u0931"+
		"\u0937\u093d\u093f\u0944\u094c\u094e\u0957\u095c\u0964\u0968\u0970\u097a"+
		"\u097f\u0986\u098a\u098e\u09a6\u09aa\u09b6\u09b9\u09c2\u09d3\u09df\u09e6"+
		"\u09ed\u09fc\u0a09\u0a0f\u0a15\u0a1b\u0a21\u0a27\u0a2d\u0a32\u0a39\u0a40"+
		"\u0a47\u0a4c\u0a4f\u0a51\u0a5f\u0a66\u0a6d\u0a73\u0a77\u0a7b\u0a82\u0a85"+
		"\u0a8a\u0a91\u0a98\u0a9c\u0aa5\u0aae\u0ab7\u0aba\u0abe\u0ac7\u0acb\u0ace"+
		"\u0ad1\u0ad7\u0ada\u0ae0\u0ae9\u0aec\u0af7\u0afa\u0aff\u0b02\u0b07\u0b11"+
		"\u0b16\u0b1c\u0b1e\u0b24\u0b26\u0b2c\u0b34\u0b39\u0b41\u0b44\u0b49\u0b4c"+
		"\u0b51\u0b59\u0b61\u0b67\u0b6f\u0b74\u0b7c\u0b7f\u0b83\u0b86\u0b8e\u0b94"+
		"\u0b9d\u0ba0\u0ba4\u0ba8\u0bae\u0bb2\u0bb6\u0bb8\u0bbb\u0bbe\u0bc1\u0bc7"+
		"\u0bcb\u0bce\u0bd1\u0bd4\u0bd7\u0bd9\u0bdd\u0be3\u0be9\u0bee\u0bf1\u0bf7"+
		"\u0bfb\u0c03\u0c07\u0c0a\u0c0d\u0c16\u0c1a\u0c1d\u0c21\u0c25\u0c28\u0c2b"+
		"\u0c30\u0c36\u0c3a\u0c44\u0c4a\u0c4e\u0c54\u0c58\u0c5e\u0c61\u0c6d\u0c71"+
		"\u0c75\u0c7d\u0c81\u0c89\u0c8c\u0c90\u0c93\u0c9b\u0ca0\u0ca3\u0ca6\u0caa"+
		"\u0cad\u0cb6\u0cbb\u0cc4\u0cc9\u0cd0\u0cd7\u0cdf\u0ce4\u0cec\u0cef\u0cf2"+
		"\u0cf9\u0cfc\u0d03\u0d06\u0d0e\u0d14\u0d1f\u0d22\u0d2d\u0d33\u0d37\u0d42"+
		"\u0d47\u0d49\u0d4d\u0d57\u0d61\u0d67\u0d6c\u0d6f\u0d72\u0d75\u0d7b\u0d80"+
		"\u0d83\u0d86\u0d89\u0d8b\u0d91\u0d96\u0d99\u0d9c\u0da0\u0da6\u0daa\u0db4"+
		"\u0db8\u0dbe\u0dc7\u0dca\u0dce\u0dd1\u0dd5\u0dd9\u0ddc\u0dde\u0de6\u0df2"+
		"\u0df8\u0dfa\u0e00\u0e02\u0e04\u0e0a\u0e12\u0e1a\u0e20\u0e29\u0e2e\u0e30"+
		"\u0e34\u0e38\u0e3e\u0e45\u0e49\u0e52\u0e55\u0e59\u0e5d\u0e61\u0e64\u0e67"+
		"\u0e6a\u0e6e\u0e72\u0e75\u0e78\u0e7b\u0e82\u0e86\u0e95\u0ea2\u0eaa\u0eb4"+
		"\u0eb8\u0ebb\u0ec1\u0ec4\u0ec7\u0ed0\u0ed9\u0ee3\u0ee7\u0ef1\u0efb\u0f03"+
		"\u0f06\u0f0f\u0f12\u0f16\u0f1b\u0f1f\u0f28\u0f2b\u0f4a\u0f4d\u0f50\u0f88"+
		"\u0f8d\u0fa9\u0fb7\u0fbe\u0fc2\u0fc8\u0fd0\u0fd2\u0fdd\u0fe7\u0fee\u0ff4"+
		"\u0ffc\u1001\u1009\u1011\u1019\u1021\u1027\u102a\u102e\u1033\u1038\u103e"+
		"\u1040\u104b\u1050\u1057\u1059\u1067\u106d\u1072\u1077\u107d\u1084\u108c"+
		"\u1094\u1099\u109f\u10a2\u10aa\u10b1\u10ba\u10bd\u10ce\u10d6\u10de\u10e2"+
		"\u10e9\u10ef\u10f7\u1100\u1106\u110d\u1114\u1119\u111c\u111e\u1124\u1126"+
		"\u112a\u112c\u112f\u1138\u113e\u1145\u114c\u1151\u1154\u1156\u115c\u115e"+
		"\u1162\u1164\u1167\u116c\u1173\u117c\u1181\u118a\u1191\u1196\u1199\u119b"+
		"\u11a1\u11a3\u11a6\u11b2\u11b8\u11c1\u11ca\u11cf\u11d8\u11de\u11e9\u11ec"+
		"\u11f8\u11ff\u1204\u1213\u121e\u1221\u122b\u1235\u123f\u1249\u124d\u1251"+
		"\u125a\u1276\u1288\u1290\u129b\u12a2\u12a6\u12ad\u12b2\u12b5\u12b8\u12c1"+
		"\u12c5\u12e3\u12ea\u12ee\u12f5\u12f8\u1302\u130c\u1310\u1316\u1319\u131e"+
		"\u1322\u1329\u132c\u1332\u134a\u1357\u135a\u1364\u136c\u1370\u1377\u137a"+
		"\u1383\u1389\u138f\u1399\u139b\u13a1\u13a4\u13a7\u13b3\u13b6\u13bc\u13bf"+
		"\u13c7\u13cf\u13d5\u13d9\u13e7\u13f3\u13fa\u13fd\u1404\u140b\u1410\u1415"+
		"\u1420\u142b\u1431\u1436\u1443\u1445\u144a\u144f\u1451\u1458\u145f\u1462"+
		"\u1465\u146b\u146f\u1475\u147b\u1488\u148d\u1495\u1498\u149d\u14a2\u14aa"+
		"\u14ad\u14b3\u14b7\u14c4\u14ca\u14d6\u14d9\u14e2\u14e7\u14ed\u14f4\u14f6"+
		"\u14fa\u1500\u1503\u150d\u1511\u1525\u152c\u152e\u1535\u1537\u153b\u1540"+
		"\u154b\u1550\u1556\u1559\u155d\u1562\u1565\u1569\u156d\u156f\u1574\u1579"+
		"\u1586\u1589\u158d\u1590\u1595\u1598\u159c\u15a1\u15a4\u15a9\u15ac\u15b2"+
		"\u15b5\u15b9\u15bc\u15bf\u15c3\u15c6\u15c9\u15cd\u15d0\u15d3\u15d6\u15da"+
		"\u15dd\u15e0\u15e5\u15ea\u15ef\u15f2\u15f5\u15fd\u1604\u1608\u160d\u1610"+
		"\u1615\u1619\u161b\u162b\u1634\u163c\u1645\u164f\u1657\u165f\u1667\u166f"+
		"\u1674\u167b\u167d\u1682\u1685\u168a\u168d\u1691\u169f\u16a6\u16ac\u16ce"+
		"\u16d2\u16da\u16de\u16e7\u16ef\u16f4\u16fc\u1701\u1706\u1708\u1711\u1716"+
		"\u171e\u1723\u172b\u1733\u1736\u1740\u174b\u1758\u1760\u1764\u1769\u1772"+
		"\u1775\u1781\u1789\u1793\u1796\u179a\u179e\u17ac\u17af\u17b8\u17bb\u17d6"+
		"\u17e1\u17e8\u17ec\u17f3\u17fb\u1800\u1808\u180e\u1818\u1825\u182b\u1831"+
		"\u1841\u1847\u1849\u184b\u185e\u186a\u187b\u188c\u188e\u18a1\u18aa\u18b3";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}