<?xml version="1.0" encoding="utf-8" ?>
<Rules>
    <Rule id="GBase.001">
        <Summary>先聚合再关联</Summary>
        <Content>避免在关联查询中使用聚合函数，应先进行聚合操作减少中间计算结果后再进行关联操作</Content>
        <Example>
SELECT
    B.BIZ_TYP_NM,
    COUNT(1),
    SUM(STL_AMT)
FROM F_EVT_FINA_INTG AS A
INNER JOIN M_CM_DIM_BIZ_TYP AS B
ON (A.MSG_NO = B.MSG_NO AND A.BIZ_TYP = B.BIZ_TYP)
WHERE A.STL_DT BETWEEN 'YYYYMMDD' AND 'YYYYMMDD'
GROUP BY B.BIZ_TYP_NM;

SELECT
    B.BIZ_TYP_NM,
    COUNT(1),
    SUM(STL_AMT)
FROM F_EVT_FINA_INTG AS A, M_CM_DIM_BIZ_TYP AS B
WHERE A.STL_DT BETWEEN 'YYYYMMDD' AND 'YYYYMMDD'
AND A.MSG_NO = B.MSG_NO AND A.BIZ_TYP = B.BIZ_TYP
GROUP BY B.BIZ_TYP_NM;

-- 建议修改为
SELECT
    B.BIZ_TYP_NM,
    SUM(CNT),
    SUM(AMT)
FROM (
    SELECT
        MSG_NO,
        BIZ_TYP,
        COUNT(1) AS CNT,
        SUM(STL_AMT) AS AMT
    FROM F_EVT_FINA_INTG
    WHERE STL_DT BETWEEN 'YYYYMMDD' AND 'YYYYMMDD'
) AS A
INNER JOIN M_CM_DIM_BIZ_TYP AS B
ON (A.MSG_NO = B.MSG_NO AND A.BIZ_TYP = B.BIZ_TYP)
GROUP BY B.BIZ_TYP_NM;
        </Example>
    </Rule>
    <Rule id="GBase.002">
        <Summary>避免在筛选条件中对列使用函数或其他运算符</Summary>
        <Content>虽然在SQL中使用函数可以简化很多复杂的查询，但使用了函数的查询无法利用表中已经建立的索引，该查询将会是全表扫描，性能较差。通常建议将列名写在比较运算符左侧，将查询过滤条件放在比较运算符右侧。也不建议在查询比较条件两侧书写多余的括号，这会对阅读产生比较大的困扰。</Content>
        <Example>
SELECT TO_CHAR(DT, 'YYYYMMDD'), SUM(DT) FROM A WHERE TO_CHAR(TO_DATE(DT, 'YYYYMMDD'), 'YYYY-MM-DD') = '2020-01-01';

SELECT * FROM A, B WHERE (DT + 1) = '2020-01-01' AND A.X + 1 = B.X AND TO_CHAR(DT + 1, 'YYYYMMDD') = 2;

SELECT * FROM A
INNER JOIN B ON (A.ID = B.ID AND TO_CHAR(TO_DATE(DT, 'YYYYMMDD'), 'YYYY-MM-DD') = '2020-01-01')
WHERE 1 = (
    SELECT X FROM A, B WHERE (DT + 1) = '2020-01-01' AND A.X + 1 = B.X AND TO_CHAR(DT + 1, 'YYYYMMDD') = 2
);

SELECT
    CASE
    WHEN TO_CHAR(TO_DATE(DT, 'YYYYMMDD'), 'YYYY-MM-DD') > 1 THEN 1
    ELSE 0
    END
FROM A
WHERE DT = TO_CHAR('2020-01-01', 'YYYYMMDD');
        </Example>
    </Rule>
    <Rule id="GBase.003">
        <Summary>关联查询缺少筛选条件或join子句存在非关联条件</Summary>
        <Content>中间数据集将会比预期更多，最坏条件下，全表扫描</Content>
        <Example>
SELECT* FROM F_EVT_FINA_INTG AS A
LEFT JOIN M_CM_DIM_BIZ_TYP AS B ON (
    A.MSG_NO = B.MSG_NO AND A.BIZ_TYP = B.BIZ_TYP AND A.STL_DT BETWEEN 'YYYYMMDD' AND 'YYYYMMDD'
);

SELECT * FROM F_EVT_FINA_INTG AS A
LEFT JOIN M_CM_DIM_BIZ_TYP AS B ON (
    A.MSG_NO = B.MSG_NO AND A.BIZ_TYP = B.BIZ_TYP
    AND A.STL_DT BETWEEN 'YYYYMMDD' AND 'YYYYMMDD'
    AND A.STL_DT = TO_CHAR(TO_DATE('YYYYMMDD'), 'YYYYMMDD')
    AND A.X = 2 AND A.Y > 4.0
);

SELECT * FROM F_EVT_FINA_INTG AS A
LEFT JOIN M_CM_DIM_BIZ_TYP AS B ON (
    A.MSG_NO = B.MSG_NO AND A.BIZ_TYP = B.BIZ_TYP
)
WHERE A.STL_DT BETWEEN 'YYYYMMDD' AND 'YYYYMMDD';
        </Example>
    </Rule>
    <Rule id="GBase.004">
        <Summary>避免使用not in</Summary>
        <Content>采用not exits 替代</Content>
        <Example>
SELECT *
FROM F_EVT_FINA_INTG
WHERE MSG_ID NOT IN (SELECT MSG_ID FROM F_EVT_FINA_INTG_BAD);

SELECT *
FROM F_EVT_FINA_INTG
WHERE MSG_ID NOT IN (SELECT MSG_ID FROM F_EVT_FINA_INTG_BAD)

UNION

SELECT *
FROM F_EVT_FINA_INTG
WHERE MSG_ID NOT IN (SELECT MSG_ID FROM F_EVT_FINA_INTG_BAD)
;

SELECT *
FROM F_EVT_FINA_INTG AS A
WHERE NOT EXISTS (SELECT MSG_ID FROM F_EVT_FINA_INTG_BAD WHERE MSG_ID = A.MSG_ID);
        </Example>
    </Rule>
    <Rule id="GBase.005">
        <Summary>在INSERT INTO SELECT结构中明确指定列名</Summary>
        <Content>当表结构发生变更，如果INSERT请求不明确指定列名，请求的结果可能与预想的不同或执行失败，且代码维护困难</Content>
        <Example>
INSERT INTO A SELECT * FROM B;
INSERT INTO A SELECT X,Y FROM B;
INSERT INTO A SELECT * FROM B UNION ALL SELECT * FROM C;
INSERT INTO A SELECT X,Y FROM B UNION ALL SELECT X,Y FROM C;
INSERT INTO A(X,Y) SELECT X,Y FROM B;
        </Example>
    </Rule>
</Rules>
